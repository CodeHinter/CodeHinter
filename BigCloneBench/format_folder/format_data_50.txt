<s>class temp {    @Test
    public void testImageshackUpload() throws Exception {
        request.setUrl("http://www.imageshack.us/index.php");
        request.addParameter("xml", "yes");
        request.setFile("fileupload", file);
        HttpResponse response = httpClient.execute(request);
        assertTrue(response.is2xxSuccess());
        assertTrue(response.getResponseHeaders().size() > 0);
        String body = IOUtils.toString(response.getResponseBody());
        assertTrue(body.contains("<image_link>"));
        assertTrue(body.contains("<thumb_link>"));
        assertTrue(body.contains("<image_location>"));
        assertTrue(body.contains("<image_name>"));
        response.close();
    }
} </s>
<s>class temp {    public static void writeToPetrify(TransitionSystem ts, Writer bw) throws IOException {
        File temp = new File("_temp");
        BufferedWriter tw = new BufferedWriter(new FileWriter(temp));
        BufferedReader tr = new BufferedReader(new FileReader(temp));
        HashSet<ModelGraphVertex> sources = new HashSet<ModelGraphVertex>();
        HashSet<ModelGraphVertex> dests = new HashSet<ModelGraphVertex>();
        ArrayList transitions = ts.getEdges();
        HashSet<String> events = new HashSet<String>();
        for (int i = 0; i < transitions.size(); i++) {
            TransitionSystemEdge transition = (TransitionSystemEdge) transitions.get(i);
            events.add(replaceBadSymbols(transition.getIdentifier()));
            sources.add(transition.getSource());
            dests.add(transition.getDest());
            if (ts.getStateNameFlag() == TransitionSystem.ID) {
                tw.write("s" + transition.getSource().getId() + " ");
                tw.write(replaceBadSymbols(transition.getIdentifier()) + " ");
                tw.write("s" + transition.getDest().getId() + "\n");
            } else {
                tw.write(replaceBadSymbols(transition.getSource().getIdentifier()) + " ");
                tw.write(replaceBadSymbols(transition.getIdentifier()) + " ");
                tw.write(replaceBadSymbols(transition.getDest().getIdentifier()) + "\n");
            }
        }
        tw.close();
        bw.write(".model " + ts.getName().replaceAll(" ", "_") + "\n");
        bw.write(".dummy ");
        Iterator it = events.iterator();
        while (it.hasNext()) bw.write(it.next() + " ");
        bw.write("\n");
        bw.write(".state graph" + "\n");
        int c;
        while ((c = tr.read()) != -1) bw.write(c);
        tr.close();
        temp.delete();
        for (ModelGraphVertex dest : dests) {
            if (sources.contains(dest)) {
                sources.remove(dest);
            }
        }
        ModelGraphVertex source = sources.isEmpty() ? null : sources.iterator().next();
        if (ts.getStateNameFlag() == TransitionSystem.ID) {
            if (!ts.hasExplicitEnd()) bw.write(".marking {s0}" + "\n"); else bw.write(".marking {s" + source.getId() + "}\n");
        } else if (source != null) {
            bw.write(".marking {" + replaceBadSymbols(source.getIdentifier()) + "}\n");
        }
        bw.write(".end");
    }
} </s>
<s>class temp {    public HttpURLHandler(URL url, String requestMethod, Map<String, String> parameters, String outputEncoding) throws IOException {
        logger.debug("Creating http url handler for: " + url + "; using method: " + requestMethod + "; with parameters: " + parameters);
        if (url == null) throw new IllegalArgumentException("Null pointer in url");
        if (!"http".equals(url.getProtocol()) && !"https".equals(url.getProtocol())) throw new IllegalArgumentException("Illegal url protocol: \"" + url.getProtocol() + "\"; must be \"http\" or \"https\"");
        if (requestMethod == null) throw new IllegalArgumentException("Null pointer in requestMethod");
        if (!"GET".equals(requestMethod) && !"POST".equals(requestMethod)) throw new IllegalArgumentException("Illegal request method: " + requestMethod + "; must be \"GET\" or \"POST\"");
        if (parameters == null) throw new IllegalArgumentException("Null pointer in parameters");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);
        connection.setRequestMethod(requestMethod);
        connection.setUseCaches(false);
        if (EMPTY_MAP.equals(parameters)) {
            connection.setDoOutput(false);
        } else {
            connection.setDoOutput(true);
            OutputStream out = connection.getOutputStream();
            writeParameters(out, parameters, outputEncoding);
            out.close();
        }
        inputStream = connection.getInputStream();
    }
} </s>
<s>class temp {    public static List<String> getServers() throws Exception {
        List<String> servers = new ArrayList<String>();
        URL url = new URL("http://tfast.org/en/servers.php");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = null;
        while ((line = in.readLine()) != null) {
            if (line.contains("serv=")) {
                int i = line.indexOf("serv=");
                servers.add(line.substring(i + 5, line.indexOf("\"", i)));
            }
        }
        in.close();
        return servers;
    }
} </s>
<s>class temp {    private void process(String zipFileName, String directory, String db) throws SQLException {
        InputStream in = null;
        try {
            if (!FileUtils.exists(zipFileName)) {
                throw new IOException("File not found: " + zipFileName);
            }
            String originalDbName = null;
            int originalDbLen = 0;
            if (db != null) {
                originalDbName = getOriginalDbName(zipFileName, db);
                if (originalDbName == null) {
                    throw new IOException("No database named " + db + " found");
                }
                if (originalDbName.startsWith(File.separator)) {
                    originalDbName = originalDbName.substring(1);
                }
                originalDbLen = originalDbName.length();
            }
            in = FileUtils.openFileInputStream(zipFileName);
            ZipInputStream zipIn = new ZipInputStream(in);
            while (true) {
                ZipEntry entry = zipIn.getNextEntry();
                if (entry == null) {
                    break;
                }
                String fileName = entry.getName();
                fileName = fileName.replace('\\', File.separatorChar);
                fileName = fileName.replace('/', File.separatorChar);
                if (fileName.startsWith(File.separator)) {
                    fileName = fileName.substring(1);
                }
                boolean copy = false;
                if (db == null) {
                    copy = true;
                } else if (fileName.startsWith(originalDbName + ".")) {
                    fileName = db + fileName.substring(originalDbLen);
                    copy = true;
                }
                if (copy) {
                    OutputStream out = null;
                    try {
                        out = FileUtils.openFileOutputStream(directory + File.separator + fileName, false);
                        IOUtils.copy(zipIn, out);
                        out.close();
                    } finally {
                        IOUtils.closeSilently(out);
                    }
                }
                zipIn.closeEntry();
            }
            zipIn.closeEntry();
            zipIn.close();
        } catch (IOException e) {
            throw Message.convertIOException(e, zipFileName);
        } finally {
            IOUtils.closeSilently(in);
        }
    }
} </s>
<s>class temp {    public void echo(HttpRequest request, HttpResponse response) throws IOException {
        InputStream in = request.getInputStream();
        if ("gzip".equals(request.getField("Content-Encoding"))) {
            in = new GZIPInputStream(in);
        }
        IOUtils.copy(in, response.getOutputStream());
    }
} </s>
<s>class temp {    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    public synchronized String encrypt(final String pPassword) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(pPassword.getBytes("UTF-8"));
        final byte raw[] = md.digest();
        return BASE64Encoder.encodeBuffer(raw);
    }
} </s>
<s>class temp {    protected void initializeGraphicalViewer() {
        getGraphicalViewer().setContents(loadModel());
        getGraphicalViewer().addDropTargetListener(createTransferDropTargetListener());
        getGraphicalViewer().addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                if (event.getSelection().isEmpty()) {
                    return;
                }
                loadProperties(((StructuredSelection) event.getSelection()).getFirstElement());
            }
        });
    }
} </s>
<s>class temp {    public void run() {
        String s, s2;
        s = "";
        s2 = "";
        try {
            URL url = new URL("http://www.m-w.com/dictionary/" + Word);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while (((str = in.readLine()) != null) && (!stopped)) {
                s = s + str;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        Pattern pattern = Pattern.compile("popWin\\('/cgi-bin/(.+?)'", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher matcher = pattern.matcher(s);
        if ((!stopped) && (matcher.find())) {
            String newurl = "http://m-w.com/cgi-bin/" + matcher.group(1);
            try {
                URL url2 = new URL(newurl);
                BufferedReader in2 = new BufferedReader(new InputStreamReader(url2.openStream()));
                String str;
                while (((str = in2.readLine()) != null) && (!stopped)) {
                    s2 = s2 + str;
                }
                in2.close();
            } catch (MalformedURLException e) {
            } catch (IOException e) {
            }
            Pattern pattern2 = Pattern.compile("<A HREF=\"http://(.+?)\">Click here to listen with your default audio player", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
            Matcher matcher2 = pattern2.matcher(s2);
            if ((!stopped) && (matcher2.find())) {
                if (getWave("http://" + matcher2.group(1))) label.setEnabled(true);
            }
        }
        button.setEnabled(true);
    }
} </s>
<s>class temp {    @Override
    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        resp.setContentType("application/json");
        resp.setCharacterEncoding("utf-8");
        String format = req.getParameter("format");
        EntityManager em = EMF.get().createEntityManager();
        String uname = (req.getParameter("uname") == null) ? "" : req.getParameter("uname");
        String passwd = (req.getParameter("passwd") == null) ? "" : req.getParameter("passwd");
        String name = (req.getParameter("name") == null) ? "" : req.getParameter("name");
        String email = (req.getParameter("email") == null) ? "" : req.getParameter("email");
        if (uname == null || uname.equals("") || uname.length() < 4) {
            if (format != null && format.equals("xml")) resp.getWriter().print(Error.unameTooShort(uname).toXML(em)); else resp.getWriter().print(Error.unameTooShort(uname).toJSON(em));
            resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        if (User.fromUserName(em, uname) != null) {
            if (format != null && format.equals("xml")) resp.getWriter().print(Error.userExists(uname).toXML(em)); else resp.getWriter().print(Error.userExists(uname).toJSON(em));
            resp.setStatus(HttpServletResponse.SC_CONFLICT);
            em.close();
            return;
        }
        if (passwd.equals("") || passwd.length() < 6) {
            resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            if (format != null && format.equals("xml")) resp.getWriter().print(Error.passwdTooShort(uname).toXML(em)); else resp.getWriter().print(Error.passwdTooShort(uname).toJSON(em));
            em.close();
            return;
        }
        User u = new User();
        u.setUsername(uname);
        u.setPasswd(passwd);
        u.setName(name);
        u.setEmail(email);
        u.setPaid(false);
        StringBuffer apikey = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance("MD5");
            algorithm.reset();
            String api = System.nanoTime() + "" + System.identityHashCode(this) + "" + uname;
            algorithm.update(api.getBytes());
            byte[] digest = algorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                apikey.append(Integer.toHexString(0xFF & digest[i]));
            }
        } catch (NoSuchAlgorithmException e) {
            resp.setStatus(500);
            if (format != null && format.equals("xml")) resp.getWriter().print(Error.unknownError().toXML(em)); else resp.getWriter().print(Error.unknownError().toJSON(em));
            log.severe(e.toString());
            em.close();
            return;
        }
        u.setApiKey(apikey.toString());
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        try {
            em.persist(u);
            tx.commit();
        } catch (Throwable t) {
            log.severe("Error adding user " + uname + " Reason:" + t.getMessage());
            tx.rollback();
            resp.setStatus(500);
            if (format != null && format.equals("xml")) resp.getWriter().print(Error.unknownError().toXML(em)); else resp.getWriter().print(Error.unknownError().toJSON(em));
            return;
        }
        log.info("User " + u.getName() + " was created successfully");
        resp.setStatus(HttpServletResponse.SC_CREATED);
        if (format != null && format.equals("xml")) resp.getWriter().print(u.toXML(em)); else resp.getWriter().print(u.toJSON(em));
        em.close();
    }
} </s>
<s>class temp {    public void filter(File source, File destination, MNamespace mNamespace) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(source));
        BufferedWriter writer = new BufferedWriter(new FileWriter(destination));
        int line = 0;
        int column = 0;
        Stack parseStateStack = new Stack();
        parseStateStack.push(new ParseState(mNamespace));
        for (Iterator i = codePieces.iterator(); i.hasNext(); ) {
            NamedCodePiece cp = (NamedCodePiece) i.next();
            while (line < cp.getStartLine()) {
                line++;
                column = 0;
                writer.write(reader.readLine());
                writer.newLine();
            }
            while (column < cp.getStartPosition()) {
                writer.write(reader.read());
                column++;
            }
            cp.write(writer, parseStateStack, column);
            while (line < cp.getEndLine()) {
                line++;
                column = 0;
                reader.readLine();
            }
            while (column < cp.getEndPosition()) {
                column++;
                reader.read();
            }
        }
        String data;
        while ((data = reader.readLine()) != null) {
            writer.write(data);
            writer.newLine();
        }
        reader.close();
        writer.close();
    }
} </s>
<s>class temp {    public Font(String path, String fontName) {
        this();
        StringTokenizer tok = new StringTokenizer(path, ";");
        NybbleInputStream str = null;
        while (str == null & tok.hasMoreTokens()) {
            try {
                URL url = new URL(tok.nextToken() + "/");
                url = new URL(url, fontName);
                System.out.println(url.toString());
                str = new NybbleInputStream(url.openStream());
                parsePkStream(str);
                str.close();
                name = fontName;
            } catch (java.io.IOException e) {
            }
        }
    }
} </s>
<s>class temp {    public static synchronized Font loadFont(String path, String fontName) {
        Font f = null;
        StringTokenizer tok = new StringTokenizer(path, ";");
        NybbleInputStream str = null;
        if (tok.hasMoreTokens()) tok.nextToken();
        while (str == null && tok.hasMoreTokens()) {
            try {
                String bla = tok.nextToken();
                URL url = new URL(bla);
                url = new URL("file", "localhost", url.getFile() + fontName);
                str = new NybbleInputStream(url.openStream());
            } catch (java.io.IOException e) {
                Frame1.writelog(e.toString());
            }
        }
        if (str == null) {
            f = new Font();
            InputStream istr = f.getClass().getResourceAsStream(fontName + ".123");
            if (istr != null) str = new NybbleInputStream(istr);
        }
        if (str != null) {
            if (f == null) f = new Font();
            try {
                f.parsePkStream(str);
                str.close();
            } catch (java.io.IOException e) {
            }
            return f;
        }
        return null;
    }
} </s>
<s>class temp {    public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException {
        logger.finer("Need to move audio file to accomodate tag");
        FileChannel fcIn;
        FileChannel fcOut;
        ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize]);
        File paddedFile = File.createTempFile("temp", ".mp3", file.getParentFile());
        fcOut = new FileOutputStream(paddedFile).getChannel();
        fcIn = new FileInputStream(file).getChannel();
        long written = (long) fcOut.write(paddingBuffer);
        logger.finer("Copying:" + (file.length() - audioStart) + "bytes");
        long audiolength = file.length() - audioStart;
        if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) {
            long written2 = fcIn.transferTo(audioStart, audiolength, fcOut);
            logger.finer("Written padding:" + written + " Data:" + written2);
            if (written2 != audiolength) {
                throw new RuntimeException("Problem adjusting padding, expecting to write:" + audiolength + ":only wrote:" + written2);
            }
        } else {
            long noOfChunks = audiolength / MAXIMUM_WRITABLE_CHUNK_SIZE;
            long lastChunkSize = audiolength % MAXIMUM_WRITABLE_CHUNK_SIZE;
            long written2 = 0;
            for (int i = 0; i < noOfChunks; i++) {
                written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut);
                Runtime.getRuntime().gc();
            }
            written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut);
            logger.finer("Written padding:" + written + " Data:" + written2);
            if (written2 != audiolength) {
                throw new RuntimeException("Problem adjusting padding in large file, expecting to write:" + audiolength + ":only wrote:" + written2);
            }
        }
        long lastModified = file.lastModified();
        fcIn.close();
        fcOut.close();
        file.delete();
        paddedFile.renameTo(file);
        paddedFile.setLastModified(lastModified);
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
} </s>
<s>class temp {    public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException {
        InfoUnitXMLData iur = new InfoUnitXMLData(STRUCTURE_RDF);
        rdf = iur.load("rdf");
        rdfResource = rdf.ft("resource");
        rdfParseType = rdf.ft("parse type");
        try {
            PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), "UTF-8"));
            URL urlModel = new URL(model);
            BufferedReader inr = new BufferedReader(new InputStreamReader(urlModel.openStream()));
            String finalTag = "</" + rdf.ft("main") + ">";
            String line = inr.readLine();
            while (line != null && !line.equalsIgnoreCase(finalTag)) {
                outw.println(line);
                line = inr.readLine();
            }
            inr.close();
            InfoNode nodeType = infoRoot.path(rdf.ft("constraint"));
            String type = null;
            if (nodeType != null) {
                type = nodeType.getValue().toString();
                try {
                    infoRoot.removeChildNode(nodeType);
                } catch (InvalidChildInfoNode error) {
                }
            } else if (mainResourceClass != null) type = mainResourceClass; else type = rdf.ft("description");
            outw.println("   <" + type + " " + rdf.ft("about") + "=\"" + ((infoNamespaces == null) ? infoRoot.getLabel() : infoNamespaces.convertEntity(infoRoot.getLabel().toString())) + "\">");
            Set<InfoNode> nl = infoRoot.getChildren();
            writeNodeList(nl, outw, 5);
            outw.println("   </" + type + ">");
            if (line != null) outw.println(finalTag);
            outw.close();
        } catch (IOException error) {
            throw new InfoUnitIOException(error.getMessage());
        }
    }
} </s>
<s>class temp {        public void run() {
            try {
                if (useStream || inputStream != null) {
                    InputStream inputStream = null;
                    if (LoadDocumentOperation.this.inputStream != null) inputStream = LoadDocumentOperation.this.inputStream; else inputStream = url.openStream();
                    if (frame != null) document = officeApplication.getDocumentService().loadDocument(frame, inputStream, documentDescriptor); else document = officeApplication.getDocumentService().loadDocument(inputStream, documentDescriptor);
                    try {
                        inputStream.close();
                    } catch (Throwable throwable) {
                    }
                } else {
                    if (frame != null) document = officeApplication.getDocumentService().loadDocument(frame, url.toString(), documentDescriptor); else document = officeApplication.getDocumentService().loadDocument(url.toString(), documentDescriptor);
                }
                done = true;
            } catch (Exception exception) {
                this.exception = exception;
            } catch (ThreadDeath threadDeath) {
            }
        }
} </s>
<s>class temp {    private static String md5(String text) {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(text.getBytes("UTF-8"));
            byte[] messageDigest = digest.digest();
            StringBuilder hexString = new StringBuilder();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    protected String downloadURLtoString(URL url) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer sb = new StringBuffer(100 * 1024);
        String str;
        while ((str = in.readLine()) != null) {
            sb.append(str);
        }
        in.close();
        return sb.toString();
    }
} </s>
<s>class temp {    @ActionMethod
    public void list() throws IOException {
        final URL url = new URL("http://127.0.0.1:" + testPort + "/list?version=1000");
        final HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestProperty(Http11Header.AUTHORIZATION, "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==");
        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, "Basic realm=\"karatasi\"");
        final InputStream in = con.getInputStream();
        final byte[] buf = new byte[4096];
        textArea.setText("");
        for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) {
            textArea.append(new String(buf, 0, bytesRead));
        }
    }
} </s>
<s>class temp {    @ActionMethod
    public void mirror() throws IOException {
        final URL url = new URL("http://127.0.0.1:" + testPort + "/mirror");
        final HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestProperty(Http11Header.AUTHORIZATION, "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==");
        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, "Basic realm=\"karatasi\"");
        final InputStream in = con.getInputStream();
        final byte[] buf = new byte[4096];
        textArea.setText("");
        for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) {
            textArea.append(new String(buf, 0, bytesRead));
        }
    }
} </s>
<s>class temp {    @ActionMethod
    public void download() throws IOException {
        final JPanel message = new JPanel(new GridBagLayout());
        final GridBagConstraints gbcLabel = new GridBagConstraints();
        final GridBagConstraints gbcField = new GridBagConstraints();
        gbcLabel.weightx = 0.0;
        gbcField.weightx = 1.0;
        gbcField.fill = GridBagConstraints.HORIZONTAL;
        gbcField.insets = new Insets(2, 2, 2, 2);
        final JTextField deviceField, fullnameField, versionField;
        deviceField = new JTextField();
        fullnameField = new JTextField();
        versionField = new JTextField();
        gbcField.gridwidth = GridBagConstraints.REMAINDER;
        message.add(new JLabel("device"), gbcLabel);
        message.add(deviceField, gbcField);
        message.add(new JLabel("fullname"), gbcLabel);
        message.add(fullnameField, gbcField);
        message.add(new JLabel("version"), gbcLabel);
        message.add(versionField, gbcField);
        final int result = JOptionPane.showConfirmDialog(frame, message, "Download parameters", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result != JOptionPane.OK_OPTION) {
            return;
        }
        final String device = deviceField.getText();
        final String fullname = fullnameField.getText();
        final String version = versionField.getText();
        final URL url = new URL("http://127.0.0.1:" + testPort + "/databases/" + fullname + "?device=" + device + "&version=" + version);
        final HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestProperty(Http11Header.AUTHORIZATION, "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==");
        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, "Basic realm=\"karatasi\"");
        final InputStream in = con.getInputStream();
        try {
            final int fileResult = fileChooser.showSaveDialog(frame);
            if (fileResult != JFileChooser.APPROVE_OPTION) {
                return;
            }
            final OutputStream out = new FileOutputStream(fileChooser.getSelectedFile());
            try {
                Util.copy(in, out);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    @ActionMethod
    public void upload() throws IOException {
        final int fileResult = fileChooser.showOpenDialog(frame);
        if (fileResult != JFileChooser.APPROVE_OPTION) {
            return;
        }
        final InputStream in = new FileInputStream(fileChooser.getSelectedFile());
        try {
            final URL url = new URL("http://127.0.0.1:" + testPort + "/databases/" + fileChooser.getSelectedFile().getName());
            final HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("PUT");
            con.setDoOutput(true);
            con.setRequestProperty(Http11Header.AUTHORIZATION, "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==");
            con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, "Basic realm=\"karatasi\"");
            con.setRequestProperty(Http11Header.CONTENT_LENGTH, Long.toString(fileChooser.getSelectedFile().length()));
            con.setRequestProperty(Http11Header.CONTENT_TYPE, "application/octet-stream");
            final OutputStream out = con.getOutputStream();
            try {
                Util.copy(in, out);
                con.connect();
                final InputStream in2 = con.getInputStream();
                try {
                    textArea.setText("");
                    final byte[] buf = new byte[4096];
                    for (int bytesRead; (bytesRead = in2.read(buf)) != -1; ) {
                        textArea.append(new String(buf, 0, bytesRead));
                    }
                } finally {
                    in2.close();
                }
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    private void copy(String imgPath, String path) {
        try {
            File input = new File(imgPath);
            File output = new File(path, input.getName());
            if (output.exists()) {
                if (!MessageDialog.openQuestion(getShell(), "Overwrite", "There is already an image file " + input.getName() + " under the package.\n Do you really want to overwrite it?")) return;
            }
            byte[] data = new byte[1024];
            FileInputStream fis = new FileInputStream(imgPath);
            BufferedInputStream bis = new BufferedInputStream(fis);
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(output));
            int length;
            while ((length = bis.read(data)) > 0) {
                bos.write(data, 0, length);
                bos.flush();
            }
            bos.close();
            fis.close();
            IJavaProject ijp = VisualSwingPlugin.getCurrentProject();
            if (ijp != null) {
                ijp.getProject().refreshLocal(IResource.DEPTH_INFINITE, null);
                view.refresh();
                view.expandAll();
            }
        } catch (Exception e) {
            VisualSwingPlugin.getLogger().error(e);
        }
    }
} </s>
<s>class temp {    public void checkAndDownload(String statsUrl, RDFStatsUpdatableModelExt stats, Date lastDownload, boolean onlyIfNewer) throws DataSourceMonitorException {
        if (log.isInfoEnabled()) log.info("Checking if update required for statistics of " + ds + "...");
        HttpURLConnection urlConnection;
        try {
            URL url = new URL(statsUrl);
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(CONNECT_TIMEOUT);
            urlConnection.setReadTimeout(READ_TIMEOUT);
            int statusCode = urlConnection.getResponseCode();
            if (statusCode / 100 != 2) {
                String msg = urlConnection.getResponseMessage();
                throw new DataSourceMonitorException(statsUrl + " returned HTTP " + statusCode + (msg != null ? msg : "") + ".");
            }
        } catch (Exception e) {
            throw new DataSourceMonitorException("Failed to connect to " + statsUrl + ".", e);
        }
        long lastModified = urlConnection.getLastModified();
        boolean newer = lastDownload == null || lastModified == 0 || lastModified - TIMING_GAP > lastDownload.getTime();
        if (newer || !onlyIfNewer) {
            Model newStats = retrieveModelData(urlConnection, ds);
            Date retrievedTimestamp = Calendar.getInstance().getTime();
            Date modifiedTimestamp = (urlConnection.getLastModified() > 0) ? new Date(urlConnection.getLastModified()) : null;
            if (log.isInfoEnabled()) log.info("Attempt to import up-to-date " + ((modifiedTimestamp != null) ? "(from " + modifiedTimestamp + ") " : "") + "statistics for " + ds + ".");
            try {
                if (stats.updateFrom(RDFStatsModelFactory.create(newStats), onlyIfNewer)) stats.setLastDownload(ds.getSPARQLEndpointURL(), retrievedTimestamp);
            } catch (Exception e) {
                throw new DataSourceMonitorException("Failed to import statistics and set last download for " + ds + ".", e);
            }
        } else {
            if (log.isInfoEnabled()) log.info("Statistics for " + ds + " are up-to-date" + ((lastDownload != null) ? " (" + lastDownload + ")" : ""));
        }
    }
} </s>
<s>class temp {    public static byte[] getBytes(String s) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance("SHA-1");
        d.reset();
        d.update(s.getBytes());
        return d.digest();
    }
} </s>
<s>class temp {    public void importCSV(InputStream csvfile) throws Exception {
        try {
            String[] qmarks = new String[columns.length];
            for (int i = 0; i < qmarks.length; i++) {
                qmarks[i] = "?";
            }
            if (cleartable) {
                String delsql = "delete from " + table;
                Statement delstm = conn.createStatement();
                delstm.executeUpdate(delsql);
            }
            String sql = "insert into " + table + " (" + StringUtils.join(columns, ", ") + ") values (" + StringUtils.join(qmarks, ", ") + ")";
            log.debug("SQL: " + sql);
            PreparedStatement stm = conn.prepareStatement(sql);
            int datatypes[] = new int[columns.length];
            for (int i = 0; i < columns.length; i++) {
                Table tbl = project.getTableByName(table);
                if (tbl == null) throw new OntopiaRuntimeException("Unknown table: " + table);
                Column col = tbl.getColumnByName(columns[i]);
                if (col == null) throw new OntopiaRuntimeException("Unknown table column: " + columns[i]);
                if (col.getType() == null) throw new OntopiaRuntimeException("Column type is null: " + col.getType());
                DataType datatype = project.getDataTypeByName(col.getType(), "generic");
                if (datatype == null) throw new OntopiaRuntimeException("Unknown column type: " + col.getType());
                String dtype = datatype.getType();
                if ("varchar".equals(dtype)) datatypes[i] = Types.VARCHAR; else if ("integer".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException("Unknown datatype: " + dtype);
            }
            LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));
            for (int i = 0; i < ignorelines; i++) {
                String line = reader.readLine();
                if (line == null) break;
            }
            log.debug("[" + StringUtils.join(columns, ", ") + "]");
            int lineno = 0;
            while (true) {
                lineno++;
                String line = reader.readLine();
                if (line == null) break;
                try {
                    String[] cols = StringUtils.split(line, separator);
                    if (cols.length > columns.length && !ignorecolumns) log.debug("Ignoring columns: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");
                    log.debug("CVALUES: " + (columns.length + 1) + "-" + cols.length + " '" + line + "'");
                    String dmesg = "(";
                    for (int i = 0; i < columns.length; i++) {
                        String col = cols[i];
                        if (stripquotes) {
                            int len = col.length();
                            if (len > 1 && ((col.charAt(0) == '"' && col.charAt(len - 1) == '"') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);
                        }
                        if (col != null && col.equals("")) col = null;
                        dmesg = dmesg + col;
                        if (i < columns.length - 1) dmesg = dmesg + ", ";
                        stm.setObject(i + 1, col, datatypes[i]);
                    }
                    dmesg = dmesg + ")";
                    log.debug(dmesg);
                    stm.execute();
                } catch (Exception e) {
                    conn.rollback();
                    throw new OntopiaRuntimeException("Cannot read line " + lineno + ": '" + line + "'", e);
                }
            }
            conn.commit();
        } finally {
            if (conn != null) conn.close();
        }
    }
} </s>
<s>class temp {    public synchronized String encrypt(String plaintext) {
        if (plaintext == null || plaintext.equals("")) {
            return plaintext;
        }
        String hash = null;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes("UTF-8"));
            byte raw[] = md.digest();
            hash = Base64.encodeBase64String(raw).replaceAll("\r\n", "");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e.getMessage());
        }
        return hash;
    }
} </s>
<s>class temp {        public void open(Input input) throws IOException, ResolverException {
            if (!input.isUriDefinitive()) return;
            URI uri;
            try {
                uri = new URI(input.getUri());
            } catch (URISyntaxException e) {
                throw new ResolverException(e);
            }
            if (!uri.isAbsolute()) throw new ResolverException("cannot open relative URI: " + uri);
            URL url = new URL(uri.toASCIIString());
            input.setByteStream(url.openStream());
        }
} </s>
<s>class temp {    public static void copyFile(File file, String pathExport) throws IOException {
        File out = new File(pathExport);
        FileChannel sourceChannel = new FileInputStream(file).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
} </s>
<s>class temp {    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
} </s>
<s>class temp {    public static void copy(final File src, File dst, final boolean overwrite) throws IOException, IllegalArgumentException {
        if (!src.isFile() || !src.exists()) {
            throw new IllegalArgumentException("Source file '" + src.getAbsolutePath() + "' not found!");
        }
        if (dst.exists()) {
            if (dst.isDirectory()) {
                dst = new File(dst, src.getName());
            } else if (dst.isFile()) {
                if (!overwrite) {
                    throw new IllegalArgumentException("Destination file '" + dst.getAbsolutePath() + "' already exists!");
                }
            } else {
                throw new IllegalArgumentException("Invalid destination object '" + dst.getAbsolutePath() + "'!");
            }
        }
        final File dstParent = dst.getParentFile();
        if (!dstParent.exists()) {
            if (!dstParent.mkdirs()) {
                throw new IOException("Failed to create directory " + dstParent.getAbsolutePath());
            }
        }
        long fileSize = src.length();
        if (fileSize > 20971520l) {
            final FileInputStream in = new FileInputStream(src);
            final FileOutputStream out = new FileOutputStream(dst);
            try {
                int doneCnt = -1;
                final int bufSize = 32768;
                final byte buf[] = new byte[bufSize];
                while ((doneCnt = in.read(buf, 0, bufSize)) >= 0) {
                    if (doneCnt == 0) {
                        Thread.yield();
                    } else {
                        out.write(buf, 0, doneCnt);
                    }
                }
                out.flush();
            } finally {
                try {
                    in.close();
                } catch (final IOException e) {
                }
                try {
                    out.close();
                } catch (final IOException e) {
                }
            }
        } else {
            final FileInputStream fis = new FileInputStream(src);
            final FileOutputStream fos = new FileOutputStream(dst);
            final FileChannel in = fis.getChannel(), out = fos.getChannel();
            try {
                long offs = 0, doneCnt = 0;
                final long copyCnt = Math.min(65536, fileSize);
                do {
                    doneCnt = in.transferTo(offs, copyCnt, out);
                    offs += doneCnt;
                    fileSize -= doneCnt;
                } while (fileSize > 0);
            } finally {
                try {
                    in.close();
                } catch (final IOException e) {
                }
                try {
                    out.close();
                } catch (final IOException e) {
                }
                try {
                    fis.close();
                } catch (final IOException e) {
                }
                try {
                    fos.close();
                } catch (final IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {    private String readTwitterFead() {
        StringBuilder builder = new StringBuilder();
        HttpClient client = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet("http://twitter.com/statuses/user_timeline/vogella.json");
        try {
            HttpResponse response = client.execute(httpGet);
            StatusLine statusLine = response.getStatusLine();
            int statusCode = statusLine.getStatusCode();
            if (statusCode == 200) {
                HttpEntity entity = response.getEntity();
                InputStream content = entity.getContent();
                BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                String line;
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
            } else {
                Log.e(AndroidJsonTestingActivity.class.getName(), "Failed to download file");
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return builder.toString();
    }
} </s>
<s>class temp {    public String encrypt(String password) throws Exception {
        MessageDigest md5 = MessageDigest.getInstance("MD5");
        md5.update(password.getBytes());
        BigInteger hash = new BigInteger(1, md5.digest());
        String hashword = hash.toString(16);
        return hashword;
    }
} </s>
<s>class temp {    private byte[] getBytes(String resource) throws IOException {
        InputStream is = HttpServletFileDownloadTest.class.getResourceAsStream(resource);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        IOUtils.copy(is, out);
        IOUtils.closeQuietly(is);
        return out.toByteArray();
    }
} </s>
<s>class temp {    private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException {
        final URL url;
        final long lastModified;
        final InputStream is;
        try {
            url = getServletContext().getResource(path);
            assert (url != null);
            lastModified = url.openConnection().getLastModified();
            is = url.openStream();
        } catch (IOException e) {
            log(PrintUtils.prettyPrintStackTrace(e, -1));
            throw e;
        }
        _lock.readLock().lock();
        CachedQuery cached = _caches.get(path);
        if (cached == null || cached.loadTimeStamp < lastModified) {
            if (cached == null) {
                cached = new CachedQuery();
            }
            XQueryParser parser = new XQueryParser(is);
            StaticContext staticEnv = parser.getStaticContext();
            try {
                URI baseUri = url.toURI();
                staticEnv.setBaseURI(baseUri);
            } catch (URISyntaxException e) {
                log(PrintUtils.prettyPrintStackTrace(e, -1));
            }
            final XQueryModule module;
            try {
                module = parser.parse();
            } catch (XQueryException e) {
                log(PrintUtils.prettyPrintStackTrace(e, -1));
                _lock.readLock().unlock();
                throw e;
            }
            _lock.readLock().unlock();
            _lock.writeLock().lock();
            cached.queryObject = module;
            cached.staticEnv = staticEnv;
            cached.loadTimeStamp = System.currentTimeMillis();
            _caches.put(path, cached);
            _lock.writeLock().unlock();
            _lock.readLock().lock();
            try {
                module.staticAnalysis(staticEnv);
            } catch (XQueryException e) {
                log(PrintUtils.prettyPrintStackTrace(e, -1));
                _lock.readLock().unlock();
                throw e;
            }
        }
        _lock.readLock().unlock();
        return cached;
    }
} </s>
<s>class temp {    private static boolean copyFile(File srcFile, File tagFile) throws IOException {
        if (srcFile == null || tagFile == null) {
            return false;
        }
        int length = 2097152;
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(tagFile);
        FileChannel inC = in.getChannel();
        FileChannel outC = out.getChannel();
        int i = 0;
        while (true) {
            if (inC.position() == inC.size()) {
                inC.close();
                outC.close();
                break;
            }
            if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;
            inC.transferTo(inC.position(), length, outC);
            inC.position(inC.position() + length);
            i++;
        }
        return true;
    }
} </s>
<s>class temp {    protected static final byte[] digest(String s) {
        byte[] ret = null;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(s.getBytes());
            ret = md.digest();
        } catch (NoSuchAlgorithmException e) {
            System.err.println("no message digest algorithm available!");
            System.exit(1);
        }
        return ret;
    }
} </s>
<s>class temp {    public static String fetchURL(final String u) {
        String retStr = "";
        try {
            final URL url = new URL(u);
            final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                retStr += line;
            }
            reader.close();
        } catch (final MalformedURLException e) {
            logger.severe("MalformedURLException calling url" + e.getMessage());
        } catch (final IOException e) {
            logger.severe("IOException calling url" + e.getMessage());
        }
        return retStr;
    }
} </s>
<s>class temp {    private static Collection<String> crossCheckFromOBOFile(String category) throws Exception {
        Collection<String> miCol = new ArrayList<String>();
        String revision = "1.48";
        URL url = new URL(OboUtils.PSI_MI_OBO_LOCATION + "?revision=" + revision);
        log.debug("url " + url);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        int termCounter = 0;
        int miCounter = 0;
        int obsoleteCounter = 0;
        int obsoleteCounterDef = 0;
        int typedefCounter = 0;
        int drugTerm = 0;
        int psiTerm = 0;
        String mi = null;
        while ((inputLine = in.readLine()) != null) {
            String temp;
            temp = inputLine;
            if (inputLine.startsWith("[Term]")) {
                termCounter++;
            } else if (inputLine.matches("id:\\s+(MI:.*)")) {
                mi = temp.split("\\s+")[1];
                miCounter++;
            } else if (inputLine.contains("is_obsolete: true")) {
                obsoleteCounter++;
            } else if (inputLine.matches("def:.*?OBSOLETE.*")) {
                obsoleteCounterDef++;
            } else if (inputLine.startsWith("[Typedef]")) {
                typedefCounter++;
            } else if (inputLine.matches("subset:\\s+PSI-MI\\s+slim")) {
                psiTerm++;
                if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) miCol.add(mi);
            } else if (inputLine.matches("subset:\\s+Drugable")) {
                drugTerm++;
                if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) miCol.add(mi);
            }
        }
        Assert.assertEquals(948, termCounter);
        Assert.assertEquals(948, miCounter);
        Assert.assertEquals(53, obsoleteCounter);
        Assert.assertEquals(53, obsoleteCounterDef);
        Assert.assertEquals(1, typedefCounter);
        Assert.assertEquals(844, psiTerm);
        Assert.assertEquals(124, drugTerm);
        in.close();
        return miCol;
    }
} </s>
<s>class temp {    public static GenericDocumentTransformer<? extends GenericDocument> getTranformer(URL url) throws IOException {
        setDefaultImplementation();
        if ("text/xml".equals(url.openConnection().getContentType()) || "application/xml".equals(url.openConnection().getContentType())) {
            return null;
        } else if ("text/html".equals(url.openConnection().getContentType())) {
            return null;
        }
        return null;
    }
} </s>
<s>class temp {    public static void main(String args[]) {
        int i, j, l;
        short NUMNUMBERS = 100;
        short numbers[] = new short[NUMNUMBERS];
        printIntro();
        int time = (int) System.currentTimeMillis();
        for (i = 0; i < NUMNUMBERS; i++) {
            numbers[i] = (short) (NUMNUMBERS - 1 - i);
        }
        for (i = 0; i < NUMNUMBERS; i++) {
            for (j = 0; j < NUMNUMBERS - i - 1; j++) {
                if (numbers[j] > numbers[j + 1]) {
                    short temp = numbers[j];
                    numbers[j] = numbers[j + 1];
                    numbers[j + 1] = temp;
                }
            }
            if (WANT_PROGRESS) {
                printProgress();
            }
        }
        time = (int) System.currentTimeMillis() - time;
        System.out.print(time);
        System.out.print("End\n");
    }
} </s>
<s>class temp {    @Override
    public ReturnValue do_run() {
        int bufLen = 500 * 1024;
        ReturnValue ret = new ReturnValue();
        ret.setExitStatus(ReturnValue.SUCCESS);
        File output = null;
        if (((String) options.valueOf("input-file")).startsWith("s3://")) {
            Pattern p = Pattern.compile("s3://(\\S+):(\\S+)@(\\S+)");
            Matcher m = p.matcher((String) options.valueOf("input-file"));
            boolean result = m.find();
            String accessKey = null;
            String secretKey = null;
            String URL = (String) options.valueOf("input-file");
            if (result) {
                accessKey = m.group(1);
                secretKey = m.group(2);
                URL = "s3://" + m.group(3);
            } else {
                try {
                    HashMap<String, String> settings = (HashMap<String, String>) ConfigTools.getSettings();
                    accessKey = settings.get("AWS_ACCESS_KEY");
                    secretKey = settings.get("AWS_SECRET_KEY");
                } catch (Exception e) {
                    ret.setExitStatus(ReturnValue.SETTINGSFILENOTFOUND);
                    ret.setProcessExitStatus(ReturnValue.SETTINGSFILENOTFOUND);
                    return (ret);
                }
            }
            if (accessKey == null || secretKey == null) {
                ret.setExitStatus(ReturnValue.ENVVARNOTFOUND);
                ret.setProcessExitStatus(ReturnValue.ENVVARNOTFOUND);
                return (ret);
            }
            AmazonS3 s3 = new AmazonS3Client(new BasicAWSCredentials(accessKey, secretKey));
            p = Pattern.compile("s3://([^/]+)/(\\S+)");
            m = p.matcher(URL);
            result = m.find();
            if (result) {
                String bucket = m.group(1);
                String key = m.group(2);
                S3Object object = s3.getObject(new GetObjectRequest(bucket, key));
                System.out.println("Content-Type: " + object.getObjectMetadata().getContentType());
                output = new File((String) options.valueOf("output-dir") + File.separator + key);
                output.getParentFile().mkdirs();
                if (!output.exists() || output.length() != object.getObjectMetadata().getContentLength()) {
                    System.out.println("Downloading an S3 object from bucket: " + bucket + " with key: " + key);
                    BufferedInputStream reader = new BufferedInputStream(object.getObjectContent(), bufLen);
                    try {
                        BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream(output), bufLen);
                        while (true) {
                            int data = reader.read();
                            if (data == -1) {
                                break;
                            }
                            writer.write(data);
                        }
                        reader.close();
                        writer.close();
                    } catch (FileNotFoundException e) {
                        System.err.println(e.getMessage());
                    } catch (IOException e) {
                        System.err.println(e.getMessage());
                    }
                } else {
                    System.out.println("Skipping download of S3 object from bucket: " + bucket + " with key: " + key + " since local output exists: " + output.getAbsolutePath());
                }
            }
        } else if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) {
            Pattern p = Pattern.compile("(https*)://(\\S+):(\\S+)@(\\S+)");
            Matcher m = p.matcher((String) options.valueOf("input-file"));
            boolean result = m.find();
            String protocol = null;
            String user = null;
            String pass = null;
            String URL = (String) options.valueOf("input-file");
            if (result) {
                protocol = m.group(1);
                user = m.group(2);
                pass = m.group(3);
                URL = protocol + "://" + m.group(4);
            }
            URL urlObj = null;
            try {
                urlObj = new URL(URL);
                if (urlObj != null) {
                    URLConnection urlConn = urlObj.openConnection();
                    if (user != null && pass != null) {
                        String userPassword = user + ":" + pass;
                        String encoding = new Base64().encodeBase64String(userPassword.getBytes());
                        urlConn.setRequestProperty("Authorization", "Basic " + encoding);
                    }
                    p = Pattern.compile("://([^/]+)/(\\S+)");
                    m = p.matcher(URL);
                    result = m.find();
                    if (result) {
                        String host = m.group(1);
                        String path = m.group(2);
                        output = new File((String) options.valueOf("output-dir") + path);
                        output.getParentFile().mkdirs();
                        if (!output.exists() || output.length() != urlConn.getContentLength()) {
                            System.out.println("Downloading an http object from URL: " + URL);
                            BufferedInputStream reader = new BufferedInputStream(urlConn.getInputStream(), bufLen);
                            BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream(output), bufLen);
                            while (true) {
                                int data = reader.read();
                                if (data == -1) {
                                    break;
                                }
                                writer.write(data);
                            }
                            reader.close();
                            writer.close();
                        } else {
                            System.out.println("Skipping download of http object from URL: " + URL + " since local output exists: " + output.getAbsolutePath());
                        }
                    }
                }
            } catch (MalformedURLException e) {
                System.err.println(e.getMessage());
            } catch (IOException e) {
                System.err.println(e.getMessage());
            }
        } else {
            output = new File((String) options.valueOf("input-file"));
        }
        boolean result = FileTools.unzipFile(output, new File((String) options.valueOf("output-dir")));
        if (!result) {
            ret.setStderr("Can't unzip software bundle " + options.valueOf("input-file") + " to directory " + options.valueOf("output-dir"));
            ret.setExitStatus(ReturnValue.RUNTIMEEXCEPTION);
        }
        return (ret);
    }
} </s>
<s>class temp {    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        session.setMaxInactiveInterval(300);
        String member_type;
        String save_type;
        String action;
        String notice;
        if ((String) session.getAttribute("member_type") != null) {
            member_type = (String) session.getAttribute("member_type");
        } else {
            notice = "You must login first!";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
            dispatcher.forward(request, response);
            return;
        }
        if (request.getParameter("action") != null) {
            action = (String) request.getParameter("action");
        } else {
            if (member_type.equals("student")) {
                if (session.getAttribute("person") != null) {
                    Person person = (Person) session.getAttribute("person");
                    Student student = person.getStudent();
                    request.setAttribute("student", student);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/student.jsp");
                    dispatcher.forward(request, response);
                    return;
                } else {
                    notice = "You are not logged in!";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
            } else if (member_type.equals("alumni")) {
                if (session.getAttribute("person") != null) {
                    Person person = (Person) session.getAttribute("person");
                    Alumni alumni = person.getAlumni();
                    request.setAttribute("alumni", alumni);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/alumni.jsp");
                    dispatcher.forward(request, response);
                    return;
                } else {
                    notice = "You are not logged in!";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
            } else if (member_type.equals("hospital")) {
                if (session.getAttribute("person") != null) {
                    Person person = (Person) session.getAttribute("person");
                    Hospital hospital = person.getHospital();
                    request.setAttribute("hospital", hospital);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/hospital.jsp");
                    dispatcher.forward(request, response);
                    return;
                } else {
                    notice = "You are not logged in!";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
            } else {
                notice = "I don't understand your request.  Please try again.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        }
        if (action.equals("save_student")) {
            Person person = (Person) session.getAttribute("person");
            Student cur_student = person.getStudent();
            int person_id = Integer.parseInt((String) session.getAttribute("person_id"));
            String fname = request.getParameter("fname");
            String lname = request.getParameter("lname");
            String address1 = request.getParameter("address1");
            String address2 = request.getParameter("address2");
            String city = request.getParameter("city");
            String state = request.getParameter("state");
            String zip = request.getParameter("zip");
            String email = request.getParameter("email");
            String start_date = request.getParameter("start_year") + "-" + request.getParameter("start_month") + "-01";
            String graduation_date = "";
            if (!request.getParameter("grad_year").equals("") && !request.getParameter("grad_month").equals("")) {
                graduation_date = request.getParameter("grad_year") + "-" + request.getParameter("grad_month") + "-01";
            }
            String password = "";
            if (request.getParameter("password") != null && !request.getParameter("password").equals("")) {
                password = request.getParameter("password");
                MessageDigest md = null;
                try {
                    md = MessageDigest.getInstance("MD5");
                    md.update(password.getBytes("UTF-8"));
                } catch (Exception x) {
                    notice = "Could not encrypt your password.  Please try again.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/student.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
                password = (new BASE64Encoder()).encode(md.digest());
            } else {
                password = cur_student.getPassword();
            }
            int is_admin = 0;
            if (request.getParameter("is_admin") != null) {
                is_admin = 1;
            }
            Student new_student = new Student(fname, lname, address1, address2, city, state, zip, email, password, is_admin, start_date, graduation_date);
            if (!new_student.getEmail().equals(cur_student.getEmail())) {
                if (new_student.checkEmailIsRegistered()) {
                    notice = "That email address is already registered!";
                    request.setAttribute("notice", notice);
                    request.setAttribute("student", new_student);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/student.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
            }
            if (!new_student.updateStudent(person_id)) {
                notice = "There was an error saving your information.  Please try again.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/student.jsp");
                dispatcher.forward(request, response);
                return;
            }
            Person updated_person = new_student.getPerson(person_id);
            session.setAttribute("person", updated_person);
            notice = "Information successfully updated.";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("save_alumni")) {
            Person person = (Person) session.getAttribute("person");
            Alumni cur_alumni = person.getAlumni();
            int person_id = Integer.parseInt((String) session.getAttribute("person_id"));
            String fname = request.getParameter("fname");
            String lname = request.getParameter("lname");
            String address1 = request.getParameter("address1");
            String address2 = request.getParameter("address2");
            String city = request.getParameter("city");
            String state = request.getParameter("state");
            String zip = request.getParameter("zip");
            String email = request.getParameter("email");
            String company_name = request.getParameter("company_name");
            String position = request.getParameter("position");
            int mentor = 0;
            if (request.getParameter("mentor") != null) {
                mentor = 1;
            }
            String graduation_date = request.getParameter("graduation_year") + "-" + request.getParameter("graduation_month") + "-01";
            String password = "";
            if (request.getParameter("password") != null) {
                password = request.getParameter("password");
                MessageDigest md = null;
                try {
                    md = MessageDigest.getInstance("MD5");
                    md.update(password.getBytes("UTF-8"));
                } catch (Exception x) {
                    notice = "Could not encrypt your password.  Please try again.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/alumni.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
                password = (new BASE64Encoder()).encode(md.digest());
            } else {
                password = cur_alumni.getPassword();
            }
            int is_admin = 0;
            if (request.getParameter("is_admin") != null) {
                is_admin = 1;
            }
            Alumni new_alumni = new Alumni(fname, lname, address1, address2, city, state, zip, email, password, is_admin, company_name, position, graduation_date, mentor);
            if (!new_alumni.getEmail().equals(cur_alumni.getEmail())) {
                if (new_alumni.checkEmailIsRegistered()) {
                    notice = "That email address is already registered!";
                    request.setAttribute("notice", notice);
                    request.setAttribute("alumni", new_alumni);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/alumni.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
            }
            if (!new_alumni.updateAlumni(person_id)) {
                session.setAttribute("alumni", new_alumni);
                notice = "There was an error saving your information.  Please try again.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/alumni.jsp");
                dispatcher.forward(request, response);
                return;
            }
            Person updated_person = new_alumni.getPerson(person_id);
            session.setAttribute("person", updated_person);
            notice = "Information successfully updated.";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("save_hospital")) {
            Person person = (Person) session.getAttribute("person");
            Hospital cur_hospital = person.getHospital();
            int person_id = Integer.parseInt((String) session.getAttribute("person_id"));
            String fname = request.getParameter("fname");
            String lname = request.getParameter("lname");
            String address1 = request.getParameter("address1");
            String address2 = request.getParameter("address2");
            String city = request.getParameter("city");
            String state = request.getParameter("state");
            String zip = request.getParameter("zip");
            String email = request.getParameter("email");
            String name = request.getParameter("name");
            String phone = request.getParameter("phone");
            String url = request.getParameter("url");
            String password = "";
            if (request.getParameter("password") != null && !request.getParameter("password").equals("")) {
                password = request.getParameter("password");
                MessageDigest md = null;
                try {
                    md = MessageDigest.getInstance("MD5");
                    md.update(password.getBytes("UTF-8"));
                } catch (Exception x) {
                    notice = "Could not encrypt your password.  Please try again.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/hospital.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
                password = (new BASE64Encoder()).encode(md.digest());
            } else {
                password = cur_hospital.getPassword();
            }
            int is_admin = 0;
            if (request.getParameter("is_admin") != null) {
                is_admin = 1;
            }
            Hospital new_hospital = new Hospital(fname, lname, address1, address2, city, state, zip, email, password, is_admin, name, phone, url);
            if (!new_hospital.getEmail().equals(cur_hospital.getEmail())) {
                if (new_hospital.checkEmailIsRegistered()) {
                    notice = "That email address is already registered!";
                    request.setAttribute("notice", notice);
                    request.setAttribute("hospital", new_hospital);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/hospital.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
            }
            if (!new_hospital.updateHospital(person_id)) {
                session.setAttribute("hospital", new_hospital);
                notice = "There was an error saving your information.  Please try again.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/hospital.jsp");
                dispatcher.forward(request, response);
                return;
            }
            Person updated_person = new_hospital.getPerson(person_id);
            session.setAttribute("person", updated_person);
            notice = "Information successfully updated.";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
            dispatcher.forward(request, response);
            return;
        } else {
            notice = "There was an error with your request.  Please try again.";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/member/hospital.jsp");
            dispatcher.forward(request, response);
            return;
        }
    }
} </s>
<s>class temp {    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        ServletConfig config = getServletConfig();
        ServletContext context = config.getServletContext();
        try {
            String driver = context.getInitParameter("driver");
            Class.forName(driver);
            String dbURL = context.getInitParameter("db");
            String username = context.getInitParameter("username");
            String password = "";
            connection = DriverManager.getConnection(dbURL, username, password);
        } catch (ClassNotFoundException e) {
            System.out.println("Database driver not found.");
        } catch (SQLException e) {
            System.out.println("Error opening the db connection: " + e.getMessage());
        }
        String action = "";
        String notice;
        String error = "";
        HttpSession session = request.getSession();
        session.setMaxInactiveInterval(300);
        if (request.getParameter("action") != null) {
            action = request.getParameter("action");
        } else {
            notice = "Unknown action!";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
            dispatcher.forward(request, response);
            return;
        }
        if (action.equals("edit_events")) {
            String sql;
            String month_name = "";
            int month;
            int year;
            Event event;
            if (request.getParameter("month") != null) {
                month = Integer.parseInt(request.getParameter("month"));
                String temp = request.getParameter("year_num");
                year = Integer.parseInt(temp);
                int month_num = month - 1;
                event = new Event(year, month_num, 1);
                month_name = event.getMonthName();
                year = event.getYearNumber();
                if (month < 10) {
                    sql = "SELECT * FROM event WHERE date LIKE '" + year + "-0" + month + "-%'";
                } else {
                    sql = "SELECT * FROM event WHERE date LIKE '" + year + "-" + month + "-%'";
                }
            } else {
                event = new Event();
                month_name = event.getMonthName();
                month = event.getMonthNumber() + 1;
                year = event.getYearNumber();
                sql = "SELECT * FROM event WHERE date LIKE '" + year + "-%" + month + "-%'";
            }
            try {
                dbStatement = connection.createStatement();
                dbResultSet = dbStatement.executeQuery(sql);
                request.setAttribute("resultset", dbResultSet);
                request.setAttribute("year", Integer.toString(year));
                request.setAttribute("month", Integer.toString(month));
                request.setAttribute("month_name", month_name);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/edit_events.jsp");
                dispatcher.forward(request, response);
                return;
            } catch (SQLException e) {
                notice = "Error retrieving events from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("edit_event")) {
            int id = Integer.parseInt(request.getParameter("id"));
            Event event = new Event();
            event = event.getEvent(id);
            if (event != null) {
                request.setAttribute("event", event);
                request.setAttribute("id", Integer.toString(id));
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/add_event.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error retrieving event from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("save_event")) {
            String title = request.getParameter("title");
            String description = request.getParameter("description");
            String month = request.getParameter("month");
            String day = request.getParameter("day");
            String year = request.getParameter("year");
            String start_time = "";
            String end_time = "";
            if (request.getParameter("all_day") == null) {
                String start_hour = request.getParameter("start_hour");
                String start_minutes = request.getParameter("start_minutes");
                String start_ampm = request.getParameter("start_ampm");
                String end_hour = request.getParameter("end_hour");
                String end_minutes = request.getParameter("end_minutes");
                String end_ampm = request.getParameter("end_ampm");
                if (Integer.parseInt(start_hour) < 10) {
                    start_hour = "0" + start_hour;
                }
                if (Integer.parseInt(end_hour) < 10) {
                    end_hour = "0" + end_hour;
                }
                start_time = start_hour + ":" + start_minutes + " " + start_ampm;
                end_time = end_hour + ":" + end_minutes + " " + end_ampm;
            }
            Event event = null;
            if (!start_time.equals("") && !end_time.equals("")) {
                event = new Event(title, description, month, day, year, start_time, end_time);
            } else {
                event = new Event(title, description, month, day, year);
            }
            if (event.saveEvent()) {
                notice = "Calendar event saved!";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error saving calendar event.";
                request.setAttribute("notice", notice);
                request.setAttribute("event", event);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/add_event.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("update_event")) {
            String title = request.getParameter("title");
            String description = request.getParameter("description");
            String month = request.getParameter("month");
            String day = request.getParameter("day");
            String year = request.getParameter("year");
            String start_time = "";
            String end_time = "";
            int id = Integer.parseInt(request.getParameter("id"));
            if (request.getParameter("all_day") == null) {
                String start_hour = request.getParameter("start_hour");
                String start_minutes = request.getParameter("start_minutes");
                String start_ampm = request.getParameter("start_ampm");
                String end_hour = request.getParameter("end_hour");
                String end_minutes = request.getParameter("end_minutes");
                String end_ampm = request.getParameter("end_ampm");
                if (Integer.parseInt(start_hour) < 10) {
                    start_hour = "0" + start_hour;
                }
                if (Integer.parseInt(end_hour) < 10) {
                    end_hour = "0" + end_hour;
                }
                start_time = start_hour + ":" + start_minutes + " " + start_ampm;
                end_time = end_hour + ":" + end_minutes + " " + end_ampm;
            }
            Event event = null;
            if (!start_time.equals("") && !end_time.equals("")) {
                event = new Event(title, description, month, day, year, start_time, end_time);
            } else {
                event = new Event(title, description, month, day, year);
            }
            if (event.updateEvent(id)) {
                notice = "Calendar event updated!";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error updating calendar event.";
                request.setAttribute("notice", notice);
                request.setAttribute("event", event);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/add_event.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("delete_event")) {
            int id = Integer.parseInt(request.getParameter("id"));
            Event event = new Event();
            if (event.deleteEvent(id)) {
                notice = "Calendar event successfully deleted.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_events");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error deleting event from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_events");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("edit_members")) {
            String sql = "SELECT * FROM person ORDER BY lname";
            if (request.getParameter("member_type") != null) {
                String member_type = request.getParameter("member_type");
                if (member_type.equals("all")) {
                    sql = "SELECT * FROM person ORDER BY lname";
                } else {
                    sql = "SELECT * FROM person where member_type LIKE '" + member_type + "' ORDER BY lname";
                }
                request.setAttribute("member_type", member_type);
            }
            try {
                dbStatement = connection.createStatement();
                dbResultSet = dbStatement.executeQuery(sql);
                request.setAttribute("resultset", dbResultSet);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/edit_members.jsp");
                dispatcher.forward(request, response);
                return;
            } catch (SQLException e) {
                notice = "Error retrieving members from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("edit_person")) {
            int id = Integer.parseInt(request.getParameter("id"));
            String member_type = request.getParameter("member_type");
            Person person = new Person();
            person = person.getPerson(id);
            if (member_type.equals("student")) {
                Student student = person.getStudent();
                request.setAttribute("student", student);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/edit_student.jsp");
                dispatcher.forward(request, response);
                return;
            } else if (member_type.equals("alumni")) {
                Alumni alumni = person.getAlumni();
                request.setAttribute("alumni", alumni);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/edit_alumni.jsp");
                dispatcher.forward(request, response);
                return;
            } else if (member_type.equals("hospital")) {
                Hospital hospital = person.getHospital(id);
                request.setAttribute("hospital", hospital);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/edit_hospital.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("update_alumni")) {
            int person_id = Integer.parseInt(request.getParameter("person_id"));
            Person person = new Person();
            person = person.getPerson(person_id);
            Alumni cur_alumni = person.getAlumni();
            String fname = request.getParameter("fname");
            String lname = request.getParameter("lname");
            String address1 = request.getParameter("address1");
            String address2 = request.getParameter("address2");
            String city = request.getParameter("city");
            String state = request.getParameter("state");
            String zip = request.getParameter("zip");
            String email = request.getParameter("email");
            String company_name = request.getParameter("company_name");
            String position = request.getParameter("position");
            int mentor = 0;
            if (request.getParameter("mentor") != null) {
                mentor = 1;
            }
            String graduation_date = request.getParameter("graduation_year") + "-" + request.getParameter("graduation_month") + "-01";
            String password = "";
            if (request.getParameter("password") != null) {
                password = request.getParameter("password");
                MessageDigest md = null;
                try {
                    md = MessageDigest.getInstance("MD5");
                    md.update(password.getBytes("UTF-8"));
                } catch (Exception x) {
                    notice = "Could not encrypt your password.  Please try again.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                    dispatcher.forward(request, response);
                    return;
                }
                password = (new BASE64Encoder()).encode(md.digest());
            } else {
                password = cur_alumni.getPassword();
            }
            int is_admin = 0;
            if (request.getParameter("is_admin") != null) {
                is_admin = 1;
            }
            Alumni new_alumni = new Alumni(fname, lname, address1, address2, city, state, zip, email, password, is_admin, company_name, position, graduation_date, mentor);
            if (!new_alumni.getEmail().equals(cur_alumni.getEmail())) {
                if (new_alumni.checkEmailIsRegistered()) {
                    notice = "That email address is already registered!";
                    request.setAttribute("notice", notice);
                    request.setAttribute("alumni", new_alumni);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                    dispatcher.forward(request, response);
                    return;
                }
            }
            if (!new_alumni.updateAlumni(person_id)) {
                session.setAttribute("alumni", new_alumni);
                notice = "There was an error saving your information.  Please try again.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                dispatcher.forward(request, response);
                return;
            }
            notice = "Member information successfully updated.";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("update_hospital")) {
            int person_id = Integer.parseInt(request.getParameter("person_id"));
            Person person = new Person();
            person = person.getPerson(person_id);
            Hospital cur_hospital = person.getHospital(person_id);
            String fname = request.getParameter("fname");
            String lname = request.getParameter("lname");
            String address1 = request.getParameter("address1");
            String address2 = request.getParameter("address2");
            String city = request.getParameter("city");
            String state = request.getParameter("state");
            String zip = request.getParameter("zip");
            String email = request.getParameter("email");
            String name = request.getParameter("name");
            String phone = request.getParameter("phone");
            String url = request.getParameter("url");
            String password = "";
            if (cur_hospital.getPassword() != null) {
                if (request.getParameter("password") != null && !request.getParameter("password").equals("")) {
                    password = request.getParameter("password");
                    MessageDigest md = null;
                    try {
                        md = MessageDigest.getInstance("MD5");
                        md.update(password.getBytes("UTF-8"));
                    } catch (Exception x) {
                        notice = "Could not encrypt your password.  Please try again.";
                        request.setAttribute("notice", notice);
                        RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                        dispatcher.forward(request, response);
                        return;
                    }
                    password = (new BASE64Encoder()).encode(md.digest());
                } else {
                    password = cur_hospital.getPassword();
                }
            }
            int is_admin = 0;
            if (request.getParameter("is_admin") != null) {
                is_admin = 1;
            }
            Hospital new_hospital = new Hospital(fname, lname, address1, address2, city, state, zip, email, password, is_admin, name, phone, url);
            if (!new_hospital.getEmail().equals(cur_hospital.getEmail())) {
                if (new_hospital.checkEmailIsRegistered()) {
                    notice = "That email address is already registered!";
                    request.setAttribute("notice", notice);
                    request.setAttribute("hospital", new_hospital);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                    dispatcher.forward(request, response);
                    return;
                }
            }
            if (!new_hospital.updateHospital(person_id)) {
                session.setAttribute("hospital", new_hospital);
                notice = "There was an error saving your information.  Please try again.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                dispatcher.forward(request, response);
                return;
            }
            notice = "Information successfully updated.";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("update_student")) {
            int person_id = Integer.parseInt(request.getParameter("person_id"));
            Person person = new Person();
            person = person.getPerson(person_id);
            Student cur_student = person.getStudent();
            String fname = request.getParameter("fname");
            String lname = request.getParameter("lname");
            String address1 = request.getParameter("address1");
            String address2 = request.getParameter("address2");
            String city = request.getParameter("city");
            String state = request.getParameter("state");
            String zip = request.getParameter("zip");
            String email = request.getParameter("email");
            String start_date = request.getParameter("start_year") + "-" + request.getParameter("start_month") + "-01";
            String graduation_date = "";
            if (!request.getParameter("grad_year").equals("") && !request.getParameter("grad_month").equals("")) {
                graduation_date = request.getParameter("grad_year") + "-" + request.getParameter("grad_month") + "-01";
            }
            String password = "";
            if (request.getParameter("password") != null && !request.getParameter("password").equals("")) {
                password = request.getParameter("password");
                MessageDigest md = null;
                try {
                    md = MessageDigest.getInstance("MD5");
                    md.update(password.getBytes("UTF-8"));
                } catch (Exception x) {
                    notice = "Could not encrypt your password.  Please try again.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                    dispatcher.forward(request, response);
                    return;
                }
                password = (new BASE64Encoder()).encode(md.digest());
            } else {
                password = cur_student.getPassword();
            }
            int is_admin = 0;
            if (request.getParameter("is_admin") != null) {
                is_admin = 1;
            }
            Student new_student = new Student(fname, lname, address1, address2, city, state, zip, email, password, is_admin, start_date, graduation_date);
            if (!new_student.getEmail().equals(cur_student.getEmail())) {
                if (new_student.checkEmailIsRegistered()) {
                    notice = "That email address is already registered!";
                    request.setAttribute("notice", notice);
                    request.setAttribute("student", new_student);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                    dispatcher.forward(request, response);
                    return;
                }
            }
            if (!new_student.updateStudent(person_id)) {
                notice = "There was an error saving your information.  Please try again.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
                dispatcher.forward(request, response);
                return;
            }
            notice = "Information successfully updated.";
            request.setAttribute("notice", notice);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("delete_person")) {
            int id = Integer.parseInt(request.getParameter("id"));
            String member_type = request.getParameter("member_type");
            Person person = new Person();
            person = person.getPerson(id);
            if (person.deletePerson(member_type)) {
                notice = person.getFname() + ' ' + person.getLname() + " successfully deleted from database.";
                request.setAttribute("notice", notice);
                person = null;
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=edit_members&member_type=all");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("manage_pages")) {
            String sql = "SELECT * FROM pages WHERE parent_id=0 OR parent_id IN (SELECT id FROM pages WHERE title LIKE 'root')";
            if (request.getParameter("id") != null) {
                int id = Integer.parseInt(request.getParameter("id"));
                sql = "SELECT * FROM pages WHERE parent_id=" + id;
            }
            try {
                dbStatement = connection.createStatement();
                dbResultSet = dbStatement.executeQuery(sql);
                request.setAttribute("resultset", dbResultSet);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/edit_pages.jsp");
                dispatcher.forward(request, response);
                return;
            } catch (SQLException e) {
                notice = "Error retrieving content pages from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("add_page")) {
            String sql = "SELECT id, title FROM pages WHERE parent_id=0 OR parent_id IN (SELECT id FROM pages WHERE title LIKE 'root')";
            try {
                dbStatement = connection.createStatement();
                dbResultSet = dbStatement.executeQuery(sql);
                request.setAttribute("resultset", dbResultSet);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/add_page.jsp");
                dispatcher.forward(request, response);
                return;
            } catch (SQLException e) {
                notice = "Error retrieving content pages from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("save_page")) {
            String title = request.getParameter("title");
            String content = request.getParameter("content");
            Page page = null;
            if (request.getParameter("parent_id") != null) {
                int parent_id = Integer.parseInt(request.getParameter("parent_id"));
                page = new Page(title, content, parent_id);
            } else {
                page = new Page(title, content, 0);
            }
            if (page.savePage()) {
                notice = "Content page saved!";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "There was an error saving the page.";
                request.setAttribute("page", page);
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/add_page.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("edit_page")) {
            String sql = "SELECT * FROM pages WHERE parent_id=0";
            int id = Integer.parseInt(request.getParameter("id"));
            Page page = new Page();
            page = page.getPage(id);
            try {
                dbStatement = connection.createStatement();
                dbResultSet = dbStatement.executeQuery(sql);
                request.setAttribute("resultset", dbResultSet);
            } catch (SQLException e) {
                notice = "Error retrieving content pages from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
            if (page != null) {
                request.setAttribute("page", page);
                request.setAttribute("id", Integer.toString(id));
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/add_page.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error retrieving content page from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("update_page")) {
            int id = Integer.parseInt(request.getParameter("id"));
            String title = request.getParameter("title");
            String content = request.getParameter("content");
            int parent_id = 0;
            if (request.getParameter("parent_id") != null) {
                parent_id = Integer.parseInt(request.getParameter("parent_id"));
            }
            Page page = new Page(title, content, parent_id);
            if (page.updatePage(id)) {
                notice = "Content page was updated successfully.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error updating the content page.";
                request.setAttribute("notice", notice);
                request.setAttribute("page", page);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/add_page.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("delete_page")) {
            int id = Integer.parseInt(request.getParameter("id"));
            Page page = new Page();
            if (page.deletePage(id)) {
                notice = "Content page (and sub pages) deleted successfully.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error deleting the content page(s).";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("list_residencies")) {
            Residency residency = new Residency();
            dbResultSet = residency.getResidencies();
            request.setAttribute("result", dbResultSet);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/list_residencies.jsp");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("delete_residency")) {
            int job_id = Integer.parseInt(request.getParameter("id"));
            Residency residency = new Residency();
            if (residency.deleteResidency(job_id)) {
                notice = "Residency has been successfully deleted.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=list_residencies");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error deleting the residency.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("edit_residency")) {
            int job_id = Integer.parseInt(request.getParameter("id"));
            Residency residency = new Residency();
            dbResultSet = residency.getResidency(job_id);
            if (dbResultSet != null) {
                try {
                    int hId = dbResultSet.getInt("hospital_id");
                    String hName = residency.getHospitalName(hId);
                    request.setAttribute("hName", hName);
                    dbResultSet.beforeFirst();
                } catch (SQLException e) {
                    error = "There was an error retreiving the residency.";
                    session.setAttribute("error", error);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/error.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
                request.setAttribute("result", dbResultSet);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/edit_residency.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "There was an error in locating the residency you selected.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("new_residency")) {
            Residency residency = new Residency();
            dbResultSet = residency.getHospitals();
            request.setAttribute("result", dbResultSet);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/add_residency.jsp");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("add_residency")) {
            Person person = (Person) session.getAttribute("person");
            if (person.isAdmin()) {
                String hName = request.getParameter("hName");
                String title = request.getParameter("title");
                String description = request.getParameter("description");
                String start_month = request.getParameter("startDateMonth");
                String start_day = request.getParameter("startDateDay");
                String start_year = request.getParameter("startDateYear");
                String start_date = start_year + start_month + start_day;
                String end_month = request.getParameter("endDateMonth");
                String end_day = request.getParameter("endDateDay");
                String end_year = request.getParameter("endDateYear");
                String end_date = end_year + end_month + end_day;
                String deadline_month = request.getParameter("deadlineDateMonth");
                String deadline_day = request.getParameter("deadlineDateDay");
                String deadline_year = request.getParameter("deadlineDateYear");
                String deadline_date = deadline_year + deadline_month + deadline_day;
                int hId = Integer.parseInt(request.getParameter("hId"));
                Residency residency = new Residency(title, start_date, end_date, deadline_date, description, hId);
                if (residency.saveResidency()) {
                    notice = "Residency has been successfully saved.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=list_residencies");
                    dispatcher.forward(request, response);
                    return;
                } else {
                    notice = "Error saving the residency.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
            }
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("update_residency")) {
            Person person = (Person) session.getAttribute("person");
            int job_id = Integer.parseInt(request.getParameter("job_id"));
            if (person.isAdmin()) {
                String hName = request.getParameter("hName");
                String title = request.getParameter("title");
                String description = request.getParameter("description");
                String start_month = request.getParameter("startDateMonth");
                String start_day = request.getParameter("startDateDay");
                String start_year = request.getParameter("startDateYear");
                String start_date = start_year + start_month + start_day;
                String end_month = request.getParameter("endDateMonth");
                String end_day = request.getParameter("endDateDay");
                String end_year = request.getParameter("endDateYear");
                String end_date = end_year + end_month + end_day;
                String deadline_month = request.getParameter("deadlineDateMonth");
                String deadline_day = request.getParameter("deadlineDateDay");
                String deadline_year = request.getParameter("deadlineDateYear");
                String deadline_date = deadline_year + deadline_month + deadline_day;
                int hId = Integer.parseInt(request.getParameter("hId"));
                Residency residency = new Residency(job_id, title, start_date, end_date, deadline_date, description);
                if (residency.updateResidency(job_id)) {
                    notice = "Residency has been successfully saved.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=list_residencies");
                    dispatcher.forward(request, response);
                    return;
                } else {
                    notice = "Error saving the residency.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
            }
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("add_hospital")) {
            Person person = (Person) session.getAttribute("person");
            if (person.isAdmin()) {
                String name = request.getParameter("name");
                String url = request.getParameter("url");
                String address1 = request.getParameter("address1");
                String address2 = request.getParameter("address2");
                String city = request.getParameter("city");
                String state = request.getParameter("state");
                String zip = request.getParameter("zip");
                String phone = request.getParameter("phone");
                String lname = request.getParameter("name");
                Hospital hospital = new Hospital(lname, address1, address2, city, state, zip, name, phone, url);
                if (!hospital.saveHospitalAdmin()) {
                    notice = "There was an error saving your information.  Please try again.";
                    request.setAttribute("notice", notice);
                    RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                    dispatcher.forward(request, response);
                    return;
                }
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=new_residency");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Unknown request.  Please try again.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("Get Admin News List")) {
            News news = new News();
            if (news.getNewsList() != null) {
                dbResultSet = news.getNewsList();
                request.setAttribute("result", dbResultSet);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/list.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Could not get news list.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("Get News List")) {
            News news = new News();
            if (news.getNewsList() != null) {
                dbResultSet = news.getNewsList();
                request.setAttribute("result", dbResultSet);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/news_list.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Could not get news list.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/gsu_fhce/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("detail")) {
            String id = request.getParameter("id");
            News news = new News();
            if (news.getNewsDetail(id) != null) {
                dbResultSet = news.getNewsDetail(id);
                request.setAttribute("result", dbResultSet);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/news_detail.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Could not get news detail.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("delete")) {
            int id = 0;
            id = Integer.parseInt(request.getParameter("id"));
            News news = new News();
            if (news.deleteNews(id)) {
                notice = "News successfully deleted.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=Get Admin News List");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error deleting the news.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=Get Admin News List");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("edit")) {
            int id = Integer.parseInt(request.getParameter("id"));
            News news = new News();
            news = news.getNews(id);
            if (news != null) {
                request.setAttribute("news", news);
                request.setAttribute("id", Integer.toString(id));
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/news_update.jsp");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error retrieving news from the database.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("Update News")) {
            String title = request.getParameter("title");
            String date = (request.getParameter("year")) + (request.getParameter("month")) + (request.getParameter("day"));
            String content = request.getParameter("content");
            int id = Integer.parseInt(request.getParameter("newsid"));
            News news = new News(title, date, content);
            if (news.updateNews(id)) {
                notice = "News successfully updated.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=Get Admin News List");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Could not update news.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=Get Admin News List");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("Add News")) {
            String id = "";
            String title = request.getParameter("title");
            String date = request.getParameter("year") + "-" + request.getParameter("month") + "-" + request.getParameter("day");
            String content = request.getParameter("content");
            News news = new News(title, date, content);
            if (news.addNews()) {
                notice = "News successfully added.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=Get Admin News List");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Could not add news.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("admin/index.jsp");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("manage_mship")) {
            Mentor mentor = new Mentor();
            dbResultSet = mentor.getMentorships();
            if (dbResultSet != null) {
                request.setAttribute("result", dbResultSet);
            } else {
                notice = "There are no current mentorships.";
                request.setAttribute("notice", notice);
            }
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/list_mentorships.jsp");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("delete_mship")) {
            int mentorship_id = Integer.parseInt(request.getParameter("id"));
            Mentor mentor = new Mentor();
            if (mentor.delMentorship(mentorship_id)) {
                notice = "Mentorship successfully deleted.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=manage_mship");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "Error deleting the mentorship.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=manage_mship");
                dispatcher.forward(request, response);
                return;
            }
        } else if (action.equals("new_mship")) {
            Mentor mentor = new Mentor();
            ResultSet alumnis = null;
            ResultSet students = null;
            alumnis = mentor.getAlumnis();
            students = mentor.getStudents();
            request.setAttribute("alumni_result", alumnis);
            request.setAttribute("student_result", students);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/create_mship.jsp");
            dispatcher.forward(request, response);
            return;
        } else if (action.equals("create_mship")) {
            int student_id = Integer.parseInt(request.getParameter("student_id"));
            int alumni_id = Integer.parseInt(request.getParameter("alumni_id"));
            Mentor mentor = new Mentor();
            if (mentor.addMentorship(student_id, alumni_id)) {
                notice = "Mentorship successfully created.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin?action=manage_mship");
                dispatcher.forward(request, response);
                return;
            } else {
                notice = "There was an error creating the mentorship.";
                request.setAttribute("notice", notice);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/create_mship.jsp");
                dispatcher.forward(request, response);
                return;
            }
        }
    }
} </s>
<s>class temp {    private static void loadMappings(Configuration cfg) {
        try {
            Enumeration en = LoadingUtils.getResources(MAPPINGS_FILE);
            while (en.hasMoreElements()) {
                URL url = (URL) en.nextElement();
                logger.info("Found mapping module " + url.toExternalForm());
                InputStream inputStream = null;
                try {
                    inputStream = url.openStream();
                    HibConfiguration hm = loadModuleMappings(inputStream);
                    configureModuleMappings(cfg, hm.getSessionFactory());
                } catch (IOException e) {
                    logger.warn("Could not load mappings file \"" + url.toExternalForm() + "\"", e);
                } catch (JAXBException e) {
                    logger.warn("Unable to instantiate JAXBContext ", e);
                } finally {
                    try {
                        if (inputStream != null) inputStream.close();
                    } catch (IOException e) {
                        logger.debug(e);
                    }
                }
            }
        } catch (IOException e) {
            logger.warn("Could not find any mappings file hibernate.mappings.xml", e);
        }
    }
} </s>
<s>class temp {    public void _testConvertIntoOneFile() {
        File csvFile = new File("C:/DE311/solution_workspace/WorkbookTaglib/WorkbookTagDemoWebapp/src/main/resources/csv/google.csv");
        try {
            Charset guessedCharset = com.glaforge.i18n.io.CharsetToolkit.guessEncoding(csvFile, 4096);
            CSVReader reader = new CSVReader(new BufferedReader(new InputStreamReader(new FileInputStream(csvFile), guessedCharset)));
            Writer writer = new FileWriter("/temp/test.html");
            int nbLines = CsvConverterUtils.countLines(new BufferedReader(new FileReader(csvFile)));
            HtmlConverter conv = new HtmlConverter();
            conv.convert(reader, writer, nbLines);
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }
} </s>
<s>class temp {        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
} </s>
<s>class temp {    private void importSources() {
        InputOutput io = IOProvider.getDefault().getIO("Import Sources", false);
        io.select();
        PrintWriter pw = new PrintWriter(io.getOut());
        pw.println("Beginning transaction....");
        pw.println("Processing selected files:");
        String[][] selectedFiles = getSelectedFiles(pw);
        if (selectedFiles.length == 0) {
            pw.println("There are no files to process.");
        } else {
            pw.println(new StringBuilder("Importing ").append(selectedFiles.length).append(" files to ").append(group.getDisplayName()).append(" within project ").append(ProjectUtils.getInformation(project).getDisplayName()).toString());
            FileObject destFO = group.getRootFolder();
            try {
                String destRootDir = new File(destFO.getURL().toURI()).getAbsolutePath();
                if (destFO.canWrite()) {
                    for (String[] s : selectedFiles) {
                        try {
                            File parentDir = new File(new StringBuilder(destRootDir).append(File.separator).append(s[0]).toString());
                            if (!parentDir.exists()) {
                                parentDir.mkdirs();
                            }
                            File f = new File(new StringBuilder(destRootDir).append(s[0]).append(File.separator).append(s[1]).toString());
                            if (!f.exists()) {
                                f.createNewFile();
                            }
                            FileInputStream fin = null;
                            FileOutputStream fout = null;
                            byte[] b = new byte[1024];
                            int read = -1;
                            try {
                                File inputFile = new File(new StringBuilder(rootDir).append(s[0]).append(File.separator).append(s[1]).toString());
                                pw.print(new StringBuilder("\tImporting file:").append(inputFile.getAbsolutePath()).toString());
                                fin = new FileInputStream(inputFile);
                                fout = new FileOutputStream(f);
                                while ((read = fin.read(b)) != -1) {
                                    fout.write(b, 0, read);
                                }
                                pw.println(" ... done");
                                fin.close();
                                fout.close();
                            } catch (FileNotFoundException ex) {
                                DialogDisplayer.getDefault().notify(new NotifyDescriptor.Exception(ex, "Error while importing sources!"));
                            } catch (IOException ex) {
                                DialogDisplayer.getDefault().notify(new NotifyDescriptor.Exception(ex, "Error while importing sources!"));
                            } finally {
                                if (fin != null) {
                                    try {
                                        fin.close();
                                    } catch (IOException ex) {
                                        DialogDisplayer.getDefault().notify(new NotifyDescriptor.Exception(ex, "Error while importing sources!"));
                                    }
                                }
                                if (fout != null) {
                                    try {
                                        fout.close();
                                    } catch (IOException ex) {
                                    }
                                }
                            }
                        } catch (IOException ex) {
                            DialogDisplayer.getDefault().notify(new NotifyDescriptor.Exception(ex, "Error while importing sources!"));
                        }
                    }
                    pw.println("Import sources completed successfully.");
                } else {
                    pw.println("Cannot write to the destination directory." + " Please check the priviledges and try again.");
                    return;
                }
            } catch (FileStateInvalidException ex) {
                DialogDisplayer.getDefault().notify(new NotifyDescriptor.Exception(ex, "Error while importing sources!"));
                pw.println("Import failed!!");
            } catch (URISyntaxException ex) {
                DialogDisplayer.getDefault().notify(new NotifyDescriptor.Exception(ex, "Error while importing sources!"));
                pw.println("Import failed!!");
            }
        }
    }
} </s>
<s>class temp {    public static LicenseKey parseKey(String key) throws InvalidLicenseKeyException {
        final String f_key = key.trim();
        StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR);
        int tc = st.countTokens();
        int tc_name = tc - 9;
        try {
            final String product = st.nextToken();
            final String type = st.nextToken();
            final String loadStr = st.nextToken();
            final int load = Integer.parseInt(loadStr);
            final String lowMajorVersionStr = st.nextToken();
            final int lowMajorVersion = Integer.parseInt(lowMajorVersionStr);
            final String lowMinorVersionStr = st.nextToken();
            final double lowMinorVersion = Double.parseDouble("0." + lowMinorVersionStr);
            final String highMajorVersionStr = st.nextToken();
            final int highMajorVersion = Integer.parseInt(highMajorVersionStr);
            final String highMinorVersionStr = st.nextToken();
            final double highMinorVersion = Double.parseDouble("0." + highMinorVersionStr);
            String regName = "";
            for (int i = 0; i < tc_name; i++) regName += (i == 0 ? st.nextToken() : FIELD_SEPERATOR + st.nextToken());
            final String randomHexStr = st.nextToken();
            final String md5Str = st.nextToken();
            String subKey = f_key.substring(0, f_key.indexOf(md5Str) - 1);
            byte[] md5;
            MessageDigest md = null;
            md = MessageDigest.getInstance("MD5");
            md.update(subKey.getBytes());
            md.update(FIELD_SEPERATOR.getBytes());
            md.update(zuonicsPassword.getBytes());
            md5 = md.digest();
            String testKey = subKey + FIELD_SEPERATOR;
            for (int i = 0; i < md5.length; i++) testKey += Integer.toHexString(md5[i]).toUpperCase();
            if (!testKey.equals(f_key)) throw new InvalidLicenseKeyException("doesn't hash");
            final String f_regName = regName;
            return new LicenseKey() {

                public String getProduct() {
                    return product;
                }

                public String getType() {
                    return type;
                }

                public int getLoad() {
                    return load;
                }

                public String getRegName() {
                    return f_regName;
                }

                public double getlowVersion() {
                    return lowMajorVersion + lowMinorVersion;
                }

                public double getHighVersion() {
                    return highMajorVersion + highMinorVersion;
                }

                public String getRandomHexStr() {
                    return randomHexStr;
                }

                public String getMD5HexStr() {
                    return md5Str;
                }

                public String toString() {
                    return f_key;
                }

                public boolean equals(Object obj) {
                    if (obj.toString().equals(toString())) return true;
                    return false;
                }
            };
        } catch (Exception e) {
            throw new InvalidLicenseKeyException(e.getMessage());
        }
    }
} </s>
<s>class temp {    private void copyfile(File srcFile, File dstDir) throws FileNotFoundException, IOException {
        if (srcFile.isDirectory()) {
            File newDestDir = new File(dstDir, srcFile.getName());
            newDestDir.mkdir();
            String fileNameList[] = srcFile.list();
            for (int i = 0; i < fileNameList.length; i++) {
                File newSouceFile = new File(srcFile, fileNameList[i]);
                copyfile(newSouceFile, newDestDir);
            }
        } else {
            File newDestFile = new File(dstDir, srcFile.getName());
            FileInputStream in = new FileInputStream(srcFile);
            FileOutputStream out = new FileOutputStream(newDestFile);
            FileChannel inChannel = in.getChannel();
            FileChannel outChannel = out.getChannel();
            long i;
            Logger.log("copyFile before- copiedSize = " + copiedSize);
            for (i = 0; i < srcFile.length() - BLOCK_LENGTH; i += BLOCK_LENGTH) {
                synchronized (this) {
                    inChannel.transferTo(i, BLOCK_LENGTH, outChannel);
                    copiedSize += BLOCK_LENGTH;
                }
            }
            synchronized (this) {
                inChannel.transferTo(i, srcFile.length() - i, outChannel);
                copiedSize += srcFile.length() - i;
            }
            Logger.log("copyFile after copy- copiedSize = " + copiedSize + "srcFile.length = " + srcFile.length() + "diff = " + (copiedSize - srcFile.length()));
            in.close();
            out.close();
            outChannel = null;
            Logger.log("File copied.");
        }
    }
} </s>
<s>class temp {    private void Connect() throws NpsException {
        try {
            client = new FTPClient();
            client.connect(host.hostname, host.remoteport);
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                client = null;
                com.microfly.util.DefaultLog.error_noexception("FTP Server:" + host.hostname + "refused connection.");
                return;
            }
            client.login(host.uname, host.upasswd);
            client.enterLocalPassiveMode();
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            client.changeWorkingDirectory(host.remotedir);
        } catch (Exception e) {
            com.microfly.util.DefaultLog.error(e);
        }
    }
} </s>
<s>class temp {    protected final void loadLogFile(String filename) throws IOException {
        cleanUp(true, false);
        InputStream is = null;
        OutputStream os = null;
        File f = File.createTempFile("log", null);
        try {
            is = getClass().getResourceAsStream(filename);
            Assert.isTrue(is != null, "File not found: " + filename);
            os = new FileOutputStream(f);
            IOUtils.copy(is, os);
            setLogFile(f);
        } finally {
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
} </s>
<s>class temp {    private static String getTemplatePluginsXML(CommandLine commandLine) {
        String urlString = commandLine.getOptionValue(CMD_LINE_PLUGINSXMLTEMPLATE_OPTION);
        URL url = null;
        try {
            url = new URL(urlString);
        } catch (MalformedURLException ex) {
            throw new RuntimeException("Could not convert to URL: '" + urlString + "'", ex);
        }
        String templatePluginsXML = null;
        try {
            InputStream in = null;
            try {
                in = url.openStream();
                templatePluginsXML = IOUtils.toString(in);
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (IOException ex) {
            throw new RuntimeException("Could not load plugins metadata from: " + url.toExternalForm(), ex);
        }
        if (templatePluginsXML == null || templatePluginsXML.trim().length() == 0) {
            throw new RuntimeException("Template plugins.xml has no content: " + url.toExternalForm());
        }
        System.out.println("Template plugins XML:\t" + url.toExternalForm());
        return templatePluginsXML;
    }
} </s>
<s>class temp {    @TestTargetNew(level = TestLevel.ADDITIONAL, notes = "", method = "SecureCacheResponse", args = {  })
    public void test_additional() throws Exception {
        URL url = new URL("http://google.com");
        ResponseCache.setDefault(new TestResponseCache());
        HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();
        httpCon.setUseCaches(true);
        httpCon.connect();
        try {
            Thread.sleep(5000);
        } catch (Exception e) {
        }
        httpCon.disconnect();
    }
} </s>
<s>class temp {    public static void executa(String arquivo, String filial, String ip) {
        String drive = arquivo.substring(0, 2);
        if (drive.indexOf(":") == -1) drive = "";
        Properties p = Util.lerPropriedades(arquivo);
        String servidor = p.getProperty("servidor");
        String impressora = p.getProperty("fila");
        String arqRel = new String(drive + p.getProperty("arquivo"));
        String copias = p.getProperty("copias");
        if (filial.equalsIgnoreCase(servidor)) {
            Socket s = null;
            int tentativas = 0;
            boolean conectado = false;
            while (!conectado) {
                try {
                    tentativas++;
                    System.out.println("Tentando conectar " + ip + " (" + tentativas + ")");
                    s = new Socket(ip, 7000);
                    conectado = s.isConnected();
                } catch (ConnectException ce) {
                    System.err.println(ce.getMessage());
                    System.err.println(ce.getCause());
                } catch (UnknownHostException uhe) {
                    System.err.println(uhe.getMessage());
                } catch (IOException ioe) {
                    System.err.println(ioe.getMessage());
                }
            }
            FileInputStream in = null;
            BufferedOutputStream out = null;
            try {
                in = new FileInputStream(new File(arqRel));
                out = new BufferedOutputStream(new GZIPOutputStream(s.getOutputStream()));
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
            } catch (IOException e3) {
                e3.printStackTrace();
            }
            String arqtr = arqRel.substring(2);
            System.out.println("Proximo arquivo: " + arqRel + " ->" + arqtr);
            while (arqtr.length() < 30) arqtr += " ";
            while (impressora.length() < 30) impressora += " ";
            byte aux[] = new byte[30];
            byte cop[] = new byte[2];
            try {
                aux = arqtr.getBytes("UTF8");
                out.write(aux);
                aux = impressora.getBytes("UTF8");
                out.write(aux);
                cop = copias.getBytes("UTF8");
                out.write(cop);
                out.flush();
            } catch (UnsupportedEncodingException e2) {
                e2.printStackTrace();
            } catch (IOException e2) {
                e2.printStackTrace();
            }
            byte b[] = new byte[1024];
            int nBytes;
            try {
                while ((nBytes = in.read(b)) != -1) out.write(b, 0, nBytes);
                out.flush();
                out.close();
                in.close();
                s.close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            System.out.println("Arquivo " + arqRel + " foi transmitido. \n\n");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            SimpleDateFormat dfArq = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat dfLog = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String arqLog = "log" + filial + dfArq.format(new Date()) + ".txt";
            PrintWriter pw = null;
            try {
                pw = new PrintWriter(new FileWriter(arqLog, true));
            } catch (IOException e) {
                e.printStackTrace();
            }
            pw.println("Arquivo:  " + arquivo + "  " + dfLog.format(new Date()));
            pw.flush();
            pw.close();
            File f = new File(arquivo);
            while (!f.delete()) {
                System.out.println("Erro apagando " + arquivo);
            }
        }
    }
} </s>
<s>class temp {    public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        URL url = new URL(pURL);
        int port = url.getPort();
        if (-1 == port) {
            port = url.getDefaultPort();
        }
        if (url.getProtocol().equals(HTTPS_PROTOCOL)) {
            Protocol httpsProtocol = new Protocol(HTTPS_PROTOCOL, new EasySSLProtocolSocketFactory(), port);
            Protocol.registerProtocol(HTTPS_PROTOCOL, httpsProtocol);
        }
        HttpClient httpClient = new HttpClient();
        httpClient.getParams().setParameter("http.socket.timeout", HTTP_SOCKET_TIMEOUT);
        HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL);
        if (null != pUserName && null != pPassword) {
            httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(pUserName, pPassword));
        }
        try {
            httpClient.executeMethod(httpMethod);
            if (null != pResponseOutputStream) {
                IOUtils.copy(httpMethod.getResponseBodyAsStream(), pResponseOutputStream);
            }
            return httpMethod.getResponseBodyAsStream();
        } catch (Exception e) {
            throw (e);
        } finally {
            httpMethod.releaseConnection();
        }
    }
} </s>
<s>class temp {    public static SubstanceSkin.ColorSchemes getColorSchemes(URL url) {
        List<SubstanceColorScheme> schemes = new ArrayList<SubstanceColorScheme>();
        BufferedReader reader = null;
        Color ultraLight = null;
        Color extraLight = null;
        Color light = null;
        Color mid = null;
        Color dark = null;
        Color ultraDark = null;
        Color foreground = null;
        String name = null;
        ColorSchemeKind kind = null;
        boolean inColorSchemeBlock = false;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while (true) {
                String line = reader.readLine();
                if (line == null) break;
                line = line.trim();
                if (line.length() == 0) continue;
                if (line.startsWith("#")) {
                    continue;
                }
                if (line.indexOf("{") >= 0) {
                    if (inColorSchemeBlock) {
                        throw new IllegalArgumentException("Already in color scheme definition");
                    }
                    inColorSchemeBlock = true;
                    name = line.substring(0, line.indexOf("{")).trim();
                    continue;
                }
                if (line.indexOf("}") >= 0) {
                    if (!inColorSchemeBlock) {
                        throw new IllegalArgumentException("Not in color scheme definition");
                    }
                    inColorSchemeBlock = false;
                    if ((name == null) || (kind == null) || (ultraLight == null) || (extraLight == null) || (light == null) || (mid == null) || (dark == null) || (ultraDark == null) || (foreground == null)) {
                        throw new IllegalArgumentException("Incomplete specification");
                    }
                    Color[] colors = new Color[] { ultraLight, extraLight, light, mid, dark, ultraDark, foreground };
                    if (kind == ColorSchemeKind.LIGHT) {
                        schemes.add(getLightColorScheme(name, colors));
                    } else {
                        schemes.add(getDarkColorScheme(name, colors));
                    }
                    name = null;
                    kind = null;
                    ultraLight = null;
                    extraLight = null;
                    light = null;
                    mid = null;
                    dark = null;
                    ultraDark = null;
                    foreground = null;
                    continue;
                }
                String[] split = line.split("=");
                if (split.length != 2) {
                    throw new IllegalArgumentException("Unsupported format in line " + line);
                }
                String key = split[0].trim();
                String value = split[1].trim();
                if ("kind".equals(key)) {
                    if (kind == null) {
                        if ("Light".equals(value)) {
                            kind = ColorSchemeKind.LIGHT;
                            continue;
                        }
                        if ("Dark".equals(value)) {
                            kind = ColorSchemeKind.DARK;
                            continue;
                        }
                        throw new IllegalArgumentException("Unsupported format in line " + line);
                    }
                    throw new IllegalArgumentException("'kind' should only be defined once");
                }
                if ("colorUltraLight".equals(key)) {
                    if (ultraLight == null) {
                        ultraLight = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException("'ultraLight' should only be defined once");
                }
                if ("colorExtraLight".equals(key)) {
                    if (extraLight == null) {
                        extraLight = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException("'extraLight' should only be defined once");
                }
                if ("colorLight".equals(key)) {
                    if (light == null) {
                        light = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException("'light' should only be defined once");
                }
                if ("colorMid".equals(key)) {
                    if (mid == null) {
                        mid = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException("'mid' should only be defined once");
                }
                if ("colorDark".equals(key)) {
                    if (dark == null) {
                        dark = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException("'dark' should only be defined once");
                }
                if ("colorUltraDark".equals(key)) {
                    if (ultraDark == null) {
                        ultraDark = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException("'ultraDark' should only be defined once");
                }
                if ("colorForeground".equals(key)) {
                    if (foreground == null) {
                        foreground = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException("'foreground' should only be defined once");
                }
                throw new IllegalArgumentException("Unsupported format in line " + line);
            }
            ;
        } catch (IOException ioe) {
            throw new IllegalArgumentException(ioe);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ioe) {
                }
            }
        }
        return new SubstanceSkin.ColorSchemes(schemes);
    }
} </s>
<s>class temp {    @Test
    public void testCarResource() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        System.out.println("**** CarResource Via @MatrixParam ***");
        HttpGet get = new HttpGet("http://localhost:9095/cars/matrix/mercedes/e55;color=black/2006");
        HttpResponse response = client.execute(get);
        Assert.assertEquals(200, response.getStatusLine().getStatusCode());
        BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line = reader.readLine();
        while (line != null) {
            System.out.println(line);
            line = reader.readLine();
        }
        System.out.println("**** CarResource Via PathSegment ***");
        get = new HttpGet("http://localhost:9095/cars/segment/mercedes/e55;color=black/2006");
        response = client.execute(get);
        Assert.assertEquals(200, response.getStatusLine().getStatusCode());
        reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        line = reader.readLine();
        while (line != null) {
            System.out.println(line);
            line = reader.readLine();
        }
        System.out.println("**** CarResource Via PathSegments ***");
        get = new HttpGet("http://localhost:9095/cars/segments/mercedes/e55/amg/year/2006");
        response = client.execute(get);
        Assert.assertEquals(200, response.getStatusLine().getStatusCode());
        reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        line = reader.readLine();
        while (line != null) {
            System.out.println(line);
            line = reader.readLine();
        }
        System.out.println("**** CarResource Via PathSegment ***");
        get = new HttpGet("http://localhost:9095/cars/uriinfo/mercedes/e55;color=black/2006");
        response = client.execute(get);
        Assert.assertEquals(200, response.getStatusLine().getStatusCode());
        reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        line = reader.readLine();
        while (line != null) {
            System.out.println(line);
            line = reader.readLine();
        }
        System.out.println();
        System.out.println();
    }
} </s>
<s>class temp {    @Test
    public void testCustomerResource() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        System.out.println("**** CustomerResource No Query params ***");
        HttpGet get = new HttpGet("http://localhost:9095/customers");
        HttpResponse response = client.execute(get);
        Assert.assertEquals(200, response.getStatusLine().getStatusCode());
        BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line = reader.readLine();
        while (line != null) {
            System.out.println(line);
            line = reader.readLine();
        }
        System.out.println("**** CustomerResource With Query params ***");
        get = new HttpGet("http://localhost:9095/customers?start=1&size=3");
        response = client.execute(get);
        Assert.assertEquals(200, response.getStatusLine().getStatusCode());
        reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        line = reader.readLine();
        while (line != null) {
            System.out.println(line);
            line = reader.readLine();
        }
        System.out.println("**** CustomerResource With UriInfo and Query params ***");
        get = new HttpGet("http://localhost:9095/customers/uriinfo?start=2&size=2");
        response = client.execute(get);
        Assert.assertEquals(200, response.getStatusLine().getStatusCode());
        reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        line = reader.readLine();
        while (line != null) {
            System.out.println(line);
            line = reader.readLine();
        }
    }
} </s>
<s>class temp {    public static String digestMd5(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException("文字列がNull、または空です。");
        }
        MessageDigest md5;
        byte[] enclyptedHash;
        try {
            md5 = MessageDigest.getInstance("MD5");
            md5.update(str.getBytes());
            enclyptedHash = md5.digest();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
            return "";
        }
        return bytesToHexString(enclyptedHash);
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        int[] mas = { 5, 10, 20, -30, 55, -60, 9, -40, -20 };
        int next;
        for (int a = 0; a < mas.length; a++) {
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    next = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = next;
                }
            }
        }
        for (int i = 0; i < mas.length; i++) System.out.print(" " + mas[i]);
    }
} </s>
<s>class temp {    private byte[] getResponseFromHttp(byte[] ocspPackage, URL url) throws IOException {
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setDoOutput(true);
        try {
            con.setRequestMethod(OCSPLoginModule.POST);
        } catch (ProtocolException e) {
            throw new IOException(e.getMessage(), e);
        }
        con.setRequestProperty(OCSPLoginModule.CONTENT_TYPE, OCSPLoginModule.APPLICATION_OCSP_REQUEST);
        OutputStream os = null;
        try {
            os = con.getOutputStream();
            os.write(ocspPackage);
        } catch (IOException e) {
            logger.error(e.getMessage());
            throw e;
        } finally {
            os.close();
        }
        InputStream in = null;
        byte[] respBytes = null;
        ByteArrayOutputStream baos = null;
        try {
            baos = new ByteArrayOutputStream();
            in = con.getInputStream();
            int b = in.read();
            while (b != -1) {
                baos.write(b);
                b = in.read();
            }
            baos.flush();
        } finally {
            in.close();
            con.disconnect();
        }
        respBytes = baos.toByteArray();
        return respBytes;
    }
} </s>
<s>class temp {    public static String addTag(String tag_id, String tag_description, String tag_text, String tag_author, String application_code) {
        String so = OctopusErrorMessages.UNKNOWN_ERROR;
        if (tag_id == null || tag_id.trim().equals("")) {
            return OctopusErrorMessages.TAG_ID_CANT_BE_EMPTY;
        }
        if (tag_id.trim().equals(application_code)) {
            return OctopusErrorMessages.TAG_ID_TOO_SHORT;
        }
        if (!StringUtil.isAlphaNumerical(StringUtil.replace(StringUtil.replace(tag_id, "-", ""), "_", ""))) {
            return OctopusErrorMessages.TAG_ID_MUST_BE_ALPHANUMERIC;
        }
        if (!tag_id.startsWith(application_code)) {
            return OctopusErrorMessages.TAG_ID_MUST_START + " " + application_code;
        }
        String tag_exist = exist(tag_id);
        if (!tag_exist.equals(OctopusErrorMessages.DOESNT_ALREADY_EXIST)) {
            return tag_exist;
        }
        if (tag_description != null && !tag_description.trim().equals("")) {
            tag_description = StringUtil.replace(tag_description, "\n", " ");
            tag_description = StringUtil.replace(tag_description, "\r", " ");
            tag_description = StringUtil.replace(tag_description, "\t", " ");
            tag_description = StringUtil.replace(tag_description, "<", "&#60;");
            tag_description = StringUtil.replace(tag_description, ">", "&#62;");
            tag_description = StringUtil.replace(tag_description, "'", "&#39;");
        } else {
            return OctopusErrorMessages.DESCRIPTION_TEXT_EMPTY;
        }
        if (tag_text != null && !tag_text.trim().equals("")) {
            tag_text = StringUtil.replace(tag_text, "\n", " ");
            tag_text = StringUtil.replace(tag_text, "\r", " ");
            tag_text = StringUtil.replace(tag_text, "\t", " ");
            tag_text = StringUtil.replace(tag_text, "<", "&#60;");
            tag_text = StringUtil.replace(tag_text, ">", "&#62;");
            tag_text = StringUtil.replace(tag_text, "'", "&#39;");
        } else {
            return OctopusErrorMessages.TRANSLATION_TEXT_EMPTY;
        }
        if (tag_author == null || tag_author.trim().equals("")) {
            return OctopusErrorMessages.MAIN_PARAMETER_EMPTY;
        }
        DBConnection theConnection = null;
        try {
            theConnection = DBServiceManager.allocateConnection();
            theConnection.setAutoCommit(false);
            String query = "INSERT INTO tr_tag (tr_tag_id,tr_tag_applicationid,tr_tag_info,tr_tag_creationdate) ";
            query += "VALUES (?,?,'" + tag_description + "',getdate())";
            PreparedStatement state = theConnection.prepareStatement(query);
            state.setString(1, tag_id);
            state.setString(2, application_code);
            state.executeUpdate();
            String query2 = "INSERT INTO tr_translation (tr_translation_trtagid, tr_translation_language, tr_translation_text, tr_translation_version, tr_translation_lud, tr_translation_lun ) ";
            query2 += "VALUES(?,'" + OctopusApplication.MASTER_LANGUAGE + "','" + tag_text + "',0,getdate(),?)";
            PreparedStatement state2 = theConnection.prepareStatement(query2);
            state2.setString(1, tag_id);
            state2.setString(2, tag_author);
            state2.executeUpdate();
            theConnection.commit();
            so = OctopusErrorMessages.ACTION_DONE;
        } catch (SQLException e) {
            try {
                theConnection.rollback();
            } catch (SQLException ex) {
            }
            so = OctopusErrorMessages.ERROR_DATABASE;
        } finally {
            if (theConnection != null) {
                try {
                    theConnection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
                theConnection.release();
            }
        }
        return so;
    }
} </s>
<s>class temp {    public static String deleteTag(String tag_id) {
        String so = OctopusErrorMessages.UNKNOWN_ERROR;
        if (tag_id == null || tag_id.trim().equals("")) {
            return OctopusErrorMessages.TAG_ID_CANT_BE_EMPTY;
        }
        DBConnection theConnection = null;
        try {
            theConnection = DBServiceManager.allocateConnection();
            theConnection.setAutoCommit(false);
            String query = "DELETE FROM tr_translation WHERE tr_translation_trtagid=?";
            PreparedStatement state = theConnection.prepareStatement(query);
            state.setString(1, tag_id);
            state.executeUpdate();
            String query2 = "DELETE FROM tr_tag WHERE tr_tag_id=? ";
            PreparedStatement state2 = theConnection.prepareStatement(query2);
            state2.setString(1, tag_id);
            state2.executeUpdate();
            theConnection.commit();
            so = OctopusErrorMessages.ACTION_DONE;
        } catch (SQLException e) {
            try {
                theConnection.rollback();
            } catch (SQLException ex) {
            }
            so = OctopusErrorMessages.ERROR_DATABASE;
        } finally {
            if (theConnection != null) {
                try {
                    theConnection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
                theConnection.release();
            }
        }
        return so;
    }
} </s>
<s>class temp {    private String getMd5(String base64image) {
        String token = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(base64image.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            token = hash.toString(16);
        } catch (NoSuchAlgorithmException nsae) {
        }
        return token;
    }
} </s>
<s>class temp {    private String hash(String message) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA1");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError("Can't find the SHA1 algorithm in the java.security package");
        }
        String saltString = String.valueOf(12345);
        md.update(saltString.getBytes());
        md.update(message.getBytes());
        byte[] digestBytes = md.digest();
        StringBuffer digestSB = new StringBuffer();
        for (int i = 0; i < digestBytes.length; i++) {
            int lowNibble = digestBytes[i] & 0x0f;
            int highNibble = (digestBytes[i] >> 4) & 0x0f;
            digestSB.append(Integer.toHexString(highNibble));
            digestSB.append(Integer.toHexString(lowNibble));
        }
        String digestStr = digestSB.toString().trim();
        return digestStr;
    }
} </s>
<s>class temp {    protected int doExecuteUpdate(PreparedStatement statement) throws SQLException {
        connection.setAutoCommit(isAutoCommit());
        int rs = -1;
        try {
            lastError = null;
            rs = statement.executeUpdate();
            if (!isAutoCommit()) connection.commit();
        } catch (Exception ex) {
            if (!isAutoCommit()) {
                lastError = ex;
                connection.rollback();
                LogUtils.log(Level.SEVERE, "Transaction is being rollback. Error: " + ex.toString());
            }
        } finally {
            if (statement != null) statement.close();
        }
        return rs;
    }
} </s>
<s>class temp {    protected int doExecuteInsert(PreparedStatement statement, Table data) throws SQLException {
        ResultSet rs = null;
        int result = -1;
        try {
            lastError = null;
            result = statement.executeUpdate();
            if (!isAutoCommit()) connection.commit();
            rs = statement.getGeneratedKeys();
            while (rs.next()) {
                FieldUtils.setValue(data, data.key, rs.getObject(1));
            }
        } catch (SQLException ex) {
            if (!isAutoCommit()) {
                lastError = ex;
                connection.rollback();
                LogUtils.log(Level.SEVERE, "Transaction is being rollback. Error: " + ex.toString());
            } else {
                throw ex;
            }
        } finally {
            if (statement != null) statement.close();
            if (rs != null) rs.close();
        }
        return result;
    }
} </s>
<s>class temp {    @Override
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        boolean askRestart = false;
        if (cmd == null) return;
        if (cmd.equals("GRAPHVIZ")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter("exe"));
            chooser.setDialogTitle("Open exe file");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, "GRAPHVIZ", "");
                graphVizPath.setText("");
                owner.mToolsAuxGraphviz.setEnabled(false);
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, "GRAPHVIZ", "");
                graphVizPath.setText("");
                owner.mToolsAuxGraphviz.setEnabled(false);
                return;
            }
            Suku.kontroller.putPref(owner, "GRAPHVIZ", filename);
            graphVizPath.setText(filename);
            owner.mToolsAuxGraphviz.setEnabled(true);
        }
        if (cmd.equals("IMAGEMAGICK")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter("exe"));
            chooser.setDialogTitle("Open exe file");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, "IMAGEMAGICK", "");
                imageMagickPath.setText("");
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, "IMAGEMAGICK", "");
                imageMagickPath.setText("");
                return;
            }
            Suku.kontroller.putPref(owner, "IMAGEMAGICK", filename);
            imageMagickPath.setText(filename);
        }
        if (cmd.equals("FINFAMILY.XLS")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter("xls"));
            chooser.setDialogTitle("Open xls file");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, "FINFAMILY.XLS", "");
                excelPath.setText("");
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, "FINFAMILY.XLS", "");
                excelPath.setText("");
                return;
            }
            Suku.kontroller.putPref(owner, "FINFAMILY.XLS", filename);
            excelPath.setText(filename);
            missingKeys = checkForMissingNames(filename);
        }
        if (cmd.equals(Resurses.OK)) {
            String newPath = Suku.kontroller.getPref(owner, "FINFAMILY.XLS", "");
            if (!newPath.equals(exPath)) {
                askRestart = true;
                Suku.setFinFamilyXls(newPath);
            }
            String input = (String) serverUrl.getSelectedItem();
            if (input == null) {
                input = "";
            }
            if (input.isEmpty()) {
                Suku.kontroller.putPref(owner, "SERVERURL", "");
                if (!originUrl.isEmpty()) {
                    askRestart = true;
                }
            } else {
                URL url;
                String resp = null;
                try {
                    url = new URL(input + "SukuServlet");
                    HttpURLConnection uc = (HttpURLConnection) url.openConnection();
                    int resu = uc.getResponseCode();
                    if (resu == 200) {
                        byte buff[] = new byte[1024];
                        InputStream in = uc.getInputStream();
                        int len = in.read(buff);
                        resp = new String(buff, 0, len);
                        uc.disconnect();
                    }
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
                if (resp != null && resp.toLowerCase().startsWith("finfamily")) {
                    Suku.kontroller.putPref(owner, "SERVERURL", input);
                    if (!input.equals(originUrl)) {
                        askRestart = true;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, Resurses.getString("SERVER_ERROR"), Resurses.getString(Resurses.SUKU), JOptionPane.ERROR_MESSAGE);
                }
            }
            int newLoca = loca.getSelectedIndex();
            Suku.kontroller.putPref(owner, Resurses.LOCALE, locas[newLoca]);
            if (!originLanguage.equals(locas[newLoca])) {
                askRestart = true;
            }
            int newLang = repolang.getSelectedIndex();
            if (newLang >= 0) {
                Suku.kontroller.putPref(owner, Resurses.REPOLANG, Suku.getRepoLanguage(newLang, true));
                Resurses.setLanguage(Suku.getRepoLanguage(newLang, true));
            }
            int imageScaler = imageScaling.getSelectedIndex();
            Suku.kontroller.putPref(owner, "SCALE_IMAGE", "" + imageScaler);
            owner.setImageScalerIndex(imageScaler);
            int seleId = defaultCountryCode.getSelectedIndex();
            if (seleId >= 0) {
                selectedCc = ccodes[seleId];
            }
            try {
                Resurses.setDefaultCountry(selectedCc);
            } catch (SukuException e1) {
                owner.setStatus(e1.getMessage());
            }
            int newDateIndex = dateFormat.getSelectedIndex();
            Suku.kontroller.putPref(owner, Resurses.DATEFORMAT, dateCodes[newDateIndex]);
            Resurses.setDateFormat(dateCodes[newDateIndex]);
            Utils.resetSukuModel();
            boolean openStreetMap = useOpenStreetMap.isSelected();
            Suku.kontroller.putPref(owner, "USE_OPEN_STREETMAP", "" + openStreetMap);
            String fntSize = dbFontSize.getText();
            Suku.kontroller.putPref(owner, "DB_VIEW_FONTSIZE", fntSize);
            String lf = lfNames[lookAndFeel.getSelectedIndex()];
            Suku.kontroller.putPref(owner, "LOOK_AND_FEEL", lf);
            int lfIdx = -1;
            for (int i = 0; i < lafInfo.length; i++) {
                if (lafInfo[i].getName().equalsIgnoreCase(lf)) {
                    lfIdx = i;
                    break;
                }
            }
            try {
                if (lfIdx < 0) {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } else {
                    UIManager.setLookAndFeel(lafInfo[lfIdx].getClassName());
                }
                SwingUtilities.updateComponentTreeUI(owner);
            } catch (Exception e1) {
                logger.log(Level.WARNING, "look_and_feel", e1);
            }
            setVisible(false);
            if (askRestart) {
                if (missingKeys != null && !missingKeys.isEmpty()) {
                    SukuPad pad = new SukuPad(this, missingKeys);
                    pad.setVisible(true);
                }
                JOptionPane.showMessageDialog(this, Resurses.getString("RESTART_FINFAMILY"), Resurses.getString(Resurses.SUKU), JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
} </s>
<s>class temp {    public static String CreateHashValue(Connection dbConnection) throws Exception {
        String sResult = null;
        if (dbConnection == null) throw new Exception("Connection object is null...");
        HashDBState.m_oLogger.debug("Start creating hash from database object.");
        ArrayList aStatementList = new ArrayList();
        StringBuffer aResults = new StringBuffer();
        StringBuffer aHashValue = new StringBuffer();
        HashDBState.fillStatementList(aStatementList, dbConnection);
        if ((aStatementList != null) && (aStatementList.size() > 0)) {
            Iterator it = aStatementList.iterator();
            while (it.hasNext()) {
                String sCurStatement = (String) it.next();
                HashDBState.addTableContent(aResults, sCurStatement, dbConnection);
            }
        } else {
            throw new Exception("No statements generated... aborting hashing");
        }
        try {
            dbConnection.commit();
        } catch (SQLException e) {
            m_oLogger.error("Error while committing hash statements: " + e.getMessage(), e);
        }
        MessageDigest oSHA1 = MessageDigest.getInstance("SHA-1");
        oSHA1.reset();
        oSHA1.update(aResults.toString().getBytes());
        byte[] aMessageBytes = oSHA1.digest();
        if ((aMessageBytes != null) && (aMessageBytes.length > 0)) {
            for (int iCurByte = 0; iCurByte < aMessageBytes.length; iCurByte++) {
                aHashValue.append(HashDBState.toHexString(aMessageBytes[iCurByte]));
            }
        }
        sResult = aHashValue.toString();
        HashDBState.m_oLogger.debug("Hashvalue of database is: " + sResult);
        return sResult;
    }
} </s>
<s>class temp {    public void copyFileFromLocalMachineToRemoteMachine(InputStream source, File destination) throws Exception {
        String fileName = destination.getPath();
        File f = new File(getFtpServerHome(), "" + System.currentTimeMillis());
        f.deleteOnExit();
        org.apache.commons.io.IOUtils.copy(source, new FileOutputStream(f));
        remoteHostClient.setAscii(isAscii());
        remoteHostClient.setPromptOn(isPrompt());
        remoteHostClient.copyFileFromLocalMachineToRemoteClient(f.getName(), fileName);
    }
} </s>
<s>class temp {    protected String getHashCode(String value) {
        if (log.isDebugEnabled()) log.debug("getHashCode(...) -> begin");
        String retVal = null;
        try {
            MessageDigest mdAlgorithm = MessageDigest.getInstance("MD5");
            mdAlgorithm.update(value.getBytes());
            byte[] digest = mdAlgorithm.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < digest.length; i++) {
                sb.append(this.toHexString(digest[i]));
            }
            retVal = sb.toString();
            if (log.isDebugEnabled()) log.debug("getHashCode(...) -> hashcode = " + retVal);
        } catch (Exception e) {
            log.error("getHashCode(...) -> error occured generating hashcode ", e);
        }
        if (log.isDebugEnabled()) log.debug("getHashCode(...) -> end");
        return retVal;
    }
} </s>
<s>class temp {    private void doLogin() {
        try {
            println("Logging in as '" + username.getText() + "'");
            URL url = new URL("http://" + hostname + "/migrate");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(URLEncoder.encode("login", "UTF-8") + "=" + encodeCredentials());
            wr.flush();
            BufferedInputStream in = new BufferedInputStream(conn.getInputStream());
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(in);
            Element root = doc.getDocumentElement();
            in.close();
            if (root.getAttribute("success").equals("false")) {
                println("Login Failed: " + getTextContent(root));
                JOptionPane.showMessageDialog(this, "Login Failed: " + getTextContent(root), "Login Failed", JOptionPane.ERROR_MESSAGE);
            } else {
                token = root.hasAttribute("token") ? root.getAttribute("token") : null;
                if (token != null) {
                    startImport();
                }
            }
        } catch (Exception e) {
            ErrorReporter.showError(e, this);
            println(e.toString());
        }
    }
} </s>
<s>class temp {    public boolean addTextGroup(String key, URL url) {
        if (_textGroups.contains(key)) return false;
        String s;
        Hashtable tg = new Hashtable();
        String sGroupKey = "default";
        String sGroup[];
        Vector vGroup = new Vector();
        int cntr;
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((s = in.readLine()) != null) {
                if (s.startsWith("[")) {
                    if (vGroup.size() > 0) {
                        sGroup = new String[vGroup.size()];
                        for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr);
                        tg.put(sGroupKey, sGroup);
                        vGroup.removeAllElements();
                    }
                    sGroupKey = s.substring(1, s.indexOf(']'));
                } else {
                    vGroup.addElement(s);
                }
            }
            if (vGroup.size() > 0) {
                sGroup = new String[vGroup.size()];
                for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr);
                tg.put(sGroupKey, sGroup);
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println("Error reading file for " + key);
            System.err.println(ioe.getMessage());
            return false;
        }
        _textGroups.put(key, tg);
        return true;
    }
} </s>
<s>class temp {    private IMolecule readMolecule() throws Exception {
        String xpath = "";
        if (index.equals("ichi")) {
            xpath = URLEncoder.encode("//molecule[./identifier/basic='" + query + "']", UTF8);
        } else if (index.equals("kegg")) {
            xpath = URLEncoder.encode("//molecule[./@name='" + query + "' and ./@dictRef='KEGG']", UTF8);
        } else if (index.equals("nist")) {
            xpath = URLEncoder.encode("//molecule[../@id='" + query + "']", UTF8);
        } else {
            logger.error("Did not recognize index type: " + index);
            return null;
        }
        String colname = URLEncoder.encode("/" + this.collection, UTF8);
        logger.info("Doing query: " + xpath + " in collection " + colname);
        URL url = new URL("http://" + server + "/Bob/QueryXindice");
        logger.info("Connection to server: " + url.toString());
        URLConnection connection = url.openConnection();
        connection.setDoOutput(true);
        PrintWriter out = new PrintWriter(connection.getOutputStream());
        out.print("detailed=on");
        out.print("&");
        out.print("xmlOnly=on");
        out.print("&");
        out.print("colName=" + colname);
        out.print("&");
        out.print("xpathString=" + xpath);
        out.print("&");
        out.println("query=Query");
        out.close();
        InputStream stream = connection.getInputStream();
        BufferedReader in = new BufferedReader(new InputStreamReader(stream));
        in.mark(1000000);
        in.readLine();
        String comment = in.readLine();
        logger.debug("The comment is: " + comment);
        Pattern p = Pattern.compile("<!-- There are (\\d{1,6}) results! -->");
        Matcher match = p.matcher(comment);
        if (match.find()) {
            resultNum = match.group(1);
        } else {
            resultNum = "0";
        }
        logger.debug("The number of result is " + resultNum);
        in.reset();
        CMLReader reader = new CMLReader(stream);
        ChemFile cf = (ChemFile) reader.read((ChemObject) new ChemFile());
        logger.debug("#sequences: " + cf.getChemSequenceCount());
        IMolecule m = null;
        if (cf.getChemSequenceCount() > 0) {
            org.openscience.cdk.interfaces.IChemSequence chemSequence = cf.getChemSequence(0);
            logger.debug("#models in sequence: " + chemSequence.getChemModelCount());
            if (chemSequence.getChemModelCount() > 0) {
                org.openscience.cdk.interfaces.IChemModel chemModel = chemSequence.getChemModel(0);
                org.openscience.cdk.interfaces.IMoleculeSet setOfMolecules = chemModel.getMoleculeSet();
                logger.debug("#mols in model: " + setOfMolecules.getMoleculeCount());
                if (setOfMolecules.getMoleculeCount() > 0) {
                    m = setOfMolecules.getMolecule(0);
                } else {
                    logger.warn("No molecules in the model");
                }
            } else {
                logger.warn("No models in the sequence");
            }
        } else {
            logger.warn("No sequences in the file");
        }
        in.close();
        return m;
    }
} </s>
<s>class temp {    Object onSuccess() {
        this.mErrorExist = true;
        this.mErrorMdp = true;
        if (this.mNewMail.equals(mClient.getEmail()) || !this.mNewMail.equals(mClient.getEmail()) && !mClientManager.exists(this.mNewMail)) {
            this.mErrorExist = false;
            if (mNewMdp != null && mNewMdpConfirm != null) {
                if (this.mNewMdp.equals(this.mNewMdpConfirm)) {
                    this.mErrorMdp = false;
                    MessageDigest sha1Instance;
                    try {
                        sha1Instance = MessageDigest.getInstance("SHA1");
                        sha1Instance.reset();
                        sha1Instance.update(this.mNewMdp.getBytes());
                        byte[] digest = sha1Instance.digest();
                        BigInteger bigInt = new BigInteger(1, digest);
                        String vHashPassword = bigInt.toString(16);
                        mClient.setMdp(vHashPassword);
                    } catch (NoSuchAlgorithmException e) {
                        mLogger.error(e.getMessage(), e);
                    }
                }
            } else {
                this.mErrorMdp = false;
            }
            if (!this.mErrorMdp) {
                mClient.setAdresse(this.mNewAdresse);
                mClient.setEmail(this.mNewMail);
                mClient.setNom(this.mNewNom);
                mClient.setPrenom((this.mNewPrenom != null ? this.mNewPrenom : ""));
                Client vClient = new Client(mClient);
                mClientManager.save(vClient);
                mComponentResources.discardPersistentFieldChanges();
                return "Client/List";
            }
        }
        return errorZone.getBody();
    }
} </s>
<s>class temp {    public void testCodingBeyondContentLimitFromFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        File tmpFile = File.createTempFile("testFile", "txt");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.write("stuff;");
        wrtout.write("more stuff; and a lot more stuff");
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        String s = baos.toString("US-ASCII");
        assertTrue(encoder.isCompleted());
        assertEquals("stuff;more stuff", s);
        tmpFile.delete();
    }
} </s>
<s>class temp {    public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap("stuff;"));
        File tmpFile = File.createTempFile("testFile", "txt");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap("more stuff"));
        String s = baos.toString("US-ASCII");
        assertTrue(encoder.isCompleted());
        assertEquals("stuff;more stuff", s);
        tmpFile.delete();
    }
} </s>
<s>class temp {    public void testCodingCompletedFromFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 5);
        encoder.write(wrap("stuff"));
        File tmpFile = File.createTempFile("testFile", "txt");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.write("more stuff");
        wrtout.flush();
        wrtout.close();
        try {
            FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
            encoder.transfer(fchannel, 0, 10);
            fail("IllegalStateException should have been thrown");
        } catch (IllegalStateException ex) {
        } finally {
            tmpFile.delete();
        }
    }
} </s>
<s>class temp {    public void testCodingFromFileSmaller() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        File tmpFile = File.createTempFile("testFile", "txt");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.write("stuff;");
        wrtout.write("more stuff;");
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        String s = baos.toString("US-ASCII");
        assertTrue(encoder.isCompleted());
        assertEquals("stuff;more stuff", s);
        tmpFile.delete();
    }
} </s>
<s>class temp {    protected void sort(double[] a) throws Exception {
        for (int i = a.length - 1; i >= 0; i--) {
            boolean swapped = false;
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    double d = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = d;
                    swapped = true;
                }
            }
            if (!swapped) return;
        }
    }
} </s>
<s>class temp {    protected Class findClass(String name) throws ClassNotFoundException {
        String classFile = name.replace('.', '/') + ".class";
        InputStream classInputStream = null;
        if (this.extensionJars != null) {
            for (int i = 0; i < this.extensionJars.length; i++) {
                JarFile extensionJar = this.extensionJars[i];
                JarEntry jarEntry = extensionJar.getJarEntry(classFile);
                if (jarEntry != null) {
                    try {
                        classInputStream = extensionJar.getInputStream(jarEntry);
                    } catch (IOException ex) {
                        throw new ClassNotFoundException("Couldn't read class " + name, ex);
                    }
                }
            }
        }
        if (classInputStream == null) {
            URL url = getResource(classFile);
            if (url == null) {
                throw new ClassNotFoundException("Class " + name);
            }
            try {
                classInputStream = url.openStream();
            } catch (IOException ex) {
                throw new ClassNotFoundException("Couldn't read class " + name, ex);
            }
        }
        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            BufferedInputStream in = new BufferedInputStream(classInputStream);
            byte[] buffer = new byte[8096];
            int size;
            while ((size = in.read(buffer)) != -1) {
                out.write(buffer, 0, size);
            }
            in.close();
            return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain);
        } catch (IOException ex) {
            throw new ClassNotFoundException("Class " + name, ex);
        }
    }
} </s>
<s>class temp {    public static ObjectID[] sortDecending(ObjectID[] oids) {
        for (int i = 1; i < oids.length; i++) {
            ObjectID iId = oids[i];
            for (int j = 0; j < oids.length - i; j++) {
                if (oids[j].getTypePrefix() > oids[j + 1].getTypePrefix()) {
                    ObjectID temp = oids[j];
                    oids[j] = oids[j + 1];
                    oids[j + 1] = temp;
                }
            }
        }
        return oids;
    }
} </s>
<s>class temp {    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
} </s>
<s>class temp {    public static String getMD5(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] digest = md.digest();
            String out = "";
            for (int i = 0; i < digest.length; i++) {
                out += digest[i];
            }
            return out;
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Manca l'MD5 (piuttosto strano)");
        }
        return "";
    }
} </s>
<s>class temp {    private static int get(URL url, byte[] content) throws IOException {
        int len = -1;
        InputStream in = null;
        try {
            in = new BufferedInputStream(url.openStream());
            String type = URLConnection.guessContentTypeFromStream(in);
            if (type == null || type.compareTo("text/html") != 0) {
                return -1;
            }
            len = read(in, content);
        } catch (IOException e) {
            throw e;
        } finally {
            close(in);
        }
        return len;
    }
} </s>
<s>class temp {    static ConversionMap create(String file) {
        ConversionMap out = new ConversionMap();
        URL url = ConversionMap.class.getResource("data/" + file);
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = in.readLine();
            while (line != null) {
                if (line.length() > 0) {
                    String[] arr = line.split("\t");
                    try {
                        double value = Double.parseDouble(arr[1]);
                        out.put(translate(lowercase(arr[0].getBytes())), value);
                        out.defaultValue += value;
                        out.length = arr[0].length();
                    } catch (NumberFormatException e) {
                        throw new RuntimeException("Something is wrong with in conversion file: " + e);
                    }
                }
                line = in.readLine();
            }
            in.close();
            out.defaultValue /= Math.pow(4, out.length);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Their was an error while reading the conversion map: " + e);
        }
        return out;
    }
} </s>
<s>class temp {    public boolean parseResults(URL url, String analysis_type, CurationI curation, Date analysis_date, String regexp) throws OutputMalFormatException {
        boolean parsed = false;
        try {
            InputStream data_stream = url.openStream();
            parsed = parseResults(data_stream, analysis_type, curation, analysis_date, regexp);
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return parsed;
    }
} </s>
<s>class temp {    private String readHtmlFile(String htmlFileName) {
        StringBuffer buffer = new StringBuffer();
        java.net.URL url = getClass().getClassLoader().getResource("freestyleLearning/homeCore/help/" + htmlFileName);
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String string = " ";
            while (string != null) {
                string = reader.readLine();
                if (string != null) buffer.append(string);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
        return new String(buffer);
    }
} </s>
<s>class temp {    private void copyTemplates(ProjectPath pPath) {
        String sourceAntPath = pPath.sourceAntPath();
        final String moduleName = projectOperations.getFocusedTopLevelPackage().toString();
        logger.info("Module Name: " + moduleName);
        String targetDirectory = pPath.canonicalFileSystemPath(projectOperations);
        logger.info("Moving into target Directory: " + targetDirectory);
        if (!targetDirectory.endsWith("/")) {
            targetDirectory += "/";
        }
        if (!fileManager.exists(targetDirectory)) {
            fileManager.createDirectory(targetDirectory);
        }
        System.out.println("Target Directory: " + pPath.sourceAntPath());
        String path = TemplateUtils.getTemplatePath(getClass(), sourceAntPath);
        Set<URL> urls = UrlFindingUtils.findMatchingClasspathResources(context.getBundleContext(), path);
        Assert.notNull(urls, "Could not search bundles for resources for Ant Path '" + path + "'");
        if (urls.isEmpty()) {
            logger.info("URLS are empty stopping...");
        }
        for (URL url : urls) {
            logger.info("Stepping into " + url.toExternalForm());
            String fileName = url.getPath().substring(url.getPath().lastIndexOf("/") + 1);
            fileName = fileName.replace("-template", "");
            String targetFilename = targetDirectory + fileName;
            logger.info("Handling " + targetFilename);
            if (!fileManager.exists(targetFilename)) {
                try {
                    logger.info("Copied file");
                    String input = FileCopyUtils.copyToString(new InputStreamReader(url.openStream()));
                    logger.info("TopLevelPackage: " + projectOperations.getFocusedTopLevelPackage());
                    logger.info("SegmentPackage: " + pPath.canonicalFileSystemPath(projectOperations));
                    String topLevelPackage = projectOperations.getFocusedTopLevelPackage().toString();
                    input = input.replace("__TOP_LEVEL_PACKAGE__", topLevelPackage);
                    input = input.replace("__SEGMENT_PACKAGE__", pPath.segmentPackage());
                    input = input.replace("__PROJECT_NAME__", projectOperations.getFocusedProjectName());
                    input = input.replace("__ENTITY_NAME__", entityName);
                    MutableFile mutableFile = fileManager.createFile(targetFilename);
                    FileCopyUtils.copy(input.getBytes(), mutableFile.getOutputStream());
                } catch (IOException ioe) {
                    throw new IllegalStateException("Unable to create '" + targetFilename + "'", ioe);
                }
            }
        }
    }
} </s>
<s>class temp {    public static void copyFile(final File sourceFile, final File destFile) throws IOException {
        if (destFile.getParentFile() != null && !destFile.getParentFile().mkdirs()) {
            LOG.error("GeneralHelper.copyFile(): Cannot create parent directories from " + destFile);
        }
        FileInputStream fIn = null;
        FileOutputStream fOut = null;
        FileChannel source = null;
        FileChannel destination = null;
        try {
            fIn = new FileInputStream(sourceFile);
            source = fIn.getChannel();
            fOut = new FileOutputStream(destFile);
            destination = fOut.getChannel();
            long transfered = 0;
            final long bytes = source.size();
            while (transfered < bytes) {
                transfered += destination.transferFrom(source, 0, source.size());
                destination.position(transfered);
            }
        } finally {
            if (source != null) {
                source.close();
            } else if (fIn != null) {
                fIn.close();
            }
            if (destination != null) {
                destination.close();
            } else if (fOut != null) {
                fOut.close();
            }
        }
    }
} </s>
<s>class temp {    private void saveFile(File destination) {
        InputStream in = null;
        OutputStream out = null;
        try {
            if (fileScheme) in = new BufferedInputStream(new FileInputStream(source.getPath())); else in = new BufferedInputStream(getContentResolver().openInputStream(source));
            out = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[1024];
            while (in.read(buffer) != -1) out.write(buffer);
            Toast.makeText(this, R.string.saveas_file_saved, Toast.LENGTH_SHORT).show();
        } catch (FileNotFoundException e) {
            Toast.makeText(this, R.string.saveas_error, Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            Toast.makeText(this, R.string.saveas_error, Toast.LENGTH_SHORT).show();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {    public static InputStream getResourceAsStreamIfAny(String resPath) {
        URL url = findResource(resPath);
        try {
            return url == null ? null : url.openStream();
        } catch (IOException e) {
            ZMLog.warn(e, " URL open Connection got an exception!");
            return null;
        }
    }
} </s>
<s>class temp {    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery("SELECT * FROM reporters").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().matches(ERR_MISSING_TABLE)) {
                String msg = "Error on initial data store read";
                LOG.fatal(msg, e);
                throw new IOException(msg, e);
            }
            String[] qry = { "CREATE TABLE reporters (type LONG VARCHAR NOT NULL, key LONG VARCHAR NOT NULL, data LONG VARCHAR, PRIMARY KEY(type, key))", "CREATE TABLE listeners (event VARCHAR(255) NOT NULL, type LONG VARCHAR NOT NULL, key LONG VARCHAR NOT NULL, PRIMARY KEY(event, type, key))", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) {
                    logQry(q);
                    stmt.executeUpdate(q);
                }
                conn.commit();
            } catch (SQLException e2) {
                String msg = "Error initializing data store";
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(msg, e3);
                }
                LOG.fatal(msg, e2);
                throw new IOException(msg);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        String msg = "Unable to cleanup data store resources";
                        LOG.fatal(msg, e4);
                        throw new IOException(msg);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    String msg = "Unable to reset data store auto commit";
                    LOG.fatal(msg, e3);
                    throw new IOException(msg);
                }
            }
        }
        return;
    }
} </s>
<s>class temp {    public static boolean processUrl(String urlPath, UrlLineHandler handler) {
        boolean ret = true;
        URL url;
        InputStream in = null;
        BufferedReader bin = null;
        try {
            url = new URL(urlPath);
            in = url.openStream();
            bin = new BufferedReader(new InputStreamReader(in));
            String line;
            while ((line = bin.readLine()) != null) {
                if (!handler.process(line)) break;
            }
        } catch (IOException e) {
            ret = false;
        } finally {
            safelyClose(bin, in);
        }
        return ret;
    }
} </s>
<s>class temp {    public InputSource resolveEntity(String name, String uri) throws IOException, SAXException {
        InputSource retval;
        String mappedURI = name2uri(name);
        InputStream stream;
        if (mappedURI == null && (stream = mapResource(name)) != null) {
            uri = "java:resource:" + (String) id2resource.get(name);
            retval = new InputSource(XmlReader.createReader(stream));
        } else {
            URL url;
            URLConnection conn;
            if (mappedURI != null) uri = mappedURI; else if (uri == null) return null;
            url = new URL(uri);
            conn = url.openConnection();
            uri = conn.getURL().toString();
            if (ignoringMIME) retval = new InputSource(XmlReader.createReader(conn.getInputStream())); else {
                String contentType = conn.getContentType();
                retval = createInputSource(contentType, conn.getInputStream(), false, url.getProtocol());
            }
        }
        retval.setSystemId(uri);
        retval.setPublicId(name);
        return retval;
    }
} </s>
<s>class temp {    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
} </s>
