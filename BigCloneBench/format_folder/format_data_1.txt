<s>class temp {    public static void main(String[] args) {
        LogFrame.getInstance();
        for (int i = 0; i < args.length; i++) {
            String arg = args[i];
            if (arg.trim().startsWith(DEBUG_PARAMETER_NAME + "=")) {
                properties.put(DEBUG_PARAMETER_NAME, arg.trim().substring(DEBUG_PARAMETER_NAME.length() + 1).trim());
                if (properties.getProperty(DEBUG_PARAMETER_NAME).toLowerCase().equals(DEBUG_TRUE)) {
                    DEBUG = true;
                }
            } else if (arg.trim().startsWith(MODE_PARAMETER_NAME + "=")) {
                properties.put(MODE_PARAMETER_NAME, arg.trim().substring(MODE_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(AUTOCONNECT_PARAMETER_NAME + "=")) {
                properties.put(AUTOCONNECT_PARAMETER_NAME, arg.trim().substring(AUTOCONNECT_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(SITE_CONFIG_URL_PARAMETER_NAME + "=")) {
                properties.put(SITE_CONFIG_URL_PARAMETER_NAME, arg.trim().substring(SITE_CONFIG_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(LOAD_PLUGINS_PARAMETER_NAME + "=")) {
                properties.put(LOAD_PLUGINS_PARAMETER_NAME, arg.trim().substring(LOAD_PLUGINS_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(ONTOLOGY_URL_PARAMETER_NAME + "=")) {
                properties.put(ONTOLOGY_URL_PARAMETER_NAME, arg.trim().substring(ONTOLOGY_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(REPOSITORY_PARAMETER_NAME + "=")) {
                properties.put(REPOSITORY_PARAMETER_NAME, arg.trim().substring(REPOSITORY_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(ONTOLOGY_TYPE_PARAMETER_NAME + "=")) {
                properties.put(ONTOLOGY_TYPE_PARAMETER_NAME, arg.trim().substring(ONTOLOGY_TYPE_PARAMETER_NAME.length() + 1).trim());
                if (!(properties.getProperty(ONTOLOGY_TYPE_PARAMETER_NAME).equals(ONTOLOGY_TYPE_RDFXML) || properties.getProperty(ONTOLOGY_TYPE_PARAMETER_NAME).equals(ONTOLOGY_TYPE_TURTLE) || properties.getProperty(ONTOLOGY_TYPE_PARAMETER_NAME).equals(ONTOLOGY_TYPE_NTRIPPLES))) System.out.println("WARNING! Unknown ontology type: '" + properties.getProperty(ONTOLOGY_TYPE_PARAMETER_NAME) + "' (Known types are: '" + ONTOLOGY_TYPE_RDFXML + "', '" + ONTOLOGY_TYPE_TURTLE + "', '" + ONTOLOGY_TYPE_NTRIPPLES + "')");
            } else if (arg.trim().startsWith(OWLIMSERVICE_URL_PARAMETER_NAME + "=")) {
                properties.put(OWLIMSERVICE_URL_PARAMETER_NAME, arg.trim().substring(OWLIMSERVICE_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_URL_PARAMETER_NAME + "=")) {
                properties.put(DOCSERVICE_URL_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOC_ID_PARAMETER_NAME + "=")) {
                properties.put(DOC_ID_PARAMETER_NAME, arg.trim().substring(DOC_ID_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(ANNSET_NAME_PARAMETER_NAME + "=")) {
                properties.put(ANNSET_NAME_PARAMETER_NAME, arg.trim().substring(ANNSET_NAME_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(EXECUTIVE_SERVICE_URL_PARAMETER_NAME + "=")) {
                properties.put(EXECUTIVE_SERVICE_URL_PARAMETER_NAME, arg.trim().substring(EXECUTIVE_SERVICE_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(USER_ID_PARAMETER_NAME + "=")) {
                properties.put(USER_ID_PARAMETER_NAME, arg.trim().substring(USER_ID_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(USER_PASSWORD_PARAMETER_NAME + "=")) {
                properties.put(USER_PASSWORD_PARAMETER_NAME, arg.trim().substring(USER_PASSWORD_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(EXECUTIVE_PROXY_FACTORY_PARAMETER_NAME + "=")) {
                properties.put(EXECUTIVE_PROXY_FACTORY_PARAMETER_NAME, arg.trim().substring(EXECUTIVE_PROXY_FACTORY_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME + "=")) {
                properties.put(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME.length() + 1).trim());
                RichUIUtils.setDocServiceProxyFactoryClassname(properties.getProperty(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME));
            } else if (arg.trim().startsWith(LOAD_ANN_SCHEMAS_NAME + "=")) {
                properties.put(LOAD_ANN_SCHEMAS_NAME, arg.trim().substring(LOAD_ANN_SCHEMAS_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(SELECT_AS_PARAMETER_NAME + "=")) {
                properties.put(SELECT_AS_PARAMETER_NAME, arg.trim().substring(SELECT_AS_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(SELECT_ANN_TYPES_PARAMETER_NAME + "=")) {
                properties.put(SELECT_ANN_TYPES_PARAMETER_NAME, arg.trim().substring(SELECT_ANN_TYPES_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(ENABLE_ONTOLOGY_EDITOR_PARAMETER_NAME + "=")) {
                properties.put(ENABLE_ONTOLOGY_EDITOR_PARAMETER_NAME, arg.trim().substring(ENABLE_ONTOLOGY_EDITOR_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(CLASSES_TO_HIDE_PARAMETER_NAME + "=")) {
                properties.put(CLASSES_TO_HIDE_PARAMETER_NAME, arg.trim().substring(CLASSES_TO_HIDE_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(CLASSES_TO_SHOW_PARAMETER_NAME + "=")) {
                properties.put(CLASSES_TO_SHOW_PARAMETER_NAME, arg.trim().substring(CLASSES_TO_SHOW_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(ENABLE_APPLICATION_LOG_PARAMETER_NAME + "=")) {
                properties.put(ENABLE_APPLICATION_LOG_PARAMETER_NAME, arg.trim().substring(ENABLE_APPLICATION_LOG_PARAMETER_NAME.length() + 1).trim());
            } else {
                System.out.println("WARNING! Unknown or undefined parameter: '" + arg.trim() + "'");
            }
        }
        System.out.println(startupParamsToString());
        if (properties.getProperty(MODE_PARAMETER_NAME) == null || (!(properties.getProperty(MODE_PARAMETER_NAME).toLowerCase().equals(POOL_MODE)) && !(properties.getProperty(MODE_PARAMETER_NAME).toLowerCase().equals(DIRECT_MODE)))) {
            String err = "Mandatory parameter '" + MODE_PARAMETER_NAME + "' must be defined and must have a value either '" + POOL_MODE + "' or '" + DIRECT_MODE + "'.\n\nApplication will exit.";
            System.out.println(err);
            JOptionPane.showMessageDialog(new JFrame(), err, "Error!", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
        if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) == null || properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() == 0) {
            String err = "Mandatory parameter '" + SITE_CONFIG_URL_PARAMETER_NAME + "' is missing.\n\nApplication will exit.";
            System.out.println(err);
            JOptionPane.showMessageDialog(new JFrame(), err, "Error!", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
        try {
            String context = System.getProperty(CONTEXT);
            if (context == null || "".equals(context)) {
                context = DEFAULT_CONTEXT;
            }
            String s = System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                File f = File.createTempFile("foo", "");
                String gateHome = f.getParent().toString() + context;
                f.delete();
                System.setProperty(GateConstants.GATE_HOME_PROPERTY_NAME, gateHome);
                f = new File(System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + "/plugins");
                File f = new File(System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + "/gate.xml");
            }
            if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) != null && properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() > 0) {
                File f = new File(System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME));
                if (f.exists()) {
                    f.delete();
                }
                f.getParentFile().mkdirs();
                f.createNewFile();
                URL url = new URL(properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME));
                InputStream is = url.openStream();
                FileOutputStream fos = new FileOutputStream(f);
                int i = is.read();
                while (i != -1) {
                    fos.write(i);
                    i = is.read();
                }
                fos.close();
                is.close();
            }
            try {
                Gate.init();
                gate.Main.applyUserPreferences();
            } catch (Exception e) {
                e.printStackTrace();
            }
            s = BASE_PLUGIN_NAME + "," + properties.getProperty(LOAD_PLUGINS_PARAMETER_NAME);
            System.out.println("Loading plugins: " + s);
            loadPlugins(s, true);
            loadAnnotationSchemas(properties.getProperty(LOAD_ANN_SCHEMAS_NAME), true);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        MainFrame.getInstance().setVisible(true);
        MainFrame.getInstance().pack();
        if (properties.getProperty(MODE_PARAMETER_NAME).toLowerCase().equals(DIRECT_MODE)) {
            if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, "").toLowerCase().equals(AUTOCONNECT_TRUE)) {
                if (properties.getProperty(DOC_ID_PARAMETER_NAME) == null || properties.getProperty(DOC_ID_PARAMETER_NAME).length() == 0) {
                    String err = "Can't autoconnect. A parameter '" + DOC_ID_PARAMETER_NAME + "' is missing.";
                    System.out.println(err);
                    JOptionPane.showMessageDialog(MainFrame.getInstance(), err, "Error!", JOptionPane.ERROR_MESSAGE);
                    ActionShowDocserviceConnectDialog.getInstance().actionPerformed(null);
                } else {
                    ActionConnectToDocservice.getInstance().actionPerformed(null);
                }
            } else {
                ActionShowDocserviceConnectDialog.getInstance().actionPerformed(null);
            }
        } else {
            if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, "").toLowerCase().equals(AUTOCONNECT_TRUE)) {
                if (properties.getProperty(USER_ID_PARAMETER_NAME) == null || properties.getProperty(USER_ID_PARAMETER_NAME).length() == 0) {
                    String err = "Can't autoconnect. A parameter '" + USER_ID_PARAMETER_NAME + "' is missing.";
                    System.out.println(err);
                    JOptionPane.showMessageDialog(MainFrame.getInstance(), err, "Error!", JOptionPane.ERROR_MESSAGE);
                    ActionShowExecutiveConnectDialog.getInstance().actionPerformed(null);
                } else {
                    ActionConnectToExecutive.getInstance().actionPerformed(null);
                }
            } else {
                ActionShowExecutiveConnectDialog.getInstance().actionPerformed(null);
            }
        }
    }
} </s>
<s>class temp {    public synchronized String getSerialNumber() {
        if (serialNum != null) return serialNum;
        final StringBuffer buf = new StringBuffer();
        Iterator it = classpath.iterator();
        while (it.hasNext()) {
            ClassPathEntry entry = (ClassPathEntry) it.next();
            buf.append(entry.getResourceURL().toString());
            buf.append(":");
        }
        serialNum = (String) AccessController.doPrivileged(new PrivilegedAction() {

            public Object run() {
                try {
                    MessageDigest digest = MessageDigest.getInstance("SHA");
                    digest.update(buf.toString().getBytes());
                    byte[] data = digest.digest();
                    serialNum = new BASE64Encoder().encode(data);
                    return serialNum;
                } catch (NoSuchAlgorithmException exp) {
                    BootSecurityManager.securityLogger.log(Level.SEVERE, exp.getMessage(), exp);
                    return buf.toString();
                }
            }
        });
        return serialNum;
    }
} </s>
<s>class temp {            public Object run() {
                try {
                    MessageDigest digest = MessageDigest.getInstance("SHA");
                    digest.update(buf.toString().getBytes());
                    byte[] data = digest.digest();
                    serialNum = new BASE64Encoder().encode(data);
                    return serialNum;
                } catch (NoSuchAlgorithmException exp) {
                    BootSecurityManager.securityLogger.log(Level.SEVERE, exp.getMessage(), exp);
                    return buf.toString();
                }
            }
} </s>
<s>class temp {    public String post() {
        if (content == null || content.equals("")) return "Type something to publish!!";
        OutputStreamWriter wr = null;
        BufferedReader rd = null;
        try {
            String data = URLEncoder.encode("api", "UTF-8") + "=" + URLEncoder.encode(apiKey, "UTF-8");
            data += "&" + URLEncoder.encode("content", "UTF-8") + "=" + URLEncoder.encode(content, "UTF-8");
            data += "&" + URLEncoder.encode("description", "UTF-8") + "=" + URLEncoder.encode(descriptionTextArea.getText() + description_suffix, "UTF-8");
            data += "&" + URLEncoder.encode("expiry", "UTF-8") + "=" + URLEncoder.encode((String) expiryComboBox.getSelectedItem(), "UTF-8");
            data += "&" + URLEncoder.encode("type", "UTF-8") + "=" + URLEncoder.encode(type, "UTF-8");
            data += "&" + URLEncoder.encode("name", "UTF-8") + "=" + URLEncoder.encode(nameTextBox.getText(), "UTF-8");
            URL url = new URL("http://pastebin.ca/quiet-paste.php");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            line = rd.readLine();
            if (line == null || line.length() < 8 || !line.substring(0, 8).equals("SUCCESS:")) return "Unknown error in publishing the post"; else return "*Publish successful.! The link to your post is.: " + "http://pastebin.ca/" + line.substring(8);
        } catch (IOException ex) {
            return "Unable to connect to http://pastebin.ca/\nPlease check your internet connection";
        } finally {
            try {
                if (wr != null) wr.close();
                if (rd != null) rd.close();
            } catch (IOException ex) {
            }
        }
    }
} </s>
<s>class temp {    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        TextView tv = new TextView(this);
        HttpClient client = new DefaultHttpClient();
        HttpGet httpGetRequest = new HttpGet("http://www.google.com/");
        String line = "", responseString = "";
        try {
            HttpResponse response = client.execute(httpGetRequest);
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
                while ((line = br.readLine()) != null) {
                    responseString += line;
                }
                br.close();
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        tv.setText(responseString);
        setContentView(tv);
    }
} </s>
<s>class temp {    byte[] makeIDPFXORMask() {
        if (idpfMask == null) {
            try {
                MessageDigest sha = MessageDigest.getInstance("SHA-1");
                String temp = strip(getPrimaryIdentifier());
                sha.update(temp.getBytes("UTF-8"), 0, temp.length());
                idpfMask = sha.digest();
            } catch (NoSuchAlgorithmException e) {
                System.err.println("No such Algorithm (really, did I misspell SHA-1?");
                System.err.println(e.toString());
                return null;
            } catch (IOException e) {
                System.err.println("IO Exception. check out mask.write...");
                System.err.println(e.toString());
                return null;
            }
        }
        return idpfMask;
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) {
            if (force) {
                dest.delete();
            } else {
                throw new IOException("Cannot overwrite existing file: " + dest.getName());
            }
        }
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) {
                    break;
                }
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } finally {
                    if (out != null) {
                        out.close();
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    @Override
    public File fetchHSMFile(String fsID, String filePath) throws HSMException {
        log.debug("fetchHSMFile called with fsID=" + fsID + ", filePath=" + filePath);
        if (absIncomingDir.mkdirs()) {
            log.info("M-WRITE " + absIncomingDir);
        }
        File tarFile;
        try {
            tarFile = File.createTempFile("hsm_", ".tar", absIncomingDir);
        } catch (IOException x) {
            throw new HSMException("Failed to create temp file in " + absIncomingDir, x);
        }
        log.info("Fetching " + filePath + " from cloud storage");
        FileOutputStream fos = null;
        try {
            if (s3 == null) createClient();
            S3Object object = s3.getObject(new GetObjectRequest(bucketName, filePath));
            fos = new FileOutputStream(tarFile);
            IOUtils.copy(object.getObjectContent(), fos);
        } catch (AmazonClientException ace) {
            s3 = null;
            throw new HSMException("Could not list objects for: " + filePath, ace);
        } catch (Exception x) {
            throw new HSMException("Failed to retrieve " + filePath, x);
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    log.error("Couldn't close output stream for: " + tarFile);
                }
            }
        }
        return tarFile;
    }
} </s>
<s>class temp {    private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) {
        synchronized (results) {
            Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR);
            Vector<Class<?>> v = new Vector<Class<?>>();
            String fqcn = searchClass.getName();
            List<URL> knownLocations = new ArrayList<URL>();
            knownLocations.add(location);
            for (int loc = 0; loc < knownLocations.size(); loc++) {
                URL url = knownLocations.get(loc);
                File directory = new File(url.getFile());
                if (directory.exists()) {
                    String[] files = directory.list();
                    for (int i = 0; i < files.length; i++) {
                        if (files[i].endsWith(".class")) {
                            String classname = files[i].substring(0, files[i].length() - 6);
                            try {
                                Class<?> c = Class.forName(packageName + "." + classname);
                                if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + "." + classname)) {
                                    thisResult.put(c, url);
                                }
                            } catch (ClassNotFoundException cnfex) {
                                if (debug) {
                                    errors.add(cnfex);
                                }
                            } catch (Exception ex) {
                                if (debug) {
                                    errors.add(ex);
                                }
                            } catch (NoClassDefFoundError ncdfe) {
                                if (debug) {
                                    errors.add(ncdfe);
                                }
                            }
                        }
                    }
                } else {
                    try {
                        JarURLConnection conn = (JarURLConnection) url.openConnection();
                        JarFile jarFile = conn.getJarFile();
                        Enumeration<JarEntry> e = jarFile.entries();
                        while (e.hasMoreElements()) {
                            JarEntry entry = e.nextElement();
                            String entryname = entry.getName();
                            if (!entry.isDirectory() && entryname.endsWith(".class")) {
                                String classname = entryname.substring(0, entryname.length() - 6);
                                if (classname.startsWith("/")) classname = classname.substring(1);
                                classname = classname.replace('/', '.');
                                try {
                                    Class c = Class.forName(classname);
                                    if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) {
                                        thisResult.put(c, url);
                                    }
                                } catch (ClassNotFoundException cnfex) {
                                    errors.add(cnfex);
                                } catch (NoClassDefFoundError ncdfe) {
                                    errors.add(ncdfe);
                                } catch (UnsatisfiedLinkError ule) {
                                    errors.add(ule);
                                } catch (Exception exception) {
                                    errors.add(exception);
                                } catch (Error error) {
                                    errors.add(error);
                                }
                            }
                        }
                    } catch (IOException ioex) {
                        errors.add(ioex);
                    }
                }
            }
            results.putAll(thisResult);
            Iterator<Class<?>> it = thisResult.keySet().iterator();
            while (it.hasNext()) {
                v.add(it.next());
            }
            return v;
        }
    }
} </s>
<s>class temp {    private void doOp(String urlString) {
        URL url = null;
        try {
            url = new URL(urlString);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return;
        }
        URLConnection conn = null;
        try {
            conn = url.openConnection();
            conn.setRequestProperty("Authorization", "Basic " + (new BASE64Encoder()).encode((System.getProperty("fedoragsearch.fgsUserName") + ":" + System.getProperty("fedoragsearch.fgsPassword")).getBytes()));
            conn.connect();
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
        content = null;
        try {
            content = conn.getContent();
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
        String line;
        BufferedReader br = new BufferedReader(new InputStreamReader((InputStream) content));
        try {
            while ((line = br.readLine()) != null) System.out.println(line);
        } catch (IOException e1) {
            e1.printStackTrace();
        }
    }
} </s>
<s>class temp {    public Object execute(ExecutionEvent event) throws ExecutionException {
        try {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.rcpquizengine.views.quizzes");
            Folder rootFolder = view.getRootFolder();
            if (!rootFolder.isEncrypted()) {
                PasswordDialog dialog = new PasswordDialog(shell);
                if (dialog.open() == Window.OK) {
                    String password = dialog.getPassword();
                    if (!password.equals("")) {
                        String md5 = "";
                        MessageDigest md = MessageDigest.getInstance("MD5");
                        md.update(password.getBytes());
                        md5 = new BigInteger(md.digest()).toString();
                        rootFolder.setMd5Digest(md5);
                        rootFolder.setEncrypted(true);
                        MessageDialog.openInformation(shell, "Quiz bank locked", "The current quiz bank has been locked");
                        password = "";
                        md5 = "";
                    }
                }
            } else {
                MessageDialog.openError(shell, "Error locking quiz bank", "Quiz bank already locked");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public void run() {
        if (withlinlyn == true) {
            try {
                xlin.erase(file);
            } catch (Exception e) {
                System.out.println("Error erasing");
            }
        } else if (as_php) {
            try {
                URL url = new URL(http + "REM:" + pservname);
                BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                System.out.println("Response from REMOVE:");
                String s;
                while ((s = br.readLine()) != null) {
                    System.out.println(s);
                }
                br.close();
            } catch (Exception e) {
                System.out.println("Error erasing/php!");
            }
        }
        try {
            InetAddress ia = InetAddress.getLocalHost();
            ss = new ServerSocket(0, 50, ia);
            startserv = System.currentTimeMillis();
            ss.setSoTimeout(0);
            String svname = ia.getHostAddress();
            System.out.println(svname + ":sv");
            String mssg = "<SERVER><IP>" + svname + "</IP><PORT>" + ss.getLocalPort() + "</PORT></SERVER>";
            if (withlinlyn == true) {
                try {
                    xlin.replace(file, mssg);
                    System.out.println("mssg:" + mssg + ", sent");
                } catch (Exception e) {
                    System.out.println("Error posting address");
                    return;
                }
            } else if (as_php) {
                try {
                    URL url = new URL(http + "ADD:" + svname + ":" + ss.getLocalPort() + ":" + pservname);
                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                    String response = "";
                    String s;
                    while ((s = br.readLine()) != null) {
                        response = response + s + System.getProperty("line.separator");
                    }
                    br.close();
                    String resp = new xLineSplit().ssplit("REPLY", response);
                    if (!resp.equalsIgnoreCase("ADDED")) {
                        System.out.println("potential error posting via php:\nReponse was:\n" + response);
                    }
                } catch (Exception e) {
                    System.out.println("Error in posting php:" + e.toString());
                }
            }
            xsl.regserver(svname, new String("" + ss.getLocalPort()));
            Socket server = null;
            listening = true;
            while (listening) {
                server = ss.accept();
                if (server != null) {
                    xsl.add(server);
                    System.out.println("added connect");
                } else {
                    System.out.println("Received null socket");
                }
                server = null;
                listening = control_listening;
            }
            finserv = System.currentTimeMillis();
            long l = finserv - startserv;
            long m = l / 1000;
            System.err.println("Server socket has closed, time elapsed:" + m);
            System.out.println("Server socket has closed, time elapsed:" + m);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
} </s>
<s>class temp {    public static void printResource(OutputStream os, String resourceName) throws IOException {
        InputStream is = null;
        try {
            is = ResourceLoader.loadResource(resourceName);
            if (is == null) {
                throw new IOException("Given resource not found!");
            }
            IOUtils.copy(is, os);
        } finally {
            IOUtils.closeQuietly(is);
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        LogFrame.getInstance();
        for (int i = 0; i < args.length; i++) {
            String arg = args[i];
            if (arg.trim().startsWith(DEBUG_PARAMETER_NAME + "=")) {
                properties.put(DEBUG_PARAMETER_NAME, arg.trim().substring(DEBUG_PARAMETER_NAME.length() + 1).trim());
                if (properties.getProperty(DEBUG_PARAMETER_NAME).toLowerCase().equals(DEBUG_TRUE)) {
                    DEBUG = true;
                }
            } else if (arg.trim().startsWith(AUTOCONNECT_PARAMETER_NAME + "=")) {
                properties.put(AUTOCONNECT_PARAMETER_NAME, arg.trim().substring(AUTOCONNECT_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(SITE_CONFIG_URL_PARAMETER_NAME + "=")) {
                properties.put(SITE_CONFIG_URL_PARAMETER_NAME, arg.trim().substring(SITE_CONFIG_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_URL_PARAMETER_NAME + "=")) {
                properties.put(DOCSERVICE_URL_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOC_ID_PARAMETER_NAME + "=")) {
                properties.put(DOC_ID_PARAMETER_NAME, arg.trim().substring(DOC_ID_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME + "=")) {
                properties.put(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME.length() + 1).trim());
                RichUIUtils.setDocServiceProxyFactoryClassname(properties.getProperty(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME));
            } else {
                System.out.println("WARNING! Unknown or undefined parameter: '" + arg.trim() + "'");
            }
        }
        System.out.println("Annotation Diff GUI startup parameters:");
        System.out.println("------------------------------");
        for (Object propName : properties.keySet()) {
            System.out.println(propName.toString() + "=" + properties.getProperty((String) propName));
        }
        System.out.println("------------------------------");
        if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) == null || properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() == 0) {
            String err = "Mandatory parameter '" + SITE_CONFIG_URL_PARAMETER_NAME + "' is missing.\n\nApplication will exit.";
            System.out.println(err);
            JOptionPane.showMessageDialog(new JFrame(), err, "Error!", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
        try {
            String context = System.getProperty(CONTEXT);
            if (context == null || "".equals(context)) {
                context = DEFAULT_CONTEXT;
            }
            String s = System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                File f = File.createTempFile("foo", "");
                String gateHome = f.getParent().toString() + context;
                f.delete();
                System.setProperty(GateConstants.GATE_HOME_PROPERTY_NAME, gateHome);
                f = new File(System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + "/plugins");
                File f = new File(System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + "/gate.xml");
            }
            if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) != null && properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() > 0) {
                File f = new File(System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME));
                if (f.exists()) {
                    f.delete();
                }
                f.getParentFile().mkdirs();
                f.createNewFile();
                URL url = new URL(properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME));
                InputStream is = url.openStream();
                FileOutputStream fos = new FileOutputStream(f);
                int i = is.read();
                while (i != -1) {
                    fos.write(i);
                    i = is.read();
                }
                fos.close();
                is.close();
            }
            try {
                Gate.init();
                gate.Main.applyUserPreferences();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Throwable e) {
            e.printStackTrace();
        }
        MainFrame.getInstance().setVisible(true);
        MainFrame.getInstance().pack();
        if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, "").toLowerCase().equals(AUTOCONNECT_TRUE)) {
            if (properties.getProperty(DOC_ID_PARAMETER_NAME) == null || properties.getProperty(DOC_ID_PARAMETER_NAME).length() == 0) {
                String err = "Can't autoconnect. A parameter '" + DOC_ID_PARAMETER_NAME + "' is missing.";
                System.out.println(err);
                JOptionPane.showMessageDialog(new JFrame(), err, "Error!", JOptionPane.ERROR_MESSAGE);
                ActionShowAnnDiffConnectDialog.getInstance().actionPerformed(null);
            } else {
                ActionConnectToAnnDiffGUI.getInstance().actionPerformed(null);
            }
        } else {
            ActionShowAnnDiffConnectDialog.getInstance().actionPerformed(null);
        }
    }
} </s>
<s>class temp {    public void googleImageSearch() {
        if (artist.compareToIgnoreCase(previousArtist) != 0) {
            MusicBoxView.googleImageLocation = 0;
            try {
                String u = "http://images.google.com/images?q=" + currentTrack.getArtist() + " - " + currentTrack.getAlbum() + "&sa=N&start=0&ndsp=21";
                if (u.contains(" ")) {
                    u = u.replace(" ", "+");
                }
                URL url = new URL(u);
                HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
                httpcon.addRequestProperty("User-Agent", "Mozilla/4.76");
                BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
                String text = "";
                String lin = "";
                while ((lin = readIn.readLine()) != null) {
                    text += lin;
                }
                readIn.close();
                if (text.contains("\n")) {
                    text = text.replace("\n", "");
                }
                String[] array = text.split("\\Qhref=\"/imgres?imgurl=\\E");
                for (String s : array) {
                    if (s.startsWith("http://") || s.startsWith("https://") && s.contains("&amp;")) {
                        String s1 = s.substring(0, s.indexOf("&amp;"));
                        googleImages.add(s1);
                    }
                }
            } catch (Exception ex4) {
                MusicBoxView.showErrorDialog(ex4);
            }
        }
    }
} </s>
<s>class temp {    public void googleImageSearch(String search, String start) {
        try {
            String u = "http://images.google.com/images?q=" + search + start;
            if (u.contains(" ")) {
                u = u.replace(" ", "+");
            }
            URL url = new URL(u);
            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
            httpcon.addRequestProperty("User-Agent", "Mozilla/4.76");
            BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
            googleImages.clear();
            String text = "";
            String lin = "";
            while ((lin = readIn.readLine()) != null) {
                text += lin;
            }
            readIn.close();
            if (text.contains("\n")) {
                text = text.replace("\n", "");
            }
            String[] array = text.split("\\Qhref=\"/imgres?imgurl=\\E");
            for (String s : array) {
                if (s.startsWith("http://") || s.startsWith("https://") && s.contains("&amp;")) {
                    String s1 = s.substring(0, s.indexOf("&amp;"));
                    googleImages.add(s1);
                }
            }
        } catch (Exception ex4) {
            MusicBoxView.showErrorDialog(ex4);
        }
        MusicBoxView.jButton7.setEnabled(true);
        ImageIcon icon;
        try {
            icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));
            ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));
            MusicBoxView.albumArtLabel.setIcon(ico);
        } catch (MalformedURLException ex1) {
            MusicBoxView.showErrorDialog(ex1);
        }
    }
} </s>
<s>class temp {        @Override
        public void run() {
            log.debug("Now running....");
            log.debug("Current env. variables:");
            try {
                this.infoNotifiers("Environment parameters after modifications:");
                this.logEnvironment();
                this.infoNotifiers("Dump thread will now run...");
                this.endNotifiers();
                this.process = this.pb.start();
                this.process.waitFor();
                if (this.process.exitValue() != 0) {
                    this.startNotifiers();
                    this.infoNotifiers("Dump Failed. Return status: " + this.process.exitValue());
                    this.endNotifiers();
                    return;
                }
                List<String> cmd = new LinkedList<String>();
                cmd.add("gzip");
                cmd.add(info.getDumpFileName());
                File basePath = this.pb.directory();
                this.pb = new ProcessBuilder(cmd);
                this.pb.directory(basePath);
                log.debug("Executing: " + StringUtils.join(cmd.iterator(), ' '));
                this.process = this.pb.start();
                this.process.waitFor();
                if (this.process.exitValue() != 0) {
                    this.startNotifiers();
                    this.infoNotifiers("Dump GZip Failed. Return status: " + this.process.exitValue());
                    this.endNotifiers();
                    return;
                }
                info.setDumpFileName(info.getDumpFileName() + ".gz");
                info.setMD5SumFileName(info.getDumpFileName() + ".md5sum");
                cmd = new LinkedList<String>();
                cmd.add("md5sum");
                cmd.add("-b");
                cmd.add(info.getDumpFileName());
                log.debug("Executing: " + StringUtils.join(cmd.iterator(), ' '));
                this.pb = new ProcessBuilder(cmd);
                this.pb.directory(basePath);
                this.process = this.pb.start();
                BufferedOutputStream md5sumFileOut = new BufferedOutputStream(new FileOutputStream(basePath.getAbsolutePath() + File.separatorChar + info.getMD5SumFileName()));
                IOUtils.copy(this.process.getInputStream(), md5sumFileOut);
                this.process.waitFor();
                md5sumFileOut.flush();
                md5sumFileOut.close();
                if (this.process.exitValue() != 0) {
                    this.startNotifiers();
                    this.infoNotifiers("Dump GZip MD5Sum Failed. Return status: " + this.process.exitValue());
                    this.endNotifiers();
                    return;
                } else {
                    this.startNotifiers();
                    this.infoNotifiers("Dump, gzip and md5sum sucessfuly completed.");
                    this.endNotifiers();
                }
            } catch (IOException e) {
                String message = "IOException launching command: " + e.getMessage();
                log.error(message, e);
                throw new IllegalStateException(message, e);
            } catch (InterruptedException e) {
                String message = "InterruptedException launching command: " + e.getMessage();
                log.error(message, e);
                throw new IllegalStateException(message, e);
            } catch (IntegrationException e) {
                String message = "IntegrationException launching command: " + e.getMessage();
                log.error(message, e);
                throw new IllegalStateException(message, e);
            }
        }
} </s>
<s>class temp {    private static Vector<String> getIgnoreList() {
        try {
            URL url = DeclarationTranslation.class.getClassLoader().getResource("ignorelist");
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));
            Vector<String> ret = new Vector<String>();
            String line = null;
            while ((line = bufferedReader.readLine()) != null) {
                ret.add(line);
            }
            return ret;
        } catch (Exception e) {
            return null;
        }
    }
} </s>
<s>class temp {       

    public long saveDB(Connection con, long id, boolean commit) throws SQLException {
        StringBuffer SQL = null;
        Statement statement = null;
        ResultSet result_set = null;
        try {
            statement = con.createStatement();
            if (id < 0) {
                id = QueryUtils.sequenceGetNextID(con, "PATTERN_OUTLINE");
            } else {
                deleteDB(con, id);
            }
            SQL = new StringBuffer("insert into ");
            SQL.append("PATTERN_OUTLINE values (");
            SQL.append(id);
            SQL.append(",");
            SQL.append(XColor.toInt(pattern.getPatternColor()));
            SQL.append(",");
            SQL.append(pattern.getPatternStyle());
            SQL.append(",");
            SQL.append(pattern.getPatternDensity());
            SQL.append(",");
            SQL.append(XColor.toInt(pattern.getBackgroundColor()));
            SQL.append(",");
            SQL.append(XColor.toInt(outline.getColor()));
            SQL.append(",");
            SQL.append(outline.getStyle());
            SQL.append(",");
            SQL.append(outline.getWidth());
            SQL.append(")");
            statement.executeUpdate(new String(SQL));
            SQL = null;
            if (commit) {
                con.commit();
            }
        } catch (SQLException e) {
            System.err.println(getClass().getName() + ":" + e + " SQL:=" + SQL);
            if (commit) {
                con.rollback();
            }
            throw e;
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } 
		catch (SQLException e) {
		
		}
            }
	}
	return saveDB(con, id, false);
}
} </s>
<s>class temp {    public BasicTraceImpl() {
        out = System.out;
        traceEnable = new HashMap();
        URL url = Hive.getURL("trace.cfg");
        if (url != null) try {
            InputStream input = url.openStream();
            BufferedReader in = new BufferedReader(new InputStreamReader(input));
            String line;
            for (line = line = in.readLine(); line != null; line = in.readLine()) {
                int i = line.indexOf("=");
                if (i > 0) {
                    String name = line.substring(0, i).trim();
                    String value = line.substring(i + 1).trim();
                    traceEnable.put(name, Boolean.valueOf(value).booleanValue() ? ((Object) (Boolean.TRUE)) : ((Object) (Boolean.FALSE)));
                }
            }
            input.close();
        } catch (IOException io) {
            System.out.println(io);
        }
        TRACE = getEnable(THIS);
    }
} </s>
<s>class temp {    void startzm() {
        URL myzzurl;
        InputStream myzstream;
        byte zmemimage[];
        boolean joined;
        zmemimage = null;
        try {
            System.err.println(zcodefile);
            myzzurl = new URL(zcodefile);
            myzstream = myzzurl.openStream();
            zmemimage = suckstream(myzstream);
        } catch (MalformedURLException booga) {
            try {
                myzstream = new FileInputStream(zcodefile);
                zmemimage = suckstream(myzstream);
            } catch (IOException booga2) {
                add("North", new Label("Malformed URL"));
                failed = true;
            }
        } catch (IOException booga) {
            add("North", new Label("I/O Error"));
        }
        if (zmemimage != null) {
            switch(zmemimage[0]) {
                case 3:
                    zm = new ZMachine3(screen, status_line, zmemimage);
                    break;
                case 5:
                    remove(status_line);
                    zm = new ZMachine5(screen, zmemimage);
                    break;
                case 8:
                    remove(status_line);
                    zm = new ZMachine8(screen, zmemimage);
                    break;
                default:
                    add("North", new Label("Not a valid V3,V5, or V8 story file"));
            }
            if (zm != null) zm.start();
        }
        joined = false;
        if (zmemimage != null) {
            while (!joined) {
                try {
                    zm.join();
                    joined = true;
                } catch (InterruptedException booga) {
                }
            }
        }
        System.exit(0);
    }
} </s>
<s>class temp {    private long generateUnixInstallShell(File unixShellFile, String instTemplate, File instClassFile) throws IOException {
        FileOutputStream byteWriter = new FileOutputStream(unixShellFile);
        InputStream is = getClass().getResourceAsStream("/" + instTemplate);
        InputStreamReader isr = new InputStreamReader(is);
        LineNumberReader reader = new LineNumberReader(isr);
        String content = "";
        String installClassStartStr = "000000000000";
        NumberFormat nf = NumberFormat.getInstance(Locale.US);
        nf.setGroupingUsed(false);
        nf.setMinimumIntegerDigits(installClassStartStr.length());
        int installClassStartPos = 0;
        long installClassOffset = 0;
        System.out.println(VAGlobals.i18n("VAArchiver_GenerateInstallShell"));
        String line = reader.readLine();
        while ((line != null) && (!line.startsWith("# InstallClassStart"))) {
            content += line + "\n";
            line = reader.readLine();
        }
        content += "InstallClassStart=" + installClassStartStr + "\n";
        installClassStartPos = content.length() - 1 - 1 - installClassStartStr.length();
        line = reader.readLine();
        while ((line != null) && (!line.startsWith("# InstallClassSize"))) {
            content += line + "\n";
            line = reader.readLine();
        }
        content += new String("InstallClassSize=" + instClassFile.length() + "\n");
        line = reader.readLine();
        while ((line != null) && (!line.startsWith("# InstallClassName"))) {
            content += line + "\n";
            line = reader.readLine();
        }
        content += new String("InstallClassName=" + instClassName_ + "\n");
        line = reader.readLine();
        while ((line != null) && (!line.startsWith("# Install class"))) {
            content += line + "\n";
            line = reader.readLine();
        }
        if (line != null) content += line + "\n";
        byteWriter.write(content.substring(0, installClassStartPos + 1).getBytes());
        byteWriter.write(nf.format(content.length()).getBytes());
        byteWriter.write(content.substring(installClassStartPos + 1 + installClassStartStr.length()).getBytes());
        installClassOffset = content.length();
        content = null;
        FileInputStream classStream = new FileInputStream(instClassFile);
        byte[] buf = new byte[2048];
        int read = classStream.read(buf);
        while (read > 0) {
            byteWriter.write(buf, 0, read);
            read = classStream.read(buf);
        }
        classStream.close();
        reader.close();
        byteWriter.close();
        return installClassOffset;
    }
} </s>
<s>class temp {    private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException {
        InputStream reader = getClass().getResourceAsStream("/" + instTemplate);
        ByteArrayOutputStream content = new ByteArrayOutputStream();
        String installClassVarStr = "000000000000";
        byte[] buf = new byte[installClassVarStr.length()];
        NumberFormat nf = NumberFormat.getInstance(Locale.US);
        nf.setGroupingUsed(false);
        nf.setMinimumIntegerDigits(installClassVarStr.length());
        int installClassStopPos = 0;
        long installClassOffset = reader.available();
        int position = 0;
        System.out.println(VAGlobals.i18n("VAArchiver_GenerateInstallExe"));
        reader.read(buf, 0, buf.length);
        position = 1;
        for (int n = 0; n < 3; n++) {
            while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) {
                content.write(buf[0]);
                int nextb = reader.read();
                position++;
                shiftArray(buf);
                buf[buf.length - 1] = (byte) nextb;
            }
            if (new String(buf).equals("clname_here_")) {
                VAGlobals.printDebug("  clname_here_ found at " + (position - 1));
                StringBuffer clnameBuffer = new StringBuffer(64);
                clnameBuffer.append(instClassName_);
                for (int i = clnameBuffer.length() - 1; i < 64; i++) {
                    clnameBuffer.append('.');
                }
                byte[] clnameBytes = clnameBuffer.toString().getBytes();
                for (int i = 0; i < 64; i++) {
                    content.write(clnameBytes[i]);
                    position++;
                }
                reader.skip(64 - buf.length);
                reader.read(buf, 0, buf.length);
            } else if (new String(buf).equals("clstart_here")) {
                VAGlobals.printDebug("  clstart_here found at " + (position - 1));
                buf = nf.format(installClassOffset).getBytes();
                for (int i = 0; i < buf.length; i++) {
                    content.write(buf[i]);
                    position++;
                }
                reader.read(buf, 0, buf.length);
            } else if (new String(buf).equals("clstop_here_")) {
                VAGlobals.printDebug("  clstop_here_ found at " + (position - 1));
                installClassStopPos = position - 1;
                content.write(buf);
                position += 12;
                reader.read(buf, 0, buf.length);
            }
        }
        content.write(buf);
        buf = new byte[2048];
        int read = reader.read(buf);
        while (read > 0) {
            content.write(buf, 0, read);
            read = reader.read(buf);
        }
        reader.close();
        FileInputStream classStream = new FileInputStream(instClassFile);
        read = classStream.read(buf);
        while (read > 0) {
            content.write(buf, 0, read);
            read = classStream.read(buf);
        }
        classStream.close();
        content.close();
        byte[] contentBytes = content.toByteArray();
        installClassVarStr = nf.format(contentBytes.length);
        byte[] installClassVarBytes = installClassVarStr.getBytes();
        for (int i = 0; i < installClassVarBytes.length; i++) {
            contentBytes[installClassStopPos + i] = installClassVarBytes[i];
        }
        FileOutputStream out = new FileOutputStream(nativeInstallFile);
        out.write(contentBytes);
        out.close();
        return installClassOffset;
    }
} </s>
<s>class temp {    private void appendArchive(File instClass) throws IOException {
        FileOutputStream out = new FileOutputStream(instClass.getName(), true);
        FileInputStream zipStream = new FileInputStream("install.jar");
        byte[] buf = new byte[2048];
        int read = zipStream.read(buf);
        while (read > 0) {
            out.write(buf, 0, read);
            read = zipStream.read(buf);
        }
        zipStream.close();
        out.close();
    }
} </s>
<s>class temp {    private void copy(File fin, File fout) throws IOException {
        FileOutputStream out = null;
        FileInputStream in = null;
        try {
            out = new FileOutputStream(fout);
            in = new FileInputStream(fin);
            byte[] buf = new byte[2048];
            int read = in.read(buf);
            while (read > 0) {
                out.write(buf, 0, read);
                read = in.read(buf);
            }
        } catch (IOException _e) {
            throw _e;
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
} </s>
<s>class temp {    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
} </s>
<s>class temp {    public Blowfish(String password) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA1");
            digest.update(password.getBytes());
        } catch (Exception e) {
            Log.error(e.getMessage(), e);
        }
        m_bfish = new BlowfishCBC(digest.digest(), 0);
        digest.reset();
    }
} </s>
<s>class temp {    public void retrieveFiles() throws DataSyncException {
        try {
            ftp.connect(hostname, port);
            boolean success = ftp.login(username, password);
            log.info("FTP Login:" + success);
            if (success) {
                System.out.println(directory);
                ftp.changeWorkingDirectory(directory);
                ftp.setFileType(FTP.ASCII_FILE_TYPE);
                ftp.enterLocalPassiveMode();
                ftp.setRemoteVerificationEnabled(false);
                FTPFile[] files = ftp.listFiles();
                for (FTPFile file : files) {
                    ftp.setFileType(file.getType());
                    log.debug(file.getName() + "," + file.getSize());
                    FileOutputStream output = new FileOutputStream(localDirectory + file.getName());
                    try {
                        ftp.retrieveFile(file.getName(), output);
                    } finally {
                        IOUtils.closeQuietly(output);
                    }
                }
            }
        } catch (Exception e) {
            throw new DataSyncException(e);
        } finally {
            try {
                ftp.disconnect();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    @Override
    public void save(String arxivId, InputStream inputStream, String encoding) {
        String filename = StringUtil.arxivid2filename(arxivId, "tex");
        try {
            Writer writer = new OutputStreamWriter(new FileOutputStream(String.format("%s/%s", LATEX_DOCUMENT_DIR, filename)), encoding);
            IOUtils.copy(inputStream, writer, encoding);
            writer.flush();
            writer.close();
            inputStream.close();
        } catch (IOException e) {
            logger.error("Failed to save the Latex source with id='{}'", arxivId, e);
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public static void copy(File source, File sink) throws IOException {
        if (source == null) throw new NullPointerException("Source file must not be null");
        if (sink == null) throw new NullPointerException("Target file must not be null");
        if (!source.exists()) throw new IOException("Source file " + source.getPath() + " does not exist");
        if (!source.isFile()) throw new IOException("Source file " + source.getPath() + " is not a regular file");
        if (!source.canRead()) throw new IOException("Source file " + source.getPath() + " can not be read (missing acces right)");
        if (!sink.exists()) throw new IOException("Target file " + sink.getPath() + " does not exist");
        if (!sink.isFile()) throw new IOException("Target file " + sink.getPath() + " is not a regular file");
        if (!sink.canWrite()) throw new IOException("Target file " + sink.getPath() + " is write protected");
        InputStream input = null;
        OutputStream output = null;
        try {
            input = new FileInputStream(source);
            output = new FileOutputStream(sink);
            byte[] buffer = new byte[1024];
            while (input.available() > 0) {
                int bread = input.read(buffer);
                if (bread > 0) output.write(buffer, 0, bread);
            }
        } finally {
            if (input != null) try {
                input.close();
            } catch (IOException x) {
            }
            if (output != null) try {
                output.close();
            } catch (IOException x) {
            }
        }
    }
} </s>
<s>class temp {    public void copyHashAllFilesToDirectory(String baseDirStr, Hashtable newNamesTable, String destDirStr) throws Exception {
        if (baseDirStr.endsWith(sep)) {
            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);
        }
        if (destDirStr.endsWith(sep)) {
            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);
        }
        FileUtils.getInstance().createDirectory(baseDirStr);
        if (null == newNamesTable) {
            newNamesTable = new Hashtable();
        }
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File baseDir = new File(baseDirStr);
        baseDir.mkdirs();
        if ((baseDir.exists()) && (baseDir.isDirectory())) {
            if (!newNamesTable.isEmpty()) {
                Enumeration enumFiles = newNamesTable.keys();
                while (enumFiles.hasMoreElements()) {
                    String newName = (String) enumFiles.nextElement();
                    String oldPathName = (String) newNamesTable.get(newName);
                    if ((newName != null) && (!"".equals(newName)) && (oldPathName != null) && (!"".equals(oldPathName))) {
                        String newPathFileName = destDirStr + sep + newName;
                        String oldPathFileName = baseDirStr + sep + oldPathName;
                        if (oldPathName.startsWith(sep)) {
                            oldPathFileName = baseDirStr + oldPathName;
                        }
                        File f = new File(oldPathFileName);
                        if ((f.exists()) && (f.isFile())) {
                            in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);
                            out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);
                            int readLen;
                            while ((readLen = in.read(dataBuff)) > 0) {
                                out.write(dataBuff, 0, readLen);
                            }
                            out.flush();
                            in.close();
                            out.close();
                        } else {
                        }
                    }
                }
            } else {
            }
        } else {
            throw new Exception("Base (baseDirStr) dir not exist !");
        }
    }
} </s>
<s>class temp {    public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception {
        long plussQuotaSize = 0;
        if (baseDirStr.endsWith(sep)) {
            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);
        }
        if (destDirStr.endsWith(sep)) {
            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);
        }
        FileUtils.getInstance().createDirectory(destDirStr);
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File baseDir = new File(baseDirStr);
        baseDir.mkdirs();
        if (!baseDir.exists()) {
            createDirectory(baseDirStr);
        }
        if ((baseDir.exists()) && (baseDir.isDirectory())) {
            String[] entryList = baseDir.list();
            if (entryList.length > 0) {
                for (int pos = 0; pos < entryList.length; pos++) {
                    String entryName = entryList[pos];
                    String oldPathFileName = baseDirStr + sep + entryName;
                    File entryFile = new File(oldPathFileName);
                    if (entryFile.isFile()) {
                        String newPathFileName = destDirStr + sep + entryName;
                        File newFile = new File(newPathFileName);
                        if (newFile.exists()) {
                            plussQuotaSize -= newFile.length();
                            newFile.delete();
                        }
                        in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);
                        out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);
                        int readLen;
                        while ((readLen = in.read(dataBuff)) > 0) {
                            out.write(dataBuff, 0, readLen);
                            plussQuotaSize += readLen;
                        }
                        out.flush();
                        in.close();
                        out.close();
                    }
                }
            }
        } else {
            throw new Exception("Base dir not exist ! baseDirStr = (" + baseDirStr + ")");
        }
        return plussQuotaSize;
    }
} </s>
<s>class temp {    public long copyDirAllFilesToDirectoryRecursive(String baseDirStr, String destDirStr, boolean copyOutputsRtIDsDirs) throws Exception {
        long plussQuotaSize = 0;
        if (baseDirStr.endsWith(sep)) {
            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);
        }
        if (destDirStr.endsWith(sep)) {
            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);
        }
        FileUtils.getInstance().createDirectory(destDirStr);
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File baseDir = new File(baseDirStr);
        baseDir.mkdirs();
        if (!baseDir.exists()) {
            createDirectory(baseDirStr);
        }
        if ((baseDir.exists()) && (baseDir.isDirectory())) {
            String[] entryList = baseDir.list();
            if (entryList.length > 0) {
                for (int pos = 0; pos < entryList.length; pos++) {
                    String entryName = entryList[pos];
                    String oldPathFileName = baseDirStr + sep + entryName;
                    File entryFile = new File(oldPathFileName);
                    if (entryFile.isFile()) {
                        String newPathFileName = destDirStr + sep + entryName;
                        File newFile = new File(newPathFileName);
                        if (newFile.exists()) {
                            plussQuotaSize -= newFile.length();
                            newFile.delete();
                        }
                        in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);
                        out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);
                        int readLen;
                        while ((readLen = in.read(dataBuff)) > 0) {
                            out.write(dataBuff, 0, readLen);
                            plussQuotaSize += readLen;
                        }
                        out.flush();
                        in.close();
                        out.close();
                    }
                    if (entryFile.isDirectory()) {
                        boolean enableCopyDir = false;
                        if (copyOutputsRtIDsDirs) {
                            enableCopyDir = true;
                        } else {
                            if (entryFile.getParentFile().getName().equals("outputs")) {
                                enableCopyDir = false;
                            } else {
                                enableCopyDir = true;
                            }
                        }
                        if (enableCopyDir) {
                            plussQuotaSize += this.copyDirAllFilesToDirectoryRecursive(baseDirStr + sep + entryName, destDirStr + sep + entryName, copyOutputsRtIDsDirs);
                        }
                    }
                }
            }
        } else {
            throw new Exception("Base dir not exist ! baseDirStr = (" + baseDirStr + ")");
        }
        return plussQuotaSize;
    }
} </s>
<s>class temp {    public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception {
        long plussQuotaSize = 0;
        if (!baseDirStr.endsWith(sep)) {
            baseDirStr += sep;
        }
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        String file1FullPath = new String(baseDirStr + fileName);
        if (!file1FullPath.equalsIgnoreCase(file2FullPath)) {
            File file1 = new File(file1FullPath);
            if (file1.exists() && (file1.isFile())) {
                File file2 = new File(file2FullPath);
                if (file2.exists()) {
                    plussQuotaSize -= file2.length();
                    file2.delete();
                }
                FileUtils.getInstance().createDirectory(file2.getParent());
                in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize);
                out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize);
                int readLen;
                while ((readLen = in.read(dataBuff)) > 0) {
                    out.write(dataBuff, 0, readLen);
                    plussQuotaSize += readLen;
                }
                out.flush();
                in.close();
                out.close();
            } else {
                throw new Exception("Source file not exist ! file1FullPath = (" + file1FullPath + ")");
            }
        }
        return plussQuotaSize;
    }
} </s>
<s>class temp {    public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception {
        if (userBaseDir.endsWith(sep)) {
            userBaseDir = userBaseDir.substring(0, userBaseDir.length() - sep.length());
        }
        String file1FullPath = new String();
        if (sourcePath.startsWith(sep)) {
            file1FullPath = new String(userBaseDir + sourcePath);
        } else {
            file1FullPath = new String(userBaseDir + sep + sourcePath);
        }
        String file2FullPath = new String();
        if (destinPath.startsWith(sep)) {
            file2FullPath = new String(userBaseDir + destinPath);
        } else {
            file2FullPath = new String(userBaseDir + sep + destinPath);
        }
        long plussQuotaSize = 0;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File fileordir = new File(file1FullPath);
        if (fileordir.exists()) {
            if (fileordir.isFile()) {
                File file2 = new File(file2FullPath);
                if (file2.exists()) {
                    plussQuotaSize -= file2.length();
                    file2.delete();
                }
                FileUtils.getInstance().createDirectory(file2.getParent());
                in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize);
                out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize);
                int readLen;
                while ((readLen = in.read(dataBuff)) > 0) {
                    out.write(dataBuff, 0, readLen);
                    plussQuotaSize += readLen;
                }
                out.flush();
                in.close();
                out.close();
            }
            if (fileordir.isDirectory()) {
                String[] entryList = fileordir.list();
                if (entryList.length > 0) {
                    for (int pos = 0; pos < entryList.length; pos++) {
                        String entryName = entryList[pos];
                        String file1FullPathEntry = new String(file1FullPath.concat(entryList[pos]));
                        String file2FullPathEntry = new String(file2FullPath.concat(entryList[pos]));
                        File file2 = new File(file2FullPathEntry);
                        if (file2.exists()) {
                            plussQuotaSize -= file2.length();
                            file2.delete();
                        }
                        FileUtils.getInstance().createDirectory(file2.getParent());
                        in = new BufferedInputStream(new FileInputStream(file1FullPathEntry), bufferSize);
                        out = new BufferedOutputStream(new FileOutputStream(file2FullPathEntry), bufferSize);
                        int readLen;
                        while ((readLen = in.read(dataBuff)) > 0) {
                            out.write(dataBuff, 0, readLen);
                            plussQuotaSize += readLen;
                        }
                        out.flush();
                        in.close();
                        out.close();
                    }
                }
            }
        } else {
            throw new Exception("Source file or dir not exist ! file1FullPath = (" + file1FullPath + ")");
        }
        return plussQuotaSize;
    }
} </s>
<s>class temp {    public void copyFileToFileWithPaths(String sourcePath, String destinPath) throws Exception {
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File file1 = new File(sourcePath);
        if (file1.exists() && (file1.isFile())) {
            File file2 = new File(destinPath);
            if (file2.exists()) {
                file2.delete();
            }
            FileUtils.getInstance().createDirectory(file2.getParent());
            in = new BufferedInputStream(new FileInputStream(sourcePath), bufferSize);
            out = new BufferedOutputStream(new FileOutputStream(destinPath), bufferSize);
            int readLen;
            while ((readLen = in.read(dataBuff)) > 0) {
                out.write(dataBuff, 0, readLen);
            }
            out.flush();
            in.close();
            out.close();
        } else {
            throw new Exception("Source file not exist ! sourcePath = (" + sourcePath + ")");
        }
    }
} </s>
<s>class temp {    private InputStream urlToInputStream(URL url) throws IOException {
        URLConnection conn = url.openConnection();
        conn.setRequestProperty("User-Agent", IE);
        conn.setRequestProperty("Accept-Encoding", "gzip, deflate");
        conn.connect();
        String encoding = conn.getContentEncoding();
        if ((encoding != null) && encoding.equalsIgnoreCase("gzip")) return new GZIPInputStream(conn.getInputStream()); else if ((encoding != null) && encoding.equalsIgnoreCase("deflate")) return new InflaterInputStream(conn.getInputStream(), new Inflater(true)); else return conn.getInputStream();
    }
} </s>
<s>class temp {    private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException {
        InputStream is = null;
        OutputStream os = null;
        if (ServletFileUpload.isMultipartContent(rr.getRequest())) {
            ServletFileUpload upload = new ServletFileUpload();
            FileItemIterator iter = upload.getItemIterator(rr.getRequest());
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                if (!item.isFormField()) {
                    is = item.openStream();
                    applyConversionsProperties(rr.getConversionProperties(), cpath);
                    DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH);
                    String alloc = buffer.allocate(is);
                    InputStream ins = buffer.getDataAsStream(alloc);
                    is.close();
                    try {
                        ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType());
                        if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) {
                            ValidationServlet valServ = new ValidationServlet();
                            valServ.printValidationResult(response, vRes);
                            try {
                                ins.close();
                            } finally {
                                buffer.removeData(alloc, true);
                            }
                            return;
                        }
                    } catch (ValidatorException vex) {
                        LOGGER.warn(vex.getMessage());
                    } finally {
                        try {
                            ins.close();
                        } catch (Exception ex) {
                        }
                    }
                    File zipFile = null;
                    FileOutputStream fos = null;
                    String newTemp = UUID.randomUUID().toString();
                    IOResolver ior = EGEConfigurationManager.getInstance().getStandardIOResolver();
                    File buffDir = new File(buffer.getDataDir(alloc));
                    zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT);
                    fos = new FileOutputStream(zipFile);
                    ior.compressData(buffDir, fos);
                    ins = new FileInputStream(zipFile);
                    File szipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + ZIP_EXT);
                    fos = new FileOutputStream(szipFile);
                    try {
                        try {
                            ege.performConversion(ins, fos, cpath);
                        } finally {
                            fos.close();
                        }
                        boolean isComplex = EGEIOUtils.isComplexZip(szipFile);
                        response.setContentType(APPLICATION_OCTET_STREAM);
                        String fN = item.getName().substring(0, item.getName().lastIndexOf("."));
                        if (isComplex) {
                            String fileExt;
                            if (cpath.getOutputDataType().getMimeType().equals(APPLICATION_MSWORD)) {
                                fileExt = DOCX_EXT;
                            } else {
                                fileExt = ZIP_EXT;
                            }
                            response.setHeader("Content-Disposition", "attachment; filename=\"" + fN + fileExt + "\"");
                            FileInputStream fis = new FileInputStream(szipFile);
                            os = response.getOutputStream();
                            try {
                                EGEIOUtils.copyStream(fis, os);
                            } finally {
                                fis.close();
                            }
                        } else {
                            String fileExt = getMimeExtensionProvider().getFileExtension(cpath.getOutputDataType().getMimeType());
                            response.setHeader("Content-Disposition", "attachment; filename=\"" + fN + fileExt + "\"");
                            os = response.getOutputStream();
                            EGEIOUtils.unzipSingleFile(new ZipFile(szipFile), os);
                        }
                    } finally {
                        ins.close();
                        if (os != null) {
                            os.flush();
                            os.close();
                        }
                        buffer.clear(true);
                        szipFile.delete();
                        if (zipFile != null) {
                            zipFile.delete();
                        }
                    }
                }
            }
        } else {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
    }
} </s>
<s>class temp {    public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {
        if (Val.chkStr(profileTag).equals("")) {
            profileTag = "Profile";
        }
        String configuration_folder_path = this.getConfigurationFolderPath();
        if (configuration_folder_path == null || configuration_folder_path.length() == 0) {
            Properties properties = new Properties();
            final URL url = CswProfiles.class.getResource("CswCommon.properties");
            properties.load(url.openStream());
            configuration_folder_path = properties.getProperty("DEFAULT_CONFIGURATION_FOLDER_PATH");
        }
        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        ResourcePath rscPath = new ResourcePath();
        InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename);
        if (configFile == null) {
            configFile = rscPath.makeInputSource("/" + configuration_folder_path + filename);
        }
        Document doc = builder.parse(configFile);
        NodeList profileNodes = doc.getElementsByTagName(profileTag);
        for (int i = 0; i < profileNodes.getLength(); i++) {
            Node currProfile = profileNodes.item(i);
            XPath xpath = XPathFactory.newInstance().newXPath();
            String id = Val.chkStr(xpath.evaluate("ID", currProfile));
            String name = Val.chkStr(xpath.evaluate("Name", currProfile));
            String description = Val.chkStr(xpath.evaluate("Description", currProfile));
            String requestXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request", currProfile));
            String expectedGptXmlOutput = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request/@expectedGptXmlOutput", currProfile));
            if (expectedGptXmlOutput.equals("")) {
                expectedGptXmlOutput = FORMAT_SEARCH_TO_XSL.MINIMAL_LEGACY_CSWCLIENT.toString();
            }
            String responseXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Response", currProfile));
            String requestKVPs = Val.chkStr(xpath.evaluate("GetRecordByID/RequestKVPs", currProfile));
            String metadataXslt = Val.chkStr(xpath.evaluate("GetRecordByID/XSLTransformations/Response", currProfile));
            boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialQuery", currProfile)));
            boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportContentTypeQuery", currProfile)));
            boolean extentDisplay = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialBoundary", currProfile)));
            boolean harvestable = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("Harvestable", currProfile)));
            requestXslt = configuration_folder_path + requestXslt;
            responseXslt = configuration_folder_path + responseXslt;
            metadataXslt = configuration_folder_path + metadataXslt;
            SearchXslProfile profile = null;
            try {
                profile = xslProfileClass.getClass().newInstance();
                profile.setId(id);
                profile.setName(name);
                profile.setDescription(description);
                profile.setRequestxslt(requestXslt);
                profile.setResponsexslt(responseXslt);
                profile.setMetadataxslt(metadataXslt);
                profile.setSupportsContentTypeQuery(liveDataMaps);
                profile.setSupportsSpatialBoundary(extentDisplay);
                profile.setSupportsSpatialQuery(extentSearch);
                profile.setKvp(requestKVPs);
                profile.setHarvestable(harvestable);
                profile.setFormatRequestToXsl(SearchXslProfile.FORMAT_SEARCH_TO_XSL.valueOf(expectedGptXmlOutput));
                profile.setFilter_extentsearch(extentSearch);
                profile.setFilter_livedatamap(liveDataMaps);
                addProfile((P) profile);
            } catch (InstantiationException e) {
                throw new IOException("Could not instantiate profile class" + e.getMessage());
            } catch (IllegalAccessException e) {
                throw new IOException("Could not instantiate profile class" + e.getMessage());
            }
        }
    }
} </s>
<s>class temp {    @Test
    public void testTrim() throws Exception {
        TreeNode ast = TestUtil.readFileInAST("resources/SimpleTestFile.java");
        DecoratorSelection ds = new DecoratorSelection();
        XmlFileSystemRepository rep = new XmlFileSystemRepository();
        XmlToFormatContentConverter converter = new XmlToFormatContentConverter(rep);
        URI url = new File("resources/javaDefaultFormats.xml").toURI();
        InputStream is = url.toURL().openStream();
        converter.convert(is);
        File f = new File("resources/javaDefaultFormats.xml").getAbsoluteFile();
        converter.convert(f);
        String string = new File("resources/query.xml").getAbsolutePath();
        Document qDoc = XmlUtil.loadXmlFromFile(string);
        Query query = new Query(qDoc);
        Format format = XfsrFormatManager.getInstance().getFormats("java", "signature only");
        TokenAutoTrimmer.create("Java", "resources/java.autotrim");
        Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument();
        String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><sourcecode>main(String[])</sourcecode>";
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        XmlUtil.outputXml(doc, bout);
        String actual = bout.toString();
        assertEquals(expected, actual);
    }
} </s>
<s>class temp {    public static void copy(File inputFile, File target) throws IOException {
        if (!inputFile.exists()) return;
        OutputStream output = new FileOutputStream(target);
        InputStream input = new BufferedInputStream(new FileInputStream(inputFile));
        int b;
        while ((b = input.read()) != -1) output.write(b);
        output.close();
        input.close();
    }
} </s>
<s>class temp {    public void sendLargePostRequest(final int size) throws IOException {
        String encodedData = URLEncoder.encode("test", WebCastellumParameter.DEFAULT_CHARACTER_ENCODING.getValue()) + "=" + URLEncoder.encode("this is just a mass test", WebCastellumParameter.DEFAULT_CHARACTER_ENCODING.getValue());
        encodedData += "&" + URLEncoder.encode("payload", WebCastellumParameter.DEFAULT_CHARACTER_ENCODING.getValue()) + "=" + createTestdata(size);
        final long start = System.currentTimeMillis();
        final long end;
        HttpURLConnection connection = (HttpURLConnection) this.url.openConnection();
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.setUseCaches(false);
        connection.setFollowRedirects(true);
        connection.setInstanceFollowRedirects(true);
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        connection.setRequestProperty("Content-Length", "" + encodedData.length());
        DataOutputStream output = null;
        BufferedReader reader = null;
        try {
            output = new DataOutputStream(connection.getOutputStream());
            output.writeBytes(encodedData);
            output.flush();
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
            }
            end = System.currentTimeMillis();
        } finally {
            if (output != null) {
                try {
                    output.close();
                } catch (IOException ignored) {
                }
            }
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ignored) {
                }
            }
        }
        System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        System.out.println("Duration: " + (end - start) + " ms");
    }
} </s>
<s>class temp {    @Override
    public InitResult init(String name) {
        this.urlString = name;
        URL url;
        URLConnection con;
        try {
            url = new URL(urlString);
            con = url.openConnection();
            int size = con.getContentLength();
            char[] characters = new char[size];
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            in.read(characters);
            in.close();
            return new InitResult(0, size, characters);
        } catch (Exception e) {
            throw new ParserException(e);
        }
    }
} </s>
<s>class temp {    @Override
    public void addApplication(Application app) {
        logger.info("Adding a new application " + app.getName() + " by " + app.getOrganisation() + " (" + app.getEmail() + ") ");
        app.setRegtime(new Timestamp(new Date().getTime()));
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            md.update((app.getName() + app.getEmail() + app.getRegtime()).getBytes());
            byte byteData[] = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            app.setAppid(sb.toString());
        } catch (NoSuchAlgorithmException ex) {
            java.util.logging.Logger.getLogger(ApplicationDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(app.toString());
        SqlParameterSource parameters = new BeanPropertySqlParameterSource(app);
        Number appUid = insertApplication.executeAndReturnKey(parameters);
        app.setId(appUid.longValue());
    }
} </s>
<s>class temp {    @Test(dependsOnMethods = { "getSize" })
    public void download() throws IOException {
        FileObject typica = fsManager.resolveFile("s3://" + bucketName + "/jonny.zip");
        File localCache = File.createTempFile("vfs.", ".s3-test");
        FileOutputStream out = new FileOutputStream(localCache);
        IOUtils.copy(typica.getContent().getInputStream(), out);
        Assert.assertEquals(localCache.length(), typica.getContent().getSize());
        localCache.delete();
    }
} </s>
<s>class temp {    public String getMD5String(String par1Str) {
        try {
            String s = (new StringBuilder()).append(field_27370_a).append(par1Str).toString();
            MessageDigest messagedigest = MessageDigest.getInstance("MD5");
            messagedigest.update(s.getBytes(), 0, s.length());
            return (new BigInteger(1, messagedigest.digest())).toString(16);
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
    }
} </s>
<s>class temp {    public static String calculateHash(String data, String algorithm) {
        if (data == null) {
            return null;
        }
        algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase());
        if (algorithm.equals(PLAIN)) {
            return data;
        }
        if (algorithm.startsWith("{RSA}")) {
            return encode(data, algorithm.substring(5), "RSA");
        }
        try {
            MessageDigest md = MessageDigest.getInstance(algorithm);
            md.update(data.getBytes("UTF-8"));
            return getHashString(md.digest());
        } catch (UnsupportedEncodingException e) {
            logger.error(e.getMessage());
            return null;
        } catch (NoSuchAlgorithmException nsae) {
            logger.error(nsae.getMessage());
            return null;
        }
    }
} </s>
<s>class temp {    public static String md5Encode(String s) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(s.getBytes());
            return toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return s;
        }
    }
} </s>
<s>class temp {    public static String md5(String value) throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        try {
            messageDigest.update(value.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            messageDigest.update(value.getBytes());
        }
        byte[] bytes = messageDigest.digest();
        return byteArrayToHexString(bytes);
    }
} </s>
<s>class temp {    @Deprecated
    public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception {
        List<SearchKeyResult> outVec = new ArrayList<SearchKeyResult>();
        String uri = iKeyServer + "/pks/lookup?search=" + URLEncoder.encode(iText, UTF8);
        URL url = new URL(uri);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        Pattern regex = Pattern.compile("pub.*?<a\\s+href\\s*=\"(.*?)\".*?>\\s*(\\w+)\\s*</a>.*?(\\d+-\\d+-\\d+).*?<a\\s+href\\s*=\".*?\".*?>\\s*(.+?)\\s*</a>", Pattern.CANON_EQ);
        String line;
        while ((line = input.readLine()) != null) {
            Matcher regexMatcher = regex.matcher(line);
            while (regexMatcher.find()) {
                String id = regexMatcher.group(2);
                String downUrl = iKeyServer + regexMatcher.group(1);
                String downDate = regexMatcher.group(3);
                String name = decodeHTML(regexMatcher.group(4));
                outVec.add(new SearchKeyResult(id, name, downDate, downUrl));
            }
        }
        IOUtils.closeQuietly(input);
        return outVec;
    }
} </s>
<s>class temp {    public static boolean urlStrIsDir(String urlStr) {
        if (urlStr.endsWith("/")) return true;
        int lastSlash = urlStr.lastIndexOf('/');
        int lastPeriod = urlStr.lastIndexOf('.');
        if (lastPeriod != -1 && (lastSlash == -1 || lastPeriod > lastSlash)) return false;
        String urlStrWithSlash = urlStr + "/";
        try {
            URL url = new URL(urlStrWithSlash);
            InputStream f = url.openStream();
            f.close();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
} </s>
<s>class temp {    public void readData() throws IOException {
        i = 0;
        j = 0;
        URL url = getClass().getResource("resources/tuneGridMaster.dat");
        InputStream is = url.openStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        s = br.readLine();
        StringTokenizer st = new StringTokenizer(s);
        tune_x[i][j] = Double.parseDouble(st.nextToken());
        gridmin = tune_x[i][j];
        temp_prev = tune_x[i][j];
        tune_y[i][j] = Double.parseDouble(st.nextToken());
        kd[i][j] = Double.parseDouble(st.nextToken());
        kfs[i][j] = Double.parseDouble(st.nextToken());
        kfl[i][j] = Double.parseDouble(st.nextToken());
        kdee[i][j] = Double.parseDouble(st.nextToken());
        kdc[i][j] = Double.parseDouble(st.nextToken());
        kfc[i][j] = Double.parseDouble(st.nextToken());
        j++;
        int k = 0;
        while ((s = br.readLine()) != null) {
            st = new StringTokenizer(s);
            temp_new = Double.parseDouble(st.nextToken());
            if (temp_new != temp_prev) {
                temp_prev = temp_new;
                i++;
                j = 0;
            }
            tune_x[i][j] = temp_new;
            tune_y[i][j] = Double.parseDouble(st.nextToken());
            kd[i][j] = Double.parseDouble(st.nextToken());
            kfs[i][j] = Double.parseDouble(st.nextToken());
            kfl[i][j] = Double.parseDouble(st.nextToken());
            kdee[i][j] = Double.parseDouble(st.nextToken());
            kdc[i][j] = Double.parseDouble(st.nextToken());
            kfc[i][j] = Double.parseDouble(st.nextToken());
            imax = i;
            jmax = j;
            j++;
            k++;
        }
        gridmax = tune_x[i][j - 1];
    }
} </s>
<s>class temp {    private void createSaveServiceProps() throws MojoExecutionException {
        saveServiceProps = new File(workDir, "saveservice.properties");
        try {
            FileWriter out = new FileWriter(saveServiceProps);
            IOUtils.copy(Thread.currentThread().getContextClassLoader().getResourceAsStream("saveservice.properties"), out);
            out.flush();
            out.close();
            System.setProperty("saveservice_properties", File.separator + "target" + File.separator + "jmeter" + File.separator + "saveservice.properties");
        } catch (IOException e) {
            throw new MojoExecutionException("Could not create temporary saveservice.properties", e);
        }
    }
} </s>
<s>class temp {    public void registerSchema(String newSchemaName, String objectControlller, long boui, String expression, String schema) throws SQLException {
        Connection cndef = null;
        PreparedStatement pstm = null;
        try {
            cndef = this.getRepositoryConnection(p_ctx.getApplication(), "default", 2);
            String friendlyName = MessageLocalizer.getMessage("SCHEMA_CREATED_BY_OBJECT") + " [" + objectControlller + "] " + MessageLocalizer.getMessage("WITH_BOUI") + " [" + boui + "]";
            pstm = cndef.prepareStatement("DELETE FROM NGTDIC WHERE TABLENAME=? and objecttype='S'");
            pstm.setString(1, newSchemaName);
            pstm.executeUpdate();
            pstm.close();
            pstm = cndef.prepareStatement("INSERT INTO NGTDIC (SCHEMA,OBJECTNAME,OBJECTTYPE,TABLENAME, " + "FRIENDLYNAME, EXPRESSION) VALUES (" + "?,?,?,?,?,?)");
            pstm.setString(1, schema);
            pstm.setString(2, newSchemaName);
            pstm.setString(3, "S");
            pstm.setString(4, newSchemaName);
            pstm.setString(5, friendlyName);
            pstm.setString(6, expression);
            pstm.executeUpdate();
            pstm.close();
            cndef.commit();
        } catch (Exception e) {
            cndef.rollback();
            e.printStackTrace();
            throw new SQLException(e.getMessage());
        } finally {
            if (pstm != null) {
                try {
                    pstm.close();
                } catch (Exception e) {
                }
            }
        }
    }
} </s>
<s>class temp {    public static boolean copyDataToNewTable(EboContext p_eboctx, String srcTableName, String destTableName, String where, boolean log, int mode) throws boRuntimeException {
        srcTableName = srcTableName.toUpperCase();
        destTableName = destTableName.toUpperCase();
        Connection cn = null;
        Connection cndef = null;
        boolean ret = false;
        try {
            boolean srcexists = false;
            boolean destexists = false;
            final InitialContext ic = new InitialContext();
            cn = p_eboctx.getConnectionData();
            cndef = p_eboctx.getConnectionDef();
            PreparedStatement pstm = cn.prepareStatement("SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME=?");
            pstm.setString(1, srcTableName);
            ResultSet rslt = pstm.executeQuery();
            if (rslt.next()) {
                srcexists = true;
            }
            rslt.close();
            pstm.setString(1, destTableName);
            rslt = pstm.executeQuery();
            if (rslt.next()) {
                destexists = true;
            }
            if (!destexists) {
                rslt.close();
                pstm.close();
                pstm = cn.prepareStatement("SELECT VIEW_NAME FROM USER_VIEWS WHERE VIEW_NAME=?");
                pstm.setString(1, destTableName);
                rslt = pstm.executeQuery();
                if (rslt.next()) {
                    CallableStatement cstm = cn.prepareCall("DROP VIEW " + destTableName);
                    cstm.execute();
                    cstm.close();
                }
            }
            rslt.close();
            pstm.close();
            if (srcexists && !destexists) {
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage("CREATING_AND_COPY_DATA_FROM") + " [" + srcTableName + "] " + LoggerMessageLocalizer.getMessage("TO") + " [" + destTableName + "]");
                }
                CallableStatement cstm = cn.prepareCall("CREATE TABLE " + destTableName + " AS SELECT * FROM " + srcTableName + " " + (((where != null) && (where.length() > 0)) ? (" WHERE " + where) : ""));
                cstm.execute();
                cstm.close();
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage("UPDATING_NGTDIC"));
                }
                cn.commit();
                ret = true;
            } else if (srcexists && destexists) {
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage("COPY_DATA_FROM") + " [" + srcTableName + "] " + LoggerMessageLocalizer.getMessage("TO") + "  [" + destTableName + "]");
                }
                PreparedStatement pstm2 = cn.prepareStatement("SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = ? ");
                pstm2.setString(1, destTableName);
                ResultSet rslt2 = pstm2.executeQuery();
                StringBuffer fields = new StringBuffer();
                PreparedStatement pstm3 = cn.prepareStatement("SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = ? and COLUMN_NAME=?");
                while (rslt2.next()) {
                    pstm3.setString(1, srcTableName);
                    pstm3.setString(2, rslt2.getString(1));
                    ResultSet rslt3 = pstm3.executeQuery();
                    if (rslt3.next()) {
                        if (fields.length() > 0) {
                            fields.append(',');
                        }
                        fields.append('"').append(rslt2.getString(1)).append('"');
                    }
                    rslt3.close();
                }
                pstm3.close();
                rslt2.close();
                pstm2.close();
                CallableStatement cstm;
                int recs = 0;
                if ((mode == 0) || (mode == 1)) {
                    cstm = cn.prepareCall("INSERT INTO " + destTableName + "( " + fields.toString() + " ) ( SELECT " + fields.toString() + " FROM " + srcTableName + " " + (((where != null) && (where.length() > 0)) ? (" WHERE " + where) : "") + ")");
                    recs = cstm.executeUpdate();
                    cstm.close();
                    if (log) {
                        logger.finest(LoggerMessageLocalizer.getMessage("DONE") + " [" + recs + "] " + LoggerMessageLocalizer.getMessage("RECORDS_COPIED"));
                    }
                }
                cn.commit();
                ret = true;
            }
        } catch (Exception e) {
            try {
                cn.rollback();
            } catch (Exception z) {
                throw new boRuntimeException("boBuildDB.moveTable", "BO-1304", z);
            }
            throw new boRuntimeException("boBuildDB.moveTable", "BO-1304", e);
        } finally {
            try {
                cn.close();
            } catch (Exception e) {
            }
            try {
                cndef.close();
            } catch (Exception e) {
            }
        }
        return ret;
    }
} </s>
<s>class temp {    public static final boolean zipExtract(String zipfile, String name, String dest) {
        boolean f = false;
        try {
            InputStream in = new BufferedInputStream(new FileInputStream(zipfile));
            ZipInputStream zin = new ZipInputStream(in);
            ZipEntry e;
            while ((e = zin.getNextEntry()) != null) {
                if (e.getName().equals(name)) {
                    FileOutputStream out = new FileOutputStream(dest);
                    byte b[] = new byte[TEMP_FILE_BUFFER_SIZE];
                    int len = 0;
                    while ((len = zin.read(b)) != -1) out.write(b, 0, len);
                    out.close();
                    f = true;
                    break;
                }
            }
            zin.close();
        } catch (FileNotFoundException e) {
            MLUtil.runtimeError(e, "extractZip " + zipfile + " " + name);
        } catch (IOException e) {
            MLUtil.runtimeError(e, "extractZip " + zipfile + " " + name);
        }
        return (f);
    }
} </s>
<s>class temp {    public static final boolean zipUpdate(String zipfile, String name, String oldname, byte[] contents, boolean delete) {
        try {
            File temp = File.createTempFile("atf", ".zip");
            InputStream in = new BufferedInputStream(new FileInputStream(zipfile));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(temp));
            ZipInputStream zin = new ZipInputStream(in);
            ZipOutputStream zout = new ZipOutputStream(os);
            ZipEntry e;
            ZipEntry e2;
            byte buffer[] = new byte[TEMP_FILE_BUFFER_SIZE];
            int bytesRead;
            boolean found = false;
            boolean rename = false;
            String oname = name;
            if (oldname != null) {
                name = oldname;
                rename = true;
            }
            while ((e = zin.getNextEntry()) != null) {
                if (!e.isDirectory()) {
                    String ename = e.getName();
                    if (delete && ename.equals(name)) continue;
                    e2 = new ZipEntry(rename ? oname : ename);
                    zout.putNextEntry(e2);
                    if (ename.equals(name)) {
                        found = true;
                        zout.write(contents);
                    } else {
                        while ((bytesRead = zin.read(buffer)) != -1) zout.write(buffer, 0, bytesRead);
                    }
                    zout.closeEntry();
                }
            }
            if (!found && !delete) {
                e = new ZipEntry(name);
                zout.putNextEntry(e);
                zout.write(contents);
                zout.closeEntry();
            }
            zin.close();
            zout.close();
            File fp = new File(zipfile);
            fp.delete();
            MLUtil.copyFile(temp, fp);
            temp.delete();
            return (true);
        } catch (FileNotFoundException e) {
            MLUtil.runtimeError(e, "updateZip " + zipfile + " " + name);
        } catch (IOException e) {
            MLUtil.runtimeError(e, "updateZip " + zipfile + " " + name);
        }
        return (false);
    }
} </s>
<s>class temp {    @Override
    public void download(String remoteFilePath, String localFilePath) {
        InputStream remoteStream = null;
        try {
            remoteStream = client.get(remoteFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
        OutputStream localStream = null;
        try {
            localStream = new FileOutputStream(new File(localFilePath));
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
        try {
            IOUtils.copy(remoteStream, localStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public T08OTSDTMInterpositionUnitTestCase(String name) throws java.io.IOException {
        super(name);
        java.net.URL url = ClassLoader.getSystemResource("host0.cosnaming.jndi.properties");
        jndiProps = new java.util.Properties();
        jndiProps.load(url.openStream());
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    @Override
    public void run() {
        try {
            long pos = begin;
            byte[] buf = new byte[1024];
            URLConnection cn = url.openConnection();
            Utils.setHeader(cn);
            cn.setRequestProperty("Range", "bytes=" + begin + "-" + end);
            BufferedInputStream bis = new BufferedInputStream(cn.getInputStream());
            int len;
            while ((len = bis.read(buf)) > 0) {
                synchronized (file) {
                    file.seek(pos);
                    file.write(buf, 0, len);
                }
                pos += len;
                Statics.getInstance().addComleted(len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        latch.countDown();
    }
} </s>
<s>class temp {    protected String contentString() {
        String result = null;
        URL url;
        String encoding = null;
        try {
            url = url();
            URLConnection connection = url.openConnection();
            connection.setDoInput(true);
            connection.setDoOutput(false);
            connection.setUseCaches(false);
            for (Enumeration e = bindingKeys().objectEnumerator(); e.hasMoreElements(); ) {
                String key = (String) e.nextElement();
                if (key.startsWith("?")) {
                    connection.setRequestProperty(key.substring(1), valueForBinding(key).toString());
                }
            }
            if (connection.getContentEncoding() != null) {
                encoding = connection.getContentEncoding();
            }
            if (encoding == null) {
                encoding = (String) valueForBinding("encoding");
            }
            if (encoding == null) {
                encoding = "UTF-8";
            }
            InputStream stream = connection.getInputStream();
            byte bytes[] = ERXFileUtilities.bytesFromInputStream(stream);
            stream.close();
            result = new String(bytes, encoding);
        } catch (IOException ex) {
            throw NSForwardException._runtimeExceptionForThrowable(ex);
        }
        return result;
    }
} </s>
<s>class temp {    protected static byte[] hashPassword(byte[] saltBytes, String plaintextPassword) throws AssertionError {
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException ex) {
            throw (AssertionError) new AssertionError("No MD5 message digest supported.").initCause(ex);
        }
        digest.update(saltBytes);
        try {
            digest.update(plaintextPassword.getBytes("utf-8"));
        } catch (UnsupportedEncodingException ex) {
            throw (AssertionError) new AssertionError("No UTF-8 encoding supported.").initCause(ex);
        }
        byte[] passwordBytes = digest.digest();
        return passwordBytes;
    }
} </s>
<s>class temp {    public static String getMD5Str(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.reset();
            messageDigest.update(str.getBytes("UTF-8"));
        } catch (NoSuchAlgorithmException e) {
            System.out.println("NoSuchAlgorithmException caught!");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
} </s>
<s>class temp {    public int readRaw(byte[] buffer, int offset, int length) throws IOException {
        if (offset < 0 || length < 0 || (offset + length) > buffer.length) {
            throw new IndexOutOfBoundsException();
        }
        HttpURLConnection connection = null;
        InputStream is = null;
        int n = 0;
        try {
            connection = (HttpURLConnection) url.openConnection();
            String byteRange = "bytes=" + position + "-" + (position + length - 1);
            connection.setRequestProperty("Range", byteRange);
            is = connection.getInputStream();
            while (n < length) {
                int count = is.read(buffer, offset + n, length - n);
                if (count < 0) {
                    throw new EOFException();
                }
                n += count;
            }
            position += n;
            return n;
        } catch (EOFException e) {
            return n;
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("We're screwed...");
            System.out.println(n);
            if (e.getMessage().contains("response code: 416")) {
                System.out.println("Trying to be mister nice guy, returning " + n);
                return n;
            } else {
                throw e;
            }
        } finally {
            if (is != null) {
                is.close();
            }
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
} </s>
<s>class temp {    public static void upload(FTPDetails ftpDetails) {
        FTPClient ftp = new FTPClient();
        try {
            String host = ftpDetails.getHost();
            logger.info("Connecting to ftp host: " + host);
            ftp.connect(host);
            logger.info("Received reply from ftp :" + ftp.getReplyString());
            ftp.login(ftpDetails.getUserName(), ftpDetails.getPassword());
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.makeDirectory(ftpDetails.getRemoterDirectory());
            logger.info("Created directory :" + ftpDetails.getRemoterDirectory());
            ftp.changeWorkingDirectory(ftpDetails.getRemoterDirectory());
            BufferedInputStream ftpInput = new BufferedInputStream(new FileInputStream(new File(ftpDetails.getLocalFilePath())));
            OutputStream storeFileStream = ftp.storeFileStream(ftpDetails.getRemoteFileName());
            IOUtils.copy(ftpInput, storeFileStream);
            logger.info("Copied file : " + ftpDetails.getLocalFilePath() + " >>> " + host + ":/" + ftpDetails.getRemoterDirectory() + "/" + ftpDetails.getRemoteFileName());
            ftpInput.close();
            storeFileStream.close();
            ftp.logout();
            ftp.disconnect();
            logger.info("Logged out. ");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public void signAndSend() throws Exception {
        SSLContext sslContext = null;
        try {
            sslContext = SSLContext.getInstance("TLS");
            X509TrustManager[] xtmArray = new X509TrustManager[] { xtm };
            sslContext.init(null, xtmArray, new java.security.SecureRandom());
        } catch (GeneralSecurityException gse) {
            this.addException("GeneralSecurityException", gse);
        }
        if (sslContext != null) {
            HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());
        }
        HttpsURLConnection.setDefaultHostnameVerifier(hnv);
        String providerName = System.getProperty("jsr105Provider", "org.jcp.xml.dsig.internal.dom.XMLDSigRI");
        XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance());
        DigestMethod dm = fac.newDigestMethod(DigestMethod.SHA1, null);
        List transforms = new Vector(2);
        transforms.add(fac.newTransform("http://www.w3.org/2000/09/xmldsig#enveloped-signature", (TransformParameterSpec) null));
        List prefixlist = new Vector(1);
        prefixlist.add("xsd");
        transforms.add(fac.newTransform("http://www.w3.org/2001/10/xml-exc-c14n#", new ExcC14NParameterSpec(prefixlist)));
        Random randgen = new Random();
        byte[] rand_bytes = new byte[20];
        randgen.nextBytes(rand_bytes);
        String assertion_id_str = "i" + new String(Hex.encodeHex(rand_bytes));
        Reference ref = fac.newReference("#" + assertion_id_str, dm, transforms, null, null);
        CanonicalizationMethod cm = fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null);
        SignatureMethod sm = fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null);
        SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref));
        KeyStore ks = KeyStore.getInstance("JKS");
        FileInputStream fis = null;
        if (TEST_SIGNED_WITH_WRONG_CERT == testNumber) {
            fis = new FileInputStream(resourceFolder + "z-xtra-sign.jks");
        } else {
            fis = new FileInputStream(resourceFolder + "z-idp-sign.jks");
        }
        ks.load(fis, "changeit".toCharArray());
        {
            Enumeration aliases = ks.aliases();
            for (; aliases.hasMoreElements(); ) {
                String alias = (String) aliases.nextElement();
                boolean b = ks.isKeyEntry(alias);
                b = ks.isCertificateEntry(alias);
                System.out.println(b + " " + alias);
            }
        }
        PrivateKey privateKey = (PrivateKey) ks.getKey("tomcat", "changeit".toCharArray());
        XMLSignature signature = fac.newXMLSignature(si, null);
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        DocumentBuilder db = dbf.newDocumentBuilder();
        File docFile = new File(resourceFolder + "BaseRequest.xml");
        Document doc = db.parse(docFile);
        Element root = doc.getDocumentElement();
        NamedNodeMap root_atts = root.getAttributes();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
        GregorianCalendar right_now = new GregorianCalendar();
        if (TEST_NOT_ON_OR_AFTER_EXPIRED == testNumber) {
            right_now.add(Calendar.MINUTE, alterNowDateBy);
        }
        Date issue_date = right_now.getTime();
        right_now.add(Calendar.MINUTE, -10);
        Date auth_instant_date = right_now.getTime();
        right_now.add(Calendar.MINUTE, 20);
        Date not_on_or_after_date = right_now.getTime();
        System.out.println("Not on or after 1: " + sdf.format(right_now.getTime()));
        Node response_id = root_atts.getNamedItem("ID");
        randgen.nextBytes(rand_bytes);
        response_id.setNodeValue("i" + new String(Hex.encodeHex(rand_bytes)));
        Node response_issue_instant = root_atts.getNamedItem("IssueInstant");
        response_issue_instant.setNodeValue(sdf.format(issue_date));
        NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion");
        Element assertion_node = (Element) tmp_nlist.item(0);
        NamedNodeMap ass_node_atts = assertion_node.getAttributes();
        Node assertion_id = ass_node_atts.getNamedItem("ID");
        assertion_id.setNodeValue(assertion_id_str);
        Node assertion_issue_instant = ass_node_atts.getNamedItem("IssueInstant");
        assertion_issue_instant.setNodeValue(sdf.format(issue_date));
        tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject");
        Element subject_node = (Element) tmp_nlist.item(0);
        if (TEST_UNKNOWN_CONFIRMATION == testNumber) {
            tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation");
            Element subj_conf_node = (Element) tmp_nlist.item(0);
            NamedNodeMap subj_conf_node_atts = subj_conf_node.getAttributes();
            Node method_node = subj_conf_node_atts.getNamedItem("Method");
            method_node.setNodeValue(badConfirmationMethod);
        }
        tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID");
        Element name_id_node = (Element) tmp_nlist.item(0);
        NamedNodeMap name_id_node_atts = name_id_node.getAttributes();
        Node sp_name_qualifier = name_id_node_atts.getNamedItem("SPNameQualifier");
        sp_name_qualifier.setNodeValue(sPEntityId);
        Node name_id_value = name_id_node.getFirstChild();
        randgen.nextBytes(rand_bytes);
        name_id_value.setNodeValue(new String(Hex.encodeHex(rand_bytes)));
        tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData");
        Element subj_conf_data_node = (Element) tmp_nlist.item(0);
        NamedNodeMap subj_conf_data_node_atts = subj_conf_data_node.getAttributes();
        Node not_on_or_after_node = subj_conf_data_node_atts.getNamedItem("NotOnOrAfter");
        not_on_or_after_node.setNodeValue(sdf.format(not_on_or_after_date));
        Node recipient_node = subj_conf_data_node_atts.getNamedItem("Recipient");
        if (TEST_WRONG_RECIPIENT == testNumber) {
            recipient_node.setNodeValue(badRecipientValue);
        } else {
            recipient_node.setNodeValue(sPAssertionConsumerService);
        }
        tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience");
        Element audience_node = (Element) tmp_nlist.item(0);
        Node audience_value = audience_node.getFirstChild();
        if (TEST_WRONG_AUDIENCE == testNumber) {
            audience_value.setNodeValue(badAudienceValue);
        } else {
            audience_value.setNodeValue(sPEntityId);
        }
        tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement");
        Element authn_statement_node = (Element) tmp_nlist.item(0);
        NamedNodeMap authn_statement_node_atts = authn_statement_node.getAttributes();
        Node authn_instant_node = authn_statement_node_atts.getNamedItem("AuthnInstant");
        authn_instant_node.setNodeValue(sdf.format(auth_instant_date));
        Node sess_idx_node = authn_statement_node_atts.getNamedItem("SessionIndex");
        sess_idx_node.setNodeValue(assertion_id_str);
        DOMSignContext signContext = new DOMSignContext(privateKey, assertion_node, subject_node);
        signContext.putNamespacePrefix("http://www.w3.org/2000/09/xmldsig#", "ds");
        signContext.putNamespacePrefix("http://www.w3.org/2001/10/xml-exc-c14n#", "ec");
        signature.sign(signContext);
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer trans;
        if (TEST_DATA_ALTERED_AFTER_SIG == testNumber) {
            right_now.add(Calendar.MINUTE, 10);
            System.out.println("Not on or after: " + sdf.format(right_now.getTime()));
            not_on_or_after_node.setNodeValue(sdf.format(right_now.getTime()));
        }
        trans = tf.newTransformer();
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        trans.transform(new DOMSource(doc), new StreamResult(pw));
        if (useJavaPOST) {
            try {
                URL url = new URL(sPAssertionConsumerService);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setDoOutput(true);
                conn.setDoInput(true);
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
                conn.setInstanceFollowRedirects(false);
                conn.setUseCaches(false);
                String base64ofDoc = Base64.encode(sw.toString().getBytes());
                DataOutputStream printout = new DataOutputStream(conn.getOutputStream());
                String content = "SAMLResponse=" + URLEncoder.encode(base64ofDoc, "UTF-8");
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                if (TEST_GOOD_REPLAY == testNumber) {
                    base64Assertion = Base64.encode(sw.toString().getBytes());
                    replay = true;
                }
                BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String redirect = conn.getHeaderField("Location");
                if (redirect != null) {
                    input.close();
                    URL url2 = new URL(redirect);
                    URLConnection conn2 = url2.openConnection();
                    String cookie = conn.getHeaderField("Set-Cookie");
                    if (cookie != null) {
                        int index = cookie.indexOf(";");
                        if (index >= 0) cookie = cookie.substring(0, index);
                        conn2.setRequestProperty("Cookie", cookie);
                    }
                    input = new BufferedReader(new InputStreamReader(conn2.getInputStream()));
                }
                StringBuffer buff = new StringBuffer();
                String str2;
                while (null != ((str2 = input.readLine()))) {
                    buff.append(str2);
                }
                input.close();
                result = buff.toString();
                success = true;
            } catch (MalformedURLException me) {
                this.addException("MalformedURLException", me);
            } catch (IOException ioe) {
                this.addException("IOException", ioe);
            }
        } else {
            base64Assertion = Base64.encode(sw.toString().getBytes());
            Transformer transPretty = tf.newTransformer(new StreamSource(resourceFolder + "PrettyPrint.xslt"));
            StringWriter swPretty = new StringWriter();
            PrintWriter pwPretty = new PrintWriter(sw);
            trans.transform(new DOMSource(doc), new StreamResult(pwPretty));
            prettyAssertion = sw.toString();
            System.out.println(XMLHelper.prettyPrintXML(doc.getFirstChild()));
            success = true;
        }
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        try {
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            try {
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            } finally {
                destinationChannel.close();
            }
        } finally {
            sourceChannel.close();
        }
    }
} </s>
<s>class temp {    public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);
                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;
                int row;
                if (root.equals("*") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);
                boolean use = determineRecognitionUse(root, surface);
                bumpAllRowsDown(stmt, language, tag, row);
                String sql = "insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) " + "values ('" + language + "', " + row + ", '" + root + "', '" + surface + "', '" + tag + "', ";
                if (use == true) sql = sql + "TRUE)"; else sql = sql + "FALSE)";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {    public void delete(String language, String tag, int row) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                String sql = "delete from LanguageMorphologies " + "where LanguageName = '" + language + "' and MorphologyTag = '" + tag + "' and " + "      Rank = " + row;
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);
                bumpAllRowsUp(stmt, language, tag, row);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {    public void moveRuleUp(String language, String tag, int row) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                int max = findMaxRank(stmt, language, tag);
                if ((row < 2) || (row > max)) throw new IllegalArgumentException("Row number (" + row + ") was not between 2 and " + max);
                stmt.executeUpdate("update LanguageMorphologies set Rank = -1 " + "where Rank = " + row + " and MorphologyTag = '" + tag + "' and " + "      LanguageName = '" + language + "'");
                stmt.executeUpdate("update LanguageMorphologies set Rank = " + row + "where Rank = " + (row - 1) + " and MorphologyTag = '" + tag + "' and " + "      LanguageName = '" + language + "'");
                stmt.executeUpdate("update LanguageMorphologies set Rank = " + (row - 1) + "where Rank = -1 and MorphologyTag = '" + tag + "' and " + "      LanguageName = '" + language + "'");
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {    public void moveRuleDown(String language, String tag, int row) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                int max = findMaxRank(stmt, language, tag);
                if ((row < 1) || (row > (max - 1))) throw new IllegalArgumentException("Row number (" + row + ") was not between 1 and " + (max - 1));
                stmt.executeUpdate("update LanguageMorphologies set Rank = -1 " + "where Rank = " + row + " and MorphologyTag = '" + tag + "' and " + "      LanguageName = '" + language + "'");
                stmt.executeUpdate("update LanguageMorphologies set Rank = " + row + "where Rank = " + (row + 1) + " and MorphologyTag = '" + tag + "' and " + "      LanguageName = '" + language + "'");
                stmt.executeUpdate("update LanguageMorphologies set Rank = " + (row + 1) + "where Rank = -1 and MorphologyTag = '" + tag + "' and " + "      LanguageName = '" + language + "'");
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {        private void checkSites() {
            Log.d(LOG_TAG, "Updating sites: " + sitesToCheck.keySet().toString());
            for (Map.Entry<Site, Item> entry : sitesToCheck.entrySet()) {
                final Site site = entry.getKey();
                final Item oldItem = entry.getValue();
                try {
                    final HttpGet req = new HttpGet(site.getUrl().toURI());
                    req.addHeader("Cache-Control", "no-cache");
                    req.addHeader("Pragma", "no-cache");
                    if (oldItem != null) {
                        final Date lastModified = oldItem.getTimestamp();
                        if (lastModified != null) {
                            req.addHeader("If-Modified-Since", Utils.formatRFC822Date(lastModified));
                        }
                    }
                    final HttpResponse response = httpClient.execute(req);
                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                        final FeedHandler handler = site.getHandler().newInstance();
                        final InputStream in = response.getEntity().getContent();
                        Xml.parse(in, site.getEncoding(), handler);
                        in.close();
                        notify(site, handler.getCurrentItem());
                    } else if (response.getStatusLine().getStatusCode() != 304) {
                        Log.e(LOG_TAG, "HTTP request for " + site.name() + " failed: " + response.getStatusLine().toString());
                    }
                } catch (Throwable e) {
                    Log.e(LOG_TAG, e.getMessage(), e);
                }
            }
        }
} </s>
<s>class temp {    private void extractByParsingHtml(String refererURL, String requestURL) throws MalformedURLException, IOException {
        URL url = new URL(refererURL);
        InputStream is = url.openStream();
        mRefererURL = refererURL;
        if (requestURL.startsWith("http://www.")) {
            mRequestURLWWW = requestURL;
            mRequestURL = "http://" + mRequestURLWWW.substring(11);
        } else {
            mRequestURL = requestURL;
            mRequestURLWWW = "http://www." + mRequestURL.substring(7);
        }
        Parser parser = (new HTMLEditorKit() {

            public Parser getParser() {
                return super.getParser();
            }
        }).getParser();
        StringBuffer sb = new StringBuffer();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        try {
            String line = null;
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            br.close();
        }
        StringReader sr = new StringReader(sb.toString());
        parser.parse(sr, new LinkbackCallback(), true);
        if (mStart != 0 && mEnd != 0 && mEnd > mStart) {
            mExcerpt = sb.toString().substring(mStart, mEnd);
            mExcerpt = Utilities.removeHTML(mExcerpt);
            if (mExcerpt.length() > mMaxExcerpt) {
                mExcerpt = mExcerpt.substring(0, mMaxExcerpt) + "...";
            }
        }
        if (mTitle.startsWith(">") && mTitle.length() > 1) {
            mTitle = mTitle.substring(1);
        }
    }
} </s>
<s>class temp {        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
} </s>
<s>class temp {    public String upload() throws IOException {
        int idx = docIndex.incrementAndGet();
        String tmpName = "namefinder/doc_" + idx + "__" + fileFileName;
        File tmpFile = tmpFile(tmpName);
        if (tmpFile.exists()) {
            org.apache.commons.io.FileUtils.deleteQuietly(tmpFile);
        }
        org.apache.commons.io.FileUtils.touch(tmpFile);
        InputStream fileStream = new FileInputStream(file);
        OutputStream bos = new FileOutputStream(tmpFile);
        IOUtils.copy(fileStream, bos);
        bos.close();
        fileStream.close();
        return tmpUrl(tmpName);
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        try {
            MessageDigest sha1 = MessageDigest.getInstance("SHA1");
            sha1.update("Test".getBytes());
            byte[] digest = sha1.digest();
            for (int i = 0; i < digest.length; i++) {
                System.err.print(Integer.toHexString(0xFF & digest[i]));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public static String MD5(String text) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("MD5");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes("iso-8859-1"), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
            return text;
        } catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
            return text;
        }
    }
} </s>
<s>class temp {    @Override
    public T[] sort(T[] values) {
        super.compareTimes = 0;
        for (int i = 0; i < values.length; i++) {
            for (int j = 0; j < values.length - i - 1; j++) {
                super.compareTimes++;
                if (values[j].compareTo(values[j + 1]) > 0) {
                    T temp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = temp;
                }
            }
        }
        return values;
    }
} </s>
<s>class temp {    @SuppressWarnings({ "serial", "unchecked" })
    private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception {
        pm.beginTask("Creating temp project", 1);
        final IPath destination = new Path(pName);
        final IJavaProject oldJavaproj = JavaCore.create(project);
        final IClasspathEntry[] classPath = oldJavaproj.getRawClasspath();
        final IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName);
        newProject.create(null);
        newProject.open(null);
        final IProjectDescription desc = newProject.getDescription();
        desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
        newProject.setDescription(desc, null);
        final List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>();
        for (final IClasspathEntry cEntry : classPath) {
            switch(cEntry.getEntryKind()) {
                case IClasspathEntry.CPE_SOURCE:
                    System.out.println("Source folder " + cEntry.getPath());
                    newClassPath.add(copySourceFolder(project, newProject, cEntry, destination));
                    break;
                case IClasspathEntry.CPE_LIBRARY:
                    System.out.println("library folder " + cEntry.getPath());
                    newClassPath.add(cEntry);
                    break;
                case IClasspathEntry.CPE_PROJECT:
                    System.out.println("project folder " + cEntry.getPath());
                    newClassPath.add(cEntry);
                    break;
                case IClasspathEntry.CPE_VARIABLE:
                    System.out.println("variable folder " + cEntry.getPath());
                    newClassPath.add(cEntry);
                    break;
                default:
                    System.out.println("container folder " + cEntry.getPath());
                    newClassPath.add(cEntry);
            }
        }
        copyDir(project.getLocation().toString(), "/translator", newProject.getLocation().toString(), "", new ArrayList<String>() {

            {
                add("generated");
                add("classes");
                add(".svn");
            }
        });
        newProject.refreshLocal(IResource.DEPTH_INFINITE, pm);
        newProject.build(IncrementalProjectBuilder.AUTO_BUILD, pm);
        newProject.touch(pm);
        final IJavaProject javaproj = JavaCore.create(newProject);
        javaproj.setOutputLocation(new Path("/" + newProject.getName() + "/classes/bin"), null);
        javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm);
        final Map opts = oldJavaproj.getOptions(true);
        javaproj.setOptions(opts);
        javaproj.makeConsistent(pm);
        javaproj.save(pm, true);
        return newProject;
    }
} </s>
<s>class temp {    @Test
    public void testLoadHttpGzipped() throws Exception {
        String url = HTTP_GZIPPED;
        LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));
        InputStream contentInputStream = loadingInfo.getContentInputStream();
        byte[] actual = IOUtils.toByteArray(contentInputStream);
        byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));
        assertEquals(expected.length, actual.length);
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception {
        File transformationFile = new File(xslBase, "file-info.xsl");
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.putAll(request.getParameterMap());
        params.put("{" + Definitions.CONFIGURATION_NAMESPACE + "}configuration", configuration);
        params.put("{" + Definitions.REQUEST_NAMESPACE + "}request", request);
        params.put("{" + Definitions.RESPONSE_NAMESPACE + "}response", response);
        params.put("{" + Definitions.SESSION_NAMESPACE + "}session", request.getSession());
        params.put("{" + Definitions.INFOFUZE_NAMESPACE + "}development-mode", new Boolean(Config.getInstance().isDevelopmentMode()));
        Transformer transformer = new Transformer();
        transformer.setTransformationFile(transformationFile);
        transformer.setParams(params);
        transformer.setTransformMode(TransformMode.NORMAL);
        transformer.setConfiguration(configuration);
        transformer.setErrorListener(new TransformationErrorListener(response));
        transformer.setLogInfo(false);
        DataSourceIf dataSource = new NullSource();
        Document fileInfoDoc = XmlUtils.getEmptyDOM();
        DOMResult result = new DOMResult(fileInfoDoc);
        transformer.transform((Source) dataSource, result);
        Element documentElement = fileInfoDoc.getDocumentElement();
        if (documentElement.getLocalName().equals("null")) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }
        InputStream is = null;
        try {
            XPath xpath = XPathFactory.newInstance().newXPath();
            String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null);
            String location = XPathUtils.getStringValue(xpath, "location", documentElement, null);
            String fileName = XPathUtils.getStringValue(xpath, "file-name", documentElement, null);
            String mimeType = XPathUtils.getStringValue(xpath, "mime-type", documentElement, null);
            String encoding = XPathUtils.getStringValue(xpath, "encoding", documentElement, null);
            if (StringUtils.equals(sourceType, "cifsSource")) {
                String domain = XPathUtils.getStringValue(xpath, "domain", documentElement, null);
                String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null);
                String password = XPathUtils.getStringValue(xpath, "password", documentElement, null);
                URI uri = new URI(location);
                if (StringUtils.isNotBlank(userName)) {
                    String userInfo = "";
                    if (StringUtils.isNotBlank(domain)) {
                        userInfo = userInfo + domain + ";";
                    }
                    userInfo = userInfo + userName;
                    if (StringUtils.isNotBlank(password)) {
                        userInfo = userInfo + ":" + password;
                    }
                    uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());
                }
                SmbFile smbFile = new SmbFile(uri.toURL());
                is = new SmbFileInputStream(smbFile);
            } else if (StringUtils.equals(sourceType, "localFileSystemSource")) {
                File file = new File(location);
                is = new FileInputStream(file);
            } else {
                logger.error("Source type \"" + ((sourceType != null) ? sourceType : "") + "\" not supported");
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                return;
            }
            if (StringUtils.isBlank(mimeType) && StringUtils.isBlank(encoding)) {
                response.setContentType(Definitions.MIMETYPE_BINARY);
            } else if (StringUtils.isBlank(encoding)) {
                response.setContentType(mimeType);
            } else {
                response.setContentType(mimeType + ";charset=" + encoding);
            }
            if (request.getParameterMap().containsKey(Definitions.REQUEST_PARAMNAME_DOWNLOAD)) {
                response.setHeader("Content-Disposition", "attachment; filename=" + fileName);
            }
            IOUtils.copy(new BufferedInputStream(is), response.getOutputStream());
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
} </s>
<s>class temp {    public static synchronized BaseFont getL2BaseFont() {
        if (l2baseFont == null) {
            final ConfigProvider conf = ConfigProvider.getInstance();
            try {
                final ByteArrayOutputStream tmpBaos = new ByteArrayOutputStream();
                String fontPath = conf.getNotEmptyProperty("font.path", null);
                String fontName;
                String fontEncoding;
                InputStream tmpIs;
                if (fontPath != null) {
                    fontName = conf.getNotEmptyProperty("font.name", null);
                    if (fontName == null) {
                        fontName = new File(fontPath).getName();
                    }
                    fontEncoding = conf.getNotEmptyProperty("font.encoding", null);
                    if (fontEncoding == null) {
                        fontEncoding = BaseFont.WINANSI;
                    }
                    tmpIs = new FileInputStream(fontPath);
                } else {
                    fontName = Constants.L2TEXT_FONT_NAME;
                    fontEncoding = BaseFont.IDENTITY_H;
                    tmpIs = FontUtils.class.getResourceAsStream(Constants.L2TEXT_FONT_PATH);
                }
                IOUtils.copy(tmpIs, tmpBaos);
                tmpIs.close();
                tmpBaos.close();
                l2baseFont = BaseFont.createFont(fontName, fontEncoding, BaseFont.EMBEDDED, BaseFont.CACHED, tmpBaos.toByteArray(), null);
            } catch (Exception e) {
                e.printStackTrace();
                try {
                    l2baseFont = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);
                } catch (Exception ex) {
                }
            }
        }
        return l2baseFont;
    }
} </s>
<s>class temp {    protected File extractArchive(File archive) {
        byte buf[] = new byte[BUF_SIZE];
        ZipInputStream zis = null;
        File archiveDirectory = null;
        FileOutputStream fos;
        ZipEntry entry;
        File curEntry;
        int n;
        try {
            zis = new ZipInputStream(new FileInputStream(archive));
            while ((entry = zis.getNextEntry()) != null) {
                curEntry = new File(workingDir, entry.getName());
                if (entry.isDirectory()) {
                    getLogger().info("skip directory: " + entry.getName());
                    if (archiveDirectory == null) archiveDirectory = curEntry;
                    continue;
                }
                getLogger().info("zip-entry (file): " + entry.getName() + " ==> real path: " + curEntry.getAbsolutePath());
                if (!curEntry.getParentFile().exists()) curEntry.getParentFile().mkdirs();
                fos = new FileOutputStream(curEntry);
                while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n);
                fos.close();
                zis.closeEntry();
            }
        } catch (Throwable t) {
            t.printStackTrace();
        } finally {
            try {
                if (zis != null) zis.close();
            } catch (Throwable t) {
            }
        }
        return archiveDirectory;
    }
} </s>
<s>class temp {    public HttpURLConnection getURLConnection() throws IOException {
        String url_str = getServerURL();
        URL url = new URL(url_str);
        HttpURLConnection urlConnection;
        if (url_str.toLowerCase().startsWith("https")) {
            HttpsURLConnection urlSConnection = (HttpsURLConnection) url.openConnection();
            urlSConnection.setHostnameVerifier(new HostnameVerifier() {

                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });
            urlConnection = urlSConnection;
        } else urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setRequestMethod("POST");
        if (useHTTPProxy && getProxyLogin() != null) {
            String authString = getProxyLogin() + ":" + getProxyPassword();
            String auth = "Basic " + new sun.misc.BASE64Encoder().encode(authString.getBytes());
            urlConnection.setRequestProperty("Proxy-Authorization", auth);
        }
        urlConnection.setDoOutput(true);
        if (useHTTPProxy) {
            System.getProperties().put("proxySet", "true");
            System.getProperties().put("proxyHost", proxyHost);
            System.getProperties().put("proxyPort", String.valueOf(proxyPort));
        }
        return urlConnection;
    }
} </s>
<s>class temp {    @Override
    public void run() {
        File file;
        try {
            file = new File(filePath);
            if (!file.canWrite()) {
                Thread.sleep(5000);
                if (!file.canWrite()) {
                    logger.error("Filed to gain write access to file:" + filePath);
                    exitState = false;
                    return;
                }
            }
            fis = new BufferedInputStream(new FileInputStream(filePath));
        } catch (FileNotFoundException e) {
            logger.error("File not found:" + filePath);
            exitState = false;
            return;
        } catch (java.lang.InterruptedException ie) {
            logger.error("Upload thread halted or interrupted on file:" + filePath);
            exitState = false;
            return;
        }
        ftp = new FTPClient();
        ftp.setDefaultTimeout(20 * 1000);
        boolean uploadSuccessful = false;
        try {
            ftp.enterLocalPassiveMode();
            ftp.connect(ftpHostname);
            ftp.login(username, password);
            logger.trace("FTP Logged In and connected");
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                exitState = false;
                return;
            }
            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
            logger.trace("FTP Timeout Set and File Type Set");
            ftp.changeWorkingDirectory(serverDirectory);
            ftp.storeUniqueFile(file.getName(), fis);
            logger.trace("File Uploaded");
            if (FTPReply.isPositiveIntermediate(ftp.getReplyCode())) {
                System.out.println("Completing pending command");
                ftp.completePendingCommand();
            }
            uploadSuccessful = true;
        } catch (Exception e) {
            try {
                ftp.disconnect();
            } catch (Exception de) {
                e.printStackTrace();
            }
            logger.error("Error uploading file:", e);
        } finally {
            try {
                fis.close();
                logger.trace("File closed");
                ftp.logout();
                logger.trace("FTP Logged Out");
                ftp.disconnect();
                logger.trace("FTP Disconnected");
                if (uploadSuccessful) {
                    logger.info("Deleting file:" + new File(filePath).getName());
                    if (!(new File(filePath)).delete()) {
                        logger.error("Can't delete file for some reason");
                    }
                    Thread.sleep(1000);
                    exitState = true;
                    return;
                }
            } catch (Exception e) {
                logger.error("Exception on file upload cleanup:", e);
                exitState = false;
                return;
            }
        }
        exitState = false;
        return;
    }
} </s>
<s>class temp {    public static IChemModel readInChI(URL url) throws CDKException {
        IChemModel chemModel = new ChemModel();
        try {
            IMoleculeSet moleculeSet = new MoleculeSet();
            chemModel.setMoleculeSet(moleculeSet);
            StdInChIParser parser = new StdInChIParser();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = in.readLine()) != null) {
                if (line.toLowerCase().startsWith("inchi=")) {
                    IAtomContainer atc = parser.parseInchi(line);
                    moleculeSet.addAtomContainer(atc);
                }
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            throw new CDKException(e.getMessage());
        }
        return chemModel;
    }
} </s>
<s>class temp {    public String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
} </s>
<s>class temp {    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }
} </s>
<s>class temp {    public void getDownloadInfo(String _url) throws Exception {
        cl = new FTPClient();
        Authentication auth = new FTPAuthentication();
        cl.connect(getHostName());
        while (!cl.login(auth.getUser(), auth.getPassword())) {
            log.debug("getDownloadInfo() - login error state: " + Arrays.asList(cl.getReplyStrings()));
            ap.setSite(getSite());
            auth = ap.promptAuthentication();
            if (auth == null) throw new Exception("User Cancelled Auth Operation");
        }
        AuthManager.putAuth(getSite(), auth);
        cl.enterLocalPassiveMode();
        FTPFile file = cl.listFiles(new URL(_url).getFile())[0];
        setURL(_url);
        setLastModified(file.getTimestamp().getTimeInMillis());
        setSize(file.getSize());
        setResumable(cl.rest("0") == 350);
        setRangeEnd(getSize() - 1);
    }
} </s>
<s>class temp {    public void initGet() throws Exception {
        cl = new FTPClient();
        cl.connect(getHostName());
        Authentication auth = AuthManager.getAuth(getSite());
        if (auth == null) auth = new FTPAuthentication(getSite());
        while (!cl.login(auth.getUser(), auth.getPassword())) {
            ap.setSite(getSite());
            auth = ap.promptAuthentication();
            if (auth == null) throw new Exception("User Cancelled Auth Operation");
        }
        cl.connect(getHostName());
        cl.login(auth.getUser(), auth.getPassword());
        cl.enterLocalPassiveMode();
        cl.setFileType(FTP.BINARY_FILE_TYPE);
        cl.setRestartOffset(getPosition());
        setInputStream(cl.retrieveFileStream(new URL(getURL()).getFile()));
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    private void process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        printAccess(request, false);
        try {
            response.setContentType("application/json");
            String position = request.getParameter("pos");
            if (position == null || position.length() == 0) {
                reportJsonError(request, response, "Missing position parameter");
            } else {
                PositionParser pp;
                pp = new PositionParser(position);
                String url = "http://simbad.u-strasbg.fr/simbad/sim-script?submit=submit+script&script=";
                url += URLEncoder.encode("format object \"%IDLIST[%-30*]|-%COO(A)|%COO(D)|%OTYPELIST(S)\"\n" + pp.getPosition() + " radius=1m", "ISO-8859-1");
                System.out.println(url);
                URL simurl = new URL(url);
                BufferedReader in = new BufferedReader(new InputStreamReader(simurl.openStream()));
                String boeuf;
                boolean data_found = false;
                JSONObject retour = new JSONObject();
                JSONArray dataarray = new JSONArray();
                JSONArray colarray = new JSONArray();
                JSONObject jsloc = new JSONObject();
                jsloc.put("sTitle", "ID");
                colarray.add(jsloc);
                jsloc = new JSONObject();
                jsloc.put("sTitle", "Position");
                colarray.add(jsloc);
                jsloc = new JSONObject();
                jsloc.put("sTitle", "Type");
                colarray.add(jsloc);
                retour.put("aoColumns", colarray);
                int datasize = 0;
                while ((boeuf = in.readLine()) != null) {
                    if (data_found) {
                        String[] fields = boeuf.trim().split("\\|", -1);
                        int pos = fields.length - 1;
                        if (pos >= 3) {
                            String type = fields[pos];
                            pos--;
                            String dec = fields[pos];
                            pos--;
                            String ra = fields[pos];
                            String id = fields[0].split("\\s{2,}")[0].trim();
                            JSONArray darray = new JSONArray();
                            darray.add(id.trim());
                            darray.add(ra + " " + dec);
                            darray.add(type.trim());
                            dataarray.add(darray);
                            datasize++;
                            if (datasize >= 15) {
                                darray = new JSONArray();
                                darray.add("truncated to 15");
                                darray.add("");
                                darray.add("");
                                dataarray.add(darray);
                                datasize++;
                            }
                        }
                    } else if (boeuf.startsWith("::data")) {
                        data_found = true;
                    }
                }
                in.close();
                retour.put("aaData", dataarray);
                retour.put("iTotalRecords", datasize);
                retour.put("iTotalDisplayRecords", datasize);
                JsonUtils.teePrint(response.getOutputStream(), retour.toJSONString());
            }
        } catch (QueryException e) {
            reportJsonError(request, response, e);
        }
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    public static void main(String[] args) throws Exception {
        PositionParser pp;
        Database.init("XIDResult");
        pp = new PositionParser("01:33:50.904+30:39:35.79");
        String url = "http://simbad.u-strasbg.fr/simbad/sim-script?submit=submit+script&script=";
        String script = "format object \"%IDLIST[%-30*]|-%COO(A)|%COO(D)|%OTYPELIST(S)\"\n";
        String tmp = "";
        script += pp.getPosition() + " radius=1m";
        url += URLEncoder.encode(script, "ISO-8859-1");
        URL simurl = new URL(url);
        BufferedReader in = new BufferedReader(new InputStreamReader(simurl.openStream()));
        String boeuf;
        boolean data_found = false;
        JSONObject retour = new JSONObject();
        JSONArray dataarray = new JSONArray();
        JSONArray colarray = new JSONArray();
        JSONObject jsloc = new JSONObject();
        jsloc.put("sTitle", "ID");
        colarray.add(jsloc);
        jsloc = new JSONObject();
        jsloc.put("sTitle", "Position");
        colarray.add(jsloc);
        jsloc = new JSONObject();
        jsloc.put("sTitle", "Type");
        colarray.add(jsloc);
        retour.put("aoColumns", colarray);
        int datasize = 0;
        while ((boeuf = in.readLine()) != null) {
            if (data_found) {
                String[] fields = boeuf.trim().split("\\|", -1);
                int pos = fields.length - 1;
                if (pos >= 3) {
                    String type = fields[pos];
                    pos--;
                    String dec = fields[pos];
                    pos--;
                    String ra = fields[pos];
                    String id = "";
                    for (int i = 0; i < pos; i++) {
                        id += fields[i];
                        if (i < (pos - 1)) {
                            id += "|";
                        }
                    }
                    if (id.length() <= 30) {
                        JSONArray darray = new JSONArray();
                        darray.add(id.trim());
                        darray.add(ra + " " + dec);
                        darray.add(type.trim());
                        dataarray.add(darray);
                        datasize++;
                    }
                }
            } else if (boeuf.startsWith("::data")) {
                data_found = true;
            }
        }
        retour.put("aaData", dataarray);
        retour.put("iTotalRecords", datasize);
        retour.put("iTotalDisplayRecords", datasize);
        System.out.println(retour.toJSONString());
        in.close();
    }
} </s>
<s>class temp {    public static String encodePassword(String password) {
        try {
            MessageDigest messageDiegest = MessageDigest.getInstance("SHA-1");
            messageDiegest.update(password.getBytes("UTF-8"));
            return Base64.encodeToString(messageDiegest.digest(), false);
        } catch (NoSuchAlgorithmException e) {
            log.error("Exception while encoding password");
            throw new Error(e);
        } catch (UnsupportedEncodingException e) {
            log.error("Exception while encoding password");
            throw new Error(e);
        }
    }
} </s>
<s>class temp {    public static void publish(String server, String id, String passwd, String path, String html) throws SocketException, IOException, LoginFailException {
        logger.info("Connect to FTP Server " + server);
        FTPClient f = new FTPClient();
        f.connect(server);
        if (f.login(id, passwd) == false) {
            logger.info("Fail to login with id=" + id);
            throw new LoginFailException(id, passwd);
        }
        f.changeWorkingDirectory(path);
        logger.info("Start to upload");
        f.storeFile("index.html", new ByteArrayInputStream(html.getBytes("utf-8")));
        logger.info("Upload index.html");
        f.storeFile("main.css", new FileInputStream("web/main.css"));
        logger.info("Upload main.css");
        f.storeFile("cafelibrary.js", new FileInputStream("web/cafelibrary.js"));
        logger.info("Upload cafelibrary.js");
        f.makeDirectory("img");
        f.changeWorkingDirectory("img");
        for (int i = 0; i <= 5; i++) {
            String fileName = "favorite_star_" + i + ".png";
            f.storeFile(fileName, new FileInputStream("web/img/" + fileName));
            logger.info("Upload " + fileName);
        }
        f.logout();
        f.disconnect();
    }
} </s>
<s>class temp {    public void configureKerberos(boolean overwriteExistingSetup) throws Exception {
        OutputStream keyTabOut = null;
        InputStream keyTabIn = null;
        OutputStream krb5ConfOut = null;
        try {
            keyTabIn = loadKeyTabResource(keyTabResource);
            File file = new File(keyTabRepository + keyTabResource);
            if (!file.exists() || overwriteExistingSetup) {
                keyTabOut = new FileOutputStream(file, false);
                if (logger.isDebugEnabled()) logger.debug("Installing keytab file to : " + file.getAbsolutePath());
                IOUtils.copy(keyTabIn, keyTabOut);
            }
            File krb5ConfFile = new File(System.getProperty("java.security.krb5.conf", defaultKrb5Config));
            if (logger.isDebugEnabled()) logger.debug("Using Kerberos config file : " + krb5ConfFile.getAbsolutePath());
            if (!krb5ConfFile.exists()) throw new Exception("Kerberos config file not found : " + krb5ConfFile.getAbsolutePath());
            FileInputStream fis = new FileInputStream(krb5ConfFile);
            Wini krb5Conf = new Wini(KerberosConfigUtil.toIni(fis));
            Ini.Section krb5Realms = krb5Conf.get("realms");
            String windowsDomainSetup = krb5Realms.get(kerberosRealm);
            if (kerberosRealm == null || overwriteExistingSetup) {
                windowsDomainSetup = "{  kdc = " + keyDistributionCenter + ":88 admin_server = " + keyDistributionCenter + ":749  default_domain = " + kerberosRealm.toLowerCase() + "  }";
                krb5Realms.put(kerberosRealm, windowsDomainSetup);
            }
            Ini.Section krb5DomainRealms = krb5Conf.get("domain_realm");
            String domainRealmSetup = krb5DomainRealms.get(kerberosRealm.toLowerCase());
            if (domainRealmSetup == null || overwriteExistingSetup) {
                krb5DomainRealms.put(kerberosRealm.toLowerCase(), kerberosRealm);
                krb5DomainRealms.put("." + kerberosRealm.toLowerCase(), kerberosRealm);
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            krb5Conf.store(baos);
            InputStream bios = new ByteArrayInputStream(baos.toByteArray());
            bios = KerberosConfigUtil.toKrb5(bios);
            krb5ConfOut = new FileOutputStream(krb5ConfFile, false);
            IOUtils.copy(bios, krb5ConfOut);
        } catch (Exception e) {
            logger.error("Error while configuring Kerberos :" + e.getMessage(), e);
            throw e;
        } finally {
            IOUtils.closeQuietly(keyTabOut);
            IOUtils.closeQuietly(keyTabIn);
            IOUtils.closeQuietly(krb5ConfOut);
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println("Usage: HexStrToBin enc/dec <infileName> <outfilename>");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals("dec")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public static String encrypt(String plaintext) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException e) {
            logger.error("NoSuchAlgorithmException:" + e);
        }
        try {
            md.update(plaintext.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            logger.error("UnsupportedEncodingException:" + e);
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
} </s>
<s>class temp {  @SuppressWarnings("finally")
  private void compress(File src) throws IOException
  {
    if (this.switches.contains(Switch.test))
      return;

    checkSourceFile(src);
    if (src.getPath().endsWith(".bz2"))
    {
      this.log.println("WARNING: skipping file because it already has .bz2 suffix:").println(src);
      return;
    }

    final File dst = new File(src.getPath() + ".bz2").getAbsoluteFile();
    if (!checkDestFile(dst))
      return;

    FileChannel       inChannel   = null;
    FileChannel       outChannel  = null;
    FileOutputStream  fileOut     = null;
    BZip2OutputStream bzOut       = null;
    FileLock          inLock      = null;
    FileLock          outLock     = null;

    try
    {
      inChannel = new FileInputStream(src).getChannel();
      final long inSize = inChannel.size();
      inLock = inChannel.tryLock(0, inSize, true);
      if (inLock == null)
        throw error("source file locked by another process: " + src);

      fileOut     = new FileOutputStream(dst);
      outChannel  = fileOut.getChannel();
      bzOut       = new BZip2OutputStream(
        new BufferedXOutputStream(fileOut, 8192),
        Math.min(
          (this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize,
          BZip2OutputStream.chooseBlockSize(inSize)
        )
      );

      outLock = outChannel.tryLock();
      if (outLock == null)
        throw error("destination file locked by another process: " + dst);

      final boolean showProgress = this.switches.contains(Switch.showProgress);
      long pos = 0;
      int progress = 0;

      if (showProgress || this.verbose)
      {
        this.log.print("source: " + src).print(": size=").println(inSize);
        this.log.println("target: " + dst);
      }

      while (true)
      {
        final long maxStep = showProgress ? Math.max(8192, (inSize - pos) / MAX_PROGRESS) : (inSize - pos);
        if (maxStep <= 0)
        {
          if (showProgress)
          {
            for (int i = progress; i < MAX_PROGRESS; i++)
              this.log.print('#');
            this.log.println(" done");
          }
          break;
        }
        else
        {
          final long step = inChannel.transferTo(pos, maxStep, bzOut);
          if ((step == 0) && (inChannel.size() != inSize))
            throw error("file " + src + " has been modified concurrently by another process");

          pos += step;
          if (showProgress)
          {
            final double  p           = (double) pos / (double) inSize;
            final int     newProgress = (int) (MAX_PROGRESS * p);
            for (int i = progress; i < newProgress; i++)
              this.log.print('#');
            progress = newProgress;
          }
        }
      }

      inLock.release();
      inChannel.close();
      bzOut.closeInstance();
      final long outSize = outChannel.position();
      outChannel.truncate(outSize);
      outLock.release();
      fileOut.close();

      if (this.verbose)
      {
        final double ratio = (inSize == 0) ? (outSize * 100) : ((double) outSize / (double) inSize);
        this.log.print("raw size: ").print(inSize)
          .print("; compressed size: ").print(outSize)
          .print("; compression ratio: ").print(ratio).println('%');
      }

      if (!this.switches.contains(Switch.keep))
      {
        if (!src.delete())
          throw error("unable to delete sourcefile: " + src);
      }
    }
    catch (final IOException ex)
    {
      IO.tryClose(inChannel);
      IO.tryClose(bzOut);
      IO.tryClose(fileOut);
      IO.tryRelease(inLock);
      IO.tryRelease(outLock);
      try
      {
        this.log.println();
      }
      finally
      {
        throw ex;
      }
    }
  }
} </s>
