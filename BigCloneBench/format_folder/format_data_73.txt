<s>class temp {    public static String md5Hash(String inString) throws TopicSpacesException {
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(inString.getBytes());
            byte[] array = md5.digest();
            StringBuffer buf = new StringBuffer();
            int len = array.length;
            for (int i = 0; i < len; i++) {
                int b = array[i] & 0xFF;
                buf.append(Integer.toHexString(b));
            }
            return buf.toString();
        } catch (Exception x) {
            throw new TopicSpacesException(x);
        }
    }
} </s>
<s>class temp {    @Override
    public void send(String payload, TransportReceiver receiver) {
        HttpURLConnection connection = null;
        try {
            connection = (HttpURLConnection) url.openConnection();
            configureConnection(connection);
            OutputStream out = connection.getOutputStream();
            out.write(payload.getBytes("UTF-8"));
            out.close();
            int status = connection.getResponseCode();
            if (status != HttpURLConnection.HTTP_OK) {
                ServerFailure failure = new ServerFailure(status + " " + connection.getResponseMessage());
                receiver.onTransportFailure(failure);
                return;
            }
            List<String> cookieHeaders = connection.getHeaderFields().get("Set-Cookie");
            if (cookieHeaders != null) {
                for (String header : cookieHeaders) {
                    try {
                        JSONObject cookie = Cookie.toJSONObject(header);
                        String name = cookie.getString("name");
                        String value = cookie.getString("value");
                        String domain = cookie.optString("Domain");
                        if (domain == null || url.getHost().endsWith(domain)) {
                            String path = cookie.optString("Path");
                            if (path == null || url.getPath().startsWith(path)) {
                                cookies.put(name, value);
                            }
                        }
                    } catch (JSONException ignored) {
                    }
                }
            }
            String encoding = connection.getContentEncoding();
            InputStream in = connection.getInputStream();
            if ("gzip".equalsIgnoreCase(encoding)) {
                in = new GZIPInputStream(in);
            } else if ("deflate".equalsIgnoreCase(encoding)) {
                in = new InflaterInputStream(in);
            } else if (encoding != null) {
                receiver.onTransportFailure(new ServerFailure("Unknown server encoding " + encoding));
                return;
            }
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            byte[] buffer = new byte[4096];
            int read = in.read(buffer);
            while (read != -1) {
                bytes.write(buffer, 0, read);
                read = in.read(buffer);
            }
            in.close();
            String received = new String(bytes.toByteArray(), "UTF-8");
            receiver.onTransportSuccess(received);
        } catch (IOException e) {
            ServerFailure failure = new ServerFailure(e.getMessage(), e.getClass().getName(), null, true);
            receiver.onTransportFailure(failure);
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
} </s>
<s>class temp {    private static void main(String[] args) {
        try {
            File f = new File("test.txt");
            if (f.exists()) {
                throw new IOException(f + " already exists.  I don't want to overwrite it.");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println("Error: " + i + " read as " + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
} </s>
<s>class temp {    public static void copyFile(final FileInputStream in, final File out) throws IOException {
        final FileChannel inChannel = in.getChannel();
        final FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (final IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    private void setup() {
        env = new EnvAdvanced();
        try {
            URL url = Sysutil.getURL("world.env");
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = br.readLine()) != null) {
                String[] fields = line.split(",");
                if (fields[0].equalsIgnoreCase("skybox")) {
                    env.setRoom(new EnvSkyRoom(fields[1]));
                } else if (fields[0].equalsIgnoreCase("camera")) {
                    env.setCameraXYZ(Double.parseDouble(fields[1]), Double.parseDouble(fields[2]), Double.parseDouble(fields[3]));
                    env.setCameraYaw(Double.parseDouble(fields[4]));
                    env.setCameraPitch(Double.parseDouble(fields[5]));
                } else if (fields[0].equalsIgnoreCase("terrain")) {
                    terrain = new EnvTerrain(fields[1]);
                    terrain.setTexture(fields[2]);
                    env.addObject(terrain);
                } else if (fields[0].equalsIgnoreCase("object")) {
                    GameObject n = (GameObject) Class.forName(fields[10]).newInstance();
                    n.setX(Double.parseDouble(fields[1]));
                    n.setY(Double.parseDouble(fields[2]));
                    n.setZ(Double.parseDouble(fields[3]));
                    n.setScale(Double.parseDouble(fields[4]));
                    n.setRotateX(Double.parseDouble(fields[5]));
                    n.setRotateY(Double.parseDouble(fields[6]));
                    n.setRotateZ(Double.parseDouble(fields[7]));
                    n.setTexture(fields[9]);
                    n.setModel(fields[8]);
                    n.setEnv(env);
                    env.addObject(n);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception {
        final String id = request.getParameter("id");
        if (id == null) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
            return null;
        }
        try {
            jaxrTemplate.execute(new JAXRCallback<Object>() {

                public Object execute(Connection connection) throws JAXRException {
                    RegistryObject registryObject = connection.getRegistryService().getBusinessQueryManager().getRegistryObject(id);
                    if (registryObject instanceof ExtrinsicObject) {
                        ExtrinsicObject extrinsicObject = (ExtrinsicObject) registryObject;
                        DataHandler dataHandler = extrinsicObject.getRepositoryItem();
                        if (dataHandler != null) {
                            response.setContentType("text/html");
                            try {
                                PrintWriter out = response.getWriter();
                                InputStream is = dataHandler.getInputStream();
                                try {
                                    final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out);
                                    xmlStreamWriter.writeStartDocument();
                                    xmlStreamWriter.writeStartElement("div");
                                    xmlStreamWriter.writeStartElement("textarea");
                                    xmlStreamWriter.writeAttribute("name", "repositoryItem");
                                    xmlStreamWriter.writeAttribute("class", "xml");
                                    xmlStreamWriter.writeAttribute("style", "display:none");
                                    IOUtils.copy(new XmlInputStreamReader(is), new XmlStreamTextWriter(xmlStreamWriter));
                                    xmlStreamWriter.writeEndElement();
                                    xmlStreamWriter.writeStartElement("script");
                                    xmlStreamWriter.writeAttribute("class", "javascript");
                                    xmlStreamWriter.writeCharacters("dp.SyntaxHighlighter.HighlightAll('repositoryItem');");
                                    xmlStreamWriter.writeEndElement();
                                    xmlStreamWriter.writeEndElement();
                                    xmlStreamWriter.writeEndDocument();
                                    xmlStreamWriter.flush();
                                } finally {
                                    is.close();
                                }
                            } catch (Throwable ex) {
                                log.error("Error while trying to format repository item " + id, ex);
                            }
                        } else {
                        }
                    } else {
                    }
                    return null;
                }
            });
        } catch (JAXRException ex) {
            throw new ServletException(ex);
        }
        return null;
    }
} </s>
<s>class temp {                public Object execute(Connection connection) throws JAXRException {
                    RegistryObject registryObject = connection.getRegistryService().getBusinessQueryManager().getRegistryObject(id);
                    if (registryObject instanceof ExtrinsicObject) {
                        ExtrinsicObject extrinsicObject = (ExtrinsicObject) registryObject;
                        DataHandler dataHandler = extrinsicObject.getRepositoryItem();
                        if (dataHandler != null) {
                            response.setContentType("text/html");
                            try {
                                PrintWriter out = response.getWriter();
                                InputStream is = dataHandler.getInputStream();
                                try {
                                    final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out);
                                    xmlStreamWriter.writeStartDocument();
                                    xmlStreamWriter.writeStartElement("div");
                                    xmlStreamWriter.writeStartElement("textarea");
                                    xmlStreamWriter.writeAttribute("name", "repositoryItem");
                                    xmlStreamWriter.writeAttribute("class", "xml");
                                    xmlStreamWriter.writeAttribute("style", "display:none");
                                    IOUtils.copy(new XmlInputStreamReader(is), new XmlStreamTextWriter(xmlStreamWriter));
                                    xmlStreamWriter.writeEndElement();
                                    xmlStreamWriter.writeStartElement("script");
                                    xmlStreamWriter.writeAttribute("class", "javascript");
                                    xmlStreamWriter.writeCharacters("dp.SyntaxHighlighter.HighlightAll('repositoryItem');");
                                    xmlStreamWriter.writeEndElement();
                                    xmlStreamWriter.writeEndElement();
                                    xmlStreamWriter.writeEndDocument();
                                    xmlStreamWriter.flush();
                                } finally {
                                    is.close();
                                }
                            } catch (Throwable ex) {
                                log.error("Error while trying to format repository item " + id, ex);
                            }
                        } else {
                        }
                    } else {
                    }
                    return null;
                }
} </s>
<s>class temp {    private void copyFromZip(File zipFile) throws GLMRessourceManagerException {
        if (zipFile == null) throw new GLMRessourceZIPException(1);
        if (!zipFile.exists()) throw new GLMRessourceZIPException(2);
        int len = 0;
        byte[] buffer = ContentManager.getDefaultBuffer();
        try {
            ZipInputStream zip_in = new ZipInputStream(new BufferedInputStream(new FileInputStream(zipFile)));
            ZipEntry zipEntry;
            File rootDir = null;
            while ((zipEntry = zip_in.getNextEntry()) != null) {
                File destFile = new File(tempDirectory, zipEntry.getName());
                if (rootDir == null) rootDir = destFile.getParentFile();
                if (!zipEntry.isDirectory() && destFile.getParentFile().equals(rootDir)) {
                    if (!zipEntry.getName().equals(ContentManager.IMS_MANIFEST_FILENAME)) {
                        FileOutputStream file_out = new FileOutputStream(new File(tempDirectory, zipEntry.getName()));
                        while ((len = zip_in.read(buffer)) > 0) file_out.write(buffer, 0, len);
                        file_out.flush();
                        file_out.close();
                    }
                }
            }
            zip_in.close();
        } catch (Exception e) {
            throw new GLMRessourceZIPException(3);
        }
    }
} </s>
<s>class temp {    public static void resize(File originalFile, File resizedFile, int width, String format) throws IOException {
        if (format != null && "gif".equals(format.toLowerCase())) {
            resize(originalFile, resizedFile, width, 1);
            return;
        }
        FileInputStream fis = new FileInputStream(originalFile);
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        int readLength = -1;
        int bufferSize = 1024;
        byte bytes[] = new byte[bufferSize];
        while ((readLength = fis.read(bytes, 0, bufferSize)) != -1) {
            byteStream.write(bytes, 0, readLength);
        }
        byte[] in = byteStream.toByteArray();
        fis.close();
        byteStream.close();
        Image inputImage = Toolkit.getDefaultToolkit().createImage(in);
        waitForImage(inputImage);
        int imageWidth = inputImage.getWidth(null);
        if (imageWidth < 1) throw new IllegalArgumentException("image width " + imageWidth + " is out of range");
        int imageHeight = inputImage.getHeight(null);
        if (imageHeight < 1) throw new IllegalArgumentException("image height " + imageHeight + " is out of range");
        int height = -1;
        double scaleW = (double) imageWidth / (double) width;
        double scaleY = (double) imageHeight / (double) height;
        if (scaleW >= 0 && scaleY >= 0) {
            if (scaleW > scaleY) {
                height = -1;
            } else {
                width = -1;
            }
        }
        Image outputImage = inputImage.getScaledInstance(width, height, java.awt.Image.SCALE_DEFAULT);
        checkImage(outputImage);
        encode(new FileOutputStream(resizedFile), outputImage, format);
    }
} </s>
<s>class temp {    private final String encryptPassword(String pass) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException e) {
            log.log(Level.WARNING, "Error while obtaining decript algorithm", e);
            throw new RuntimeException("AccountData.encryptPassword()");
        }
        try {
            md.update(pass.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            log.log(Level.WARNING, "Problem with decript algorithm occured.", e);
            throw new RuntimeException("AccountData.encryptPassword()");
        }
        return new BASE64Encoder().encode(md.digest());
    }
} </s>
<s>class temp {    private void getImage(String filename) throws MalformedURLException, IOException, SAXException, FileNotFoundException {
        String url = Constants.STRATEGICDOMINATION_URL + "/images/gameimages/" + filename;
        WebRequest req = new GetMethodWebRequest(url);
        WebResponse response = wc.getResponse(req);
        File file = new File("etc/images/" + filename);
        FileOutputStream outputStream = new FileOutputStream(file);
        IOUtils.copy(response.getInputStream(), outputStream);
    }
} </s>
<s>class temp {    protected byte[] retrieveImageData() throws IOException {
        URL url = new URL(imageUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        int fileSize = connection.getContentLength();
        if (fileSize < 0) {
            return null;
        }
        byte[] imageData = new byte[fileSize];
        BufferedInputStream istream = new BufferedInputStream(connection.getInputStream(), 8192);
        int bytesRead = 0;
        int offset = 0;
        while (bytesRead != -1 && offset < fileSize) {
            bytesRead = istream.read(imageData, offset, fileSize - offset);
            offset += bytesRead;
        }
        istream.close();
        connection.disconnect();
        return imageData;
    }
} </s>
<s>class temp {    public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim();
            if (name.indexOf("://") > 0) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
} </s>
<s>class temp {    public Configuration load(URL url) throws ConfigurationException {
        LOG.info("Configuring from url : " + url.toString());
        try {
            return load(url.openStream(), url.toString());
        } catch (IOException ioe) {
            throw new ConfigurationException("Could not configure from URL : " + url, ioe);
        }
    }
} </s>
<s>class temp {    private void copy(final File src, final File dstDir) {
        dstDir.mkdirs();
        final File dst = new File(dstDir, src.getName());
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(src), "ISO-8859-1"));
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dst), "ISO-8859-1"));
            String read;
            while ((read = reader.readLine()) != null) {
                Line line = new Line(read);
                if (line.isComment()) continue;
                writer.write(read);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) try {
                reader.close();
            } catch (IOException e) {
            }
            if (writer != null) {
                try {
                    writer.flush();
                } catch (IOException e) {
                }
                try {
                    writer.close();
                } catch (IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {    private static void loadListFromRecouces(String category, URL url, DataSetArray<DataSetList> list, final StatusLineManager slm) {
        i = 0;
        try {
            if (url == null) return;
            InputStream in = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in, "UTF8"));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.trim();
                i++;
                if (slm != null) {
                    Display.getDefault().syncExec(new Runnable() {

                        public void run() {
                            slm.setMessage(_("Importing country code " + i));
                        }
                    });
                }
                if (!strLine.isEmpty() && !strLine.startsWith("#")) {
                    String parts[] = strLine.split("=", 2);
                    if (parts.length == 2) {
                        String key = parts[0].trim();
                        String value = parts[1].trim();
                        key = DataUtils.replaceAllAccentedChars(key).toUpperCase();
                        DataSetList newListEntry = new DataSetList(category, key, value);
                        list.addNewDataSetIfNew(newListEntry);
                    }
                }
            }
            in.close();
        } catch (IOException e) {
            Logger.logError(e, "Error loading " + url.getFile());
        }
    }
} </s>
<s>class temp {    private void download(Downloadable downloadable, HttpServletResponse response) throws Exception {
        String contentType = downloadable.getContentType();
        try {
            response.setContentType(contentType);
            response.setHeader("Content-Disposition", "attachment;" + " filename=" + new String(downloadable.getName().getBytes(), "ISO-8859-1"));
            OutputStream os = response.getOutputStream();
            IOUtils.copy(downloadable.getInputStream(), os);
            os.flush();
        } catch (IOException e) {
        }
    }
} </s>
<s>class temp {    protected HttpURLConnection loadTileFromOsm(Tile tile) throws IOException {
        URL url;
        url = new URL(tile.getUrl());
        HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
        prepareHttpUrlConnection(urlConn);
        urlConn.setReadTimeout(30000);
        return urlConn;
    }
} </s>
<s>class temp {    private static InputStream stream(String input) {
        try {
            if (input.startsWith("http://")) return URIFactory.url(input).openStream(); else return stream(new File(input));
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static String genetateSHA256(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(password.getBytes("UTF-8"));
        byte[] passWd = md.digest();
        String hex = toHex(passWd);
        return hex;
    }
} </s>
<s>class temp {    public static Image getPluginImage(final Object plugin, final String name) {
        try {
            try {
                URL url = getPluginImageURL(plugin, name);
                if (m_URLImageMap.containsKey(url)) return m_URLImageMap.get(url);
                InputStream is = url.openStream();
                Image image;
                try {
                    image = getImage(is);
                    m_URLImageMap.put(url, image);
                } finally {
                    is.close();
                }
                return image;
            } catch (Throwable e) {
            }
        } catch (Throwable e) {
        }
        return null;
    }
} </s>
<s>class temp {    public void handleMessage(Message message) throws Fault {
        InputStream is = message.getContent(InputStream.class);
        if (is == null) {
            return;
        }
        CachedOutputStream bos = new CachedOutputStream();
        try {
            IOUtils.copy(is, bos);
            is.close();
            bos.close();
            sendMsg("Inbound Message \n" + "--------------" + bos.getOut().toString() + "\n--------------");
            message.setContent(InputStream.class, bos.getInputStream());
        } catch (IOException e) {
            throw new Fault(e);
        }
    }
} </s>
<s>class temp {    public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) {
        if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) {
            throw new IllegalArgumentException("Class " + callingClazz + " is not derived from " + hierarchyRootClazz);
        }
        if (null == resourceBaseName) {
            throw new NullPointerException("resourceBaseName is null");
        }
        String fqcn = callingClazz.getName();
        String uqcn = fqcn.substring(fqcn.lastIndexOf('.') + 1);
        String callingClassResource = uqcn + ".properties";
        String globalCallingClassResource = "/" + callingClassResource;
        String baseClassResource = resourceBaseName + "-" + uqcn + ".properties";
        String globalBaseClassResource = "/" + baseClassResource;
        String pkgResource = resourceBaseName + ".properties";
        String globalResource = "/" + pkgResource;
        boolean loaded = false;
        final String[] resources = { baseClassResource, globalBaseClassResource, callingClassResource, globalCallingClassResource, pkgResource, globalResource };
        List<URL> urls = new ArrayList<URL>();
        Class<?> clazz = callingClazz;
        do {
            for (String res : resources) {
                URL url = clazz.getResource(res);
                if (null != url && !urls.contains(url)) {
                    urls.add(url);
                }
            }
            if (hierarchyRootClazz.equals(clazz)) {
                clazz = null;
            } else {
                clazz = clazz.getSuperclass();
            }
        } while (null != clazz);
        ListIterator<URL> it = urls.listIterator(urls.size());
        while (it.hasPrevious()) {
            URL url = it.previous();
            InputStream in = null;
            try {
                LOG.info("Loading test properties from resource: " + url);
                in = url.openStream();
                props.load(in);
                loaded = true;
            } catch (IOException ex) {
                LOG.warn("Failed to load properties from resource: " + url, ex);
            }
            IOUtil.closeSilently(in);
        }
        return loaded;
    }
} </s>
<s>class temp {    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals("content.xml")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry("content.xml"));
        bw.flush();
        osw = new OutputStreamWriter(zos, "UTF8");
        bw = new BufferedWriter(osw);
        return bw;
    }
} </s>
<s>class temp {    public static void signalServer(String solrHostURL) throws IOException {
        if (solrHostURL == null || solrHostURL.length() == 0) return;
        URL url;
        URLConnection urlConn;
        DataOutputStream printout;
        BufferedReader input;
        url = new URL(solrHostURL);
        urlConn = url.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setUseCaches(false);
        urlConn.setRequestProperty("Content-Type", "text/xml");
        urlConn.setRequestProperty("charset", "utf-8");
        printout = new DataOutputStream(urlConn.getOutputStream());
        String content = "<commit/>";
        printout.writeBytes(content);
        printout.flush();
        printout.close();
        input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        String str;
        while (null != ((str = input.readLine()))) {
            if (verbose) System.out.println(str); else logger.info(str);
        }
        input.close();
    }
} </s>
<s>class temp {    protected int sendData(String submitName, String submitValue) throws HttpException, IOException, SAXException {
        PostMethod postMethod = null;
        try {
            postMethod = new PostMethod(getDocumentBase().toString());
            postMethod.getParams().setCookiePolicy(org.apache.commons.httpclient.cookie.CookiePolicy.IGNORE_COOKIES);
            postMethod.addRequestHeader("Cookie", getWikiPrefix() + "_session=" + getSession() + "; " + getWikiPrefix() + "UserID=" + getUserId() + "; " + getWikiPrefix() + "UserName=" + getUserName() + "; ");
            List<Part> parts = new ArrayList<Part>();
            for (String s : new String[] { "wpSection", "wpEdittime", "wpScrolltop", "wpStarttime", "wpEditToken" }) {
                parts.add(new StringPart(s, StringEscapeUtils.unescapeJava(getNonNullParameter(s))));
            }
            parts.add(new StringPart("action", "edit"));
            parts.add(new StringPart("wpTextbox1", getArticleContent()));
            parts.add(new StringPart("wpSummary", getSummary()));
            parts.add(new StringPart("wpAutoSummary", Digest.MD5.isImplemented() ? Digest.MD5.encrypt(getSummary()) : ""));
            parts.add(new StringPart(submitName, submitValue));
            MultipartRequestEntity requestEntity = new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), postMethod.getParams());
            postMethod.setRequestEntity(requestEntity);
            int status = getHttpClient().executeMethod(postMethod);
            IOUtils.copyTo(postMethod.getResponseBodyAsStream(), System.err);
            return status;
        } catch (HttpException err) {
            throw err;
        } catch (IOException err) {
            throw err;
        } finally {
            if (postMethod != null) postMethod.releaseConnection();
        }
    }
} </s>
<s>class temp {            public Integer execute(Connection con) throws SQLException {
                int updateCount = 0;
                boolean oldAutoCommitSetting = con.getAutoCommit();
                Statement stmt = null;
                try {
                    con.setAutoCommit(autoCommit);
                    stmt = con.createStatement();
                    int statementCount = 0;
                    for (String statement : sql) {
                        try {
                            updateCount += stmt.executeUpdate(statement);
                            statementCount++;
                            if (statementCount % commitRate == 0 && !autoCommit) {
                                con.commit();
                            }
                        } catch (SQLException ex) {
                            if (!failOnError) {
                                log.log(LogLevel.WARN, "%s.  Failed to execute: %s.", ex.getMessage(), sql);
                            } else {
                                throw translate(statement, ex);
                            }
                        }
                    }
                    if (!autoCommit) {
                        con.commit();
                    }
                    return updateCount;
                } catch (SQLException ex) {
                    if (!autoCommit) {
                        con.rollback();
                    }
                    throw ex;
                } finally {
                    close(stmt);
                    con.setAutoCommit(oldAutoCommitSetting);
                }
            }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    public Leilao insertLeilao(Leilao leilao) throws SQLException {
        Connection conn = null;
        String insert = "insert into Leilao (idleilao, atividade_idatividade, datainicio, datafim) " + "values " + "(nextval('seq_leilao'), " + leilao.getAtividade().getIdAtividade() + ", '" + leilao.getDataInicio() + "', '" + leilao.getDataFim() + "')";
        try {
            conn = connectionFactory.getConnection(true);
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            Integer result = stmt.executeUpdate(insert);
            if (result == 1) {
                String sqlSelect = "select last_value from seq_leilao";
                ResultSet rs = stmt.executeQuery(sqlSelect);
                while (rs.next()) {
                    leilao.setIdLeilao(rs.getInt("last_value"));
                }
            }
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            conn.close();
        }
        return null;
    }
} </s>
<s>class temp {    public static void copyFile(File sourceFile, File targetFile) throws IOException {
        FileInputStream iStream = new FileInputStream(sourceFile);
        FileOutputStream oStream = new FileOutputStream(targetFile);
        FileChannel inChannel = iStream.getChannel();
        FileChannel outChannel = oStream.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(1024);
        while (true) {
            buffer.clear();
            int readCount = inChannel.read(buffer);
            if (readCount == -1) {
                break;
            }
            buffer.flip();
            outChannel.write(buffer);
        }
        iStream.close();
        oStream.close();
    }
} </s>
<s>class temp {    @Test
    public void testDoGet() throws Exception {
        HttpHost targetHost = new HttpHost("localhost", 8080, "http");
        DefaultHttpClient client = new DefaultHttpClient();
        client.getCredentialsProvider().setCredentials(new AuthScope(targetHost.getHostName(), targetHost.getPort()), new UsernamePasswordCredentials("vince", "test56"));
        try {
            HttpGet httpget = new HttpGet("http://localhost:8080/objectwiz/api?invokeFacetOperation=createNewEntity&objectClassName=org.objectwiz.testapp.jee5.addressbook.Person&applicationName=addressbook&methodReference=persist(E)&args=(lastname=toto)");
            System.out.println("executing request " + httpget.getURI());
            HttpResponse response = client.execute(httpget);
            HttpEntity entity = response.getEntity();
            Header[] headers = response.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header h = headers[i];
                System.out.println(h.getName() + "/" + h.getValue());
            }
            assertEquals(response.getStatusLine().getStatusCode(), 200);
            System.out.println("----------------------------------------");
            if (entity != null) {
                System.out.println("response content length" + entity.getContentLength());
                System.out.println(entity.getContentType().getName() + "/" + entity.getContentType().getValue());
            }
            httpget.abort();
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public void parse() throws ParserConfigurationException, SAXException, IOException {
        DefaultHttpClient httpclient = initialise();
        HttpResponse result = httpclient.execute(new HttpGet(urlString));
        SAXParserFactory spf = SAXParserFactory.newInstance();
        if (spf != null) {
            SAXParser sp = spf.newSAXParser();
            sp.parse(result.getEntity().getContent(), this);
        }
    }
} </s>
<s>class temp {    @Override
    public DataTable generateDataTable(Query query, HttpServletRequest request) throws DataSourceException {
        String url = request.getParameter(URL_PARAM_NAME);
        if (StringUtils.isEmpty(url)) {
            log.error("url parameter not provided.");
            throw new DataSourceException(ReasonType.INVALID_REQUEST, "url parameter not provided");
        }
        Reader reader;
        try {
            reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
        } catch (MalformedURLException e) {
            log.error("url is malformed: " + url);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, "url is malformed: " + url);
        } catch (IOException e) {
            log.error("Couldn't read from url: " + url, e);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, "Couldn't read from url: " + url);
        }
        DataTable dataTable = null;
        ULocale requestLocale = DataSourceHelper.getLocaleFromRequest(request);
        try {
            dataTable = CsvDataSourceHelper.read(reader, null, true, requestLocale);
        } catch (IOException e) {
            log.error("Couldn't read from url: " + url, e);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, "Couldn't read from url: " + url);
        }
        return dataTable;
    }
} </s>
<s>class temp {    private static void zip(ZipArchiveOutputStream zos, File efile, String base) throws IOException {
        if (efile.isDirectory()) {
            File[] lf = efile.listFiles();
            base = base + File.separator + efile.getName();
            for (File file : lf) {
                zip(zos, file, base);
            }
        } else {
            ZipArchiveEntry entry = new ZipArchiveEntry(efile, base + File.separator + efile.getName());
            zos.setEncoding("utf-8");
            zos.putArchiveEntry(entry);
            InputStream is = new FileInputStream(efile);
            IOUtils.copy(is, zos);
            is.close();
            zos.closeArchiveEntry();
        }
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    public static void unzip(String zipFileName, String folder, boolean isCreate) throws IOException {
        File file = new File(zipFileName);
        File folderfile = null;
        if (file.exists() && file.isFile()) {
            String mfolder = folder == null ? file.getParent() : folder;
            String fn = file.getName();
            fn = fn.substring(0, fn.lastIndexOf("."));
            mfolder = isCreate ? (mfolder + File.separator + fn) : mfolder;
            folderfile = new File(mfolder);
            if (!folderfile.exists()) {
                folderfile.mkdirs();
            }
        } else {
            throw new FileNotFoundException("不存在 zip 文件");
        }
        ZipFile zipFile = new ZipFile(file);
        try {
            Enumeration<ZipArchiveEntry> en = zipFile.getEntries();
            ZipArchiveEntry ze = null;
            while (en.hasMoreElements()) {
                ze = en.nextElement();
                if (ze.isDirectory()) {
                    String dirName = ze.getName();
                    dirName = dirName.substring(0, dirName.length() - 1);
                    File f = new File(folderfile.getPath() + File.separator + dirName);
                    f.mkdirs();
                } else {
                    File f = new File(folderfile.getPath() + File.separator + ze.getName());
                    if (!f.getParentFile().exists()) {
                        f.getParentFile().mkdirs();
                    }
                    f.createNewFile();
                    InputStream in = zipFile.getInputStream(ze);
                    OutputStream out = new FileOutputStream(f);
                    IOUtils.copy(in, out);
                    out.close();
                    in.close();
                }
            }
        } finally {
            zipFile.close();
        }
    }
} </s>
<s>class temp {        public HttpResponse execute() throws IOException {
            return new HttpResponse() {

                @Override
                public int getResponseCode() throws IOException {
                    return conn.getResponseCode();
                }

                @Override
                public InputStream getContentStream() throws IOException {
                    InputStream errStream = conn.getErrorStream();
                    if (errStream != null) return errStream; else return conn.getInputStream();
                }
            };
        }
} </s>
<s>class temp {    public List<Mosque> getAllMosquaisFromDataBase() {
        List<Mosque> mosquais = new ArrayList<Mosque>();
        InputStream is = null;
        String result = "";
        ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
        if (MyMapActivity.DEVELOPER_MODE) {
            nameValuePairs.add(new BasicNameValuePair(Param.LATITUDE, MyMapActivity.mLatitude + ""));
            nameValuePairs.add(new BasicNameValuePair(Param.LONGITUDE, MyMapActivity.mLongitude + ""));
        } else {
            nameValuePairs.add(new BasicNameValuePair(Param.LATITUDE, MyMapActivity.myLocation.getLatitude() + ""));
            nameValuePairs.add(new BasicNameValuePair(Param.LONGITUDE, MyMapActivity.myLocation.getLongitude() + ""));
        }
        nameValuePairs.add(new BasicNameValuePair(Param.RAYON, DataBaseQuery.rayon * Param.KM_MARGE + ""));
        try {
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(Param.URI_SELECT_ALL_DATA_BASE);
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();
        } catch (Exception e) {
            Log.e("log_tag", "Error in http connection " + e.toString());
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, "iso-8859-1"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            result = sb.toString();
        } catch (Exception e) {
            Log.e("log_tag", "Error converting result " + e.toString());
        }
        try {
            JSONArray jArray = new JSONArray(result);
            for (int i = 0; i < jArray.length(); i++) {
                JSONObject json_data = jArray.getJSONObject(i);
                Mosque mosquai = new Mosque(json_data.getInt(Param.ID), json_data.getString(Param.NOM), json_data.getDouble(Param.LATITUDE), json_data.getDouble(Param.LONGITUDE), json_data.getString(Param.INFO), json_data.getInt(Param.HAVE_PICTURE) == 1 ? true : false, json_data.getString(Param.PICTURE));
                mosquais.add(mosquai);
            }
        } catch (JSONException e) {
            Log.e("log_tag", "Error parsing data " + e.toString());
        }
        return mosquais;
    }
} </s>
<s>class temp {    public void loadFromInternet(boolean reload) {
        if (!reload && this.internetScoreGroupModel != null) {
            return;
        }
        loadingFlag = true;
        ProgressBar settingProgressBar = (ProgressBar) this.activity.findViewById(R.id.settingProgressBar);
        settingProgressBar.setVisibility(View.VISIBLE);
        final Timer timer = new Timer();
        final Handler handler = new Handler() {

            @Override
            public void handleMessage(Message msg) {
                if (loadingFlag == false) {
                    ProgressBar settingProgressBar = (ProgressBar) BestScoreExpandableListAdapter.this.activity.findViewById(R.id.settingProgressBar);
                    settingProgressBar.setVisibility(View.INVISIBLE);
                    timer.cancel();
                }
                super.handleMessage(msg);
            }
        };
        final TimerTask task = new TimerTask() {

            @Override
            public void run() {
                Message message = new Message();
                handler.sendMessage(message);
            }
        };
        timer.schedule(task, 1, 50);
        String httpUrl = Constants.SERVER_URL + "/rollingcard.php?op=viewbestscore";
        HttpGet request = new HttpGet(httpUrl);
        HttpClient httpClient = new DefaultHttpClient();
        try {
            HttpResponse response = httpClient.execute(request);
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                String entity = EntityUtils.toString(response.getEntity());
                String[] itemArray = entity.split(";");
                this.internetScoreGroupModel = new ScoreGroupModel();
                for (int i = 0; i < itemArray.length; i++) {
                    String[] itemValueArray = itemArray[i].split("\\|");
                    if (itemValueArray.length != 3) {
                        continue;
                    }
                    ScoreItemModel itemModel = new ScoreItemModel(itemValueArray[0], itemValueArray[1], itemValueArray[2]);
                    this.internetScoreGroupModel.addItem(itemModel);
                }
            }
        } catch (ClientProtocolException e) {
            this.internetScoreGroupModel = null;
            e.printStackTrace();
        } catch (IOException e) {
            this.internetScoreGroupModel = null;
            e.printStackTrace();
        }
        loadingFlag = false;
    }
} </s>
<s>class temp {    public void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        String uri = args[0];
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        InputStream in = null;
        try {
            in = fs.open(new Path(uri));
            IOUtils.copyBytes(in, System.out, 4096, false);
        } finally {
            IOUtils.closeStream(in);
        }
    }
} </s>
<s>class temp {    public static IProject createSimplemodelEnabledJavaProject() throws CoreException {
        IWorkspaceDescription desc = ResourcesPlugin.getWorkspace().getDescription();
        desc.setAutoBuilding(false);
        ResourcesPlugin.getWorkspace().setDescription(desc);
        String name = "TestProject";
        for (int i = 0; i < 1000; i++) {
            IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i);
            if (project.exists()) continue;
            project.create(null);
            project.open(null);
            IProjectDescription description = project.getDescription();
            String[] natures = description.getNatureIds();
            String[] newNatures = new String[natures.length + 2];
            System.arraycopy(natures, 0, newNatures, 0, natures.length);
            newNatures[natures.length] = JavaCore.NATURE_ID;
            newNatures[natures.length + 1] = SimplemodelNature.NATURE_ID;
            description.setNatureIds(newNatures);
            project.setDescription(description, null);
            IJavaProject javaProject = JavaCore.create(project);
            Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>();
            IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall();
            Path containerPath = new Path(JavaRuntime.JRE_CONTAINER);
            IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName());
            entries.add(JavaCore.newContainerEntry(vmPath));
            LibraryLocation[] locations = JavaRuntime.getLibraryLocations(vmInstall);
            for (LibraryLocation element : locations) {
                entries.add(JavaCore.newLibraryEntry(element.getSystemLibraryPath(), null, null));
            }
            final Path srcPath = new Path("src");
            final IFolder src = project.getFolder(srcPath);
            final Path binPath = new Path("bin");
            final IFolder bin = project.getFolder(binPath);
            src.create(true, true, null);
            bin.create(true, true, null);
            entries.add(JavaCore.newSourceEntry(project.getFullPath().append(srcPath)));
            javaProject.setOutputLocation(project.getFullPath().append(binPath), null);
            javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null);
            return project;
        }
        throw new RuntimeException("Failed");
    }
} </s>
<s>class temp {    public static void upload(FTPDetails ftpDetails) {
        FTPClient ftp = new FTPClient();
        try {
            String host = ftpDetails.getHost();
            logger.info("Connecting to ftp host: " + host);
            ftp.connect(host);
            logger.info("Received reply from ftp :" + ftp.getReplyString());
            ftp.login(ftpDetails.getUserName(), ftpDetails.getPassword());
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.makeDirectory(ftpDetails.getRemoterDirectory());
            logger.info("Created directory :" + ftpDetails.getRemoterDirectory());
            ftp.changeWorkingDirectory(ftpDetails.getRemoterDirectory());
            BufferedInputStream ftpInput = new BufferedInputStream(new FileInputStream(new File(ftpDetails.getLocalFilePath())));
            OutputStream storeFileStream = ftp.storeFileStream(ftpDetails.getRemoteFileName());
            IOUtils.copy(ftpInput, storeFileStream);
            logger.info("Copied file : " + ftpDetails.getLocalFilePath() + " >>> " + host + ":/" + ftpDetails.getRemoterDirectory() + "/" + ftpDetails.getRemoteFileName());
            ftpInput.close();
            storeFileStream.close();
            ftp.logout();
            ftp.disconnect();
            logger.info("Logged out. ");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    private static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        if (url == null) {
            throw new IllegalArgumentException("Keystore url may not be null");
        }
        LOG.debug("Initializing key store");
        KeyStore keystore = KeyStore.getInstance("jks");
        InputStream is = null;
        try {
            is = url.openStream();
            keystore.load(is, password != null ? password.toCharArray() : null);
        } finally {
            if (is != null) is.close();
        }
        return keystore;
    }
} </s>
<s>class temp {    public int next() {
        int sequenceValue = current();
        try {
            Update update = dbi.getUpdate();
            update.setTableName(sequenceTable);
            update.assignValue("SEQUENCE_VALUE", --sequenceValue);
            Search search = new Search();
            search.addAttributeCriteria(sequenceTable, "SEQUENCE_NAME", Search.EQUAL, sequenceName);
            update.where(search);
            int affectedRows = dbi.getConnection().createStatement().executeUpdate(update.toString());
            if (affectedRows == 1) {
                dbi.getConnection().commit();
            } else {
                dbi.getConnection().rollback();
            }
        } catch (SQLException sqle) {
            System.err.println("SQLException occurred in current(): " + sqle.getMessage());
        }
        return sequenceValue;
    }
} </s>
<s>class temp {    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String contentId = req.getParameter(CONTENT_ID);
        String contentType = req.getParameter(CONTENT_TYPE);
        if (contentId == null || contentType == null) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Content id or content type not specified");
            return;
        }
        try {
            switch(ContentType.valueOf(contentType)) {
                case IMAGE:
                    resp.setContentType("image/jpeg");
                    break;
                case AUDIO:
                    resp.setContentType("audio/mp3");
                    break;
                case VIDEO:
                    resp.setContentType("video/mpeg");
                    break;
                default:
                    throw new IllegalStateException("Invalid content type specified");
            }
        } catch (IllegalArgumentException e) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid content type specified");
            return;
        }
        String baseUrl = this.getServletContext().getInitParameter(BASE_URL);
        URL url = new URL(baseUrl + "/" + contentType.toLowerCase() + "/" + contentId);
        URLConnection conn = url.openConnection();
        resp.setContentLength(conn.getContentLength());
        IOUtils.copy(conn.getInputStream(), resp.getOutputStream());
    }
} </s>
<s>class temp {    @Override
    public List<String> getNamedEntitites(String sentence) {
        List<String> namedEntities = new ArrayList<String>();
        try {
            URL url = new URL(SERVICE_URL + "text=" + URLEncoder.encode(sentence, "UTF-8") + "&confidence=" + CONFIDENCE + "&support=" + SUPPORT);
            URLConnection conn = url.openConnection();
            conn.setRequestProperty("accept", "application/json");
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
            rd.close();
            JSONObject json = new JSONObject(sb.toString());
            if (!json.isNull("Resources")) {
                JSONArray array = json.getJSONArray("Resources");
                JSONObject entityObject;
                for (int i = 0; i < array.length(); i++) {
                    entityObject = array.getJSONObject(i);
                    System.out.println("Entity: " + entityObject.getString("@surfaceForm"));
                    System.out.println("DBpedia URI: " + entityObject.getString("@URI"));
                    System.out.println("Types: " + entityObject.getString("@types"));
                    namedEntities.add(entityObject.getString("@surfaceForm"));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return namedEntities;
    }
} </s>
<s>class temp {    private static String genRandomGUID(boolean secure) {
        String valueBeforeMD5 = "";
        String valueAfterMD5 = "";
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error: " + e);
            return valueBeforeMD5;
        }
        long time = System.currentTimeMillis();
        long rand = 0;
        if (secure) {
            rand = mySecureRand.nextLong();
        } else {
            rand = myRand.nextLong();
        }
        sbValueBeforeMD5.append(s_id);
        sbValueBeforeMD5.append(":");
        sbValueBeforeMD5.append(Long.toString(time));
        sbValueBeforeMD5.append(":");
        sbValueBeforeMD5.append(Long.toString(rand));
        valueBeforeMD5 = sbValueBeforeMD5.toString();
        md5.update(valueBeforeMD5.getBytes());
        byte[] array = md5.digest();
        String strTemp = "";
        for (int i = 0; i < array.length; i++) {
            strTemp = (Integer.toHexString(array[i] & 0XFF));
            if (strTemp.length() == 1) {
                valueAfterMD5 = valueAfterMD5 + "0" + strTemp;
            } else {
                valueAfterMD5 = valueAfterMD5 + strTemp;
            }
        }
        return valueAfterMD5.toUpperCase();
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException {
        String urltext = "http://www.vogella.de";
        URL url = new URL(urltext);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
        }
        in.close();
    }
} </s>
<s>class temp {    public void connect(String method, String data, String urlString, Properties properties, boolean allowredirect) throws Exception {
        if (urlString != null) {
            try {
                url_ = new URL(url_, urlString);
            } catch (Exception e) {
                throw new Exception("Invalid URL");
            }
        }
        try {
            httpURLConnection_ = (HttpURLConnection) url_.openConnection(siteThread_.getProxy());
            httpURLConnection_.setDoInput(true);
            httpURLConnection_.setDoOutput(true);
            httpURLConnection_.setUseCaches(false);
            httpURLConnection_.setRequestMethod(method);
            httpURLConnection_.setRequestProperty("Content-type", "application/x-www-form-urlencoded");
            httpURLConnection_.setInstanceFollowRedirects(allowredirect);
            if (properties != null) {
                for (Object propertyKey : properties.keySet()) {
                    String propertyValue = properties.getProperty((String) propertyKey);
                    if (propertyValue.equalsIgnoreCase("Content-Length")) {
                        httpURLConnection_.setFixedLengthStreamingMode(0);
                    }
                    httpURLConnection_.setRequestProperty((String) propertyKey, propertyValue);
                }
            }
            int connectTimeout = httpURLConnection_.getConnectTimeout();
            if (data != null) {
                post(data);
            }
            httpURLConnection_.connect();
        } catch (Exception e) {
            throw new Exception("Connection failed with url " + url_);
        }
    }
} </s>
<s>class temp {        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == btnRegister) {
                Error.log(6002, "Bot o cadastrar pressionado por " + login + ".");
                if (nameUser.getText().compareTo("") == 0) {
                    JOptionPane.showMessageDialog(null, "Campo nome requerido");
                    nameUser.setFocusable(true);
                    return;
                }
                if (loginUser.getText().compareTo("") == 0) {
                    JOptionPane.showMessageDialog(null, "Campo login requerido");
                    loginUser.setFocusable(true);
                    return;
                }
                String group = "";
                if (groupUser.getSelectedIndex() == 0) group = "admin"; else if (groupUser.getSelectedIndex() == 1) group = "user"; else {
                    JOptionPane.showMessageDialog(null, "Campo grupo n o selecionado");
                    return;
                }
                if (new String(passwordUser1.getPassword()).compareTo("") == 0) {
                    JOptionPane.showMessageDialog(null, "Campo senha requerido");
                    passwordUser1.setFocusable(true);
                    return;
                }
                String password1 = new String(passwordUser1.getPassword());
                String password2 = new String(passwordUser2.getPassword());
                if (password1.compareTo(password2) != 0) {
                    JOptionPane.showMessageDialog(null, "Senhas n o casam");
                    passwordUser1.setText("");
                    passwordUser2.setText("");
                    passwordUser1.setFocusable(true);
                    return;
                }
                char c = passwordUser1.getPassword()[0];
                int i = 1;
                for (i = 1; i < password1.length(); i++) {
                    if (passwordUser1.getPassword()[i] != c) {
                        break;
                    }
                    c = passwordUser1.getPassword()[i];
                }
                if (i == password1.length()) {
                    JOptionPane.showMessageDialog(null, "Senha fraca");
                    return;
                }
                if (password1.length() < 6) {
                    JOptionPane.showMessageDialog(null, "Senha deve ter mais que 6 digitos");
                    return;
                }
                if (numPasswordOneUseUser.getText().compareTo("") == 0) {
                    JOptionPane.showMessageDialog(null, "Campo n mero de senhas de uso  nico requerido");
                    return;
                }
                if (!(Integer.parseInt(numPasswordOneUseUser.getText()) > 0 && Integer.parseInt(numPasswordOneUseUser.getText()) < 41)) {
                    JOptionPane.showMessageDialog(null, "N mero de senhas de uso  nico entre 1 e 40");
                    return;
                }
                ResultSet rs;
                Statement stmt;
                String sql;
                String result = "";
                sql = "select login from Usuarios where login='" + loginUser.getText() + "'";
                try {
                    theConn = DatabaseConnection.getConnection();
                    stmt = theConn.createStatement();
                    rs = stmt.executeQuery(sql);
                    while (rs.next()) {
                        result = rs.getString("login");
                    }
                    rs.close();
                    stmt.close();
                } catch (Exception exception) {
                    exception.printStackTrace();
                } finally {
                    try {
                        if (theConn != null) theConn.close();
                    } catch (Exception exception) {
                    }
                }
                if (result.compareTo("") != 0) {
                    JOptionPane.showMessageDialog(null, "Login " + result + " j  existe");
                    loginUser.setText("");
                    loginUser.setFocusable(true);
                    return;
                }
                String outputDigest = "";
                try {
                    MessageDigest messageDigest = MessageDigest.getInstance("SHA1");
                    messageDigest.update(password1.getBytes());
                    BigInteger bigInt = new BigInteger(1, messageDigest.digest());
                    outputDigest = bigInt.toString(16);
                } catch (NoSuchAlgorithmException exception) {
                    exception.printStackTrace();
                }
                sql = "insert into Usuarios (login,password,tries_personal,tries_one_use," + "grupo,description) values " + "('" + loginUser.getText() + "','" + outputDigest + "',0,0,'" + group + "','" + nameUser.getText() + "')";
                try {
                    theConn = DatabaseConnection.getConnection();
                    stmt = theConn.createStatement();
                    stmt.executeUpdate(sql);
                    stmt.close();
                } catch (Exception exception) {
                    exception.printStackTrace();
                } finally {
                    try {
                        if (theConn != null) theConn.close();
                    } catch (Exception exception) {
                    }
                }
                Random rn = new Random();
                int r;
                Vector<Integer> passwordVector = new Vector<Integer>();
                for (i = 0; i < Integer.parseInt(numPasswordOneUseUser.getText()); i++) {
                    r = rn.nextInt() % 10000;
                    if (r < 0) r = r * (-1);
                    passwordVector.add(r);
                }
                try {
                    BufferedWriter out = new BufferedWriter(new FileWriter(loginUser.getText() + ".txt", false));
                    for (i = 0; i < Integer.parseInt(numPasswordOneUseUser.getText()); i++) {
                        out.append("" + i + " " + passwordVector.get(i) + "\n");
                    }
                    out.close();
                    try {
                        for (i = 0; i < Integer.parseInt(numPasswordOneUseUser.getText()); i++) {
                            MessageDigest messageDigest = MessageDigest.getInstance("SHA1");
                            messageDigest.update(passwordVector.get(i).toString().getBytes());
                            BigInteger bigInt = new BigInteger(1, messageDigest.digest());
                            String digest = bigInt.toString(16);
                            sql = "insert into Senhas_De_Unica_Vez (login,key,password) values " + "('" + loginUser.getText() + "'," + i + ",'" + digest + "')";
                            try {
                                theConn = DatabaseConnection.getConnection();
                                stmt = theConn.createStatement();
                                stmt.executeUpdate(sql);
                                stmt.close();
                            } catch (Exception exception) {
                                exception.printStackTrace();
                            } finally {
                                try {
                                    if (theConn != null) theConn.close();
                                } catch (Exception exception) {
                                }
                            }
                        }
                    } catch (NoSuchAlgorithmException exception) {
                        exception.printStackTrace();
                    }
                } catch (IOException exception) {
                    exception.printStackTrace();
                }
                JOptionPane.showMessageDialog(null, "Usu rio " + loginUser.getText() + " foi cadastrado com sucesso.");
                dispose();
            }
            if (e.getSource() == btnCancel) {
                Error.log(6003, "Bot o voltar de cadastrar para o menu principal pressionado por " + login + ".");
                dispose();
            }
        }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".build")) develBuild = line.substring(6).trim(); else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    @Override
    public void actionPerformed(ActionEvent e) {
        if (feedbackView.getText().length() <= 0) return;
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            try {
                SSLContext sc = SSLContext.getInstance("SSL");
                sc.init(null, trustAllCerts, new java.security.SecureRandom());
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            } catch (Exception e3) {
                e3.printStackTrace();
            }
            feedback = "";
            addLine("Type            : " + feedbackView.getType());
            addLine("User            : " + HIRuntime.getManager().getCurrentUser().getLastName() + ", " + HIRuntime.getManager().getCurrentUser().getFirstName() + " (" + HIRuntime.getManager().getCurrentUser().getUserName() + ") " + HIRuntime.getManager().getCurrentUser().getEmail());
            addLine("Project         : P" + HIRuntime.getManager().getProject().getId() + " - " + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));
            addLine("Client Version  : " + HIRuntime.getClientVersion());
            addLine("Service URL     : " + HIRuntime.getManager().getServerURL());
            try {
                addLine("Service Version : " + HIRuntime.getManager().getVersionID());
            } catch (HIWebServiceException e1) {
            }
            addLine("Client OS       : " + System.getProperty("os.name") + " " + System.getProperty("os.version") + " (" + System.getProperty("os.arch") + ")");
            addLine("Java Version    : " + System.getProperty("java.version") + " (" + System.getProperty("java.vendor") + ")");
            if (HIRuntime.getGui().getLastWSError() == null) addLine("Last WS Error   : -none-"); else {
                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();
                addLine("Last WS Error   : " + lastWSError.getCause().getMessage() + " (" + lastWSError.getErrorType() + ")");
                addLine("");
                addLine("Stack Trace");
                addLine("-----------");
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(byteStream);
                lastWSError.getCause().printStackTrace(writer);
                writer.close();
                addLine(new String(byteStream.toByteArray()));
            }
            addLine("");
            addLine("Message");
            addLine("-------");
            feedback = feedback + feedbackView.getText();
            feedback = feedback + "\n\n";
            feedback = URLEncoder.encode(feedback, "UTF-8");
            URL url = new URL("https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            connection.setDoOutput(true);
            PrintWriter writer = new PrintWriter(connection.getOutputStream());
            writer.write("raw_fb=" + feedback);
            writer.close();
            connection.connect();
            String response = connection.getResponseMessage();
            if (response.compareTo("OK") == 0) {
                HIRuntime.getGui().clearLastWSError();
                HIRuntime.getGui().displayInfoDialog("Feedback gesendet", "Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet.");
            } else HIRuntime.getGui().displayInfoDialog("Feedback Fehlgeschlagen", "Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n" + "Bitte versuchen Sie es später erneut.\n\n" + "Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!");
            connection.disconnect();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            HIRuntime.getGui().displayInfoDialog("Feedback Fehlgeschlagen", "Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n" + "Bitte versuchen Sie es später erneut.\n\n" + "Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!");
        } catch (IOException e2) {
            e2.printStackTrace();
            HIRuntime.getGui().displayInfoDialog("Feedback Fehlgeschlagen", "Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n" + "Bitte versuchen Sie es später erneut.\n\n" + "Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!");
        }
        HIRuntime.getGui().deregisterComponent(this, false);
    }
} </s>
<s>class temp {    boolean createSessionArchive(String archiveFilename) {
        byte[] buffer = new byte[1024];
        try {
            ZipOutputStream archive = new ZipOutputStream(new FileOutputStream(archiveFilename));
            for (mAnnotationsCursor.moveToFirst(); !mAnnotationsCursor.isAfterLast(); mAnnotationsCursor.moveToNext()) {
                FileInputStream in = new FileInputStream(mAnnotationsCursor.getString(ANNOTATIONS_FILE_NAME));
                archive.putNextEntry(new ZipEntry("audio" + (mAnnotationsCursor.getPosition() + 1) + ".3gpp"));
                int length;
                while ((length = in.read(buffer)) > 0) archive.write(buffer, 0, length);
                archive.closeEntry();
                in.close();
            }
            archive.close();
        } catch (IOException e) {
            Toast.makeText(mActivity, mActivity.getString(R.string.error_zip) + " " + e.getMessage(), Toast.LENGTH_SHORT).show();
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    public boolean authorize(String username, String password, String filename) {
        open(filename);
        boolean isAuthorized = false;
        StringBuffer encPasswd = null;
        try {
            MessageDigest mdAlgorithm = MessageDigest.getInstance("MD5");
            mdAlgorithm.update(password.getBytes());
            byte[] digest = mdAlgorithm.digest();
            encPasswd = new StringBuffer();
            for (int i = 0; i < digest.length; i++) {
                password = Integer.toHexString(255 & digest[i]);
                if (password.length() < 2) {
                    password = "0" + password;
                }
                encPasswd.append(password);
            }
        } catch (NoSuchAlgorithmException ex) {
        }
        String encPassword = encPasswd.toString();
        String tempPassword = getPassword(username);
        System.out.println("epass" + encPassword);
        System.out.println("pass" + tempPassword);
        if (tempPassword.equals(encPassword)) {
            isAuthorized = true;
        } else {
            isAuthorized = false;
        }
        close();
        return isAuthorized;
    }
} </s>
<s>class temp {    public void addUser(String username, String password, String filename) {
        String data = "";
        try {
            open(filename);
            MessageDigest mdAlgorithm = MessageDigest.getInstance("MD5");
            mdAlgorithm.update(password.getBytes());
            byte[] digest = mdAlgorithm.digest();
            StringBuffer encPasswd = new StringBuffer();
            for (int i = 0; i < digest.length; i++) {
                password = Integer.toHexString(255 & digest[i]);
                if (password.length() < 2) {
                    password = "0" + password;
                }
                encPasswd.append(password);
                data = username + " " + encPasswd + "\r\n";
            }
            try {
                long length = file.length();
                file.seek(length);
                file.write(data.getBytes());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            close();
        } catch (NoSuchAlgorithmException ex) {
        }
    }
} </s>
<s>class temp {    public String encryptPassword(String password) {
        StringBuffer encPasswd = new StringBuffer();
        try {
            MessageDigest mdAlgorithm = MessageDigest.getInstance("MD5");
            mdAlgorithm.update(password.getBytes());
            byte[] digest = mdAlgorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                password = Integer.toHexString(255 & digest[i]);
                if (password.length() < 2) {
                    password = "0" + password;
                }
                encPasswd.append(password);
            }
        } catch (NoSuchAlgorithmException ex) {
        }
        return encPasswd.toString();
    }
} </s>
<s>class temp {    public String generateKey(Message msg) {
        String text = msg.getDefaultMessage();
        String meaning = msg.getMeaning();
        if (text == null) {
            return null;
        }
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error initializing MD5", e);
        }
        try {
            md5.update(text.getBytes("UTF-8"));
            if (meaning != null) {
                md5.update(meaning.getBytes("UTF-8"));
            }
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException("UTF-8 unsupported", e);
        }
        return StringUtils.toHexString(md5.digest());
    }
} </s>
<s>class temp {    public void run() {
        try {
            String getter = null;
            String str, targetHost = "", httpHeader = "";
            int targetPort = 80;
            while (true) {
                str = fromBrowser.readLine();
                if (str.startsWith("GET") || str.startsWith("DESCRIBE") || str.startsWith("POST") || str.startsWith("HEAD")) {
                    getter = str;
                }
                if (str.startsWith("Accept-Encoding: gzip")) {
                    str = "Accept-Encoding: identity";
                }
                httpHeader += str + "\r\n";
                if (str.startsWith("Host: ")) {
                    targetHost = str.substring(6);
                } else if (str.startsWith("DESCRIBE")) {
                    targetPort = 554;
                    targetHost = str.substring(str.indexOf("//") + 2);
                    targetHost = targetHost.substring(0, targetHost.indexOf("/"));
                }
                if (str.length() == 0) {
                    break;
                }
            }
            String target = targetHost;
            if (targetHost.indexOf(":") > -1) {
                try {
                    targetPort = Integer.parseInt(targetHost.substring(targetHost.indexOf(":") + 1));
                } catch (NumberFormatException nfe) {
                }
                target = targetHost.substring(0, targetHost.indexOf(":"));
            }
            logger.trace("[PROXY] Connect to: " + target + " and port: " + targetPort);
            socketToWeb = new Socket(InetAddress.getByName(target), targetPort);
            InputStream sockWebInputStream = socketToWeb.getInputStream();
            toWeb = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socketToWeb.getOutputStream())), true);
            toWeb.println(httpHeader);
            toWeb.flush();
            StringTokenizer st = new StringTokenizer(getter, " ");
            st.nextToken();
            String askedResource = st.nextToken();
            askedResource = askedResource.substring(askedResource.indexOf(targetHost) + targetHost.length());
            logger.trace("[PROXY] Asked resource: " + askedResource);
            String directoryResource = askedResource.substring(0, askedResource.lastIndexOf("/"));
            directoryResource = getWritableFileName(directoryResource);
            String fileResource = askedResource.substring(askedResource.lastIndexOf("/") + 1);
            fileResource = getWritableFileName(fileResource);
            fileResource = fileResource + ".cached";
            String fileN = "proxycache/" + target + "/" + directoryResource;
            File directoryResourceFile = new File(fileN);
            if (writeCache) {
                directoryResourceFile.mkdirs();
            }
            File cachedResource = new File(directoryResourceFile, fileResource);
            byte[] buffer = new byte[8192];
            boolean resourceExists = cachedResource.exists() || this.getClass().getResource("/" + fileN) != null;
            boolean inMemory = writeCache && !resourceExists;
            FileOutputStream fOUT = null;
            if (resourceExists) {
                logger.trace("[PROXY] File is cached: " + cachedResource.getAbsolutePath());
                sockWebInputStream.close();
                if (cachedResource.exists()) {
                    sockWebInputStream = new FileInputStream(cachedResource);
                } else {
                    sockWebInputStream = this.getClass().getResourceAsStream("/" + fileN);
                }
            } else if (writeCache) {
                logger.trace("[PROXY] File is not cached / Writing in it: " + cachedResource.getAbsolutePath());
                fOUT = new FileOutputStream(cachedResource, false);
            }
            OutputStream baos = null;
            if (inMemory) {
                baos = new ByteArrayOutputStream();
            } else {
                baos = toBrowser;
            }
            long total_read = 0;
            int bytes_read;
            long CL = 10000000000L;
            while (total_read < CL && (bytes_read = sockWebInputStream.read(buffer)) != -1) {
                if (!resourceExists) {
                    if (10000000000L == CL) {
                        String s = new String(buffer, 0, bytes_read);
                        int clPos = s.indexOf("Content-Length: ");
                        if (clPos > -1) {
                            CL = Integer.parseInt(s.substring(clPos + 16, s.indexOf("\n", clPos)).trim());
                            logger.trace("Found Content Length: " + CL);
                        }
                    }
                    if (bytes_read >= 7) {
                        byte end[] = new byte[7];
                        System.arraycopy(buffer, bytes_read - 7, end, 0, 7);
                        if (new String(end).equals("\r\n0\r\n\r\n")) {
                            System.out.println("end of transfer chunked");
                            CL = -1;
                        }
                    }
                    if (writeCache) {
                        fOUT.write(buffer, 0, bytes_read);
                    }
                }
                baos.write(buffer, 0, bytes_read);
                total_read += bytes_read;
            }
            if (inMemory) {
                baos.close();
                toBrowser.write(((ByteArrayOutputStream) baos).toByteArray());
            }
            if (writeCache && fOUT != null) {
                fOUT.close();
            }
            socketToWeb.close();
            toBrowser.close();
        } catch (IOException e) {
        } finally {
            try {
                if (toWeb != null) {
                    toWeb.close();
                }
                if (toBrowser != null) {
                    toBrowser.close();
                }
                socket.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    private void parse() throws ComponentRegistryException {
        try {
            HttpURLConnection connection = (HttpURLConnection) this.url.openConnection();
            connection.setInstanceFollowRedirects(false);
            connection.connect();
            int count = 0;
            while (String.valueOf(connection.getResponseCode()).startsWith("3")) {
                String location = connection.getHeaderField("Location");
                logger.finest("Redirecting to " + location);
                connection.disconnect();
                this.url = new URL(location);
                connection = (HttpURLConnection) this.url.openConnection();
                connection.setInstanceFollowRedirects(false);
                connection.connect();
                count++;
                if (count > 10) {
                    throw new ComponentRegistryException("Too many redirect");
                }
            }
            InputStream inputStream = connection.getInputStream();
            InputStreamReader reader = new InputStreamReader(inputStream);
            HtmlRegistryParserCallback callback = new HtmlRegistryParserCallback();
            ParserDelegator parser = new ParserDelegator();
            parser.parse(reader, callback, false);
        } catch (IOException e) {
            throw new ComponentRegistryException(e);
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".version")) version = line.substring(8).trim(); else if (line.startsWith(".build")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    private byte[] digestPassword(byte[] salt, String password) throws AuthenticationException {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(salt);
            md.update(password.getBytes("UTF8"));
            return md.digest();
        } catch (Exception e) {
            throw new AuthenticationException(MESSAGE_CONFIGURATION_ERROR_KEY, e);
        }
    }
} </s>
<s>class temp {    private static ISimpleChemObjectReader createReader(URL url, String urlString, String type) throws CDKException {
        if (type == null) {
            type = "mol";
        }
        ISimpleChemObjectReader cor = null;
        cor = new MDLV2000Reader(getReader(url), Mode.RELAXED);
        try {
            ReaderFactory factory = new ReaderFactory();
            cor = factory.createReader(getReader(url));
            if (cor instanceof CMLReader) {
                cor = new CMLReader(urlString);
            }
        } catch (IOException ioExc) {
        } catch (Exception exc) {
        }
        if (cor == null) {
            if (type.equals(JCPFileFilter.cml) || type.equals(JCPFileFilter.xml)) {
                cor = new CMLReader(urlString);
            } else if (type.equals(JCPFileFilter.sdf)) {
                cor = new MDLV2000Reader(getReader(url));
            } else if (type.equals(JCPFileFilter.mol)) {
                cor = new MDLV2000Reader(getReader(url));
            } else if (type.equals(JCPFileFilter.inchi)) {
                try {
                    cor = new INChIReader(new URL(urlString).openStream());
                } catch (MalformedURLException e) {
                } catch (IOException e) {
                }
            } else if (type.equals(JCPFileFilter.rxn)) {
                cor = new MDLRXNV2000Reader(getReader(url));
            } else if (type.equals(JCPFileFilter.smi)) {
                cor = new SMILESReader(getReader(url));
            }
        }
        if (cor == null) {
            throw new CDKException(GT._("Could not determine file format"));
        }
        if (cor instanceof MDLV2000Reader) {
            try {
                BufferedReader in = new BufferedReader(getReader(url));
                String line;
                while ((line = in.readLine()) != null) {
                    if (line.equals("$$$$")) {
                        String message = GT._("It seems you opened a mol or sdf" + " file containing several molecules. " + "Only the first one will be shown");
                        JOptionPane.showMessageDialog(null, message, GT._("sdf-like file"), JOptionPane.INFORMATION_MESSAGE);
                        break;
                    }
                }
            } catch (IOException ex) {
            }
        }
        return cor;
    }
} </s>
<s>class temp {    public static String getFileContents(String path) {
        BufferedReader buffReader = null;
        InputStream stream = null;
        if (path.indexOf("://") != -1) {
            URL url = null;
            try {
                url = new URL(path);
            } catch (MalformedURLException e) {
                LOGGER.warn(String.format("Malformed URL: \"%s\"", path));
            }
            if (url == null) {
                throw new DeveloperError(String.format("Cannot create URL from path: \"%s\"", path), new NullPointerException());
            }
            try {
                String encoding = Characters.getDeclaredXMLEncoding(url);
                stream = url.openStream();
                buffReader = new BufferedReader(new InputStreamReader(stream, encoding));
            } catch (IOException e) {
                LOGGER.warn(String.format("I/O error trying to read \"%s\"", path));
            }
        } else {
            File toRead = null;
            try {
                toRead = getExistingFile(path);
            } catch (FileNotFoundException e) {
                throw new UserError(new FileNotFoundException(path));
            }
            if (toRead.isAbsolute()) {
                String parent = toRead.getParent();
                try {
                    workingDirectory.push(URLTools.createValidURL(parent));
                } catch (FileNotFoundException e) {
                    throw new DeveloperError(String.format("Created an invalid parent file: \"%s\".", parent), e);
                }
            }
            if (toRead.exists() && !toRead.isDirectory()) {
                String _path = toRead.getAbsolutePath();
                try {
                    String encoding = Characters.getDeclaredXMLEncoding(URLTools.createValidURL(_path));
                    stream = new FileInputStream(_path);
                    buffReader = new BufferedReader(new InputStreamReader(stream, encoding));
                } catch (IOException e) {
                    LOGGER.warn(String.format("I/O error trying to read \"%s\"", _path));
                    return null;
                }
            } else {
                assert toRead.exists() : "getExistingFile() returned a non-existent file";
                if (toRead.isDirectory()) {
                    throw new UserError(new FileAlreadyExistsAsDirectoryException(toRead));
                }
            }
        }
        StringBuilder result = new StringBuilder();
        String line;
        if (buffReader != null && stream != null) {
            try {
                while ((line = buffReader.readLine()) != null) {
                    result.append(line);
                }
                buffReader.close();
                stream.close();
            } catch (IOException e) {
                LOGGER.warn(String.format("I/O error trying to read \"%s\"", path));
                return null;
            }
        }
        return result.toString();
    }
} </s>
<s>class temp {    public void testCryptHash() {
        Log.v("Test", "[*] testCryptHash()");
        String testStr = "Hash me";
        byte messageDigest[];
        MessageDigest digest = null;
        try {
            digest = java.security.MessageDigest.getInstance("MD5");
            digest.update(testStr.getBytes());
            messageDigest = digest.digest();
            digest.digest(testStr.getBytes());
            digest = java.security.MessageDigest.getInstance("SHA1");
            digest.update(testStr.getBytes());
            messageDigest = digest.digest();
            digest = null;
            digest = java.security.MessageDigest.getInstance("SHA1");
            digest.update(imei.getBytes());
            messageDigest = digest.digest();
            hashedImei = this.toHex(messageDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public void testNetworkHTTP() {
        Log.v("Test", "[*] testNetworkHTTP()");
        URL url = null;
        HttpURLConnection urlConnection = null;
        try {
            url = new URL("http://code.google.com/p/droidbox/");
            urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            @SuppressWarnings("unused") String line = "";
            while ((line = rd.readLine()) != null) ;
            url = new URL("http://pjlantz.com/imei.php?imei=" + hashedImei);
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL("http://pjlantz.com/phone.php?phone=" + phoneNbr);
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL("http://pjlantz.com/msg.php?msg=" + msg.replace(" ", "+"));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            url = new URL("http://pjlantz.com/file.php?file=" + fileContent.replace(" ", "+"));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL("http://pjlantz.com/app.php?installed=" + installedApps.replace(" ", "+"));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            urlConnection.disconnect();
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        try {
            URL url = new URL(args[0]);
            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setDoOutput(true);
            httpCon.setRequestMethod("PUT");
            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());
            out.write("fatal error");
            out.close();
            System.out.println("end");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public synchronized void write() throws IOException {
        ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath));
        int index = className.lastIndexOf('.');
        String packageName = className.substring(0, index);
        String clazz = className.substring(index + 1);
        String directory = packageName.replace('.', '/');
        ZipEntry dummyClass = new ZipEntry(directory + "/" + clazz + ".class");
        jar.putNextEntry(dummyClass);
        ClassGen classgen = new ClassGen(getClassName(), "java.lang.Object", "<generated>", Constants.ACC_PUBLIC | Constants.ACC_SUPER, null);
        byte[] bytes = classgen.getJavaClass().getBytes();
        jar.write(bytes);
        jar.closeEntry();
        ZipEntry synthFile = new ZipEntry(directory + "/synth.xml");
        jar.putNextEntry(synthFile);
        Comment comment = new Comment("Generated by SynthBuilder from L2FProd.com");
        Element root = new Element("synth");
        root.addAttribute(new Attribute("version", "1"));
        root.appendChild(comment);
        Element defaultStyle = new Element("style");
        defaultStyle.addAttribute(new Attribute("id", "default"));
        Element defaultFont = new Element("font");
        defaultFont.addAttribute(new Attribute("name", "SansSerif"));
        defaultFont.addAttribute(new Attribute("size", "12"));
        defaultStyle.appendChild(defaultFont);
        Element defaultState = new Element("state");
        defaultStyle.appendChild(defaultState);
        root.appendChild(defaultStyle);
        Element bind = new Element("bind");
        bind.addAttribute(new Attribute("style", "default"));
        bind.addAttribute(new Attribute("type", "region"));
        bind.addAttribute(new Attribute("key", ".*"));
        root.appendChild(bind);
        doc = new Document(root);
        imagesToCopy = new HashMap();
        ComponentStyle[] styles = config.getStyles();
        for (ComponentStyle element : styles) {
            write(element);
        }
        Serializer writer = new Serializer(jar);
        writer.setIndent(2);
        writer.write(doc);
        writer.flush();
        jar.closeEntry();
        for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) {
            String element = (String) iter.next();
            File pathToImage = (File) imagesToCopy.get(element);
            ZipEntry image = new ZipEntry(directory + "/" + element);
            jar.putNextEntry(image);
            FileInputStream input = new FileInputStream(pathToImage);
            int read = -1;
            while ((read = input.read()) != -1) {
                jar.write(read);
            }
            input.close();
            jar.flush();
            jar.closeEntry();
        }
        jar.flush();
        jar.close();
    }
} </s>
<s>class temp {    public static String encrypt(String algorithm, String[] input) {
        try {
            MessageDigest md = MessageDigest.getInstance(algorithm);
            md.reset();
            for (int i = 0; i < input.length; i++) {
                if (input[i] != null) md.update(input[i].getBytes("UTF-8"));
            }
            byte[] messageDigest = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));
                hexString.append(Integer.toHexString(0x0f & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
} </s>
<s>class temp {    private String makeLoginRequest(URL url) throws IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setRequestMethod("POST");
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(true);
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        StringBuilder content = new StringBuilder();
        content.append("Email=").append(URLEncoder.encode(EMAIL, "UTF-8"));
        content.append("&Passwd=").append(URLEncoder.encode(PASSWORD, "UTF-8"));
        content.append("&service=").append(URLEncoder.encode(SERVICE, "UTF-8"));
        content.append("&source=").append(URLEncoder.encode("Google Base data API", "UTF-8"));
        OutputStream outputStream = urlConnection.getOutputStream();
        outputStream.write(content.toString().getBytes("UTF-8"));
        outputStream.close();
        int responseCode = urlConnection.getResponseCode();
        InputStream inputStream;
        if (responseCode == HttpURLConnection.HTTP_OK) {
            inputStream = urlConnection.getInputStream();
        } else {
            inputStream = urlConnection.getErrorStream();
        }
        return toString(inputStream);
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    public static String generateMD5(String str) {
        String hashword = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(str.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashword = hash.toString(16);
        } catch (NoSuchAlgorithmException nsae) {
            logger.log(Level.SEVERE, null, nsae);
        }
        return hashword;
    }
} </s>
<s>class temp {    public List<String> query(String query) throws IOException {
        List<String> list = new LinkedList<String>();
        query = URLEncoder.encode(query, "UTF-8");
        String queryurl = baseurl + "?type=tuples&lang=itql&format=csv&query=" + query;
        URL url = new URL(queryurl);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = reader.readLine();
        while (line != null) {
            list.add(line);
            line = reader.readLine();
        }
        reader.close();
        return list;
    }
} </s>
<s>class temp {    public long create(long mimeTypeId, long sanId) throws SQLException {
        long fileId = 0;
        DataSource ds = getDataSource(DEFAULT_DATASOURCE);
        Connection conn = ds.getConnection();
        try {
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            stmt.execute(NEXT_FILE_ID);
            ResultSet rs = stmt.getResultSet();
            while (rs.next()) {
                fileId = rs.getLong(NEXTVAL);
            }
            PreparedStatement pstmt = conn.prepareStatement(INSERT_FILE);
            pstmt.setLong(1, fileId);
            pstmt.setLong(2, mimeTypeId);
            pstmt.setLong(3, sanId);
            pstmt.setLong(4, WORKFLOW_ATTENTE_VALIDATION);
            int nbrow = pstmt.executeUpdate();
            if (nbrow == 0) {
                throw new SQLException();
            }
            conn.commit();
            closeRessources(conn, pstmt);
        } catch (SQLException e) {
            log.error("Can't FileDAOImpl.create " + e.getMessage());
            conn.rollback();
            throw e;
        }
        return fileId;
    }
} </s>
<s>class temp {    public FileBean create(MimeTypeBean mimeType, SanBean san) throws SQLException {
        long fileId = 0;
        DataSource ds = getDataSource(DEFAULT_DATASOURCE);
        Connection conn = ds.getConnection();
        try {
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            stmt.execute(NEXT_FILE_ID);
            ResultSet rs = stmt.getResultSet();
            while (rs.next()) {
                fileId = rs.getLong(NEXTVAL);
            }
            PreparedStatement pstmt = conn.prepareStatement(INSERT_FILE);
            pstmt.setLong(1, fileId);
            pstmt.setLong(2, mimeType.getId());
            pstmt.setLong(3, san.getId());
            pstmt.setLong(4, WORKFLOW_ATTENTE_VALIDATION);
            int nbrow = pstmt.executeUpdate();
            if (nbrow == 0) {
                throw new SQLException();
            }
            conn.commit();
            closeRessources(conn, pstmt);
        } catch (SQLException e) {
            log.error("Can't FileDAOImpl.create " + e.getMessage());
            conn.rollback();
            throw e;
        }
        FileBean fileBean = new FileBean();
        return fileBean;
    }
} </s>
<s>class temp {    public int deleteFile(Integer[] fileID) throws SQLException {
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        Connection conn = null;
        int nbrow = 0;
        try {
            DataSource ds = getDataSource(DEFAULT_DATASOURCE);
            conn = ds.getConnection();
            conn.setAutoCommit(false);
            if (log.isDebugEnabled()) {
                log.debug("FileDAOImpl.deleteFile() " + DELETE_FILES_LOGIC);
            }
            for (int i = 0; i < fileID.length; i++) {
                pstmt = conn.prepareStatement(DELETE_FILES_LOGIC);
                pstmt.setInt(1, fileID[i].intValue());
                nbrow = pstmt.executeUpdate();
            }
        } catch (SQLException e) {
            conn.rollback();
            log.error("FileDAOImpl.deleteFile() : erreur technique", e);
            throw e;
        } finally {
            conn.commit();
            closeRessources(conn, pstmt, rs);
        }
        return nbrow;
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException("Cannot overwrite existing file: " + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
} </s>
<s>class temp {    static void conditionalCopyFile(File dst, File src) throws IOException {
        if (dst.equals(src)) return;
        if (!dst.isFile() || dst.lastModified() < src.lastModified()) {
            System.out.println("Copying " + src);
            InputStream is = new FileInputStream(src);
            OutputStream os = new FileOutputStream(dst);
            byte[] buf = new byte[8192];
            int len;
            while ((len = is.read(buf)) > 0) os.write(buf, 0, len);
            os.close();
            is.close();
        }
    }
} </s>
<s>class temp {    public static final TreeSet<String> getValues(String baseurl, String rftId, String svcId) {
        TreeSet<String> values = new TreeSet<String>();
        String[] fragments = rftId.split("/");
        String e_repoUri = null;
        String e_svcId = null;
        try {
            e_repoUri = URLEncoder.encode(rftId, "UTF-8");
            e_svcId = URLEncoder.encode(svcId, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            log.error("UnsupportedEncodingException resulted attempting to encode " + rftId);
        }
        String openurl = baseurl + "/" + fragments[2] + "/openurl-aDORe7" + "?rft_id=" + e_repoUri + "&svc_id=" + e_svcId + "&url_ver=Z39.88-2004";
        log.info("Obtaining Content Values from: " + openurl);
        try {
            URL url = new URL(openurl);
            long s = System.currentTimeMillis();
            URLConnection conn = url.openConnection();
            int timeoutMs = 1000 * 60 * 30;
            conn.setConnectTimeout(timeoutMs);
            conn.setReadTimeout(timeoutMs);
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            log.info("Query Time: " + (System.currentTimeMillis() - s) + "ms");
            String line;
            while ((line = in.readLine()) != null) {
                values.add(line);
            }
            in.close();
        } catch (Exception ex) {
            log.error("problem with openurl:" + openurl + ex.getMessage());
            throw new RuntimeException(ex);
        }
        return values;
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dst) throws IOException {
        if (T.t) T.info("Copying " + src + " -> " + dst + "...");
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dst);
        byte buf[] = new byte[40 * KB];
        int read;
        while ((read = in.read(buf)) != -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        out.close();
        in.close();
        if (T.t) T.info("File copied.");
    }
} </s>
<s>class temp {    private synchronized void createFTPConnection() throws FTPBrowseException {
        ftpClient = new FTPClient();
        try {
            InetAddress inetAddress = InetAddress.getByName(url.getHost());
            if (url.getPort() == -1) {
                ftpClient.connect(inetAddress);
            } else {
                ftpClient.connect(inetAddress, url.getPort());
            }
            if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {
                throw new FTPBrowseException(ftpClient.getReplyString());
            }
            if (null != passwordAuthentication) {
                ftpClient.login(passwordAuthentication.getUserName(), new StringBuffer().append(passwordAuthentication.getPassword()).toString());
            }
            if (url.getPath().length() > 0) {
                ftpClient.changeWorkingDirectory(url.getPath());
            }
            homeDirectory = ftpClient.printWorkingDirectory();
        } catch (UnknownHostException e) {
            throw new FTPBrowseException(e.getMessage());
        } catch (SocketException e) {
            throw new FTPBrowseException(e.getMessage());
        } catch (FTPBrowseException e) {
            throw e;
        } catch (IOException e) {
            throw new FTPBrowseException(e.getMessage());
        }
    }
} </s>
<s>class temp {    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println("GestorPedido.elimina()");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = "DELETE FROM pedido WHERE id=" + id;
            System.out.println("Ejecutando: " + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println("executeUpdate");
            gd.commit();
            System.out.println("commit");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println("Error en GestorPedido.elimina(): " + e);
        } catch (errorSQL e) {
            System.err.println("Error en GestorPedido.elimina(): " + e);
        }
    }
} </s>
<s>class temp {    public static String send(String method, String url, Map<String, String> paramMap, File file, String encoding) throws HttpServerStatusException {
        Log.i(TAG, "url:" + url);
        boolean bVisitOK = false;
        int tryCnt = 0;
        String result = "";
        while (!bVisitOK && (tryCnt++ < MAXTRYCNT)) {
            try {
                HttpRequestBase base = getExecuteMethod(method, url, paramMap, file);
                HttpResponse response = client.execute(base, localContext);
                int status = response.getStatusLine().getStatusCode();
                HttpEntity entity = response.getEntity();
                if (entity != null) {
                    result = readByteStream(entity.getContent(), encoding);
                    entity.consumeContent();
                }
                if (status == 200) {
                    return result;
                } else {
                    throw new HttpServerStatusException(status, result);
                }
            } catch (HttpServerStatusException e) {
                throw e;
            } catch (IllegalStateException e) {
                bVisitOK = false;
                Log.e(TAG, e.toString());
            } catch (IOException e) {
                bVisitOK = false;
                Log.e(TAG, e.toString());
            }
        }
        return result;
    }
} </s>
<s>class temp {    public static HttpEntity sendHE(String method, String url, Map<String, String> paramMap, String encoding) throws HttpServerStatusException {
        Log.i(TAG, "url:" + url);
        boolean bVisitOK = false;
        int tryCnt = 0;
        while (!bVisitOK && (tryCnt++ < MAXTRYCNT)) {
            try {
                HttpRequestBase base = getExecuteMethod(method, url, paramMap, null);
                HttpResponse response = client.execute(base, localContext);
                int status = response.getStatusLine().getStatusCode();
                if (status == 200) {
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        return entity;
                    }
                } else {
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        entity.consumeContent();
                    }
                    throw new HttpServerStatusException(status, "");
                }
            } catch (HttpServerStatusException e) {
                throw e;
            } catch (IllegalStateException e) {
                bVisitOK = false;
                Log.e(TAG, e.toString());
            } catch (IOException e) {
                bVisitOK = false;
                Log.e(TAG, e.toString());
            }
        }
        return null;
    }
} </s>
<s>class temp {    private String fetchLocalPage(String page) throws IOException {
        final String fullUrl = HOST + page;
        LOG.debug("Fetching local page: " + fullUrl);
        URL url = new URL(fullUrl);
        URLConnection connection = url.openConnection();
        StringBuilder sb = new StringBuilder();
        BufferedReader input = null;
        try {
            input = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line = null;
            while ((line = input.readLine()) != null) {
                sb.append(line).append("\n");
            }
        } finally {
            if (input != null) try {
                input.close();
            } catch (IOException e) {
                LOG.error("Could not close reader!", e);
            }
        }
        return sb.toString();
    }
} </s>
<s>class temp {    private String postXml(String url, String soapAction, String xml) {
        try {
            URLConnection conn = new URL(url).openConnection();
            if (conn instanceof HttpURLConnection) {
                HttpURLConnection hConn = (HttpURLConnection) conn;
                hConn.setRequestMethod("POST");
            }
            conn.setConnectTimeout(this.connectionTimeout);
            conn.setReadTimeout(this.connectionTimeout);
            conn.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
            conn.setRequestProperty("Accept", "application/soap+xml, text/*");
            if (soapAction != null) {
                conn.setRequestProperty("SOAPAction", soapAction);
            }
            conn.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
            out.write(xml);
            out.close();
            BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder buf = new StringBuilder();
            String str;
            while ((str = resp.readLine()) != null) {
                buf.append(str);
            }
            return buf.toString();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals("content.xml")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry("content.xml"));
        bw.flush();
        osw = new OutputStreamWriter(zos, "UTF8");
        bw = new BufferedWriter(osw);
        return bw;
    }
} </s>
<s>class temp {    public void postProcess() throws StopWriterVisitorException {
        dxfWriter.postProcess();
        try {
            FileChannel fcinDxf = new FileInputStream(fTemp).getChannel();
            FileChannel fcoutDxf = new FileOutputStream(m_Fich).getChannel();
            DriverUtilities.copy(fcinDxf, fcoutDxf);
            fTemp.delete();
        } catch (FileNotFoundException e) {
            throw new StopWriterVisitorException(getName(), e);
        } catch (IOException e) {
            throw new StopWriterVisitorException(getName(), e);
        }
    }
} </s>
<s>class temp {    private boolean connect() {
        try {
            this.ftpClient.connect(this.server, this.port);
            this.ftpClient.login(this.username, this.password);
            return true;
        } catch (IOException iOException) {
            return false;
        }
    }
} </s>
<s>class temp {    @Test
    public void testStandardTee() throws Exception {
        final String reference = "test";
        final Reader source = new StringReader(reference);
        final StringWriter destination1 = new StringWriter();
        final StringWriter destination2 = new StringWriter();
        final TeeWriter tee = new TeeWriter(destination1, destination2);
        org.apache.commons.io.IOUtils.copy(source, tee);
        tee.close();
        assertEquals("the two string are equals", reference, destination1.toString());
        assertEquals("the two string are equals", reference, destination2.toString());
        assertEquals("byte count", reference.length(), tee.getSize());
    }
} </s>
<s>class temp {    public boolean referredFilesChanged() throws MalformedURLException, IOException {
        for (String file : referredFiles) {
            if (FileUtils.isURI(file)) {
                URLConnection url = new URL(file).openConnection();
                if (url.getLastModified() > created) return true;
            } else if (FileUtils.isFile(file)) {
                File f = new File(file);
                if (f.lastModified() > created) return true;
            }
        }
        return false;
    }
} </s>
<s>class temp {    protected void updateJava2ScriptProject(String prjFolder, String binRelative) {
        try {
            File cpFile = new File(prjFolder, ".classpath");
            FileInputStream fis = new FileInputStream(cpFile);
            String classpath = J2SLaunchingUtil.readAFile(fis);
            if (classpath != null) {
                boolean needUpdate = false;
                if (classpath.indexOf("ECLIPSE_SWT") == -1 && classpath.indexOf("SWT_LIBRARY") == -1 && classpath.indexOf("eclipse.swt") == -1) {
                    int idx = classpath.lastIndexOf("<");
                    classpath = classpath.substring(0, idx) + "\t<classpathentry kind=\"var\" path=\"ECLIPSE_SWT\"/>\r\n" + classpath.substring(idx);
                    needUpdate = true;
                }
                if (classpath.indexOf("AJAX_SWT") == -1 && classpath.indexOf("ajaxswt.jar") == -1) {
                    int idx = classpath.lastIndexOf("<");
                    classpath = classpath.substring(0, idx) + "\t<classpathentry sourcepath=\"AJAX_SWT_SRC\" kind=\"var\" path=\"AJAX_SWT\"/>\r\n" + classpath.substring(idx);
                    needUpdate = true;
                }
                if (classpath.indexOf("AJAX_RPC") == -1 && classpath.indexOf("ajaxrpc.jar") == -1) {
                    int idx = classpath.lastIndexOf("<");
                    classpath = classpath.substring(0, idx) + "\t<classpathentry sourcepath=\"AJAX_RPC_SRC\" kind=\"var\" path=\"AJAX_RPC\"/>\r\n" + classpath.substring(idx);
                    needUpdate = true;
                }
                if (classpath.indexOf("AJAX_PIPE") == -1 && classpath.indexOf("ajaxpipe.jar") == -1) {
                    int idx = classpath.lastIndexOf("<");
                    classpath = classpath.substring(0, idx) + "\t<classpathentry sourcepath=\"AJAX_PIPE_SRC\" kind=\"var\" path=\"AJAX_PIPE\"/>\r\n" + classpath.substring(idx);
                    needUpdate = true;
                }
                if (needUpdate) {
                    try {
                        FileOutputStream fos = new FileOutputStream(cpFile);
                        fos.write(classpath.getBytes("utf-8"));
                        fos.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            File webinf = new File(prjFolder, "WEB-INF");
            webinf.mkdir();
            new File(webinf, "classes").mkdir();
            File lib = new File(webinf, "lib");
            lib.mkdir();
            IPath newPath = null;
            URL starterURL = AjaxPlugin.getDefault().getBundle().getEntry(File.separator);
            String root = ".";
            try {
                root = Platform.asLocalURL(starterURL).getFile();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            newPath = Path.fromPortableString(root + "/ajaxrpc.jar");
            File rpcFile = new File(newPath.toOSString());
            try {
                FileInputStream is = new FileInputStream(rpcFile);
                FileOutputStream os = new FileOutputStream(new File(lib, "ajaxrpc.jar"));
                byte[] buf = new byte[1024];
                int read = -1;
                while ((read = is.read(buf)) != -1) {
                    os.write(buf, 0, read);
                }
                os.close();
                is.close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            newPath = Path.fromPortableString(root + "/ajaxpipe.jar");
            File pipeFile = new File(newPath.toOSString());
            try {
                FileInputStream is = new FileInputStream(pipeFile);
                FileOutputStream os = new FileOutputStream(new File(lib, "ajaxpipe.jar"));
                byte[] buf = new byte[1024];
                int read = -1;
                while ((read = is.read(buf)) != -1) {
                    os.write(buf, 0, read);
                }
                os.close();
                is.close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            StringBuffer buildxml = new StringBuffer();
            buildxml.append("<?xml version=\"1.0\"?>\r\n");
            buildxml.append("<project name=\"java2script.servlet.pack\" default=\"pack.war\" basedir=\".\">\r\n");
            buildxml.append("    <description>Pack Java2Script Servlet Application</description>\r\n");
            buildxml.append("\r\n");
            String name = new File(prjFolder).getName();
            buildxml.append("	<property name=\"java2script.app.name\" value=\"" + name + "\"/>\r\n");
            buildxml.append("	<property name=\"bin.folder\" value=\"${basedir}/../" + binRelative + "\"/>\r\n");
            buildxml.append("\r\n");
            buildxml.append("    <target name=\"pack.war\" depends=\"pack.jar\">\r\n");
            buildxml.append("        <tstamp>\r\n");
            buildxml.append("            <format property=\"now\" pattern=\"yyyy-MM-dd-HH-mm-ss\"/>\r\n");
            buildxml.append("        </tstamp>\r\n");
            buildxml.append("        <delete file=\"${basedir}/../${java2script.app.name}.war\" quiet=\"true\"/>\r\n");
            buildxml.append("        <zip destfile=\"${basedir}/../${java2script.app.name}.${now}.war\">\r\n");
            buildxml.append("            <fileset dir=\"${basedir}/../\">\r\n");
            buildxml.append("                <exclude name=\"src/**\"/>\r\n");
            buildxml.append("                <exclude name=\"META-INF/**\"/>\r\n");
            buildxml.append("                <exclude name=\"WEB-INF/**\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.java\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.class\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.swp\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.swo\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.jar\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.war\"/>\r\n");
            buildxml.append("                <exclude name=\".classpath\"/>\r\n");
            buildxml.append("                <exclude name=\".project\"/>\r\n");
            buildxml.append("                <exclude name=\".j2s\"/>\r\n");
            buildxml.append("                <exclude name=\"web.xml\"/>\r\n");
            buildxml.append("                <exclude name=\"build.xml\"/>\r\n");
            buildxml.append("                <exclude name=\"build.properties\"/>\r\n");
            buildxml.append("                <exclude name=\"plugin.xml\"/>\r\n");
            buildxml.append("                <exclude name=\"plugin.properties\"/>\r\n");
            buildxml.append("            </fileset>\r\n");
            buildxml.append("            <fileset dir=\"${basedir}/..\">\r\n");
            buildxml.append("                <include name=\"WEB-INF/**\"/>\r\n");
            buildxml.append("                <exclude name=\"WEB-INF/build.xml\"/>\r\n");
            buildxml.append("            </fileset>\r\n");
            buildxml.append("        </zip>\r\n");
            buildxml.append("        <copy file=\"${basedir}/../${java2script.app.name}.${now}.war\"\r\n");
            buildxml.append("                tofile=\"${basedir}/../${java2script.app.name}.war\"/>\r\n");
            buildxml.append("    </target>\r\n");
            buildxml.append("\r\n");
            buildxml.append("    <target name=\"pack.jar\">\r\n");
            buildxml.append("        <delete file=\"${basedir}/lib/${java2script.app.name}.jar\" quiet=\"true\"/>\r\n");
            buildxml.append("        <zip destfile=\"${basedir}/lib/${java2script.app.name}.jar\">\r\n");
            buildxml.append("            <fileset dir=\"${bin.folder}\">\r\n");
            buildxml.append("                <exclude name=\"WEB-INF/**\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.html\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.js\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.css\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.bmp\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.gif\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.png\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.jpg\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.jpeg\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.swp\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.swo\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.jar\"/>\r\n");
            buildxml.append("                <exclude name=\"**/*.war\"/>\r\n");
            buildxml.append("                <exclude name=\".classpath\"/>\r\n");
            buildxml.append("                <exclude name=\".project\"/>\r\n");
            buildxml.append("                <exclude name=\".j2s\"/>\r\n");
            buildxml.append("                <exclude name=\"web.xml\"/>\r\n");
            buildxml.append("                <exclude name=\"build.xml\"/>\r\n");
            buildxml.append("                <exclude name=\"build.properties\"/>\r\n");
            buildxml.append("                <exclude name=\"plugin.xml\"/>\r\n");
            buildxml.append("                <exclude name=\"plugin.properties\"/>\r\n");
            buildxml.append("            </fileset>\r\n");
            buildxml.append("        </zip>\r\n");
            buildxml.append("    </target>\r\n");
            buildxml.append("\r\n");
            starterURL = AjaxPlugin.getDefault().getBundle().getEntry(File.separator);
            root = ".";
            try {
                root = Platform.asLocalURL(starterURL).getFile();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            newPath = Path.fromPortableString(root);
            String ajaxPath = newPath.toOSString();
            String key = "net.sf.j2s.ajax";
            int idx = ajaxPath.lastIndexOf(key);
            if (idx != -1) {
                ajaxPath = ajaxPath.substring(0, idx) + "net.sf.j2s.lib" + ajaxPath.substring(idx + key.length());
            }
            File libFile = new File(ajaxPath);
            String j2sRelativePath = FileUtil.toRelativePath(libFile.getAbsolutePath(), webinf.getAbsolutePath());
            if (j2sRelativePath.length() > 0 && !j2sRelativePath.endsWith("/")) {
                j2sRelativePath += "/";
            }
            int slashIndex = j2sRelativePath.lastIndexOf('/', j2sRelativePath.length() - 2);
            String pluginPath = j2sRelativePath.substring(0, slashIndex);
            String libPluginPath = j2sRelativePath.substring(slashIndex + 1, j2sRelativePath.length() - 1);
            buildxml.append("    <target name=\"pack.plugins.j2slib.war\">\r\n");
            buildxml.append("        <delete file=\"${basedir}/../plugins.war\" quiet=\"true\"/>\r\n");
            buildxml.append("        <zip destfile=\"${basedir}/../plugins.war\">\r\n");
            buildxml.append("            <fileset dir=\"${basedir}/" + pluginPath + "/\">\r\n");
            buildxml.append("                <include name=\"" + libPluginPath + "/**\"/>\r\n");
            buildxml.append("                <exclude name=\"" + libPluginPath + "/library.jar\"/>\r\n");
            buildxml.append("                <exclude name=\"" + libPluginPath + "/plugin.xml\"/>\r\n");
            buildxml.append("                <exclude name=\"" + libPluginPath + "/META-INF/**\"/>\r\n");
            buildxml.append("            </fileset>\r\n");
            buildxml.append("        </zip>\r\n");
            buildxml.append("    </target>\r\n");
            buildxml.append("\r\n");
            buildxml.append("</project>\r\n");
            try {
                FileOutputStream fos = new FileOutputStream(new File(webinf, "build.xml"));
                fos.write(buildxml.toString().getBytes());
                fos.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            StringBuffer webxml = new StringBuffer();
            webxml.append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n");
            webxml.append("<!DOCTYPE web-app\r\n");
            webxml.append("    PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\r\n");
            webxml.append("    \"http://java.sun.com/dtd/web-app_2_3.dtd\">\r\n");
            webxml.append("<web-app>\r\n");
            webxml.append("    <display-name>Java2Script</display-name>\r\n");
            webxml.append("    <description>Java2Script application</description>\r\n");
            webxml.append(genereateServlet("simplerpc", "net.sf.j2s.ajax.SimpleRPCHttpServlet"));
            webxml.append(genereateServlet("piperpc", "net.sf.j2s.ajax.CompoundPipeRPCHttpServlet"));
            webxml.append("    <servlet>\r\n");
            webxml.append("        <servlet-name>simplepipe</servlet-name>\r\n");
            webxml.append("        <servlet-class>net.sf.j2s.ajax.SimplePipeHttpServlet</servlet-class>\r\n");
            webxml.append("        <init-param>\r\n");
            webxml.append("            <param-name>simple.pipe.query.timeout</param-name>\r\n");
            webxml.append("            <param-value>20000</param-value>\r\n");
            webxml.append("        </init-param>\r\n");
            webxml.append("        <init-param>\r\n");
            webxml.append("            <param-name>simple.pipe.script.breakout</param-name>\r\n");
            webxml.append("            <param-value>1200000</param-value>\r\n");
            webxml.append("        </init-param>\r\n");
            webxml.append("        <init-param>\r\n");
            webxml.append("            <param-name>simple.pipe.max.items.per.query</param-name>\r\n");
            webxml.append("            <param-value>60</param-value>\r\n");
            webxml.append("        </init-param>\r\n");
            webxml.append("    </servlet>\r\n");
            webxml.append("    <servlet-mapping>\r\n");
            webxml.append("        <servlet-name>simplerpc</servlet-name>\r\n");
            webxml.append("        <url-pattern>/simplerpc</url-pattern>\r\n");
            webxml.append("    </servlet-mapping>\r\n");
            webxml.append("    <servlet-mapping>\r\n");
            webxml.append("        <servlet-name>piperpc</servlet-name>\r\n");
            webxml.append("        <url-pattern>/piperpc</url-pattern>\r\n");
            webxml.append("    </servlet-mapping>\r\n");
            webxml.append("    <servlet-mapping>\r\n");
            webxml.append("        <servlet-name>simplepipe</servlet-name>\r\n");
            webxml.append("        <url-pattern>/simplepipe</url-pattern>\r\n");
            webxml.append("    </servlet-mapping>\r\n");
            webxml.append("</web-app>\r\n");
            try {
                FileOutputStream fos = new FileOutputStream(new File(webinf, "web.xml"));
                fos.write(webxml.toString().getBytes());
                fos.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
    }
} </s>
<s>class temp {    private void doFinishLoadAttachment(long attachmentId) {
        if (attachmentId != mLoadAttachmentId) {
            return;
        }
        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);
        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);
        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);
        if (mLoadAttachmentSave) {
            try {
                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);
                InputStream in = getContentResolver().openInputStream(contentUri);
                OutputStream out = new FileOutputStream(file);
                IOUtils.copy(in, out);
                out.flush();
                out.close();
                in.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, file, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(contentUri);
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(intent);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
} </s>
<s>class temp {    public void saveUserUpFile(UserInfo userInfo, String distFileName, InputStream instream) throws IOException {
        String fullPicFile = BBSCSUtil.getUserWebFilePath(userInfo.getId()) + distFileName;
        String fullPicFileSmall = BBSCSUtil.getUserWebFilePath(userInfo.getId()) + distFileName + Constant.IMG_SMALL_FILEPREFIX;
        OutputStream bos = new FileOutputStream(fullPicFile);
        IOUtils.copy(instream, bos);
        ImgUtil.reduceImg(fullPicFile, fullPicFileSmall, this.getSysConfig().getFaceWidth(), this.getSysConfig().getFaceHigh(), 0);
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public synchronized String encrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(text.getBytes("UTF-8"));
        byte raw[] = md.digest();
        return (new BASE64Encoder()).encode(raw);
    }
} </s>
<s>class temp {    public static int[] rank(double[] data) {
        int[] rank = new int[data.length];
        for (int i = 0; i < data.length; i++) rank[i] = i;
        boolean swapped;
        double dtmp;
        int i, j, itmp;
        for (i = 0; i < data.length - 1; i++) {
            swapped = false;
            for (j = 0; j < data.length - 1 - i; j++) {
                if (data[j] < data[j + 1]) {
                    dtmp = data[j];
                    data[j] = data[j + 1];
                    data[j + 1] = dtmp;
                    itmp = rank[j];
                    rank[j] = rank[j + 1];
                    rank[j + 1] = itmp;
                    swapped = true;
                }
            }
        }
        return rank;
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    public static Dictionary parseVertices(URL url, Graph g) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException("IO Error: cannot read from URL " + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        return Parser.parseVertices(reader, g);
    }
} </s>
<s>class temp {    public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException("IO Error: cannot read from URL " + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        Parser.parseEdges(reader, g, airportToVertex);
    }
} </s>
