<s>class temp {    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String id = request.getParameter("Id");
        String libid = request.getParameter("LibId");
        System.out.println("********************************printing starts here***************************");
        Enumeration enumx = request.getAttributeNames();
        while (enumx.hasMoreElements()) {
            String namex = enumx.nextElement().toString();
            System.out.println("REQ ATTR" + namex + "------" + request.getAttribute(namex));
        }
        enumx = request.getSession().getAttributeNames();
        while (enumx.hasMoreElements()) {
            String namex = enumx.nextElement().toString();
            System.out.println("SESS ATTR" + namex + "------" + request.getSession().getAttribute(namex));
        }
        enumx = request.getParameterNames();
        while (enumx.hasMoreElements()) {
            String namex = enumx.nextElement().toString();
            System.out.println("REQ PARAM" + namex + "------" + request.getParameter(namex));
        }
        System.out.println("********************************printing ends here***************************");
        String limitsSet = "";
        try {
            if (request.getSession().getAttribute("searchLimits") != null) {
                System.out.println("searchLimits set");
                limitsSet = "SET";
                java.util.Hashtable htLimits = new java.util.Hashtable();
                htLimits = (java.util.Hashtable) request.getSession().getAttribute("searchLimits");
            } else {
                limitsSet = "UNSET";
                System.out.println("searchLimits not set");
            }
            java.util.Properties prop = System.getProperties();
            prop.load(new FileInputStream(ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + "SystemFiles" + java.io.File.separator + "ENV_VAR.txt"));
            System.out.println("SEARCH MODE IS " + searchmode + " FILE PATH " + ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + "SystemFiles" + java.io.File.separator + "ENV_VAR.txt");
        } catch (Exception e) {
        }
        javax.servlet.http.HttpSession session = request.getSession();
        session.setAttribute("totalPages", "1");
        session.setAttribute("formOfRec", "");
        String forward = "singleRecordView";
        int link = 0, singleLink = 0;
        java.util.Vector vecThisPage = new java.util.Vector();
        aportal.form.cataloguing.SingleRecordForm svF = (aportal.form.cataloguing.SingleRecordForm) form;
        opacHm = (ejb.bprocess.opac.xcql.OPACUtilitiesHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("OPACUtilities");
        ejb.bprocess.opac.xcql.OPACUtilities opacUt = opacHm.create();
        System.out.println("CLASS NO " + request.getParameter("ClassNo") + " ClassNoForwarded " + session.getAttribute("ClassNoForwarded"));
        if (svF.getExportRec() == null || !(svF.getExportRec().equals("export"))) {
            System.out.println("*************************************************************************** 1");
            if (id != null && libid != null && request.getParameter("relation") != null && !(session.getAttribute("HostItemDisplay") != null && session.getAttribute("HostItemDisplay").toString().equals("false"))) {
                System.out.println("*************************************************************************** 2");
                home = (ejb.bprocess.opac.xcql.SearchSRUWCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("SearchSRUWCatalogue");
                ejb.bprocess.opac.xcql.SearchSRUWCatalogue searchCat = home.create();
                String catId1 = id;
                String ownId1 = libid;
                System.out.println("*********************CatId1: " + catId1);
                svF.setCatalogueRecordId(catId1);
                svF.setOwnerLibraryId(ownId1);
                String rel = request.getParameter("relation");
                java.util.Vector vecL = searchCat.getRelatedCatalogueRecords(null, catId1, ownId1, rel);
                request.setAttribute("LuceneVector", vecL);
                session.setAttribute("searchVec", vecL);
                singleLink = 1;
                session.setAttribute("HostItemDisplay", "false");
                link = 1;
                forward = "searchRes";
                vecThisPage.addElement(catId1);
                vecThisPage.addElement(ownId1);
            } else if (link == 0 || singleLink == 1) {
                System.out.println("*************************************************************************** 3");
                System.out.println("LINK AND SINGLE LINK " + link + " single " + singleLink);
                if ((request.getParameter("ClassNo") != null) && session.getAttribute("ClassNoForwarded") == null) {
                    System.out.println("*************************************************************************** 4");
                    System.out.println("action called for class no.");
                    String classificNo = request.getParameter("ClassNo");
                    System.out.println("TITLE WORDS ");
                    home = (ejb.bprocess.opac.xcql.SearchSRUWCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("SearchSRUWCatalogue");
                    ejb.bprocess.opac.xcql.SearchSRUWCatalogue searchCat = home.create();
                    String rawSearchText = (new beans.miscellaneous.RequestStringProcessor()).processString("*" + classificNo + "*");
                    System.out.println("raw search Text" + rawSearchText);
                    String searchText = "classificationNumber=" + rawSearchText;
                    System.out.println("search text is " + searchText);
                    String xmlRes = (new org.z3950.zing.cql.CQLParser()).parse(searchText).toXCQL(0);
                    java.util.Hashtable hs = new java.util.Hashtable();
                    java.util.Vector v1 = new java.util.Vector();
                    if (session.getAttribute("searchLimits") != null) {
                        System.out.println("*************************************************************************** 5");
                        hs = (java.util.Hashtable) session.getAttribute("searchLimits");
                    }
                    Vector vec = new Vector();
                    String solrQuery = Utility.getInstance().simplifiedSolrQuery(classificNo, "classificationNumber");
                    if (limitsSet.equalsIgnoreCase("SET")) {
                        System.out.println("*************************************************************************** 6");
                        String limitsQuery = limitsSolrQuery(hs);
                        solrQuery += limitsQuery;
                    }
                    solrQuery += " & ";
                    Vector newRetvec = searchCat.processSolrQuery(1, 25, solrQuery, "245_Tag", "asc");
                    Hashtable ht = (Hashtable) newRetvec.get(0);
                    String totrec = (String) ht.get("HITS");
                    session.setAttribute("TOTALREC", Integer.parseInt(totrec));
                    v1 = (Vector) ht.get("RESULTS");
                    hs.put("Query", solrQuery);
                    if (v1.size() > 0) {
                        System.out.println("*************************************************************************** 7");
                        hs.put("searchText", rawSearchText);
                        hs.put("noOfRecords", 25);
                        hs.put("browseType", "Classification Number");
                        session.setAttribute("searchEntry", hs);
                        session.setAttribute("searchVec", v1);
                        forward = "searchRes";
                    } else {
                        System.out.println("*************************************************************************** 8");
                        forward = "home";
                    }
                } else {
                    System.out.println("*************************************************************************** 9");
                    System.out.println("ELSE CALLED ");
                    String record = request.getParameter("record");
                    String recNo = request.getParameter("recNo");
                    int catId = 0, ownerId = 0;
                    String title = "";
                    if (id != null && libid != null) {
                        System.out.println("*************************************************************************** 10");
                        catId = new Integer(id).intValue();
                        ownerId = new Integer(libid).intValue();
                        title = "title";
                        svF.setCatalogueRecordId(id);
                        svF.setOwnerLibraryId(libid);
                    }
                    session.setAttribute("SingleViewExport", vecThisPage);
                    if (session.getAttribute("OnlySingleRec") != null && session.getAttribute("OnlySingleRec").toString().equals("true")) {
                        System.out.println("*************************************************************************** 11");
                        java.util.Vector v1 = new java.util.Vector();
                        System.out.println("SEARCH MODE " + searchmode);
                        if (searchmode.equalsIgnoreCase("a")) {
                            System.out.println("*************************************************************************** 12");
                            System.out.println("SEARCHMODE IN SEARCH VIEW ACTION (IF) " + searchmode);
                            v1 = (java.util.Vector) request.getAttribute("LuceneVector");
                            System.out.println("VECTOR V1 " + v1);
                        } else {
                            System.out.println("*************************************************************************** 13");
                            System.out.println("SEARCHMODE IN SEARCH VIEW ACTION (ELSE)" + searchmode);
                            v1 = (java.util.Vector) session.getAttribute("searchVec");
                        }
                        Object[] obj = (Object[]) v1.elementAt(0);
                        String str[] = (String[]) obj[0];
                        java.util.Hashtable h = new java.util.Hashtable();
                        String tit = "";
                        h = (java.util.Hashtable) obj[1];
                        System.out.println("HASH TABLE in view action " + h);
                        catId = new Integer(str[0]).intValue();
                        ownerId = new Integer(str[1]).intValue();
                        title = h.get("TITLE").toString();
                        svF.setAttachmentsAndUrl("");
                        if ((h.get("URL").toString() != null && h.get("URL").toString().equals("AVAILABLE")) || (h.get("ATTACHMENTS") != null && h.get("ATTACHMENTS").equals("AVAILABLE"))) {
                            System.out.println("*************************************************************************** 14");
                            svF.setAttachmentsAndUrl("available");
                        }
                        record = "full";
                        recNo = "1";
                        session.removeAttribute("OnlySingleRec");
                    }
                    if (session.getAttribute("HostItemDisplay") != null && session.getAttribute("HostItemDisplay").equals("false")) {
                        System.out.println("*************************************************************************** 15");
                        session.removeAttribute("HostItemDisplay");
                    }
                    session.setAttribute("Title", title);
                    System.out.println("Title..........................................." + title);
                    java.util.Hashtable hash1 = opacUt.getDetailsForSingleCatalogueRecord(catId, ownerId);
                    System.out.println("hash1 ................................" + hash1);
                    vecThisPage.addElement(String.valueOf(catId));
                    vecThisPage.addElement(String.valueOf(ownerId));
                    svF.setAttachmentsAndUrl("");
                    if (hash1.get("URL") != null && hash1.get("ATTACHMENTS") != null && (hash1.get("URL").toString().equals("AVAILABLE") || hash1.get("ATTACHMENTS").toString().equals("AVAILABLE"))) {
                        System.out.println("*************************************************************************** 16");
                        svF.setAttachmentsAndUrl("available");
                    }
                    svF.setRecordNo(recNo);
                    session.setAttribute("record", record);
                    java.util.Vector vecCO = (java.util.Vector) session.getAttribute("CatAndOwner");
                    svF.setCatCur(catId);
                    svF.setOwnerCur(ownerId);
                    svF.setPrevExists("no");
                    svF.setNextExists("no");
                    if (vecCO != null) {
                        System.out.println("*************************************************************************** 17");
                        for (int j = 0; j < vecCO.size(); j = j + 4) {
                            int c = new Integer(vecCO.elementAt(j).toString()).intValue();
                            int o = new Integer(vecCO.elementAt(j + 1).toString()).intValue();
                            if (c == catId && o == ownerId) {
                                System.out.println("*************************************************************************** 18");
                                if (j != 0) {
                                    System.out.println("*************************************************************************** 19");
                                    int catPrev = new Integer(vecCO.elementAt(j - 4).toString()).intValue();
                                    int ownerPrev = new Integer(vecCO.elementAt(j - 3).toString()).intValue();
                                    svF.setCatPrev(catPrev);
                                    svF.setOwnerPrev(ownerPrev);
                                    svF.setTitlePrev(vecCO.elementAt(j - 2).toString());
                                    svF.setRecPrev(vecCO.elementAt(j - 1).toString());
                                    svF.setPrevExists("yes");
                                }
                                if (j < vecCO.size() - 4) {
                                    System.out.println("*************************************************************************** 20");
                                    int catNext = new Integer(vecCO.elementAt(j + 4).toString()).intValue();
                                    int ownerNext = new Integer(vecCO.elementAt(j + 5).toString()).intValue();
                                    svF.setCatNext(catNext);
                                    svF.setOwnerNext(ownerNext);
                                    svF.setTitleNext(vecCO.elementAt(j + 6).toString());
                                    svF.setRecNext(vecCO.elementAt(j + 7).toString());
                                    svF.setNextExists("yes");
                                }
                            }
                        }
                    }
                    String str[] = (String[]) hash1.get("Biblo_Mat");
                    int bib_id = new Integer(str[0]).intValue();
                    int mat_id = new Integer(str[1]).intValue();
                    aportal.view.RecordView rv = new aportal.view.DesignFactory().getCorView(bib_id, mat_id, "full");
                    String type = "";
                    if (bib_id == 3 && mat_id == 1) {
                        type = "Book";
                    } else if (bib_id == 4 && mat_id == 1) {
                        type = "Serial";
                    } else if (bib_id == 1 && mat_id == 1) {
                        type = "Book Chapter";
                    } else if (bib_id == 2 && mat_id == 1) {
                        type = "Serial Article";
                    } else {
                        type = ejb.bprocess.util.TypeDefinition.getInstance().getTypeDefinition(String.valueOf(bib_id), String.valueOf(mat_id));
                    }
                    java.util.Hashtable hMono = (java.util.Hashtable) hash1.get("MonoGraphRecords");
                    java.util.Hashtable h4 = rv.getView(hash1);
                    h4.put("Type", type);
                    try {
                        String sessionid = request.getSession().getId();
                        ejb.bprocess.holdings.HoldingsStatement holdingsStatement = ((ejb.bprocess.holdings.HoldingsStatementHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("HoldingsStatement")).create();
                        java.util.Vector vecLib = new java.util.Vector();
                        vecLib.addElement("1");
                        if (session.getAttribute("Libraries") != null) {
                            System.out.println("*************************************************************************** 21");
                            vecLib = (java.util.Vector) session.getAttribute("Libraries");
                        }
                        String libIds = libid;
                        request.setAttribute("catRecId", String.valueOf(catId));
                        request.setAttribute("ownLibId", String.valueOf(ownerId));
                        request.setAttribute("libIds", String.valueOf(libIds));
                        svF.setHashSing(h4);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        } else if (svF.getExportRec() != null && svF.getExportRec().equals("export")) {
            System.out.println("*************************************************************************** 22");
            svF.setExportRec(null);
            vecThisPage = (java.util.Vector) session.getAttribute("SingleViewExport");
            String format = svF.getSf();
            if (format.equals("marc")) {
                String marc = opacUt.getDetailsForMultiRecordViewMARC(vecThisPage);
                svF.setDisplayFormat(marc);
                session.setAttribute("RecordDisplay", marc);
                forward = "RecordFormat";
            } else if (format.equals("marcXml")) {
                String marcXML = opacUt.getDetailsForMultiRecordViewMARCXML(vecThisPage);
                svF.setDisplayFormat(marcXML);
                response.setContentType("text/xml");
                session.setAttribute("RecordDisplay", marcXML);
                forward = "RecordFormat";
            } else if (format.equals("mods")) {
                String mods = opacUt.getDetailsForMultiRecordViewMODS(vecThisPage);
                svF.setDisplayFormat(mods);
                session.setAttribute("RecordDisplay", mods);
                forward = "RecordFormat";
            } else if (format.equals("dc")) {
                String dc = opacUt.getDetailsForMultiRecordViewDublinCore(vecThisPage);
                svF.setDisplayFormat(dc);
                session.setAttribute("RecordDisplay", dc);
                forward = "RecordFormat";
            } else if (format.equals("agris")) {
                String agr = opacUt.getDetailsForMultiRecordViewAgris(vecThisPage);
                svF.setDisplayFormat(agr);
                session.setAttribute("RecordDisplay", agr);
                forward = "RecordFormat";
            } else if (format.equals("text")) {
                java.util.Vector vecTextDis = new java.util.Vector();
                for (int i2 = 0; i2 < vecThisPage.size(); i2 = i2 + 2) {
                    java.util.Hashtable hash1 = opacUt.getDetailsForSingleCatalogueRecord(new Integer(vecThisPage.elementAt(i2).toString()).intValue(), new Integer(vecThisPage.elementAt(i2 + 1).toString()).intValue());
                    aportal.view.ISBDView fullView = new aportal.view.ISBDView();
                    java.util.Hashtable hashCit = fullView.getView(hash1);
                    vecTextDis.addElement(hashCit);
                    forward = "RecordFormatText";
                }
                session.setAttribute("RecordTextDisplay", vecTextDis);
                if (svF.getPs() != null && svF.getPs().equals("email")) {
                    boolean flag = false;
                    if (svF.getEmail() != null && !(svF.getEmail().equals(""))) {
                        String emailId = svF.getEmail();
                        try {
                            String sessionid = request.getSession().getId();
                            java.net.URL url = new java.net.URL("http://localhost:" + request.getServerPort() + "/newgenlibctxt/jsp/aportal/cataloguing/RecordDisplayText.jsp;jsessionid=" + sessionid);
                            java.net.URLConnection urlCon = url.openConnection();
                            java.io.InputStream is = urlCon.getInputStream();
                            String htmlContent = "";
                            java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(is));
                            String line = "";
                            while ((line = br.readLine()) != null) {
                                htmlContent = htmlContent + line;
                            }
                            flag = ((ejb.bprocess.util.DispatchEmailHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("DispatchEmail")).create().dispatchEmail(null, emailId, "OPAC results", htmlContent);
                        } catch (Exception exp) {
                            exp.printStackTrace();
                        }
                    }
                    String mailMessage = "The selected records have been successfully mailed to " + svF.getEmail();
                    if (flag == false) {
                        mailMessage = "<h4><p>The selected records could not be mailed to " + svF.getEmail() + "&nbsp; These might be the possible reasons.</p></h4>" + "<h5><ol> <li>The email id entered is not a valid one</font></li>" + "<li>The email id domain might not be in the list of allowed  recipient&nbsp; hosts</li>" + "<li>There might a error in connectivity to the mail server</li></ol></h5>" + "<h4><p>Please contact the  Network Administrator </p></h4>";
                    }
                    session.setAttribute("MailStatus", mailMessage);
                    forward = "SendEmail";
                }
            }
        }
        String version = ejb.bprocess.util.StaticValues.getInstance().getVersion();
        if (version != null && !version.equals("")) {
            svF.setVersion(version);
        }
        if (session.getAttribute("ClassNoForwarded") != null) {
            session.removeAttribute("ClassNoForwarded");
        }
        System.out.println("final forward is ......................... " + forward);
        return mapping.findForward(forward);
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    private String fetchLocalPage(String page) throws IOException {
        final String fullUrl = HOST + page;
        LOG.debug("Fetching local page: " + fullUrl);
        URL url = new URL(fullUrl);
        URLConnection connection = url.openConnection();
        StringBuilder sb = new StringBuilder();
        BufferedReader input = null;
        try {
            input = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line = null;
            while ((line = input.readLine()) != null) {
                sb.append(line).append("\n");
            }
        } finally {
            if (input != null) try {
                input.close();
            } catch (IOException e) {
                LOG.error("Could not close reader!", e);
            }
        }
        return sb.toString();
    }
} </s>
<s>class temp {    static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {
        if (normaliseWhitespace) {
            profileDiff = removeWhitespaces(profileDiff);
        }
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(profileDiff.getBytes());
        return new BASE64Encoder().encode(md.digest());
    }
} </s>
<s>class temp {        protected final void connectFtp() throws IOException {
            try {
                if (!this.ftpClient.isConnected()) {
                    this.ftpClient.connect(getHost(), getPort());
                    getLog().write(Level.INFO, String.format(getMessages().getString("FtpSuccessfullyConnected"), getHost()));
                    int reply = this.ftpClient.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        this.ftpClient.disconnect();
                        throw new IOException(String.format(getMessages().getString("FtpErrorConnectingRefused"), getHost()));
                    }
                    if (getUsername() != null) {
                        if (!this.ftpClient.login(getUsername(), getPassword())) {
                            this.ftpClient.logout();
                            disconnectFtp();
                            throw new IOException(String.format(getMessages().getString("FtpErrorAuthorizing"), getHost()));
                        }
                    }
                    this.ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                    this.ftpClient.enterLocalPassiveMode();
                    getLog().write(Level.INFO, String.format(getMessages().getString("FtpSuccessfullyAuthorized"), getHost()));
                }
            } catch (IOException ex) {
                disconnectFtp();
                throw new IOException(String.format(getMessages().getString("FtpErrorConnecting"), getHost(), ex.toString()));
            }
        }
} </s>
<s>class temp {    public void initGet() throws Exception {
        cl = new FTPClient();
        URL url = new URL(getURL());
        cl.setRemoteHost(url.getHost());
        cl.connect();
        cl.login(user, pass);
        cl.setType(FTPTransferType.BINARY);
        cl.setConnectMode(FTPConnectMode.PASV);
        cl.restart(getPosition());
    }
} </s>
<s>class temp {    private BinaryDocument documentFor(String code, String type, int diagramIndex) {
        code = code.replaceAll("\n", "").replaceAll("\t", "").trim().replaceAll(" ", "%20");
        StringBuilder builder = new StringBuilder("http://yuml.me/diagram/");
        builder.append(type).append("/");
        builder.append(code);
        URL url;
        try {
            url = new URL(builder.toString());
            String name = "uml" + diagramIndex + ".png";
            diagramIndex++;
            BinaryDocument pic = new BinaryDocument(name, "image/png");
            IOUtils.copy(url.openStream(), pic.getContent().getOutputStream());
            return pic;
        } catch (MalformedURLException e) {
            throw ManagedIOException.manage(e);
        } catch (IOException e) {
            throw ManagedIOException.manage(e);
        }
    }
} </s>
<s>class temp {    private void sendToURL(String URL, String file) throws Exception {
        URL url = new URL(URL);
        InputStream is = new BufferedInputStream(new FileInputStream(file));
        OutputStream os = url.openConnection().getOutputStream();
        copyDocument(is, os);
        is.close();
        os.close();
    }
} </s>
<s>class temp {    public static String cryptoSHA(String _strSrc) {
        try {
            BASE64Encoder encoder = new BASE64Encoder();
            MessageDigest sha = MessageDigest.getInstance("SHA");
            sha.update(_strSrc.getBytes());
            byte[] buffer = sha.digest();
            return encoder.encode(buffer);
        } catch (Exception err) {
            System.out.println(err);
        }
        return "";
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    private Document post(String location, String content) throws ApplicationException {
        Document doc = null;
        try {
            URL url = new URL(location);
            HttpURLConnection uc = (HttpURLConnection) url.openConnection();
            uc.setRequestMethod("POST");
            uc.setRequestProperty("Content-Type", "application/xml");
            uc.setRequestProperty("X-POST_DATA_FORMAT", "xml");
            uc.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(uc.getOutputStream());
            out.write("<request>");
            out.write("<token>" + configuration.getBackpackPassword() + "</token>");
            if (content != null) {
                out.write("<item><content>" + content + "</content></item>");
            }
            out.write("</request>");
            out.close();
            doc = XmlUtils.readDocumentFromInputStream(uc.getInputStream());
            System.out.println(XmlUtils.toString(doc));
        } catch (IOException e) {
            e.printStackTrace();
            throw new ApplicationException(e);
        }
        return doc;
    }
} </s>
<s>class temp {    private void copyFile(File s, File d) throws IOException {
        d.getParentFile().mkdirs();
        FileChannel inChannel = new FileInputStream(s).getChannel();
        FileChannel outChannel = new FileOutputStream(d).getChannel();
        int maxCount = (64 * 1024 * 1024) - (32 * 1024);
        long size = inChannel.size();
        long position = 0;
        while (position < size) {
            position += inChannel.transferTo(position, maxCount, outChannel);
        }
        inChannel.close();
        outChannel.close();
        d.setLastModified(s.lastModified());
    }
} </s>
<s>class temp {    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String pathInfo = req.getPathInfo();
        String pluginPathInfo = pathInfo.substring(prefix.length());
        String gwtPathInfo = pluginPathInfo.substring(pluginKey.length() + 1);
        String clPath = CLASSPATH_PREFIX + gwtPathInfo;
        InputStream input = cl.getResourceAsStream(clPath);
        if (input != null) {
            try {
                OutputStream output = resp.getOutputStream();
                IOUtils.copy(input, output);
            } finally {
                input.close();
            }
        } else {
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
        }
    }
} </s>
<s>class temp {    public void fetchKey() throws IOException {
        String strurl = MessageFormat.format(keyurl, new Object[] { username, secret, login, session });
        StringBuffer result = new StringBuffer();
        BufferedReader reader = null;
        URL url = null;
        try {
            url = new URL(strurl);
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                result.append(line);
            }
        } finally {
            try {
                if (reader != null) reader.close();
            } catch (Exception e) {
            }
        }
        Pattern p = Pattern.compile("<key>(.*)</key>");
        Matcher m = p.matcher(result.toString());
        if (m.matches()) {
            this.key = m.group(1);
        }
    }
} </s>
<s>class temp {    private static void backupFile(File file) {
        FileChannel in = null, out = null;
        try {
            if (!file.getName().endsWith(".bak")) {
                in = new FileInputStream(file).getChannel();
                out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel();
                long size = in.size();
                MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                out.write(buf);
            }
        } catch (Exception e) {
            e.getMessage();
        } finally {
            try {
                System.gc();
                if (in != null) in.close();
                if (out != null) out.close();
            } catch (Exception e) {
                e.getMessage();
            }
        }
    }
} </s>
<s>class temp {    private String doExecute(AbortableHttpRequest method) throws Throwable {
        HttpClient client = CLIENT.newInstance();
        HttpResponse rsp = client.execute((HttpUriRequest) method);
        HttpEntity entity = rsp.getEntity();
        if (entity == null) throw new RequestError("No entity in method");
        InputStream in = null;
        try {
            in = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuilder inStr = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                inStr.append(line).append("\r\n");
            }
            entity.consumeContent();
            return inStr.toString();
        } catch (IOException ex) {
            LOG.error("IO exception: " + ex.getMessage());
            throw ex;
        } catch (RuntimeException ex) {
            method.abort();
            throw ex;
        } finally {
            if (in != null) in.close();
        }
    }
} </s>
<s>class temp {    public static String md5(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(MD);
            md.update(data.getBytes(UTF8));
            return encodeHex(md.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static byte[] md5raw(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(MD);
            md.update(data.getBytes(UTF8));
            return md.digest();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public void initForEncryption() throws CryptographyException, IOException {
        String ownerPassword = pdDocument.getOwnerPasswordForEncryption();
        String userPassword = pdDocument.getUserPasswordForEncryption();
        if (ownerPassword == null) {
            ownerPassword = "";
        }
        if (userPassword == null) {
            userPassword = "";
        }
        PDStandardEncryption encParameters = (PDStandardEncryption) pdDocument.getEncryptionDictionary();
        int permissionInt = encParameters.getPermissions();
        int revision = encParameters.getRevision();
        int length = encParameters.getLength() / 8;
        COSArray idArray = document.getDocumentID();
        if (idArray == null || idArray.size() < 2) {
            idArray = new COSArray();
            try {
                MessageDigest md = MessageDigest.getInstance("MD5");
                BigInteger time = BigInteger.valueOf(System.currentTimeMillis());
                md.update(time.toByteArray());
                md.update(ownerPassword.getBytes());
                md.update(userPassword.getBytes());
                md.update(document.toString().getBytes());
                byte[] id = md.digest(this.toString().getBytes());
                COSString idString = new COSString();
                idString.append(id);
                idArray.add(idString);
                idArray.add(idString);
                document.setDocumentID(idArray);
            } catch (NoSuchAlgorithmException e) {
                throw new CryptographyException(e);
            }
        }
        COSString id = (COSString) idArray.getObject(0);
        encryption = new PDFEncryption();
        byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length);
        byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length);
        encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length);
        encParameters.setOwnerKey(o);
        encParameters.setUserKey(u);
        document.setEncryptionDictionary(encParameters.getCOSDictionary());
    }
} </s>
<s>class temp {    public void myClickHandler(View view) {
        switch(view.getId()) {
            case R.id.ReadWebPage:
                try {
                    textView.setText("");
                    URL url = new URL(urlText.getText().toString());
                    BufferedReader rd = new BufferedReader(new InputStreamReader(url.openStream()));
                    String line = "";
                    while ((line = rd.readLine()) != null) {
                        textView.append(line);
                    }
                } catch (Exception e) {
                    System.out.println("Nay, did not work");
                    textView.setText(e.getMessage());
                }
                break;
        }
    }
} </s>
<s>class temp {    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, "." + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
} </s>
<s>class temp {    public static void process(PricesType prices, Long id_site, DatabaseAdapter dbDyn) throws PriceException {
        PreparedStatement ps = null;
        String sql_ = null;
        PriceListItemType debugItem = null;
        try {
            if (log.isDebugEnabled()) {
                log.debug("dbDyn - " + dbDyn);
                if (dbDyn != null) log.debug("dbDyn.conn - " + dbDyn.getConnection());
            }
            dbDyn.getConnection().setAutoCommit(false);
            if (dbDyn.getFamaly() != DatabaseManager.MYSQL_FAMALY) {
                sql_ = "delete from WM_PRICE_IMPORT_TABLE where shop_code in " + "( select shop_code from WM_PRICE_SHOP_LIST where ID_SITE=? )";
                ps = dbDyn.prepareStatement(sql_);
                RsetTools.setLong(ps, 1, id_site);
                ps.executeUpdate();
                ps.close();
                ps = null;
            } else {
                String sqlCheck = "";
                boolean isFound = false;
                WmPriceShopListListType shops = GetWmPriceShopListWithIdSiteList.getInstance(dbDyn, id_site).item;
                boolean isFirst = true;
                for (int i = 0; i < shops.getWmPriceShopListCount(); i++) {
                    WmPriceShopListItemType shop = shops.getWmPriceShopList(i);
                    isFound = true;
                    if (isFirst) isFirst = false; else sqlCheck += ",";
                    sqlCheck += ("'" + shop.getCodeShop() + "'");
                }
                if (isFound) {
                    sql_ = "delete from WM_PRICE_IMPORT_TABLE where shop_code in ( " + sqlCheck + " )";
                    if (log.isDebugEnabled()) log.debug("sql " + sql_);
                    ps = dbDyn.prepareStatement(sql_);
                    ps.executeUpdate();
                    ps.close();
                    ps = null;
                }
            }
            if (log.isDebugEnabled()) log.debug("Start unmarshalling data");
            if (prices == null) throw new PriceException("                            .            #10.03");
            int batchLoop = 0;
            int count = 0;
            sql_ = "insert into WM_PRICE_IMPORT_TABLE " + "(is_group, id, id_main, name, price, currency, is_to_load, shop_code, ID_UPLOAD_PRICE) " + "values (?,?,?,?,?,?,?,?,?)";
            Long id_upload_session = null;
            for (int j = 0; j < prices.getPriceListCount(); j++) {
                PriceListType price = prices.getPriceList(j);
                if (log.isDebugEnabled()) {
                    log.debug("shopCode " + price.getShopCode());
                    log.debug("Size vector: " + price.getItemCount());
                }
                for (int i = 0; (i < price.getItemCount()) && (count < 5000); i++, count++) {
                    if (ps == null) ps = dbDyn.prepareStatement(sql_);
                    PriceListItemType item = price.getItem(i);
                    debugItem = item;
                    ps.setInt(1, Boolean.TRUE.equals(item.getIsGroup()) ? 1 : 0);
                    RsetTools.setLong(ps, 2, item.getItemID());
                    RsetTools.setLong(ps, 3, item.getParentID());
                    ps.setString(4, item.getNameItem());
                    RsetTools.setDouble(ps, 5, item.getPrice());
                    ps.setString(6, item.getCurr());
                    ps.setString(7, item.getIsLoad().toString());
                    ps.setString(8, price.getShopCode().toUpperCase());
                    RsetTools.setLong(ps, 9, id_upload_session);
                    if (dbDyn.getIsBatchUpdate()) {
                        ps.addBatch();
                        if (++batchLoop >= 200) {
                            int[] updateCounts = ps.executeBatch();
                            ps.close();
                            ps = null;
                            batchLoop = 0;
                        }
                    } else ps.executeUpdate();
                }
            }
            if (dbDyn.getIsBatchUpdate()) {
                if (ps != null) {
                    int[] updateCounts = ps.executeBatch();
                    ps.close();
                    ps = null;
                }
            }
            ImportPriceProcess.process(dbDyn, id_site);
            dbDyn.commit();
        } catch (Exception e) {
            if (debugItem != null) {
                log.error("debugItem.getIsGroup() " + (Boolean.TRUE.equals(debugItem.getIsGroup()) ? 1 : 0));
                log.error("debugItem.getItemID() " + debugItem.getItemID());
                log.error("debugItem.getParentID() " + debugItem.getParentID());
                log.error("debugItem.getNameItem() " + debugItem.getNameItem());
                log.error("debugItem.getPrice() " + debugItem.getPrice());
                log.error("debugItem.getCurr() " + debugItem.getCurr());
                log.error("debugItem.getIsLoad().toString() " + debugItem.getIsLoad().toString());
            } else log.error("debugItem is null");
            log.error("sql:\n" + sql_);
            final String es = "error process import price-list";
            log.error(es, e);
            try {
                dbDyn.rollback();
            } catch (Exception e11) {
            }
            throw new PriceException(es, e);
        } finally {
            DatabaseManager.close(ps);
            ps = null;
        }
    }
} </s>
<s>class temp {    public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException {
        HttpResponse resp = backend.execute(host, req, ctx);
        if (assessor.isFailure(resp)) {
            throw new UnsuccessfulResponseException(resp);
        }
        return resp;
    }
} </s>
<s>class temp {    public Attributes getAttributes() throws SchemaViolationException, NoSuchAlgorithmException, UnsupportedEncodingException {
        BasicAttributes outAttrs = new BasicAttributes(true);
        BasicAttribute oc = new BasicAttribute("objectclass", "inetOrgPerson");
        oc.add("organizationalPerson");
        oc.add("person");
        outAttrs.put(oc);
        if (lastName != null && firstName != null) {
            outAttrs.put("sn", lastName);
            outAttrs.put("givenName", firstName);
            outAttrs.put("cn", firstName + " " + lastName);
        } else {
            throw new SchemaViolationException("user must have surname");
        }
        if (password != null) {
            MessageDigest sha = MessageDigest.getInstance("md5");
            sha.reset();
            sha.update(password.getBytes("utf-8"));
            byte[] digest = sha.digest();
            String hash = Base64.encodeBase64String(digest);
            outAttrs.put("userPassword", "{MD5}" + hash);
        }
        if (email != null) {
            outAttrs.put("mail", email);
        }
        return (Attributes) outAttrs;
    }
} </s>
<s>class temp {    private String GetResponse(URL url) {
        String content = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(false);
            conn.setRequestMethod("GET");
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) content += line;
            } else {
            }
        } catch (MalformedURLException e) {
            e.getStackTrace();
        } catch (IOException e) {
            e.getStackTrace();
        }
        return content;
    }
} </s>
<s>class temp {    public static void readTestData(String getDkpUrl) throws Exception {
        final URL url = new URL(getDkpUrl);
        final InputStream is = url.openStream();
        try {
            final LineNumberReader rd = new LineNumberReader(new BufferedReader(new InputStreamReader(is)));
            String line = rd.readLine();
            while (line != null) {
                System.out.println(line);
                line = rd.readLine();
            }
        } finally {
            is.close();
        }
    }
} </s>
<s>class temp {    private Attachment setupSimpleAttachment(Context context, long messageId, boolean withBody) throws IOException {
        Attachment attachment = new Attachment();
        attachment.mFileName = "the file.jpg";
        attachment.mMimeType = "image/jpg";
        attachment.mSize = 0;
        attachment.mContentId = null;
        attachment.mContentUri = "content://com.android.email/1/1";
        attachment.mMessageKey = messageId;
        attachment.mLocation = null;
        attachment.mEncoding = null;
        if (withBody) {
            InputStream inStream = new ByteArrayInputStream(TEST_STRING.getBytes());
            File cacheDir = context.getCacheDir();
            File tmpFile = File.createTempFile("setupSimpleAttachment", "tmp", cacheDir);
            OutputStream outStream = new FileOutputStream(tmpFile);
            IOUtils.copy(inStream, outStream);
            attachment.mContentUri = "file://" + tmpFile.getAbsolutePath();
        }
        return attachment;
    }
} </s>
<s>class temp {    public static String getMD5(String s) {
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(s.toLowerCase().getBytes());
            return HexString.bufferToHex(md5.digest());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error grave al inicializar MD5");
            e.printStackTrace();
            return "!!";
        }
    }
} </s>
<s>class temp {    public static String getSHA1(String s) {
        try {
            MessageDigest sha1 = MessageDigest.getInstance("SHA1");
            sha1.update(s.toLowerCase().getBytes());
            return HexString.bufferToHex(sha1.digest());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error grave al inicializar SHA1");
            e.printStackTrace();
            return "!!";
        }
    }
} </s>
<s>class temp {    public static boolean init(String language) {
        URL url = S.class.getResource("strings_" + language + ".txt");
        strings = new Properties();
        try {
            strings.load(url.openStream());
        } catch (Exception e) {
            String def = "en";
            if (language.equals(def)) return false;
            return init(def);
        }
        ;
        return true;
    }
} </s>
<s>class temp {    private String readWebpage() {
        BufferedReader in = null;
        StringBuffer sb = new StringBuffer();
        try {
            URI uri = new URI("file:///www.vogella.de");
            IProxyService proxyService = getProxyService();
            IProxyData[] proxyDataForHost = proxyService.select(uri);
            for (IProxyData data : proxyDataForHost) {
                if (data.getHost() != null) {
                    System.setProperty("http.proxySet", "true");
                    System.setProperty("http.proxyHost", data.getHost());
                }
                if (data.getHost() != null) {
                    System.setProperty("http.proxyPort", String.valueOf(data.getPort()));
                }
            }
            proxyService = null;
            URL url;
            url = uri.toURL();
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                sb.append(inputLine + "\n");
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (URISyntaxException e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return sb.toString();
    }
} </s>
<s>class temp {    private static boolean isXmlApplicationFile(URL url) throws java.io.IOException {
        if (DEBUG) {
            System.out.println("Checking whether file is xml");
        }
        String firstLine;
        BufferedReader fileReader = null;
        try {
            fileReader = new BomStrippingInputStreamReader(url.openStream());
            firstLine = fileReader.readLine();
        } finally {
            if (fileReader != null) fileReader.close();
        }
        if (firstLine == null) {
            return false;
        }
        for (String startOfXml : STARTOFXMLAPPLICATIONFILES) {
            if (firstLine.length() >= startOfXml.length() && firstLine.substring(0, startOfXml.length()).equals(startOfXml)) {
                if (DEBUG) {
                    System.out.println("isXMLApplicationFile = true");
                }
                return true;
            }
        }
        if (DEBUG) {
            System.out.println("isXMLApplicationFile = false");
        }
        return false;
    }
} </s>
<s>class temp {    public void copy(String original, String copy) throws SQLException {
        try {
            OutputStream out = openFileOutputStream(copy, false);
            InputStream in = openFileInputStream(original);
            IOUtils.copyAndClose(in, out);
        } catch (IOException e) {
            throw Message.convertIOException(e, "Can not copy " + original + " to " + copy);
        }
    }
} </s>
<s>class temp {    public static void copyFile(String source, String destination) throws IOException {
        File srcDir = new File(source);
        File[] files = srcDir.listFiles();
        FileChannel in = null;
        FileChannel out = null;
        for (File file : files) {
            try {
                in = new FileInputStream(file).getChannel();
                File outFile = new File(destination, file.getName());
                out = new FileOutputStream(outFile).getChannel();
                in.transferTo(0, in.size(), out);
            } finally {
                if (in != null) in.close();
                if (out != null) out.close();
            }
        }
    }
} </s>
<s>class temp {    public Vector downSync(Vector v) throws SQLException {
        Vector retVector = new Vector();
        try {
            con = allocateConnection(tableName);
            PreparedStatement update = con.prepareStatement("update cont_Contact set owner=?,firstname=?," + "lastname=?,nickname=?,title=?,organization=?,orgunit=?," + "emailaddr=?,homeph=?,workph=?,cellph=?,im=?,imno=?," + "fax=?,homeaddr=?,homelocality=?,homeregion=?," + "homepcode=?,homecountry=?,workaddr=?,worklocality=?," + "workregion=?,workpcode=?,workcountry=?,website=?," + "wapsite=?,comments=?,birthday=?,syncstatus=?,dirtybits=? " + "where OId=? and syncstatus=?");
            PreparedStatement insert = con.prepareStatement("insert into cont_Contact (owner,firstname,lastname," + "nickname,title,organization,orgunit,emailaddr,homeph," + "workph,cellph,im,imno,fax,homeaddr,homelocality," + "homeregion,homepcode,homecountry,workaddr,worklocality," + "workregion,workpcode,workcountry,website,wapsite," + "comments,birthday,syncstatus,dirtybits,quicklist) " + "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?," + "?,?,?,?,?,?,?,?)");
            PreparedStatement insert1 = con.prepareStatement(DBUtil.getQueryCurrentOID(con, "cont_Contact", "newoid"));
            PreparedStatement delete1 = con.prepareStatement("delete from  cont_Contact_Group_Rel where externalcontact=?");
            PreparedStatement delete2 = con.prepareStatement("delete from  cont_Contact where OId=? " + "and (syncstatus=? or syncstatus=?)");
            for (int i = 0; i < v.size(); i++) {
                try {
                    DO = (ExternalContactDO) v.elementAt(i);
                    if (DO.getSyncstatus() == INSERT) {
                        insert.setBigDecimal(1, DO.getOwner());
                        insert.setString(2, DO.getFirstname());
                        insert.setString(3, DO.getLastname());
                        insert.setString(4, DO.getNickname());
                        insert.setString(5, DO.getTitle());
                        insert.setString(6, DO.getOrganization());
                        insert.setString(7, DO.getOrgunit());
                        insert.setString(8, DO.getEmail());
                        insert.setString(9, DO.getHomeph());
                        insert.setString(10, DO.getWorkph());
                        insert.setString(11, DO.getCellph());
                        insert.setString(12, DO.getIm());
                        insert.setString(13, DO.getImno());
                        insert.setString(14, DO.getFax());
                        insert.setString(15, DO.getHomeaddr());
                        insert.setString(16, DO.getHomelocality());
                        insert.setString(17, DO.getHomeregion());
                        insert.setString(18, DO.getHomepcode());
                        insert.setString(19, DO.getHomecountry());
                        insert.setString(20, DO.getWorkaddr());
                        insert.setString(21, DO.getWorklocality());
                        insert.setString(22, DO.getWorkregion());
                        insert.setString(23, DO.getWorkpcode());
                        insert.setString(24, DO.getWorkcountry());
                        insert.setString(25, DO.getWebsite());
                        insert.setString(26, DO.getWapsite());
                        insert.setString(27, DO.getComments());
                        if (DO.getBirthday() != null) insert.setDate(28, DO.getBirthday()); else insert.setNull(28, Types.DATE);
                        insert.setInt(29, RESET);
                        insert.setInt(30, RESET);
                        insert.setInt(31, 0);
                        con.executeUpdate(insert, null);
                        con.reset();
                        rs = con.executeQuery(insert1, null);
                        if (rs.next()) DO.setOId(rs.getBigDecimal("newoid"));
                        con.reset();
                        retVector.add(DO);
                    } else if (DO.getSyncstatus() == UPDATE) {
                        update.setBigDecimal(1, DO.getOwner());
                        update.setString(2, DO.getFirstname());
                        update.setString(3, DO.getLastname());
                        update.setString(4, DO.getNickname());
                        update.setString(5, DO.getTitle());
                        update.setString(6, DO.getOrganization());
                        update.setString(7, DO.getOrgunit());
                        update.setString(8, DO.getEmail());
                        update.setString(9, DO.getHomeph());
                        update.setString(10, DO.getWorkph());
                        update.setString(11, DO.getCellph());
                        update.setString(12, DO.getIm());
                        update.setString(13, DO.getImno());
                        update.setString(14, DO.getFax());
                        update.setString(15, DO.getHomeaddr());
                        update.setString(16, DO.getHomelocality());
                        update.setString(17, DO.getHomeregion());
                        update.setString(18, DO.getHomepcode());
                        update.setString(19, DO.getHomecountry());
                        update.setString(20, DO.getWorkaddr());
                        update.setString(21, DO.getWorklocality());
                        update.setString(22, DO.getWorkregion());
                        update.setString(23, DO.getWorkpcode());
                        update.setString(24, DO.getWorkcountry());
                        update.setString(25, DO.getWebsite());
                        update.setString(26, DO.getWapsite());
                        update.setString(27, DO.getComments());
                        if (DO.getBirthday() != null) update.setDate(28, DO.getBirthday()); else update.setNull(28, Types.DATE);
                        update.setInt(29, RESET);
                        update.setInt(30, RESET);
                        update.setBigDecimal(31, DO.getOId());
                        update.setInt(32, RESET);
                        if (con.executeUpdate(update, null) < 1) retVector.add(DO);
                        con.reset();
                    } else if (DO.getSyncstatus() == DELETE) {
                        try {
                            con.setAutoCommit(false);
                            delete1.setBigDecimal(1, DO.getOId());
                            con.executeUpdate(delete1, null);
                            delete2.setBigDecimal(1, DO.getOId());
                            delete2.setInt(2, RESET);
                            delete2.setInt(3, DELETE);
                            if (con.executeUpdate(delete2, null) < 1) {
                                con.rollback();
                                retVector.add(DO);
                            } else {
                                con.commit();
                            }
                        } catch (Exception e) {
                            con.rollback();
                            retVector.add(DO);
                            throw e;
                        } finally {
                            con.reset();
                        }
                    }
                } catch (Exception e) {
                    if (DO != null) logError("Sync-ExternalContactDO.owner = " + DO.getOwner().toString() + " oid = " + (DO.getOId() != null ? DO.getOId().toString() : "NULL"), e);
                }
            }
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            if (DEBUG) logError("", e);
            throw e;
        } finally {
            release();
        }
        return retVector;
    }
} </s>
<s>class temp {    public static boolean URLExists(URL url) {
        int responseCode = -1;
        boolean exists = true;
        try {
            if (useHttpURLConnection && url.getProtocol().equals("http")) {
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("HEAD");
                responseCode = conn.getResponseCode();
                if (!(responseCode >= 200 && responseCode < 400)) exists = false;
                conn.disconnect();
            } else {
                InputStream testStream = url.openStream();
            }
        } catch (IOException ioe) {
            exists = false;
        }
        return exists;
    }
} </s>
<s>class temp {    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException("Could not load configuration from " + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
} </s>
<s>class temp {    public String copyImages(Document doc, String sXML, String newPath, String tagName, String itemName) {
        NodeList nl = null;
        Node n = null;
        NamedNodeMap nnp = null;
        Node nsrc = null;
        URL url = null;
        String sFilename = "";
        String sNewPath = "";
        int index;
        String sOldPath = "";
        try {
            nl = doc.getElementsByTagName(tagName);
            for (int i = 0; i < nl.getLength(); i++) {
                n = nl.item(i);
                nnp = n.getAttributes();
                nsrc = nnp.getNamedItem(itemName);
                String sTemp = nsrc.getTextContent();
                url = new URL("file", "localhost", sTemp);
                sOldPath = url.getPath();
                sOldPath = sOldPath.replace('/', File.separatorChar);
                int indexFirstSlash = sOldPath.indexOf(File.separatorChar);
                String sSourcePath;
                if (itemName.equals("data")) sSourcePath = sOldPath; else sSourcePath = sOldPath.substring(indexFirstSlash + 1);
                index = sOldPath.lastIndexOf(File.separatorChar);
                sFilename = sOldPath.substring(index + 1);
                sNewPath = newPath + sFilename;
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(sSourcePath).getChannel();
                    out = new FileOutputStream(sNewPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
                sXML = sXML.replace(nsrc.getTextContent(), sFilename);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sXML;
    }
} </s>
<s>class temp {    public static void copyFile(File source, File dest) throws IOException {
        if (source.equals(dest)) throw new IOException("Source and destination cannot be the same file path");
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        if (!dest.exists()) dest.createNewFile();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
} </s>
<s>class temp {    public static void copyDirs(File sourceDir, File destDir) throws IOException {
        if (!destDir.exists()) destDir.mkdirs();
        for (File file : sourceDir.listFiles()) {
            if (file.isDirectory()) {
                copyDirs(file, new File(destDir, file.getName()));
            } else {
                FileChannel srcChannel = new FileInputStream(file).getChannel();
                File out = new File(destDir, file.getName());
                out.createNewFile();
                FileChannel dstChannel = new FileOutputStream(out).getChannel();
                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                srcChannel.close();
                dstChannel.close();
            }
        }
    }
} </s>
<s>class temp {    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery("SELECT * FROM overrides").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException("Error on initial data store read", e);
            }
            String[] qry = { "CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)", "CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))", "CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))", "INSERT INTO settings (var, val) VALUES ('schema', '1')" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException("Error initializing data store", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException("Unable to cleanup data store resources", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException("Unable to reset data store auto commit", e3);
                }
            }
        }
        return;
    }
} </s>
<s>class temp {    private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info("DB is currently at schema " + i);
            if (i < SCHEMA_VERSION) {
                LOG.info("Upgrading from schema " + i + " to schema " + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = "UPDATE settings SET val = '2' WHERE var = 'schema'";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException("Error upgrading data store", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException("Unable to cleanup SQL resources", e);
            }
        }
    }
} </s>
<s>class temp {    @Override
    public void execute() throws BuildException {
        final String GC_USERNAME = "google-code-username";
        final String GC_PASSWORD = "google-code-password";
        if (StringUtils.isBlank(this.projectName)) throw new BuildException("undefined project");
        if (this.file == null) throw new BuildException("undefined file");
        if (!this.file.exists()) throw new BuildException("file not found :" + file);
        if (!this.file.isFile()) throw new BuildException("not a file :" + file);
        if (this.config == null) throw new BuildException("undefined config");
        if (!this.config.exists()) throw new BuildException("file not found :" + config);
        if (!this.config.isFile()) throw new BuildException("not a file :" + config);
        PostMethod post = null;
        try {
            Properties cfg = new Properties();
            FileInputStream fin = new FileInputStream(this.config);
            cfg.loadFromXML(fin);
            fin.close();
            if (!cfg.containsKey(GC_USERNAME)) throw new BuildException("undefined " + GC_USERNAME + " in " + this.config);
            if (!cfg.containsKey(GC_PASSWORD)) throw new BuildException("undefined " + GC_PASSWORD + " in " + this.config);
            HttpClient client = new HttpClient();
            post = new PostMethod("https://" + projectName + ".googlecode.com/files");
            post.addRequestHeader("User-Agent", getClass().getName());
            post.addRequestHeader("Authorization", "Basic " + Base64.encode(cfg.getProperty(GC_USERNAME) + ":" + cfg.getProperty(GC_PASSWORD)));
            List<Part> parts = new ArrayList<Part>();
            String s = this.summary;
            if (StringUtils.isBlank(s)) {
                s = this.file.getName() + " (" + TimeUtils.toYYYYMMDD() + ")";
            }
            parts.add(new StringPart("summary", s));
            for (String lbl : this.labels.split("[, \t\n]+")) {
                if (StringUtils.isBlank(lbl)) continue;
                parts.add(new StringPart("label", lbl.trim()));
            }
            parts.add(new FilePart("filename", this.file));
            MultipartRequestEntity requestEntity = new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams());
            post.setRequestEntity(requestEntity);
            int status = client.executeMethod(post);
            if (status != 201) {
                throw new BuildException("http status !=201 : " + post.getResponseBodyAsString());
            } else {
                IOUtils.copyTo(post.getResponseBodyAsStream(), new NullOutputStream());
            }
        } catch (BuildException e) {
            throw e;
        } catch (Exception e) {
            throw new BuildException(e);
        } finally {
            if (post != null) post.releaseConnection();
        }
    }
} </s>
<s>class temp {    public void fetchFile(String ID) {
        String url = "http://www.nal.usda.gov/cgi-bin/agricola-ind?bib=" + ID + "&conf=010000++++++++++++++&screen=MA";
        System.out.println(url);
        try {
            PrintWriter pw = new PrintWriter(new FileWriter("MARC" + ID + ".txt"));
            if (!id.contains("MARC" + ID + ".txt")) {
                id.add("MARC" + ID + ".txt");
            }
            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
            in.readLine();
            String inputLine, stx = "";
            StringBuffer sb = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith("<TR><TD><B>")) {
                    String sts = (inputLine.substring(inputLine.indexOf("B>") + 2, inputLine.indexOf("</")));
                    int i = 0;
                    try {
                        i = Integer.parseInt(sts);
                    } catch (NumberFormatException nfe) {
                    }
                    if (i > 0) {
                        stx = stx + "\n" + sts + " - ";
                    } else {
                        stx += sts;
                    }
                }
                if (!(inputLine.startsWith("<") || inputLine.startsWith(" <") || inputLine.startsWith(">"))) {
                    String tx = inputLine.trim();
                    stx += tx;
                }
            }
            pw.println(stx);
            pw.close();
        } catch (Exception e) {
            System.out.println("Couldn't open stream");
            System.out.println(e);
        }
    }
} </s>
<s>class temp {    public static void retrieveAttachments(RemoteAttachment[] attachments, String id, String projectName, String key, SimpleDateFormat formatter, java.sql.Connection connect) {
        if (attachments.length != 0) {
            for (RemoteAttachment attachment : attachments) {
                attachmentAuthor = attachment.getAuthor();
                if (attachment.getCreated() != null) {
                    attachmentCreated = formatter.format(attachment.getCreated().getTime());
                }
                attachmentFileName = attachment.getFilename();
                attachmentFileSize = attachment.getFilesize();
                attachmentId = attachment.getId();
                attachmentMimeType = attachment.getMimetype();
                if (attachmentMimeType.startsWith("text")) {
                    URL attachmentUrl;
                    try {
                        attachmentUrl = new URL("https://issues.apache.org/jira/secure/attachment/" + attachmentId + "/" + attachmentFileName);
                        urlConnection = (HttpURLConnection) attachmentUrl.openConnection();
                        urlConnection.connect();
                        serverCode = urlConnection.getResponseCode();
                    } catch (MalformedURLException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    if (serverCode == 200) {
                        actual = new File("../attachments/" + projectName + "/" + key);
                        if (!actual.exists()) {
                            actual.mkdirs();
                        }
                        attachmentPath = "../attachments/" + projectName + "/" + key + "/" + attachmentFileName;
                        BufferedInputStream bis;
                        try {
                            bis = new BufferedInputStream(urlConnection.getInputStream());
                            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(attachmentPath));
                            byte[] b = new byte[1024];
                            int len = -1;
                            while ((len = bis.read(b)) != -1) {
                                if (len == 1024) {
                                    bos.write(b);
                                } else {
                                    bos.write(b, 0, len);
                                }
                            }
                            bos.close();
                            bis.close();
                            insertAttachment(connect, id);
                        } catch (IOException e) {
                            e.printStackTrace();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        try {
            URL url = new URL("http://localhost:6557");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("HEAD");
            int responseCode = conn.getResponseCode();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String decodedString;
            while ((decodedString = in.readLine()) != null) {
                System.out.println(decodedString);
            }
            in.close();
            conn.disconnect();
        } catch (Exception ex) {
            Logger.getLogger(TestSSLConnection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
} </s>
<s>class temp {    public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {
        Calendar rightNow = Calendar.getInstance();
        String dayNamedFolderName = "" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));
        String uploadDirRoot = props.getProperty("uploaded.files.root");
        File file = new File(uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName);
        if (!file.exists()) file.mkdirs();
        String extension = FilenameUtils.getExtension(fileName);
        String outFileName;
        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, "true"))) {
            outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));
        } else {
            outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));
        }
        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, "true"))) {
            outFileName = outFileName + DOT + extension;
        }
        String outPathAndName = uploadDirRoot + System.getProperty("file.separator") + dayNamedFolderName + System.getProperty("file.separator") + props.getProperty("uploaded.files.prefix") + outFileName;
        File uploadedFile = new File(outPathAndName);
        _logger.info("uploadedFile.getAbsolutePath() = {}", uploadedFile.getAbsolutePath());
        uploadedFile.createNewFile();
        OutputStream outStream = new FileOutputStream(outPathAndName);
        IOUtils.copyLarge(inStream, outStream);
        IOUtils.closeQuietly(inStream);
        outStream.close();
        if (resize) {
            writeResizedImage(outPathAndName, extension, "imgSize_xs");
            writeResizedImage(outPathAndName, extension, "imgSize_s");
            writeResizedImage(outPathAndName, extension, "imgSize_m");
            writeResizedImage(outPathAndName, extension, "imgSize_l");
            writeResizedImage(outPathAndName, extension, "imgSize_xl");
        }
        String retVal = dayNamedFolderName + "/" + props.getProperty("uploaded.files.prefix") + outFileName;
        return retVal;
    }
} </s>
<s>class temp {    public User createUser(Map userData) throws HamboFatalException {
        DBConnection con = null;
        try {
            con = DBServiceManager.allocateConnection();
            con.setAutoCommit(false);
            String userId = (String) userData.get(HamboUser.USER_ID);
            String sql = "insert into user_UserAccount " + "(userid,firstname,lastname,street,zipcode,city," + "province,country,email,cellph,gender,password," + "language,timezn,birthday,datecreated,lastlogin," + "disabled,wapsigned,ldapInSync,offerings,firstcb) " + "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, userId);
            ps.setString(2, (String) userData.get(HamboUser.FIRST_NAME));
            ps.setString(3, (String) userData.get(HamboUser.LAST_NAME));
            ps.setString(4, (String) userData.get(HamboUser.STREET_ADDRESS));
            ps.setString(5, (String) userData.get(HamboUser.ZIP_CODE));
            ps.setString(6, (String) userData.get(HamboUser.CITY));
            ps.setString(7, (String) userData.get(HamboUser.STATE));
            ps.setString(8, (String) userData.get(HamboUser.COUNTRY));
            ps.setString(9, (String) userData.get(HamboUser.EXTERNAL_EMAIL_ADDRESS));
            ps.setString(10, (String) userData.get(HamboUser.MOBILE_NUMBER));
            ps.setString(11, (String) userData.get(HamboUser.GENDER));
            ps.setString(12, (String) userData.get(HamboUser.PASSWORD));
            ps.setString(13, (String) userData.get(HamboUser.LANGUAGE));
            ps.setString(14, (String) userData.get(HamboUser.TIME_ZONE));
            java.sql.Date date = (java.sql.Date) userData.get(HamboUser.BIRTHDAY);
            if (date != null) ps.setDate(15, date); else ps.setNull(15, Types.DATE);
            date = (java.sql.Date) userData.get(HamboUser.CREATED);
            if (date != null) ps.setDate(16, date); else ps.setNull(16, Types.DATE);
            date = (java.sql.Date) userData.get(HamboUser.LAST_LOGIN);
            if (date != null) ps.setDate(17, date); else ps.setNull(17, Types.DATE);
            Boolean bool = (Boolean) userData.get(HamboUser.DISABLED);
            if (bool != null) ps.setBoolean(18, bool.booleanValue()); else ps.setBoolean(18, UserAccountInfo.DEFAULT_DISABLED);
            bool = (Boolean) userData.get(HamboUser.WAP_ACCOUNT);
            if (bool != null) ps.setBoolean(19, bool.booleanValue()); else ps.setBoolean(19, UserAccountInfo.DEFAULT_WAP_ACCOUNT);
            bool = (Boolean) userData.get(HamboUser.LDAP_IN_SYNC);
            if (bool != null) ps.setBoolean(20, bool.booleanValue()); else ps.setBoolean(20, UserAccountInfo.DEFAULT_LDAP_IN_SYNC);
            bool = (Boolean) userData.get(HamboUser.OFFERINGS);
            if (bool != null) ps.setBoolean(21, bool.booleanValue()); else ps.setBoolean(21, UserAccountInfo.DEFAULT_OFFERINGS);
            ps.setString(22, (String) userData.get(HamboUser.COBRANDING_ID));
            con.executeUpdate(ps, null);
            ps = con.prepareStatement(DBUtil.getQueryCurrentOID(con, "user_UserAccount", "newoid"));
            ResultSet rs = con.executeQuery(ps, null);
            if (rs.next()) {
                OID newOID = new OID(rs.getBigDecimal("newoid").doubleValue());
                userData.put(HamboUser.OID, newOID);
            }
            con.commit();
        } catch (Exception ex) {
            if (con != null) try {
                con.rollback();
            } catch (SQLException sqlex) {
            }
            throw new HamboFatalException(MSG_INSERT_FAILED, ex);
        } finally {
            if (con != null) try {
                con.reset();
            } catch (SQLException ex) {
            }
            if (con != null) con.release();
        }
        return buildUser(userData);
    }
} </s>
<s>class temp {    protected void copyDependents() {
        for (File source : dependentFiles.keySet()) {
            try {
                if (!dependentFiles.get(source).exists()) {
                    if (dependentFiles.get(source).isDirectory()) dependentFiles.get(source).mkdirs(); else dependentFiles.get(source).getParentFile().mkdirs();
                }
                IOUtils.copyEverything(source, dependentFiles.get(source));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public static boolean copy(File from, File to) {
        if (from.isDirectory()) {
            for (String name : Arrays.asList(from.list())) {
                if (!copy(from, to, name)) {
                    LogUtils.info("Failed to copy " + name + " from " + from + " to " + to, null);
                    return false;
                }
            }
        } else {
            try {
                FileInputStream is = new FileInputStream(from);
                FileChannel ifc = is.getChannel();
                FileOutputStream os = makeFile(to);
                if (USE_NIO) {
                    FileChannel ofc = os.getChannel();
                    ofc.transferFrom(ifc, 0, from.length());
                } else {
                    pipe(is, os, false);
                }
                is.close();
                os.close();
            } catch (IOException ex) {
                LogUtils.warning("Failed to copy " + from + " to " + to, ex);
                return false;
            }
        }
        long time = from.lastModified();
        setLastModified(to, time);
        long newtime = to.lastModified();
        if (newtime != time) {
            LogUtils.info("Failed to set timestamp for file " + to + ": tried " + new Date(time) + ", have " + new Date(newtime), null);
            to.setLastModified(time);
            long morenewtime = to.lastModified();
            return false;
        }
        return time == newtime;
    }
} </s>
<s>class temp {    private static void loadUnits(URL url) throws Exception {
        try {
            SYSTEM = new UnitSystem();
            XMLReader reader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
            reader.setFeature("http://xml.org/sax/features/namespaces", true);
            reader.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
            reader.setContentHandler(SYSTEM);
            reader.parse(new InputSource(url.openStream()));
        } catch (Throwable ex) {
            throw new Exception(url.toString() + ": " + ex.getMessage(), ex);
        }
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws MalformedURLException, IOException {
        URL url = new URL("https://imo.im/");
        URLConnection con = url.openConnection();
        InputStream is = con.getInputStream();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while (((len = is.read(buffer)) >= 0)) {
            out.write(buffer, 0, len);
        }
        out.flush();
        System.out.println(out.toString());
    }
} </s>
<s>class temp {    private void copy(File source, File destination) throws PackageException {
        try {
            FileInputStream in = new FileInputStream(source);
            FileOutputStream out = new FileOutputStream(destination);
            byte[] buff = new byte[1024];
            int len;
            while ((len = in.read(buff)) > 0) out.write(buff, 0, len);
            in.close();
            out.close();
        } catch (IOException e) {
            throw new PackageException("Unable to copy " + source.getPath() + " to " + destination.getPath() + " :: " + e.toString());
        }
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception {
        PreparedStatement ps = null;
        try {
            if (log.isDebugEnabled()) log.debug("db connect - " + db_.getClass().getName());
            String seqName = DefinitionService.getString(parameters, "sequence_name", null);
            if (seqName == null) {
                String errorString = "Name of sequnce not found";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String tableName = DefinitionService.getString(parameters, "name_table", null);
            if (tableName == null) {
                String errorString = "Name of table not found";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String columnName = DefinitionService.getString(parameters, "name_pk_field", null);
            if (columnName == null) {
                String errorString = "Name of column not found";
                log.error(errorString);
                throw new Exception(errorString);
            }
            CustomSequenceType seqSite = new CustomSequenceType();
            seqSite.setSequenceName(seqName);
            seqSite.setTableName(tableName);
            seqSite.setColumnName(columnName);
            long seqValue = db_.getSequenceNextValue(seqSite);
            String valueColumnName = DefinitionService.getString(parameters, "name_value_field", null);
            if (columnName == null) {
                String errorString = "Name of valueColumnName not found";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String insertValue = DefinitionService.getString(parameters, "insert_value", null);
            if (columnName == null) {
                String errorString = "Name of insertValue not found";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String sql = "insert into " + tableName + " " + "(" + columnName + "," + valueColumnName + ")" + "values" + "(?,?)";
            if (log.isDebugEnabled()) {
                log.debug(sql);
                log.debug("pk " + seqValue);
                log.debug("value " + insertValue);
            }
            ps = db_.prepareStatement(sql);
            ps.setLong(1, seqValue);
            ps.setString(2, insertValue);
            ps.executeUpdate();
            db_.commit();
        } catch (Exception e) {
            try {
                db_.rollback();
            } catch (Exception e1) {
            }
            log.error("Error insert value", e);
            throw e;
        } finally {
            org.riverock.generic.db.DatabaseManager.close(ps);
            ps = null;
        }
    }
} </s>
<s>class temp {    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile("diff", ".htm");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write("<html><head><title>LOC Differences</title>\n" + SCRIPT + "</head>\n" + "<body bgcolor='#ffffff'>\n" + "<div onMouseOver=\"window.defaultStatus='Metrics'\">\n");
        if (addedTable.length() > 0) {
            out.write("<table border><tr><th>Files Added:</th>" + "<th>Add</th><th>Type</th></tr>");
            out.write(addedTable.toString());
            out.write("</table><br><br>");
        }
        if (modifiedTable.length() > 0) {
            out.write("<table border><tr><th>Files Modified:</th>" + "<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>" + "<th>Total</th><th>Type</th></tr>");
            out.write(modifiedTable.toString());
            out.write("</table><br><br>");
        }
        if (deletedTable.length() > 0) {
            out.write("<table border><tr><th>Files Deleted:</th>" + "<th>Del</th><th>Type</th></tr>");
            out.write(deletedTable.toString());
            out.write("</table><br><br>");
        }
        out.write("<table name=METRICS BORDER>\n");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write("<tr><td>Base:&nbsp;</td><td>");
            out.write(Long.toString(base));
            out.write("</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>");
            out.write(Long.toString(deleted));
            out.write("</td></tr>\n<tr><td>Modified:&nbsp;</td><td>");
            out.write(Long.toString(modified));
            out.write("</td></tr>\n<tr><td>Added:&nbsp;</td><td>");
            out.write(Long.toString(added));
            out.write("</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>");
            out.write(Long.toString(added + modified));
            out.write("</td></tr>\n");
        }
        out.write("<tr><td>Total:&nbsp;</td><td>");
        out.write(Long.toString(total));
        out.write("</td></tr>\n</table></div>");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write("</BODY></HTML>".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
} </s>
<s>class temp {    public Object downloadObject() throws CommunicationException, FileNotFoundException, InvalidClassException, ClassNotFoundException {
        Object returnObject = null;
        String requestStr = new String();
        HttpURLConnection connection = null;
        try {
            URL url = new URL(urlString);
            for (java.util.Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
                java.util.Map.Entry e = (java.util.Map.Entry) i.next();
                requestStr += URLEncoder.encode((String) e.getKey(), "UTF-8") + "=" + URLEncoder.encode((String) e.getValue(), "UTF-8") + "&";
            }
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.connect();
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.println(requestStr);
            out.close();
            System.out.println("HTTPCommunication.downloadObject() - Response:" + connection.getResponseCode() + " : " + connection.getResponseMessage());
            if (connection.getResponseCode() == connection.HTTP_OK) {
                GZIPInputStream gzipIn = new GZIPInputStream(connection.getInputStream());
                ObjectInputStream objectIn = new ObjectInputStream(gzipIn);
                returnObject = objectIn.readObject();
                objectIn.close();
            } else if (connection.getResponseCode() == connection.HTTP_NOT_FOUND) {
                throw new FileNotFoundException(connection.getResponseMessage());
            } else {
                throw new CommunicationException(connection.getResponseMessage(), connection.getResponseCode());
            }
        } catch (java.net.ConnectException ce) {
            throw new CommunicationException("Cannot connect to " + urlString + ".\n" + "Server is not responding!", ce);
        } catch (java.net.MalformedURLException mfue) {
            throw new CommunicationException("Cannot connect to " + urlString + ".\n" + "Bad url string!", mfue);
        } catch (ClassNotFoundException cnfe) {
            throw cnfe;
        } catch (InvalidClassException ice) {
            throw ice;
        } catch (java.io.FileNotFoundException fnfe) {
            throw fnfe;
        } catch (java.io.InterruptedIOException iioe) {
            this.parentWorkflow.getMenuButtonEventHandler().stopAutomaticRefresh();
            throw new CommunicationException("Communication is timeouted", iioe);
        } catch (java.io.IOException ioe) {
            throw new CommunicationException("Error while trying to communicate the server: \n" + ioe.getMessage(), ioe);
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
        return returnObject;
    }
} </s>
<s>class temp {        public String postFileRequest(String fileName, String internalFileName) throws Exception {
            status = STATUS_INIT;
            String responseString = null;
            String requestStringPostFix = new String("");
            if (isThreadStopped) {
                return "";
            }
            status = STATUS_UPLOADING;
            if (isThreadStopped) {
                return "";
            }
            String requestString = new String("");
            int contentLength = 0, c = 0, counter = 0;
            try {
                for (java.util.Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
                    java.util.Map.Entry e = (java.util.Map.Entry) i.next();
                    requestString = requestString + "-----------------------------7d338a374003ea\n" + "Content-Disposition: form-data; name=\"" + (String) e.getKey() + "\"\n\n" + (String) e.getValue() + "\n\n";
                }
                URL url = new URL(urlString);
                URLConnection connection = url.openConnection();
                HttpURLConnection httpConn = (HttpURLConnection) connection;
                requestString = requestString + "-----------------------------7d338a374003ea\n" + "Content-Disposition: form-data; name=\"" + internalFileName + "\"; filename=\"" + fileName + "\"\n" + "Content-Type: text/plain\n\n";
                requestStringPostFix = requestStringPostFix + "\n\n" + "-----------------------------7d338a374003ea\n" + "\n";
                FileInputStream fis = null;
                String str = null;
                try {
                    fis = new FileInputStream(fileName);
                    int fileSize = fis.available();
                    contentLength = requestString.length() + requestStringPostFix.length() + fileSize;
                    httpConn.setRequestProperty("Content-Length", String.valueOf(contentLength));
                    httpConn.setRequestProperty("Content-Type", "multipart/form-data; boundary=---------------------------7d338a374003ea");
                    httpConn.setRequestMethod("POST");
                    httpConn.setDoOutput(true);
                    httpConn.setDoInput(true);
                    try {
                        connection.connect();
                    } catch (ConnectException ec2) {
                        error = true;
                        finished = true;
                        errorStr = "Cannot connect to: " + urlString;
                        System.out.println("Cannot connect to:" + urlString);
                    } catch (java.io.InterruptedIOException e) {
                        error = true;
                        finished = true;
                        errorStr = "Connection to Portal lost: communication is timeouted.";
                        parentWorkflow.getMenuButtonEventHandler().stopAutomaticRefresh();
                    } catch (IllegalStateException ei) {
                        error = true;
                        finished = true;
                        errorStr = "IllegalStateException: " + ei.getMessage();
                    }
                    OutputStream out = httpConn.getOutputStream();
                    byte[] toTransfer = requestString.getBytes("UTF-8");
                    for (int i = 0; i < toTransfer.length; i++) {
                        out.write(toTransfer[i]);
                    }
                    int count;
                    int zBUFFER = 8 * 1024;
                    setUploadProgress(fileSize, counter);
                    byte data[] = new byte[zBUFFER];
                    GZIPOutputStream zos = new GZIPOutputStream(out);
                    while ((count = fis.read(data, 0, zBUFFER)) != -1) {
                        if (isThreadStopped) {
                            return "";
                        }
                        zos.write(data, 0, count);
                        setUploadProgress(fileSize, counter);
                        counter += count;
                    }
                    zos.flush();
                    zos.finish();
                    setUploadProgress(fileSize, counter);
                    toTransfer = requestStringPostFix.getBytes("UTF-8");
                    for (int i = 0; i < toTransfer.length; i++) {
                        out.write(toTransfer[i]);
                    }
                    out.close();
                } catch (IOException e) {
                    finished = true;
                    error = true;
                    errorStr = "Error in Uploading file: " + fileName;
                } finally {
                    try {
                        fis.close();
                    } catch (IOException e2) {
                    }
                }
                InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());
                BufferedReader br = new BufferedReader(isr);
                String temp;
                String tempResponse = "";
                while ((temp = br.readLine()) != null) {
                    if (isThreadStopped) {
                        return "";
                    }
                    tempResponse = tempResponse + temp + "\n";
                    setDecompressStatusAtUpload(temp);
                }
                responseString = tempResponse;
                isr.close();
            } catch (ConnectException ec) {
                error = true;
                finished = true;
                errorStr = "Cannot connect to: " + urlString + "\nServer is not responding.";
            } catch (java.io.InterruptedIOException e) {
                error = true;
                finished = true;
                errorStr = "Connection to Portal lost: communication is timeouted.";
                parentWorkflow.getMenuButtonEventHandler().stopAutomaticRefresh();
            } catch (IOException e2) {
                finished = true;
                error = true;
                errorStr = "IOError in postFileRequest: " + e2.getMessage();
            } catch (Exception e4) {
                finished = true;
                error = true;
                errorStr = "Error while trying to communicate the server: " + e4.getMessage();
            }
            return responseString;
        }
} </s>
<s>class temp {        public String postDownloadRequest(String localFile) throws Exception {
            String responseString = "";
            String requestString = "";
            if (localFile == null) {
                error = true;
                errorStr = errorStr.concat("No local target for: " + currentFile.getRelativePath() + "\n");
                return "";
            }
            try {
                for (java.util.Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
                    java.util.Map.Entry e = (java.util.Map.Entry) i.next();
                    requestString = requestString + URLEncoder.encode((String) e.getKey(), "UTF-8") + "=" + URLEncoder.encode((String) e.getValue(), "UTF-8") + "&";
                }
                URL url = new URL(urlString);
                URLConnection connection = url.openConnection();
                HttpURLConnection httpConn = (HttpURLConnection) connection;
                httpConn.setRequestProperty("Content-Length", String.valueOf(requestString.length()));
                httpConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
                httpConn.setRequestMethod("POST");
                httpConn.setDoOutput(true);
                httpConn.setDoInput(true);
                connection.connect();
                PrintWriter out = new PrintWriter(httpConn.getOutputStream());
                out.println(requestString);
                out.close();
                if (httpConn.HTTP_NOT_FOUND == httpConn.getResponseCode()) {
                    error = true;
                    errorStr = errorStr.concat("Cannot find file: " + currentFile.getRelativePath() + "\n");
                    return responseString;
                }
                String localFileName = new String(localFile);
                File f = new File(localFileName);
                File dir = new File(f.getParent());
                dir.mkdirs();
                FileOutputStream fis = new FileOutputStream(f);
                try {
                    InputStream is = httpConn.getInputStream();
                    java.util.zip.GZIPInputStream gin = new java.util.zip.GZIPInputStream(new BufferedInputStream(is));
                    int temp;
                    while ((temp = gin.read()) != -1) {
                        fis.write(temp);
                    }
                    if (fis.getChannel().size() > 0) {
                        fis.getChannel().truncate(fis.getChannel().size() - 1);
                    }
                    responseString = downloadDir + "/" + currentFile.getRelativePath();
                    is.close();
                    fis.close();
                    httpConn.disconnect();
                } catch (IOException io) {
                    error = true;
                    errorStr = errorStr.concat("Cannot find file: " + currentFile.getRelativePath() + "\n");
                    return responseString;
                }
            } catch (java.net.ConnectException conne) {
                error = true;
                finished = true;
                errorStr = "Cannot connect to: " + urlString;
            } catch (java.io.InterruptedIOException e) {
                error = true;
                finished = true;
                errorStr = "Connection to Portal lost: communication is timeouted.";
                parentWorkflow.getMenuButtonEventHandler().stopAutomaticRefresh();
            } catch (java.net.MalformedURLException e) {
                error = true;
                finished = true;
                errorStr = "Error in postDownloadRequest()";
            } catch (Exception e) {
                e.printStackTrace();
                error = true;
                finished = true;
                errorStr = "Error in Download: " + e.getMessage();
            }
            return responseString;
        }
} </s>
<s>class temp {    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
} </s>
<s>class temp {    public static int ToGSML(GeoSciML_Mapping mapping, String strTemplate, String strRequest, PrintWriter sortie, String requestedSRS) throws Exception {
        String level = "info.";
        if (ConnectorServlet.debug) level = "debug.";
        Log log = LogFactory.getLog(level + "fr.brgm.exows.gml2gsml.Gml2Gsml");
        log.debug(strRequest);
        String tagFeature = "FIELDS";
        URL url2Request = new URL(strRequest);
        URLConnection conn = url2Request.openConnection();
        Date dDebut = new Date();
        BufferedReader buffin = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String strLine = null;
        int nbFeatures = 0;
        Template template = VelocityCreator.createTemplate("/fr/brgm/exows/gml2gsml/templates/" + strTemplate);
        while ((strLine = buffin.readLine()) != null) {
            if (strLine.indexOf(tagFeature) != -1) {
                nbFeatures++;
                GSMLFeatureGeneric feature = createGSMLFeatureFromGMLFeatureString(mapping, strLine);
                VelocityContext context = new VelocityContext();
                context.put("feature", feature);
                String outputFeatureMember = VelocityCreator.createXMLbyContext(context, template);
                sortie.println(outputFeatureMember);
            }
        }
        buffin.close();
        Date dFin = new Date();
        String output = "GEOSCIML : " + nbFeatures + " features handled - time : " + (dFin.getTime() - dDebut.getTime()) / 1000 + " [" + dDebut + " // " + dFin + "]";
        log.trace(output);
        return nbFeatures;
    }
} </s>
<s>class temp {    public static void ToHTML(GeoSciML_Mapping mapping, String strTemplate, String strRequest, String lang, PrintWriter sortie) throws Exception {
        String level = "info.";
        if (ConnectorServlet.debug) level = "debug.";
        Log log = LogFactory.getLog(level + "fr.brgm.exows.gml2gsml.Gml2Gsml");
        String tagFeature = "FIELDS";
        URL url2Request = new URL(strRequest);
        URLConnection conn = url2Request.openConnection();
        Date dDebut = new Date();
        BufferedReader buffin = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String strLine = null;
        int nbFeatures = 0;
        Template template = VelocityCreator.createTemplate("/fr/brgm/exows/gml2gsml/templates/" + strTemplate);
        while ((strLine = buffin.readLine()) != null) {
            if (strLine.indexOf(tagFeature) != -1) {
                nbFeatures++;
                GSMLFeatureGeneric feature = createGSMLFeatureFromGMLFeatureString(mapping, strLine);
                VelocityContext context = new VelocityContext();
                context.put("feature", feature);
                context.put("lang", lang);
                context.put("vocabularies", new Vocabularies());
                String outputFeatureMember = VelocityCreator.createXMLbyContext(context, template);
                sortie.println(outputFeatureMember);
            }
        }
        buffin.close();
        Date dFin = new Date();
        String output = "GEOSCIML : " + nbFeatures + " features handled - time : " + (dFin.getTime() - dDebut.getTime()) / 1000 + " [" + dDebut + " // " + dFin + "]";
        log.trace(output);
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public int executeUpdate(String query, QueryParameter params) throws DAOException {
        PreparedStatement ps = null;
        Query queryObj = getModel().getQuery(query);
        if (conditionalQueries != null && conditionalQueries.containsKey(query)) {
            queryObj = (Query) conditionalQueries.get(query);
        }
        String sql = queryObj.getStatement(params.getVariables());
        logger.debug(sql);
        try {
            if (con == null || con.isClosed()) {
                con = DataSource.getInstance().getConnection(getModel().getDataSource());
            }
            ps = con.prepareStatement(sql);
            setParameters(ps, queryObj, params);
            return ps.executeUpdate();
        } catch (SQLException e) {
            logger.error("DataBase Error :", e);
            if (transactionMode) rollback();
            transactionMode = false;
            throw new DAOException("Unexpected Error Query (" + query + ")", "error.DAO.database", e.getMessage());
        } catch (Exception ex) {
            logger.error("Error :", ex);
            if (transactionMode) rollback();
            transactionMode = false;
            throw new DAOException("Unexpected Error Query (" + query + ")", "error.DAO.database", ex.getMessage());
        } finally {
            try {
                if (!transactionMode) con.commit();
                if (ps != null) ps.close();
                if (!transactionMode && con != null) con.close();
            } catch (SQLException e) {
                throw new DAOException("Unexpected Error Query (" + query + ")", "error.DAO.database", e.getMessage());
            }
        }
    }
} </s>
<s>class temp {    private <T> T conectar(String className, String methodName, Class<?>[] parameterTypes, Object[] args, T t) throws Exception {
        try {
            HttpURLConnection conexao = (HttpURLConnection) url.openConnection();
            conexao.setRequestMethod("POST");
            conexao.setDoOutput(true);
            conexao.setRequestProperty("className", className);
            conexao.setRequestProperty("methodName", methodName);
            ServiceObject serviceObject = new ServiceObject();
            serviceObject.write(new Object[] { parameterTypes, args }, conexao.getOutputStream());
            if (conexao.getResponseCode() != 200) {
                throw new ServiceException("Falha grave no servidor com url: " + url);
            }
            String typeResponse = conexao.getHeaderField("Service-Type-Response");
            Object object = serviceObject.read(conexao.getInputStream());
            return returns.get(typeResponse).tratarReturn(object, t);
        } catch (IOException e) {
            throw new ServiceException("Falha ao conectar no servidor com url: " + url, e);
        } catch (ClassNotFoundException e) {
            throw new ServiceException("Falha objeto espera nao e compatavel. Resposta do servidor com url: " + url, e);
        }
    }
} </s>
<s>class temp {    public static String hexMD5(String value) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.reset();
            messageDigest.update(value.getBytes("utf-8"));
            byte[] digest = messageDigest.digest();
            return byteToHexString(digest);
        } catch (Exception ex) {
            throw new UnexpectedException(ex);
        }
    }
} </s>
<s>class temp {    public static String hexSHA1(String value) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance("SHA-1");
            md.update(value.getBytes("utf-8"));
            byte[] digest = md.digest();
            return byteToHexString(digest);
        } catch (Exception ex) {
            throw new UnexpectedException(ex);
        }
    }
} </s>
<s>class temp {    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext("logonToServer()");
                msgEntry.setMessageText("Logged into FTP server " + ftpAddress + ":" + ftpPort + " as user " + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext("logonToServer()");
                    errEntry.setAppMessage("Unable to login after " + (noRetriesSoFar - 1) + " retries. Max Retries.\n" + "Address:" + ftpAddress + "\n" + "User:" + user);
                    errEntry.setSubjectSendEmail("Unable to login to " + ftpAddress + " after " + (noRetriesSoFar - 1) + " retries.");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
} </s>
<s>class temp {    private static Bitmap loadFromUrl(String url, String portId) {
        Bitmap bitmap = null;
        final HttpGet get = new HttpGet(url);
        HttpEntity entity = null;
        try {
            final HttpResponse response = ServiceProxy.getInstance(portId).execute(get);
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                entity = response.getEntity();
                try {
                    InputStream in = entity.getContent();
                    bitmap = BitmapFactory.decodeStream(in);
                } catch (IOException e) {
                    Log.error(e);
                }
            }
        } catch (IOException e) {
            Log.error(e);
        } finally {
            if (entity != null) {
                try {
                    entity.consumeContent();
                } catch (IOException e) {
                    Log.error(e);
                }
            }
        }
        return bitmap;
    }
} </s>
<s>class temp {    private void menuOpenURL() {
        animate = false;
        resetScaleCombos();
        InputDialog dialog = new InputDialog(shell, "Open URL Dialog", "Enter URL of the image", "http://", new IInputValidator() {

            @Override
            public String isValid(String newText) {
                if (newText.startsWith("http://") || newText.startsWith("https://") || newText.startsWith("ftp://") || newText.startsWith("file://")) return newText;
                return null;
            }
        });
        if (dialog.open() == SWT.CANCEL) return;
        String urlName = dialog.getValue();
        Cursor waitCursor = new Cursor(display, SWT.CURSOR_WAIT);
        shell.setCursor(waitCursor);
        imageCanvas.setCursor(waitCursor);
        try {
            URL url = new URL(urlName);
            InputStream stream = url.openStream();
            loader = new ImageLoader();
            if (incremental) {
                loader.addImageLoaderListener(new ImageLoaderListener() {

                    public void imageDataLoaded(ImageLoaderEvent event) {
                        incrementalDataLoaded(event);
                    }
                });
                incrementalThreadStart();
            }
            imageDataArray = loader.load(stream);
            stream.close();
            if (imageDataArray.length > 0) {
                currentName = urlName;
                fileName = null;
                previousButton.setEnabled(imageDataArray.length > 1);
                nextButton.setEnabled(imageDataArray.length > 1);
                animateButton.setEnabled(imageDataArray.length > 1 && loader.logicalScreenWidth > 0 && loader.logicalScreenHeight > 0);
                imageDataIndex = 0;
                displayImage(imageDataArray[imageDataIndex]);
                resetScrollBars();
            }
        } catch (Exception e) {
            showErrorDialog("Loading", urlName, e);
        } finally {
            shell.setCursor(null);
            imageCanvas.setCursor(crossCursor);
            waitCursor.dispose();
        }
    }
} </s>
<s>class temp {    public static String executePost(String urlStr, Map paramsMap) throws IOException {
        StringBuffer result = new StringBuffer();
        HttpURLConnection connection = null;
        URL url = new URL(urlStr);
        connection = (HttpURLConnection) url.openConnection();
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.setRequestMethod("POST");
        PrintWriter out = new PrintWriter(connection.getOutputStream());
        Iterator paramKeys = paramsMap.keySet().iterator();
        while (paramKeys.hasNext()) {
            String paramName = (String) paramKeys.next();
            out.print(paramName + "=" + paramsMap.get(paramName));
            if (paramKeys.hasNext()) {
                out.print('&');
            }
        }
        out.flush();
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            result.append(inputLine);
        }
        in.close();
        out.close();
        connection.disconnect();
        String msg = result.toString();
        return stripOuterElement(msg);
    }
} </s>
<s>class temp {    public void render(RenderRequest renderRequest, RenderResponse renderResponse) throws PortletException {
        Writer out = null;
        PreparedStatement ps = null;
        DatabaseAdapter dbDyn = null;
        try {
            out = renderResponse.getWriter();
            if (log.isDebugEnabled()) log.debug("Start commit new image");
            AuthSession auth_ = (AuthSession) renderRequest.getUserPrincipal();
            if (auth_ == null || !auth_.isUserInRole("webmill.upload_image")) {
                throw new PortletSecurityException("You have not enough right");
            }
            dbDyn = DatabaseAdapter.getInstance();
            if (log.isDebugEnabled()) log.debug("urlString - " + renderRequest.getParameter("url_download"));
            String urlString = renderRequest.getParameter("url_download").trim();
            if (urlString == null) throw new IllegalArgumentException("id_firm not initialized");
            if (log.isDebugEnabled()) log.debug("result url_download " + urlString);
            String ext[] = { ".jpg", ".jpeg", ".gif", ".png" };
            int i;
            for (i = 0; i < ext.length; i++) {
                if ((ext[i] != null) && urlString.toLowerCase().endsWith(ext[i].toLowerCase())) break;
            }
            if (i == ext.length) throw new UploadFileException("Unsupported file extension. Error #20.03");
            if (log.isDebugEnabled()) log.debug("id_main - " + PortletService.getLong(renderRequest, "id_main"));
            Long id_main = PortletService.getLong(renderRequest, "id_main");
            if (id_main == null) throw new IllegalArgumentException("id_firm not initialized");
            String desc = RequestTools.getString(renderRequest, "d");
            CustomSequenceType seq = new CustomSequenceType();
            seq.setSequenceName("seq_image_number_file");
            seq.setTableName("MAIN_FORUM_THREADS");
            seq.setColumnName("ID_THREAD");
            Long currID = dbDyn.getSequenceNextValue(seq);
            String storage_ = portletConfig.getPortletContext().getRealPath("/") + File.separatorChar + "image";
            String fileName = storage_ + File.separatorChar;
            if (log.isDebugEnabled()) log.debug("filename - " + fileName);
            URL url = new URL(urlString);
            File fileUrl = new File(url.getFile());
            if (log.isDebugEnabled()) log.debug("fileUrl - " + fileUrl);
            String newFileName = StringTools.appendString("" + currID, '0', 7, true) + "-" + fileUrl.getName();
            if (log.isDebugEnabled()) log.debug("newFileName " + newFileName);
            fileName += newFileName;
            if (log.isDebugEnabled()) log.debug("file to write " + fileName);
            InputStream is = url.openStream();
            FileOutputStream fos = new FileOutputStream(new File(fileName));
            byte bytes[] = new byte[1000];
            int count = 0;
            while ((count = is.read(bytes)) != -1) {
                fos.write(bytes, 0, count);
            }
            fos.close();
            fos = null;
            is.close();
            is = null;
            url = null;
            out.write(DateUtils.getCurrentDate("dd-MMMM-yyyy HH:mm:ss:SS", renderRequest.getLocale()) + "<br>");
            ps = dbDyn.prepareStatement("insert into WM_IMAGE_DIR " + "( id_image_dir, ID_FIRM, is_group, id, id_main, name_file, description )" + "(select seq_WM_IMAGE_DIR.nextval, ID_FIRM, 0, ?, ?, ?, ? " + " from WM_AUTH_USER where user_login = ? )");
            RsetTools.setLong(ps, 1, currID);
            RsetTools.setLong(ps, 2, id_main);
            ps.setString(3, "/image/" + newFileName);
            ps.setString(4, desc);
            ps.setString(5, auth_.getUserLogin());
            ps.executeUpdate();
            dbDyn.commit();
            out.write("                                 <br>" + "              " + newFileName + "<br>" + DateUtils.getCurrentDate("dd-MMMM-yyyy HH:mm:ss:SS", renderRequest.getLocale()) + "<br>" + "<br>" + "<p><a href=\"" + PortletService.url("mill.image.index", renderRequest, renderResponse) + "\">                         </a></p><br>" + "<p><a href=\"" + PortletService.url(ContainerConstants.CTX_TYPE_INDEX, renderRequest, renderResponse) + "\">                   </a></p>");
        } catch (Exception e) {
            try {
                dbDyn.rollback();
            } catch (Exception e1) {
            }
            final String es = "Error upload image from url";
            log.error(es, e);
            throw new PortletException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
} </s>
<s>class temp {    private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError {
        boolean closeStream = false;
        if (aOutputStream == null) try {
            aOutputStream = new ZipOutputStream(new FileOutputStream(sArchive));
            closeStream = true;
        } catch (final FileNotFoundException e) {
            throw new FileError("Can't create ODF file!", e);
        }
        try {
            try {
                for (final File curFile : aFiles) {
                    aOutputStream.putNextEntry(new ZipEntry(URLDecoder.decode(aRootURI.relativize(curFile.toURI()).toASCIIString(), "UTF-8")));
                    if (curFile.isDirectory()) {
                        aOutputStream.closeEntry();
                        FileUtils.zip(aOutputStream, FileUtils.getFiles(curFile, sFilter), sArchive, aRootURI, sFilter);
                        continue;
                    }
                    final FileInputStream inputStream = new FileInputStream(curFile);
                    for (int i; (i = inputStream.read(FileUtils.BUFFER)) != -1; ) aOutputStream.write(FileUtils.BUFFER, 0, i);
                    inputStream.close();
                    aOutputStream.closeEntry();
                }
            } finally {
                if (closeStream && aOutputStream != null) aOutputStream.close();
            }
        } catch (final IOException e) {
            throw new FileError("Can't zip file to archive!", e);
        }
        if (closeStream) DocumentController.getStaticLogger().fine(aFiles.length + " files and folders zipped as " + sArchive);
    }
} </s>
<s>class temp {        public ActualTask(TEditor editor, TIGDataBase dataBase, String directoryPath, Vector images) {
            int i;
            lengthOfTask = images.size();
            Element dataBaseXML = new Element("dataBase");
            for (i = 0; ((i < images.size()) && !stop && !cancel); i++) {
                Vector imagen = new Vector(2);
                imagen = (Vector) images.elementAt(i);
                String element = (String) imagen.elementAt(0);
                current = i;
                String pathSrc = System.getProperty("user.dir") + File.separator + "images" + File.separator + element.substring(0, 1).toUpperCase() + File.separator + element;
                String name = pathSrc.substring(pathSrc.lastIndexOf(File.separator) + 1, pathSrc.length());
                String pathDst = directoryPath + name;
                try {
                    FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                    FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException exc) {
                    System.out.println(exc.getMessage());
                    System.out.println(exc.toString());
                }
                Vector<String> keyWords = new Vector<String>();
                keyWords = TIGDataBase.asociatedConceptSearch(element);
                Element image = new Element("image");
                image.setAttribute("name", name);
                if (keyWords.size() != 0) {
                    for (int k = 0; k < keyWords.size(); k++) {
                        Element category = new Element("category");
                        category.setText(keyWords.get(k).trim());
                        image.addContent(category);
                    }
                }
                dataBaseXML.addContent(image);
            }
            Document doc = new Document(dataBaseXML);
            try {
                XMLOutputter out = new XMLOutputter();
                FileOutputStream f = new FileOutputStream(directoryPath + "images.xml");
                out.output(doc, f);
                f.flush();
                f.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            current = lengthOfTask;
        }
} </s>
<s>class temp {    public static void creme_connect(String email, String username, String password, String IDnumber, TRP[] trp_array, GTRN[] gtrn_array, FLUX[] flux_array, TRANS[] trans_array, LETSPEC[] letspec_array, PUP[] pup_array, HUP[] hup_array, DOSE[] dose_array) {
        int num_of_files = trp_array.length + gtrn_array.length + flux_array.length + trans_array.length + letspec_array.length + pup_array.length + hup_array.length + dose_array.length;
        int index = 0;
        String[] files_to_upload = new String[num_of_files];
        for (int a = 0; a < trp_array.length; a++) {
            files_to_upload[index] = trp_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < gtrn_array.length; a++) {
            files_to_upload[index] = gtrn_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < flux_array.length; a++) {
            files_to_upload[index] = flux_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < trans_array.length; a++) {
            files_to_upload[index] = trans_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < letspec_array.length; a++) {
            files_to_upload[index] = letspec_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < pup_array.length; a++) {
            files_to_upload[index] = pup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < hup_array.length; a++) {
            files_to_upload[index] = hup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < dose_array.length; a++) {
            files_to_upload[index] = dose_array[a].getThisFileName();
            index++;
        }
        Logger log = Logger.getLogger(CreateAStudy.class);
        String host = "creme96.nrl.navy.mil";
        String user = "anonymous";
        String ftppass = email;
        Logger.setLevel(Level.ALL);
        FTPClient ftp = null;
        try {
            ftp = new FTPClient();
            ftp.setRemoteHost(host);
            FTPMessageCollector listener = new FTPMessageCollector();
            ftp.setMessageListener(listener);
            log.info("Connecting");
            ftp.connect();
            log.info("Logging in");
            ftp.login(user, ftppass);
            log.debug("Setting up passive, ASCII transfers");
            ftp.setConnectMode(FTPConnectMode.ACTIVE);
            ftp.setType(FTPTransferType.BINARY);
            log.info("Putting file");
            for (int u = 0; u < files_to_upload.length; u++) {
                ftp.put(files_to_upload[u], files_to_upload[u]);
            }
            log.info("Quitting client");
            ftp.quit();
            log.debug("Listener log:");
            log.info("Test complete");
        } catch (Exception e) {
            log.error("Demo failed", e);
            e.printStackTrace();
        }
        System.out.println("Finished FTPing User Request Files to common directory");
        Upload_Files.upload(files_to_upload, username, password, IDnumber);
        System.out.println("Finished transfering User Request Files to your CREME96 personal directory");
        RunRoutines.routines(files_to_upload, username, password, IDnumber);
        System.out.println("Finished running all of your uploaded routines");
    }
} </s>
<s>class temp {    public boolean openInputStream() throws Exception {
        open = false;
        if (filename == null) return false;
        try {
            url = new URL(filename);
            con = url.openConnection();
            con.connect();
            lengthOfData = con.getContentLength();
            System.out.println(" headers for url: " + url);
            System.out.println(" lengthOfData = " + lengthOfData);
            Map m = con.getHeaderFields();
            Set s = m.keySet();
            Iterator i = s.iterator();
            while (i.hasNext()) {
                String x = (String) i.next();
                Object o = m.get(x);
                String y = null;
                if (o instanceof String) y = (String) o; else if (o instanceof Collection) y = "" + (Collection) o; else if (o instanceof Integer) y = "" + (Integer) o; else y = o.getClass().getName();
                System.out.println(" header " + x + " = " + y);
            }
            infile = new DataInputStream(con.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
        open = true;
        count = 0;
        countLastRead = 0;
        return true;
    }
} </s>
<s>class temp {    private static void tryToMerge(String url) {
        if ("none".equalsIgnoreCase(url)) return;
        Properties nullProps = new Properties();
        FileProperties propsIn = new FileProperties(nullProps, nullProps);
        try {
            propsIn.load(new URL(url).openStream());
        } catch (Exception e) {
        }
        if (propsIn.isEmpty()) return;
        for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry e = (Map.Entry) i.next();
            String propKey = ((String) e.getKey()).trim();
            if (!propKey.startsWith(MERGE_PROP_PREFIX)) continue;
            String settingName = propKey.substring(MERGE_PROP_PREFIX.length());
            if (getVal(settingName) == null) {
                String settingVal = ((String) e.getValue()).trim();
                set(settingName, settingVal);
            }
        }
    }
} </s>
<s>class temp {    public MusicBrainzXMLParser(URL url) throws DocumentException, IOException {
        URLConnection urlConnection = url.openConnection();
        InputStream httpStream = urlConnection.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(httpStream, "ISO-8859-1"));
        SAXReader reader = new SAXReader();
        doc = reader.read(br);
        br.close();
    }
} </s>
<s>class temp {    public String Hash(String plain) {
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(plain.getBytes(), 0, plain.length());
            return new BigInteger(1, md5.digest()).toString(16);
        } catch (Exception ex) {
            Log.serverlogger.warn("No such Hash algorithm", ex);
            return "";
        }
    }
} </s>
<s>class temp {    public Certificate(URL url) throws CertificateException {
        try {
            URLConnection con = url.openConnection();
            InputStream in2 = con.getInputStream();
            BufferedReader in = new BufferedReader(new InputStreamReader(in2));
            String inputLine;
            StringBuffer cert = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                cert.append(inputLine);
                cert.append("\n");
            }
            in.close();
            this.certificate = cert.toString();
        } catch (IOException ex) {
            throw new CertificateException("Unable to read in credential: " + ex.getMessage(), ex);
        }
        loadCredential(this.certificate);
    }
} </s>
<s>class temp {    public void bubbleSort(int[] arr) {
        BasicProcessor.getInstance().getStartBlock();
        BasicProcessor.getInstance().getVarDeclaration();
        boolean swapped = true;
        BasicProcessor.getInstance().getVarDeclaration();
        int j = 0;
        BasicProcessor.getInstance().getVarDeclaration();
        int tmp;
        {
            BasicProcessor.getInstance().getWhileStatement();
            while (swapped) {
                BasicProcessor.getInstance().getStartBlock();
                swapped = false;
                j++;
                {
                    BasicProcessor.getInstance().getForStatement();
                    for (int i = 0; i < arr.length - j; i++) {
                        BasicProcessor.getInstance().getStartBlock();
                        {
                            BasicProcessor.getInstance().getIfStatement();
                            if (arr[i] > arr[i + 1]) {
                                BasicProcessor.getInstance().getStartBlock();
                                tmp = arr[i];
                                arr[i] = arr[i + 1];
                                arr[i + 1] = tmp;
                                swapped = true;
                                BasicProcessor.getInstance().getEndBlock();
                            }
                        }
                        BasicProcessor.getInstance().getEndBlock();
                    }
                }
                BasicProcessor.getInstance().getEndBlock();
            }
        }
        BasicProcessor.getInstance().getEndBlock();
    }
} </s>
<s>class temp {    public static void main(String argv[]) {
        Matrix A, B, C, Z, O, I, R, S, X, SUB, M, T, SQ, DEF, SOL;
        int errorCount = 0;
        int warningCount = 0;
        double tmp, s;
        double[] columnwise = { 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12. };
        double[] rowwise = { 1., 4., 7., 10., 2., 5., 8., 11., 3., 6., 9., 12. };
        double[][] avals = { { 1., 4., 7., 10. }, { 2., 5., 8., 11. }, { 3., 6., 9., 12. } };
        double[][] rankdef = avals;
        double[][] tvals = { { 1., 2., 3. }, { 4., 5., 6. }, { 7., 8., 9. }, { 10., 11., 12. } };
        double[][] subavals = { { 5., 8., 11. }, { 6., 9., 12. } };
        double[][] rvals = { { 1., 4., 7. }, { 2., 5., 8., 11. }, { 3., 6., 9., 12. } };
        double[][] pvals = { { 1., 1., 1. }, { 1., 2., 3. }, { 1., 3., 6. } };
        double[][] ivals = { { 1., 0., 0., 0. }, { 0., 1., 0., 0. }, { 0., 0., 1., 0. } };
        double[][] evals = { { 0., 1., 0., 0. }, { 1., 0., 2.e-7, 0. }, { 0., -2.e-7, 0., 1. }, { 0., 0., 1., 0. } };
        double[][] square = { { 166., 188., 210. }, { 188., 214., 240. }, { 210., 240., 270. } };
        double[][] sqSolution = { { 13. }, { 15. } };
        double[][] condmat = { { 1., 3. }, { 7., 9. } };
        int rows = 3, cols = 4;
        int invalidld = 5;
        int raggedr = 0;
        int raggedc = 4;
        int validld = 3;
        int nonconformld = 4;
        int ib = 1, ie = 2, jb = 1, je = 3;
        int[] rowindexset = { 1, 2 };
        int[] badrowindexset = { 1, 3 };
        int[] columnindexset = { 1, 2, 3 };
        int[] badcolumnindexset = { 1, 2, 4 };
        double columnsummax = 33.;
        double rowsummax = 30.;
        double sumofdiagonals = 15;
        double sumofsquares = 650;
        print("\nTesting constructors and constructor-like methods...\n");
        try {
            A = new Matrix(columnwise, invalidld);
            errorCount = try_failure(errorCount, "Catch invalid length in packed constructor... ", "exception not thrown for invalid input");
        } catch (IllegalArgumentException e) {
            try_success("Catch invalid length in packed constructor... ", e.getMessage());
        }
        try {
            A = new Matrix(rvals);
            tmp = A.get(raggedr, raggedc);
        } catch (IllegalArgumentException e) {
            try_success("Catch ragged input to default constructor... ", e.getMessage());
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, "Catch ragged input to constructor... ", "exception not thrown in construction...ArrayIndexOutOfBoundsException thrown later");
        }
        try {
            A = Matrix.constructWithCopy(rvals);
            tmp = A.get(raggedr, raggedc);
        } catch (IllegalArgumentException e) {
            try_success("Catch ragged input to constructWithCopy... ", e.getMessage());
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, "Catch ragged input to constructWithCopy... ", "exception not thrown in construction...ArrayIndexOutOfBoundsException thrown later");
        }
        A = new Matrix(columnwise, validld);
        B = new Matrix(avals);
        tmp = B.get(0, 0);
        avals[0][0] = 0.0;
        C = B.minus(A);
        avals[0][0] = tmp;
        B = Matrix.constructWithCopy(avals);
        tmp = B.get(0, 0);
        avals[0][0] = 0.0;
        if ((tmp - B.get(0, 0)) != 0.0) {
            errorCount = try_failure(errorCount, "constructWithCopy... ", "copy not effected... data visible outside");
        } else {
            try_success("constructWithCopy... ", "");
        }
        avals[0][0] = columnwise[0];
        I = new Matrix(ivals);
        try {
            check(I, Matrix.identity(3, 4));
            try_success("identity... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "identity... ", "identity Matrix not successfully created");
        }
        print("\nTesting access methods...\n");
        B = new Matrix(avals);
        if (B.getRowDimension() != rows) {
            errorCount = try_failure(errorCount, "getRowDimension... ", "");
        } else {
            try_success("getRowDimension... ", "");
        }
        if (B.getColumnDimension() != cols) {
            errorCount = try_failure(errorCount, "getColumnDimension... ", "");
        } else {
            try_success("getColumnDimension... ", "");
        }
        B = new Matrix(avals);
        double[][] barray = B.getArray();
        if (barray != avals) {
            errorCount = try_failure(errorCount, "getArray... ", "");
        } else {
            try_success("getArray... ", "");
        }
        barray = B.getArrayCopy();
        if (barray == avals) {
            errorCount = try_failure(errorCount, "getArrayCopy... ", "data not (deep) copied");
        }
        try {
            check(barray, avals);
            try_success("getArrayCopy... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "getArrayCopy... ", "data not successfully (deep) copied");
        }
        double[] bpacked = B.getColumnPackedCopy();
        try {
            check(bpacked, columnwise);
            try_success("getColumnPackedCopy... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "getColumnPackedCopy... ", "data not successfully (deep) copied by columns");
        }
        bpacked = B.getRowPackedCopy();
        try {
            check(bpacked, rowwise);
            try_success("getRowPackedCopy... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "getRowPackedCopy... ", "data not successfully (deep) copied by rows");
        }
        try {
            tmp = B.get(B.getRowDimension(), B.getColumnDimension() - 1);
            errorCount = try_failure(errorCount, "get(int,int)... ", "OutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                tmp = B.get(B.getRowDimension() - 1, B.getColumnDimension());
                errorCount = try_failure(errorCount, "get(int,int)... ", "OutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("get(int,int)... OutofBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "get(int,int)... ", "OutOfBoundsException expected but not thrown");
        }
        try {
            if (B.get(B.getRowDimension() - 1, B.getColumnDimension() - 1) != avals[B.getRowDimension() - 1][B.getColumnDimension() - 1]) {
                errorCount = try_failure(errorCount, "get(int,int)... ", "Matrix entry (i,j) not successfully retreived");
            } else {
                try_success("get(int,int)... ", "");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, "get(int,int)... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        SUB = new Matrix(subavals);
        try {
            M = B.getMatrix(ib, ie + B.getRowDimension() + 1, jb, je);
            errorCount = try_failure(errorCount, "getMatrix(int,int,int,int)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(ib, ie, jb, je + B.getColumnDimension() + 1);
                errorCount = try_failure(errorCount, "getMatrix(int,int,int,int)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("getMatrix(int,int,int,int)... ArrayIndexOutOfBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "getMatrix(int,int,int,int)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        }
        try {
            M = B.getMatrix(ib, ie, jb, je);
            try {
                check(SUB, M);
                try_success("getMatrix(int,int,int,int)... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "getMatrix(int,int,int,int)... ", "submatrix not successfully retreived");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, "getMatrix(int,int,int,int)... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        try {
            M = B.getMatrix(ib, ie, badcolumnindexset);
            errorCount = try_failure(errorCount, "getMatrix(int,int,int[])... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(ib, ie + B.getRowDimension() + 1, columnindexset);
                errorCount = try_failure(errorCount, "getMatrix(int,int,int[])... ", "ArrayIndexOutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("getMatrix(int,int,int[])... ArrayIndexOutOfBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "getMatrix(int,int,int[])... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        }
        try {
            M = B.getMatrix(ib, ie, columnindexset);
            try {
                check(SUB, M);
                try_success("getMatrix(int,int,int[])... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "getMatrix(int,int,int[])... ", "submatrix not successfully retreived");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, "getMatrix(int,int,int[])... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        try {
            M = B.getMatrix(badrowindexset, jb, je);
            errorCount = try_failure(errorCount, "getMatrix(int[],int,int)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(rowindexset, jb, je + B.getColumnDimension() + 1);
                errorCount = try_failure(errorCount, "getMatrix(int[],int,int)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("getMatrix(int[],int,int)... ArrayIndexOutOfBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "getMatrix(int[],int,int)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        }
        try {
            M = B.getMatrix(rowindexset, jb, je);
            try {
                check(SUB, M);
                try_success("getMatrix(int[],int,int)... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "getMatrix(int[],int,int)... ", "submatrix not successfully retreived");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, "getMatrix(int[],int,int)... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        try {
            M = B.getMatrix(badrowindexset, columnindexset);
            errorCount = try_failure(errorCount, "getMatrix(int[],int[])... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(rowindexset, badcolumnindexset);
                errorCount = try_failure(errorCount, "getMatrix(int[],int[])... ", "ArrayIndexOutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("getMatrix(int[],int[])... ArrayIndexOutOfBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "getMatrix(int[],int[])... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        }
        try {
            M = B.getMatrix(rowindexset, columnindexset);
            try {
                check(SUB, M);
                try_success("getMatrix(int[],int[])... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "getMatrix(int[],int[])... ", "submatrix not successfully retreived");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, "getMatrix(int[],int[])... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        try {
            B.set(B.getRowDimension(), B.getColumnDimension() - 1, 0.);
            errorCount = try_failure(errorCount, "set(int,int,double)... ", "OutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.set(B.getRowDimension() - 1, B.getColumnDimension(), 0.);
                errorCount = try_failure(errorCount, "set(int,int,double)... ", "OutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("set(int,int,double)... OutofBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "set(int,int,double)... ", "OutOfBoundsException expected but not thrown");
        }
        try {
            B.set(ib, jb, 0.);
            tmp = B.get(ib, jb);
            try {
                check(tmp, 0.);
                try_success("set(int,int,double)... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "set(int,int,double)... ", "Matrix element not successfully set");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, "set(int,int,double)... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        M = new Matrix(2, 3, 0.);
        try {
            B.setMatrix(ib, ie + B.getRowDimension() + 1, jb, je, M);
            errorCount = try_failure(errorCount, "setMatrix(int,int,int,int,Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(ib, ie, jb, je + B.getColumnDimension() + 1, M);
                errorCount = try_failure(errorCount, "setMatrix(int,int,int,int,Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("setMatrix(int,int,int,int,Matrix)... ArrayIndexOutOfBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "setMatrix(int,int,int,int,Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        }
        try {
            B.setMatrix(ib, ie, jb, je, M);
            try {
                check(M.minus(B.getMatrix(ib, ie, jb, je)), M);
                try_success("setMatrix(int,int,int,int,Matrix)... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "setMatrix(int,int,int,int,Matrix)... ", "submatrix not successfully set");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, "setMatrix(int,int,int,int,Matrix)... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        try {
            B.setMatrix(ib, ie + B.getRowDimension() + 1, columnindexset, M);
            errorCount = try_failure(errorCount, "setMatrix(int,int,int[],Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(ib, ie, badcolumnindexset, M);
                errorCount = try_failure(errorCount, "setMatrix(int,int,int[],Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("setMatrix(int,int,int[],Matrix)... ArrayIndexOutOfBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "setMatrix(int,int,int[],Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        }
        try {
            B.setMatrix(ib, ie, columnindexset, M);
            try {
                check(M.minus(B.getMatrix(ib, ie, columnindexset)), M);
                try_success("setMatrix(int,int,int[],Matrix)... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "setMatrix(int,int,int[],Matrix)... ", "submatrix not successfully set");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, "setMatrix(int,int,int[],Matrix)... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        try {
            B.setMatrix(rowindexset, jb, je + B.getColumnDimension() + 1, M);
            errorCount = try_failure(errorCount, "setMatrix(int[],int,int,Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(badrowindexset, jb, je, M);
                errorCount = try_failure(errorCount, "setMatrix(int[],int,int,Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("setMatrix(int[],int,int,Matrix)... ArrayIndexOutOfBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "setMatrix(int[],int,int,Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        }
        try {
            B.setMatrix(rowindexset, jb, je, M);
            try {
                check(M.minus(B.getMatrix(rowindexset, jb, je)), M);
                try_success("setMatrix(int[],int,int,Matrix)... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "setMatrix(int[],int,int,Matrix)... ", "submatrix not successfully set");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, "setMatrix(int[],int,int,Matrix)... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        try {
            B.setMatrix(rowindexset, badcolumnindexset, M);
            errorCount = try_failure(errorCount, "setMatrix(int[],int[],Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(badrowindexset, columnindexset, M);
                errorCount = try_failure(errorCount, "setMatrix(int[],int[],Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success("setMatrix(int[],int[],Matrix)... ArrayIndexOutOfBoundsException... ", "");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "setMatrix(int[],int[],Matrix)... ", "ArrayIndexOutOfBoundsException expected but not thrown");
        }
        try {
            B.setMatrix(rowindexset, columnindexset, M);
            try {
                check(M.minus(B.getMatrix(rowindexset, columnindexset)), M);
                try_success("setMatrix(int[],int[],Matrix)... ", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "setMatrix(int[],int[],Matrix)... ", "submatrix not successfully set");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, "setMatrix(int[],int[],Matrix)... ", "Unexpected ArrayIndexOutOfBoundsException");
        }
        print("\nTesting array-like methods...\n");
        S = new Matrix(columnwise, nonconformld);
        R = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        A = R;
        try {
            S = A.minus(S);
            errorCount = try_failure(errorCount, "minus conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("minus conformance check... ", "");
        }
        if (A.minus(R).norm1() != 0.) {
            errorCount = try_failure(errorCount, "minus... ", "(difference of identical Matrices is nonzero,\nSubsequent use of minus should be suspect)");
        } else {
            try_success("minus... ", "");
        }
        A = R.copy();
        A.minusEquals(R);
        Z = new Matrix(A.getRowDimension(), A.getColumnDimension());
        try {
            A.minusEquals(S);
            errorCount = try_failure(errorCount, "minusEquals conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("minusEquals conformance check... ", "");
        }
        if (A.minus(Z).norm1() != 0.) {
            errorCount = try_failure(errorCount, "minusEquals... ", "(difference of identical Matrices is nonzero,\nSubsequent use of minus should be suspect)");
        } else {
            try_success("minusEquals... ", "");
        }
        A = R.copy();
        B = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        C = A.minus(B);
        try {
            S = A.plus(S);
            errorCount = try_failure(errorCount, "plus conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("plus conformance check... ", "");
        }
        try {
            check(C.plus(B), A);
            try_success("plus... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "plus... ", "(C = A - B, but C + B != A)");
        }
        C = A.minus(B);
        C.plusEquals(B);
        try {
            A.plusEquals(S);
            errorCount = try_failure(errorCount, "plusEquals conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("plusEquals conformance check... ", "");
        }
        try {
            check(C, A);
            try_success("plusEquals... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "plusEquals... ", "(C = A - B, but C = C + B != A)");
        }
        A = R.uminus();
        try {
            check(A.plus(R), Z);
            try_success("uminus... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "uminus... ", "(-A + A != zeros)");
        }
        A = R.copy();
        O = new Matrix(A.getRowDimension(), A.getColumnDimension(), 1.0);
        C = A.arrayLeftDivide(R);
        try {
            S = A.arrayLeftDivide(S);
            errorCount = try_failure(errorCount, "arrayLeftDivide conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("arrayLeftDivide conformance check... ", "");
        }
        try {
            check(C, O);
            try_success("arrayLeftDivide... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "arrayLeftDivide... ", "(M.\\M != ones)");
        }
        try {
            A.arrayLeftDivideEquals(S);
            errorCount = try_failure(errorCount, "arrayLeftDivideEquals conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("arrayLeftDivideEquals conformance check... ", "");
        }
        A.arrayLeftDivideEquals(R);
        try {
            check(A, O);
            try_success("arrayLeftDivideEquals... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "arrayLeftDivideEquals... ", "(M.\\M != ones)");
        }
        A = R.copy();
        try {
            A.arrayRightDivide(S);
            errorCount = try_failure(errorCount, "arrayRightDivide conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("arrayRightDivide conformance check... ", "");
        }
        C = A.arrayRightDivide(R);
        try {
            check(C, O);
            try_success("arrayRightDivide... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "arrayRightDivide... ", "(M./M != ones)");
        }
        try {
            A.arrayRightDivideEquals(S);
            errorCount = try_failure(errorCount, "arrayRightDivideEquals conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("arrayRightDivideEquals conformance check... ", "");
        }
        A.arrayRightDivideEquals(R);
        try {
            check(A, O);
            try_success("arrayRightDivideEquals... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "arrayRightDivideEquals... ", "(M./M != ones)");
        }
        A = R.copy();
        B = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        try {
            S = A.arrayTimes(S);
            errorCount = try_failure(errorCount, "arrayTimes conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("arrayTimes conformance check... ", "");
        }
        C = A.arrayTimes(B);
        try {
            check(C.arrayRightDivideEquals(B), A);
            try_success("arrayTimes... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "arrayTimes... ", "(A = R, C = A.*B, but C./B != A)");
        }
        try {
            A.arrayTimesEquals(S);
            errorCount = try_failure(errorCount, "arrayTimesEquals conformance check... ", "nonconformance not raised");
        } catch (IllegalArgumentException e) {
            try_success("arrayTimesEquals conformance check... ", "");
        }
        A.arrayTimesEquals(B);
        try {
            check(A.arrayRightDivideEquals(B), R);
            try_success("arrayTimesEquals... ", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "arrayTimesEquals... ", "(A = R, A = A.*B, but A./B != R)");
        }
        print("\nTesting I/O methods...\n");
        try {
            DecimalFormat fmt = new DecimalFormat("0.0000E00");
            fmt.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
            PrintWriter FILE = new PrintWriter(new FileOutputStream("JamaTestMatrix.out"));
            A.print(FILE, fmt, 10);
            FILE.close();
            R = Matrix.read(new BufferedReader(new FileReader("JamaTestMatrix.out")));
            if (A.minus(R).norm1() < .001) {
                try_success("print()/read()...", "");
            } else {
                errorCount = try_failure(errorCount, "print()/read()...", "Matrix read from file does not match Matrix printed to file");
            }
        } catch (java.io.IOException ioe) {
            warningCount = try_warning(warningCount, "print()/read()...", "unexpected I/O error, unable to run print/read test;  check write permission in current directory and retry");
        } catch (Exception e) {
            try {
                e.printStackTrace(System.out);
                warningCount = try_warning(warningCount, "print()/read()...", "Formatting error... will try JDK1.1 reformulation...");
                DecimalFormat fmt = new DecimalFormat("0.0000");
                PrintWriter FILE = new PrintWriter(new FileOutputStream("JamaTestMatrix.out"));
                A.print(FILE, fmt, 10);
                FILE.close();
                R = Matrix.read(new BufferedReader(new FileReader("JamaTestMatrix.out")));
                if (A.minus(R).norm1() < .001) {
                    try_success("print()/read()...", "");
                } else {
                    errorCount = try_failure(errorCount, "print()/read() (2nd attempt) ...", "Matrix read from file does not match Matrix printed to file");
                }
            } catch (java.io.IOException ioe) {
                warningCount = try_warning(warningCount, "print()/read()...", "unexpected I/O error, unable to run print/read test;  check write permission in current directory and retry");
            }
        }
        R = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        String tmpname = "TMPMATRIX.serial";
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(tmpname));
            out.writeObject(R);
            ObjectInputStream sin = new ObjectInputStream(new FileInputStream(tmpname));
            A = (Matrix) sin.readObject();
            try {
                check(A, R);
                try_success("writeObject(Matrix)/readObject(Matrix)...", "");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, "writeObject(Matrix)/readObject(Matrix)...", "Matrix not serialized correctly");
            }
        } catch (java.io.IOException ioe) {
            warningCount = try_warning(warningCount, "writeObject()/readObject()...", "unexpected I/O error, unable to run serialization test;  check write permission in current directory and retry");
        } catch (Exception e) {
            errorCount = try_failure(errorCount, "writeObject(Matrix)/readObject(Matrix)...", "unexpected error in serialization test");
        }
        print("\nTesting linear algebra methods...\n");
        A = new Matrix(columnwise, 3);
        T = new Matrix(tvals);
        T = A.transpose();
        try {
            check(A.transpose(), T);
            try_success("transpose...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "transpose()...", "transpose unsuccessful");
        }
        A.transpose();
        try {
            check(A.norm1(), columnsummax);
            try_success("norm1...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "norm1()...", "incorrect norm calculation");
        }
        try {
            check(A.normInf(), rowsummax);
            try_success("normInf()...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "normInf()...", "incorrect norm calculation");
        }
        try {
            check(A.normF(), Math.sqrt(sumofsquares));
            try_success("normF...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "normF()...", "incorrect norm calculation");
        }
        try {
            check(A.trace(), sumofdiagonals);
            try_success("trace()...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "trace()...", "incorrect trace calculation");
        }
        try {
            check(A.getMatrix(0, A.getRowDimension() - 1, 0, A.getRowDimension() - 1).det(), 0.);
            try_success("det()...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "det()...", "incorrect determinant calculation");
        }
        SQ = new Matrix(square);
        try {
            check(A.times(A.transpose()), SQ);
            try_success("times(Matrix)...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "times(Matrix)...", "incorrect Matrix-Matrix product calculation");
        }
        try {
            check(A.times(0.), Z);
            try_success("times(double)...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "times(double)...", "incorrect Matrix-scalar product calculation");
        }
        A = new Matrix(columnwise, 4);
        QRDecomposition QR = A.qr();
        R = QR.getR();
        try {
            check(A, QR.getQ().times(R));
            try_success("QRDecomposition...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "QRDecomposition...", "incorrect QR decomposition calculation");
        }
        SingularValueDecomposition SVD = A.svd();
        try {
            check(A, SVD.getU().times(SVD.getS().times(SVD.getV().transpose())));
            try_success("SingularValueDecomposition...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "SingularValueDecomposition...", "incorrect singular value decomposition calculation");
        }
        DEF = new Matrix(rankdef);
        try {
            check(DEF.rank(), Math.min(DEF.getRowDimension(), DEF.getColumnDimension()) - 1);
            try_success("rank()...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "rank()...", "incorrect rank calculation");
        }
        B = new Matrix(condmat);
        SVD = B.svd();
        double[] singularvalues = SVD.getSingularValues();
        try {
            check(B.cond(), singularvalues[0] / singularvalues[Math.min(B.getRowDimension(), B.getColumnDimension()) - 1]);
            try_success("cond()...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "cond()...", "incorrect condition number calculation");
        }
        int n = A.getColumnDimension();
        A = A.getMatrix(0, n - 1, 0, n - 1);
        A.set(0, 0, 0.);
        LUDecomposition LU = A.lu();
        try {
            check(A.getMatrix(LU.getPivot(), 0, n - 1), LU.getL().times(LU.getU()));
            try_success("LUDecomposition...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "LUDecomposition...", "incorrect LU decomposition calculation");
        }
        X = A.inverse();
        try {
            check(A.times(X), Matrix.identity(3, 3));
            try_success("inverse()...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "inverse()...", "incorrect inverse calculation");
        }
        O = new Matrix(SUB.getRowDimension(), 1, 1.0);
        SOL = new Matrix(sqSolution);
        SQ = SUB.getMatrix(0, SUB.getRowDimension() - 1, 0, SUB.getRowDimension() - 1);
        try {
            check(SQ.solve(SOL), O);
            try_success("solve()...", "");
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, "solve()...", e1.getMessage());
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "solve()...", e.getMessage());
        }
        A = new Matrix(pvals);
        CholeskyDecomposition Chol = A.chol();
        Matrix L = Chol.getL();
        try {
            check(A, L.times(L.transpose()));
            try_success("CholeskyDecomposition...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "CholeskyDecomposition...", "incorrect Cholesky decomposition calculation");
        }
        X = Chol.solve(Matrix.identity(3, 3));
        try {
            check(A.times(X), Matrix.identity(3, 3));
            try_success("CholeskyDecomposition solve()...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "CholeskyDecomposition solve()...", "incorrect Choleskydecomposition solve calculation");
        }
        EigenvalueDecomposition Eig = A.eig();
        Matrix D = Eig.getD();
        Matrix V = Eig.getV();
        try {
            check(A.times(V), V.times(D));
            try_success("EigenvalueDecomposition (symmetric)...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "EigenvalueDecomposition (symmetric)...", "incorrect symmetric Eigenvalue decomposition calculation");
        }
        A = new Matrix(evals);
        Eig = A.eig();
        D = Eig.getD();
        V = Eig.getV();
        try {
            check(A.times(V), V.times(D));
            try_success("EigenvalueDecomposition (nonsymmetric)...", "");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, "EigenvalueDecomposition (nonsymmetric)...", "incorrect nonsymmetric Eigenvalue decomposition calculation");
        }
        print("\nTestMatrix completed.\n");
        print("Total errors reported: " + Integer.toString(errorCount) + "\n");
        print("Total warnings reported: " + Integer.toString(warningCount) + "\n");
    }
} </s>
<s>class temp {    public static byte[] readFile(String filePath) throws IOException {
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        FileInputStream is = new FileInputStream(filePath);
        try {
            IOUtils.copy(is, os);
            return os.toByteArray();
        } finally {
            is.close();
        }
    }
} </s>
<s>class temp {    public static String createRecoveryContent(String password) {
        try {
            password = encryptGeneral1(password);
            String data = URLEncoder.encode("key", "UTF-8") + "=" + URLEncoder.encode(password, "UTF-8");
            URL url = new URL("https://mypasswords-server.appspot.com/recovery_file");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder finalResult = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
                finalResult.append(line);
            }
            wr.close();
            rd.close();
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document document = db.parse(new InputSource(new StringReader(finalResult.toString())));
            document.normalizeDocument();
            Element root = document.getDocumentElement();
            String textContent = root.getTextContent();
            return textContent;
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return null;
    }
} </s>
<s>class temp {    public static String recoverPassword(String token) {
        try {
            token = encryptGeneral1(token);
            String data = URLEncoder.encode("key", "UTF-8") + "=" + URLEncoder.encode(token, "UTF-8");
            URL url = new URL("https://mypasswords-server.appspot.com/recover_password");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder finalResult = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
                finalResult.append(line);
            }
            wr.close();
            rd.close();
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document document = db.parse(new InputSource(new StringReader(finalResult.toString())));
            document.normalizeDocument();
            Element root = document.getDocumentElement();
            String password = root.getTextContent();
            password = decryptGeneral1(password);
            return password;
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return null;
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public void launch(String xmlControl, String xmlDoc, long docId) {
        AgentLauncher l;
        Environment env;
        Properties prop;
        Resource res;
        String token;
        String deflt;
        String answ;
        String key;
        String entry;
        ShipService service;
        de.fhg.igd.util.URL url;
        java.net.URL wsurl;
        NodeList flow;
        InputSource xmlcontrolstream;
        TreeMap results;
        synchronized (lock_) {
            if (xmlControl == null || xmlControl.length() == 0 || xmlDoc == null || xmlDoc.length() == 0) {
                System.out.println("---- Need control AND XML document! ----");
                return;
            }
            Vector v_delegations_host = new Vector();
            Vector v_delegations_url = new Vector();
            Vector v_delegations_method = new Vector();
            xmlcontrolstream = new InputSource(new StringReader(xmlControl));
            NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE);
            for (int i = 0; i < destinations.getLength(); i++) {
                if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) {
                    System.out.println(destinations.item(i).getTextContent());
                    entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST);
                    v_delegations_host.add(entry);
                    entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL);
                    v_delegations_url.add(entry);
                    entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD);
                    v_delegations_method.add(entry);
                }
            }
            token = "";
            results = new TreeMap();
            for (int i = 0; i < TOKEN_LENGTH; i++) {
                token = token + (char) (Math.random() * 26 + 65);
            }
            results.put(token, null);
            prop = AgentStructure.defaults();
            prop.setProperty(AgentStructure.PROP_AGENT_CLASS, AGENT_);
            prop.setProperty(AgentBehaviour.CTX_DOCID, String.valueOf(docId));
            prop.setProperty(AgentBehaviour.CTX_XML, xmlDoc);
            prop.setProperty("token", token);
            deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE);
            prop.setProperty(AgentStructure.PROP_AGENT_EXCLUDE, deflt + ":" + ADDITIONAL_EXCLUDES);
            service = (ShipService) getEnvironment().lookup(WhatIs.stringValue(ShipService.WHATIS));
            for (int i = 0; i < v_delegations_host.size(); i++) {
                System.out.println("\n-----SCANNING DELEGATES-----");
                System.out.println("\n-----DELEGATE " + i + "-----");
                System.out.println("-----HOST: " + i + ": " + (String) v_delegations_host.elementAt(i));
                System.out.println("-----URL: " + i + ": " + (String) v_delegations_url.elementAt(i));
                System.out.println("-----METHOD: " + i + ": " + (String) v_delegations_method.elementAt(i));
                try {
                    url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i));
                    boolean alive = service.isAlive(url);
                    System.out.println("-----ALIVE: " + alive);
                    if (alive) {
                        wsurl = new java.net.URL((String) v_delegations_url.elementAt(i));
                        try {
                            wsurl.openStream();
                            System.out.println("-----WEBSERVICE: ON");
                            if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) {
                                System.out.println("-----MIGRATION: First online host found. I will migrate here:)!");
                                prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i));
                                prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i));
                                prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i));
                            } else {
                                System.out.println("-----MIGRATION: I will not migrate here:(!");
                            }
                        } catch (IOException ex) {
                            System.out.println("-----WEBSERVICE: Could not connect to the webservice!");
                            System.out.println("-----MIGRATION: WEBSERVICE NOT FOUND! I will not migrate here:(!");
                        }
                    }
                } catch (ShipException she) {
                    System.out.println("-----ALIVE: false");
                    System.out.println("-----MIGRATION: HOST NOT FOUND! I will not migrate here:(!");
                } catch (SecurityException see) {
                    System.out.println("-----EXCEPTION: Access connection to remote SHIP service fails! " + "No proper ShipPermission permission to invoke lookups! " + "Ignoring this host....");
                } catch (MalformedURLException murle) {
                    System.out.println("-----EXCEPTION: The host URL is not valid! Ignoring this host....");
                }
            }
            res = new MemoryResource();
            env = Environment.getEnvironment();
            key = WhatIs.stringValue(AgentLauncher.WHATIS);
            l = (AgentLauncher) env.lookup(key);
            if (l == null) {
                System.out.println("Can't find the agent launcher");
                return;
            }
            try {
                l.launchAgent(res, prop);
            } catch (IllegalAgentException ex) {
                System.out.println(ex);
            } catch (GeneralSecurityException ex) {
                System.out.println(ex);
            } catch (IOException ex) {
                System.out.println(ex);
            }
            syncmap_.put(token, results);
            System.out.println("----- TOKEN = " + token + "------");
        }
        try {
            synchronized (token) {
                token.wait(TIMEOUT);
                Map m_results = (Map) syncmap_.get(token);
                Collection c_results = m_results.values();
                String[] sa_results = (String[]) c_results.toArray(new String[0]);
                answ = "";
                for (int j = 0; j < sa_results.length; j++) {
                    answ = answ + sa_results[j];
                }
                syncmap_.remove(token);
                System.out.println("----- " + answ + " -----");
                callbackWS(xmlControl, answ, docId);
            }
        } catch (InterruptedException ex) {
            System.out.println(ex);
        }
    }
} </s>
<s>class temp {    private void callbackWS(String xmlControl, String ws_results, long docId) {
        SimpleProvider config;
        Service service;
        Object ret;
        Call call;
        Object[] parameter;
        String method;
        String wsurl;
        URL url;
        NodeList delegateNodes;
        Node actualNode;
        InputSource xmlcontrolstream;
        try {
            xmlcontrolstream = new InputSource(new StringReader(xmlControl));
            delegateNodes = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_CALLBACK);
            actualNode = delegateNodes.item(0);
            wsurl = SimpleXMLParser.findChildEntry(actualNode, AgentBehaviour.XML_URL);
            method = SimpleXMLParser.findChildEntry(actualNode, AgentBehaviour.XML_METHOD);
            if (wsurl == null || method == null) {
                System.out.println("----- Did not get method or wsurl from the properties! -----");
                return;
            }
            url = new java.net.URL(wsurl);
            try {
                url.openConnection().connect();
            } catch (IOException ex) {
                System.out.println("----- Could not connect to the webservice! -----");
            }
            Vector v_param = new Vector();
            v_param.add(ws_results);
            v_param.add(new Long(docId));
            parameter = v_param.toArray();
            config = new SimpleProvider();
            config.deployTransport("http", new HTTPSender());
            service = new Service(config);
            call = (Call) service.createCall();
            call.setTargetEndpointAddress(url);
            call.setOperationName(new QName("http://schemas.xmlsoap.org/soap/encoding/", method));
            try {
                ret = call.invoke(parameter);
                if (ret == null) {
                    ret = new String("No response from callback function!");
                }
                System.out.println("Callback function returned: " + ret);
            } catch (RemoteException ex) {
                System.out.println("----- Could not invoke the method! -----");
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }
} </s>
<s>class temp {        public void run() {
            if (currentNode == null || currentNode.equals("")) {
                JOptionPane.showMessageDialog(null, "Please select a genome to download first", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String localFile = parameter.getTemporaryFilesPath() + currentNode;
            String remotePath = NCBI_FTP_PATH + currentPath;
            String remoteFile = remotePath + "/" + currentNode;
            try {
                ftp.connect(NCBI_FTP_HOST);
                int reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    JOptionPane.showMessageDialog(null, "FTP server refused connection", "Error", JOptionPane.ERROR_MESSAGE);
                }
                ftp.login("anonymous", "anonymous@big.ac.cn");
                inProgress = true;
                ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
                long size = getFileSize(remotePath, currentNode);
                if (size == -1) throw new FileNotFoundException();
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(localFile));
                BufferedInputStream in = new BufferedInputStream(ftp.retrieveFileStream(remoteFile), ftp.getBufferSize());
                byte[] b = new byte[1024];
                long bytesTransferred = 0;
                int tick = 0;
                int oldTick = 0;
                int len;
                while ((len = in.read(b)) != -1) {
                    out.write(b, 0, len);
                    bytesTransferred += 1024;
                    if ((tick = new Long(bytesTransferred * 100 / size).intValue()) > oldTick) {
                        progressBar.setValue(tick < 100 ? tick : 99);
                        oldTick = tick;
                    }
                }
                in.close();
                out.close();
                ftp.completePendingCommand();
                progressBar.setValue(100);
                fileDownloaded = localFile;
                JOptionPane.showMessageDialog(null, "File successfully downloaded", "Congratulation!", JOptionPane.INFORMATION_MESSAGE);
                ftp.logout();
            } catch (SocketException ex) {
                JOptionPane.showMessageDialog(null, "Error occurs while trying to connect server", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "This file is not found on the server", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error occurs while fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                inProgress = false;
                if (ftp.isConnected()) {
                    try {
                        ftp.disconnect();
                    } catch (IOException ioe) {
                    }
                }
            }
        }
} </s>
<s>class temp {    public static void copyFile(String sIn, String sOut) throws IOException {
        File fIn = new File(sIn);
        File fOut = new File(sOut);
        FileChannel fcIn = new FileInputStream(fIn).getChannel();
        FileChannel fcOut = new FileOutputStream(fOut).getChannel();
        try {
            fcIn.transferTo(0, fcIn.size(), fcOut);
        } catch (IOException e) {
            throw e;
        } finally {
            if (fcIn != null) fcIn.close();
            if (fcOut != null) fcOut.close();
        }
        fOut.setReadable(fIn.canRead());
        fOut.setWritable(fIn.canWrite());
        fOut.setExecutable(fIn.canExecute());
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
} </s>
<s>class temp {    public static Vector<String> readFileFromURL(URL url) {
        Vector<String> text = new Vector<String>();
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = in.readLine()) != null) {
                text.add(line);
            }
            in.close();
        } catch (Exception e) {
            return null;
        }
        return text;
    }
} </s>
<s>class temp {    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
} </s>
<s>class temp {    protected void downloadJar(URL downloadURL, File jarFile, IProgressListener pl) {
        BufferedOutputStream out = null;
        InputStream in = null;
        URLConnection urlConnection = null;
        try {
            urlConnection = downloadURL.openConnection();
            out = new BufferedOutputStream(new FileOutputStream(jarFile));
            in = urlConnection.getInputStream();
            int len = in.available();
            Log.log("downloading jar with size: " + urlConnection.getContentLength());
            if (len < 1) len = 1024;
            byte[] buffer = new byte[len];
            while ((len = in.read(buffer)) > 0) {
                out.write(buffer, 0, len);
            }
            out.close();
            in.close();
        } catch (Exception e) {
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ignore) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
} </s>
<s>class temp {    public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception {
        pl.setName(fileName);
        pl.setProgress(0);
        pl.setFinished(false);
        pl.setStarted(true);
        String installDirName = extDir + File.separator + extName;
        Log.log("extension installation directory: " + installDirName);
        File installDir = new File(installDirName);
        if (!installDir.exists()) {
            if (!installDir.mkdirs()) {
                throw new Exception("ExtensionLoader.loadJar: Cannot create install directory: " + installDirName);
            }
        }
        URL downloadURL = new URL(url + fileName);
        File jarFile = new File(installDirName, fileName);
        File indexFile = null;
        long urlTimeStamp = downloadURL.openConnection().getLastModified();
        String indexFileName = "";
        int idx = fileName.lastIndexOf(".");
        if (idx > 0) {
            indexFileName = fileName.substring(0, idx);
        } else {
            indexFileName = fileName;
        }
        indexFileName = indexFileName + ".idx";
        Log.log("index filename: " + indexFileName);
        boolean isDirty = true;
        if (jarFile.exists()) {
            Log.log("extensionfile already exists: " + fileName);
            indexFile = new File(installDir, indexFileName);
            if (indexFile.exists()) {
                Log.log("indexfile already exists");
                long cachedTimeStamp = readTimeStamp(indexFile);
                isDirty = !(cachedTimeStamp == urlTimeStamp);
                Log.log("cached file dirty: " + isDirty + ", url timestamp: " + urlTimeStamp + " cache stamp: " + cachedTimeStamp);
            } else {
                Log.log("indexfile doesn't exist, assume cache is dirty");
            }
        }
        if (isDirty) {
            if (jarFile.exists()) {
                if (indexFile != null && indexFile.exists()) {
                    Log.log("deleting old index file");
                    indexFile.delete();
                }
                indexFile = new File(installDirName, indexFileName);
                Log.log("deleting old cached file");
                jarFile.delete();
            }
            downloadJar(downloadURL, jarFile, pl);
            indexFile = new File(installDir, indexFileName);
            Log.log("writing timestamp to index file");
            writeTimeStamp(indexFile, urlTimeStamp);
        }
        addJar(jarFile);
    }
} </s>
<s>class temp {    public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException {
        logger.debug(request.getRequestLine().toString());
        DefaultHttpClient httpclient = HttpUtil.getNewHttpClient();
        configureProxy(httpclient);
        if (login != null) {
            final String credentials = String.valueOf(Base64Encoder.encode((login + ':' + password).getBytes(CHARSET)));
            request.addHeader("Authorization", "Basic: " + credentials);
        }
        request.addHeader("Accept-Encoding", "gzip,deflate");
        HttpResponse httpResponse = httpclient.execute((HttpUriRequest) request);
        int responseCode = httpResponse.getStatusLine().getStatusCode();
        if (responseCode == HttpStatus.SC_UNAUTHORIZED) {
            throw new AuthenticationException("Authorization error. Please check if you provided a valid API access key or Login and Password and REST API service is enabled on the server.");
        }
        if (responseCode == HttpStatus.SC_FORBIDDEN) {
            throw new AuthenticationException("Forbidden. Please check the user has proper permissions.");
        }
        HttpEntity responseEntity = httpResponse.getEntity();
        String responseBody = EntityUtils.toString(responseEntity);
        if (responseCode == HttpStatus.SC_NOT_FOUND) {
            throw new NotFoundException("Server returned '404 not found'. response body:" + responseBody);
        }
        if (responseCode == HttpStatus.SC_UNPROCESSABLE_ENTITY) {
            List<String> errors = RedmineXMLParser.parseErrors(responseBody);
            throw new RedmineException(errors);
        }
        httpclient.getConnectionManager().shutdown();
        return responseBody;
    }
} </s>
