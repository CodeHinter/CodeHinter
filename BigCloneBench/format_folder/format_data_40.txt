<s>class temp {    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            logger.severe("Could not load shader program: " + e);
            logger.logp(Level.SEVERE, getClass().getName(), "load(URL)", "Exception", e);
            return null;
        }
    }
} </s>
<s>class temp {    private static String md5Encode(String pass) {
        String string;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(pass.getBytes());
            byte[] result = md.digest();
            string = bytes2hexStr(result);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("La libreria java.security no implemente MD5");
        }
        return string;
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public String getProxy(String userName, String password) throws Exception {
        URL url = new URL(httpURL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod("POST");
        ObjectOutputStream outputToServlet = new ObjectOutputStream(conn.getOutputStream());
        outputToServlet.writeObject(userName);
        outputToServlet.writeObject(password);
        outputToServlet.flush();
        outputToServlet.close();
        ObjectInputStream inputFromServlet = new ObjectInputStream(conn.getInputStream());
        return inputFromServlet.readObject() + "";
    }
} </s>
<s>class temp {    public void init() {
        super.init();
        Runnable doActions = new Runnable() {

            public void run() {
                if (_plot == null) {
                    _plot = newPlot();
                }
                getContentPane().add(plot(), BorderLayout.NORTH);
                int width;
                int height;
                String widthspec = getParameter("width");
                if (widthspec != null) {
                    width = Integer.parseInt(widthspec);
                } else {
                    width = 400;
                }
                String heightspec = getParameter("height");
                if (heightspec != null) {
                    height = Integer.parseInt(heightspec);
                } else {
                    height = 400;
                }
                _setPlotSize(width, height);
                plot().setButtons(true);
                Color background = Color.white;
                String colorspec = getParameter("background");
                if (colorspec != null) {
                    background = PlotBox.getColorByName(colorspec);
                }
                setBackground(background);
                plot().setBackground(background);
                getContentPane().setBackground(background);
                Color foreground = Color.black;
                colorspec = getParameter("foreground");
                if (colorspec != null) {
                    foreground = PlotBox.getColorByName(colorspec);
                }
                setForeground(foreground);
                plot().setForeground(foreground);
                plot().setVisible(true);
                String dataurlspec = getParameter("dataurl");
                if (dataurlspec != null) {
                    try {
                        showStatus("Reading data");
                        URL dataurl = new URL(getDocumentBase(), dataurlspec);
                        InputStream in = dataurl.openStream();
                        _read(in);
                        showStatus("Done");
                    } catch (MalformedURLException e) {
                        System.err.println(e.toString());
                    } catch (FileNotFoundException e) {
                        System.err.println("PlotApplet: file not found: " + e);
                    } catch (IOException e) {
                        System.err.println("PlotApplet: error reading input file: " + e);
                    }
                }
            }
        };
        try {
            SwingUtilities.invokeAndWait(doActions);
        } catch (Exception ex) {
        }
    }
} </s>
<s>class temp {            public void run() {
                if (_plot == null) {
                    _plot = newPlot();
                }
                getContentPane().add(plot(), BorderLayout.NORTH);
                int width;
                int height;
                String widthspec = getParameter("width");
                if (widthspec != null) {
                    width = Integer.parseInt(widthspec);
                } else {
                    width = 400;
                }
                String heightspec = getParameter("height");
                if (heightspec != null) {
                    height = Integer.parseInt(heightspec);
                } else {
                    height = 400;
                }
                _setPlotSize(width, height);
                plot().setButtons(true);
                Color background = Color.white;
                String colorspec = getParameter("background");
                if (colorspec != null) {
                    background = PlotBox.getColorByName(colorspec);
                }
                setBackground(background);
                plot().setBackground(background);
                getContentPane().setBackground(background);
                Color foreground = Color.black;
                colorspec = getParameter("foreground");
                if (colorspec != null) {
                    foreground = PlotBox.getColorByName(colorspec);
                }
                setForeground(foreground);
                plot().setForeground(foreground);
                plot().setVisible(true);
                String dataurlspec = getParameter("dataurl");
                if (dataurlspec != null) {
                    try {
                        showStatus("Reading data");
                        URL dataurl = new URL(getDocumentBase(), dataurlspec);
                        InputStream in = dataurl.openStream();
                        _read(in);
                        showStatus("Done");
                    } catch (MalformedURLException e) {
                        System.err.println(e.toString());
                    } catch (FileNotFoundException e) {
                        System.err.println("PlotApplet: file not found: " + e);
                    } catch (IOException e) {
                        System.err.println("PlotApplet: error reading input file: " + e);
                    }
                }
            }
} </s>
<s>class temp {    public static Reader getReader(String url) throws MalformedURLException, IOException {
        if (url.startsWith("file:")) return new FileReader(url.substring(5)); else if (url.startsWith("http:")) return new InputStreamReader(new URL(url).openStream());
        throw new MalformedURLException("Invalid URI schema, file: or http: expected.");
    }
} </s>
<s>class temp {    private synchronized void configure() {
        final Map res = new HashMap();
        try {
            final Enumeration resources = getConfigResources();
            SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();
            while (resources.hasMoreElements()) {
                final URL url = (URL) resources.nextElement();
                DefaultHandler saxHandler = new DefaultHandler() {

                    private Group group;

                    private StringBuffer tagContent = new StringBuffer();

                    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                        if ("group".equals(qName)) {
                            group = new Group(attributes.getValue("name"));
                            String minimizeJs = attributes.getValue("minimize");
                            String minimizeCss = attributes.getValue("minimizeCss");
                            group.setMinimize(!"false".equals(minimizeJs));
                            group.setMinimizeCss("true".equals(minimizeCss));
                        } else if ("js".equals(qName) || "css".equals(qName) || "group-ref".equals(qName)) tagContent.setLength(0);
                    }

                    public void characters(char ch[], int start, int length) throws SAXException {
                        tagContent.append(ch, start, length);
                    }

                    public void endElement(String uri, String localName, String qName) throws SAXException {
                        if ("group".equals(qName)) res.put(group.getName(), group); else if ("js".equals(qName)) group.getJsNames().add(tagContent.toString()); else if ("css".equals(qName)) group.getCssNames().add(tagContent.toString()); else if ("group-ref".equals(qName)) {
                            String name = tagContent.toString();
                            Group subGroup = (Group) res.get(name);
                            if (subGroup == null) throw new RuntimeException("Error parsing " + url.toString() + " <group-ref>" + name + "</group-ref> unknown");
                            group.getSubgroups().add(subGroup);
                        }
                    }
                };
                try {
                    saxParser.parse(url.openStream(), saxHandler);
                } catch (Throwable e) {
                    log.warn(e.toString(), e);
                    log.warn("Exception " + e.toString() + " ignored, let's move on..");
                }
            }
            configurationFilesMaxModificationTime = findMaxConfigModificationTime();
        } catch (SAXException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ParserConfigurationException e) {
            throw new RuntimeException(e);
        }
        this.groups = res;
    }
} </s>
<s>class temp {    private void pushResource(String peerId, String communityId, String resourceFilePath, List<String> attachmentFilePaths) throws IOException {
        String urlString = "http://" + peerId + "/upload";
        HttpURLConnection uploadConnection = null;
        DataOutputStream connOutput = null;
        FileInputStream fileInput = null;
        String lineEnd = "\r\n";
        String twoHyphens = "--";
        String boundary = "232404jkg4220957934FW";
        int bytesRead, bytesAvailable, bufferSize;
        byte[] buffer;
        int maxBufferSize = 1 * 1024 * 1024;
        try {
            File resourceFile = new File(resourceFilePath);
            if (!resourceFile.exists()) {
                LOG.error("JTellaAdapter: Resource file could not be found for push: " + resourceFilePath);
                return;
            }
            List<File> attachments = new ArrayList<File>();
            for (String attachmentPath : attachmentFilePaths) {
                File attachFile = new File(attachmentPath);
                if (!attachFile.exists()) {
                    LOG.error("JTellaAdapter: Attachment file could not be found for push: " + attachmentPath);
                    return;
                }
                attachments.add(attachFile);
            }
            LOG.debug("JTellaAdapter: Initiating push to: " + urlString);
            URL url = new URL(urlString);
            uploadConnection = (HttpURLConnection) url.openConnection();
            uploadConnection.setDoInput(true);
            uploadConnection.setDoOutput(true);
            uploadConnection.setUseCaches(false);
            uploadConnection.setRequestMethod("POST");
            uploadConnection.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
            uploadConnection.setRequestProperty("Connection", "Keep-Alive");
            uploadConnection.setRequestProperty("User-Agent", "UP2P");
            uploadConnection.setRequestProperty("Accept", "[star]/[star]");
            connOutput = new DataOutputStream(uploadConnection.getOutputStream());
            connOutput.writeBytes(twoHyphens + boundary + lineEnd);
            connOutput.writeBytes("Content-Disposition: form-data; name=\"up2p:community\"" + lineEnd + lineEnd);
            connOutput.writeBytes(communityId + lineEnd);
            connOutput.writeBytes(twoHyphens + boundary + lineEnd);
            connOutput.writeBytes("Content-Disposition: form-data; name=\"up2p:pushupload\"" + lineEnd + lineEnd + "true" + lineEnd);
            connOutput.writeBytes(twoHyphens + boundary + lineEnd);
            boolean fileWriteComplete = false;
            boolean resourceFileWritten = false;
            File nextFile = null;
            while (!fileWriteComplete) {
                if (!resourceFileWritten) {
                    nextFile = resourceFile;
                } else {
                    nextFile = attachments.remove(0);
                }
                LOG.debug("JTellaAdapter: PUSHing file: " + nextFile.getAbsolutePath());
                connOutput.writeBytes("Content-Disposition: form-data; name=\"up2p:filename\";" + " filename=\"" + nextFile.getName() + "\"" + lineEnd);
                connOutput.writeBytes(lineEnd);
                fileInput = new FileInputStream(nextFile);
                bytesAvailable = fileInput.available();
                bufferSize = Math.min(bytesAvailable, maxBufferSize);
                buffer = new byte[bufferSize];
                bytesRead = fileInput.read(buffer, 0, bufferSize);
                while (bytesRead > 0) {
                    connOutput.write(buffer, 0, bufferSize);
                    bytesAvailable = fileInput.available();
                    bufferSize = Math.min(bytesAvailable, maxBufferSize);
                    bytesRead = fileInput.read(buffer, 0, bufferSize);
                }
                connOutput.writeBytes(lineEnd);
                if (attachments.isEmpty()) {
                    connOutput.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
                } else {
                    connOutput.writeBytes(twoHyphens + boundary + lineEnd);
                }
                resourceFileWritten = true;
                if (attachments.isEmpty()) {
                    fileWriteComplete = true;
                }
            }
            BufferedReader inStream = new BufferedReader(new InputStreamReader(uploadConnection.getInputStream()));
            while (inStream.readLine() != null) ;
            inStream.close();
            LOG.debug("JTellaAdapter: Push upload was succesful.");
        } catch (MalformedURLException ex) {
            LOG.error("JTellaAdapter: pushResource Malformed URL: " + ex);
            throw new IOException("pushResource failed for URL: " + urlString);
        } catch (IOException ioe) {
            LOG.error("JTellaAdapter: pushResource IOException: " + ioe);
            throw new IOException("pushResource failed for URL: " + urlString);
        } finally {
            try {
                if (fileInput != null) {
                    fileInput.close();
                }
                if (connOutput != null) {
                    connOutput.flush();
                }
                if (connOutput != null) {
                    connOutput.close();
                }
                if (uploadConnection != null) {
                    uploadConnection.disconnect();
                }
            } catch (IOException e) {
                LOG.error("JTellaAdapter: pushResource failed to close connection streams.");
            }
        }
    }
} </s>
<s>class temp {    public String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
} </s>
<s>class temp {    private boolean getRemoteFiles() throws Exception {
        boolean resp = false;
        int respCode = 0;
        URL url = new URL(storageUrlString);
        HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
        RequestUtils requestUtils = new RequestUtils();
        requestUtils.preRequestAddParameter("senderObj", "FileGetter");
        requestUtils.preRequestAddParameter("wfiType", "zen");
        requestUtils.preRequestAddParameter("portalID", this.portalID);
        requestUtils.preRequestAddParameter("userID", this.userID);
        addRenameFileParameters(requestUtils);
        requestUtils.createPostRequest();
        httpURLConnection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + requestUtils.getBoundary());
        httpURLConnection.setRequestMethod("POST");
        httpURLConnection.setDoOutput(true);
        httpURLConnection.setDoInput(true);
        try {
            httpURLConnection.connect();
            OutputStream out = httpURLConnection.getOutputStream();
            byte[] preBytes = requestUtils.getPreRequestStringBytes();
            out.write(preBytes);
            out.flush();
            byte[] postBytes = requestUtils.getPostRequestStringBytes();
            out.write(postBytes);
            out.flush();
            out.close();
            respCode = httpURLConnection.getResponseCode();
            if (HttpURLConnection.HTTP_OK == respCode) {
                resp = true;
                InputStream in = httpURLConnection.getInputStream();
                ZipUtils.getInstance().getFilesFromStream(in, getFilesDir);
                in.close();
            }
            if (respCode == 500) {
                resp = false;
            }
            if (respCode == 560) {
                resp = false;
                throw new Exception("Server Side Remote Exeption !!! respCode = (" + respCode + ")");
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new Exception("Cannot connect to: " + storageUrlString, e);
        }
        return resp;
    }
} </s>
<s>class temp {    public static void copyFile(File inputFile, File outputFile) throws IOException {
        FileChannel srcChannel = new FileInputStream(inputFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(outputFile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
} </s>
<s>class temp {    public void testReadPerMemberAllFour() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));
        gzin.setEofEachMember(true);
        int count0 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong 1k member count", 1024, count0);
        assertEquals("wrong member number", 0, gzin.getMemberNumber());
        assertEquals("wrong member0 start", 0, gzin.getCurrentMemberStart());
        assertEquals("wrong member0 end", noise1k_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int count1 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong 32k member count", (32 * 1024), count1);
        assertEquals("wrong member number", 1, gzin.getMemberNumber());
        assertEquals("wrong member1 start", noise1k_gz.length, gzin.getCurrentMemberStart());
        assertEquals("wrong member1 end", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int count2 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong 1-byte member count", 1, count2);
        assertEquals("wrong member number", 2, gzin.getMemberNumber());
        assertEquals("wrong member2 start", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());
        assertEquals("wrong member2 end", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int count3 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong 5-byte member count", 5, count3);
        assertEquals("wrong member number", 3, gzin.getMemberNumber());
        assertEquals("wrong member3 start", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());
        assertEquals("wrong member3 end", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong eof count", 0, countEnd);
    }
} </s>
<s>class temp {    public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals("wrong 1-byte member count", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals("wrong 5-byte member count", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong eof count", 0, countEnd);
    }
} </s>
<s>class temp {    public void testMemberSeek() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));
        gzin.setEofEachMember(true);
        gzin.compressedSeek(noise1k_gz.length + noise32k_gz.length);
        int count2 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong 1-byte member count", 1, count2);
        assertEquals("wrong Member2 start", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());
        assertEquals("wrong Member2 end", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int count3 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong 5-byte member count", 5, count3);
        assertEquals("wrong Member3 start", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());
        assertEquals("wrong Member3 end", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals("wrong eof count", 0, countEnd);
    }
} </s>
<s>class temp {    @SuppressWarnings("deprecation")
    public void testMemberIterator() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));
        Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember0 = iter.next();
        int count0 = IOUtils.copy(gzMember0, new NullOutputStream());
        assertEquals("wrong 1k member count", 1024, count0);
        assertEquals("wrong member number", 0, gzin.getMemberNumber());
        assertEquals("wrong member0 start", 0, gzin.getCurrentMemberStart());
        assertEquals("wrong member0 end", noise1k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember1 = iter.next();
        int count1 = IOUtils.copy(gzMember1, new NullOutputStream());
        assertEquals("wrong 32k member count", (32 * 1024), count1);
        assertEquals("wrong member number", 1, gzin.getMemberNumber());
        assertEquals("wrong member1 start", noise1k_gz.length, gzin.getCurrentMemberStart());
        assertEquals("wrong member1 end", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember2 = iter.next();
        int count2 = IOUtils.copy(gzMember2, new NullOutputStream());
        assertEquals("wrong 1-byte member count", 1, count2);
        assertEquals("wrong member number", 2, gzin.getMemberNumber());
        assertEquals("wrong member2 start", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());
        assertEquals("wrong member2 end", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember3 = iter.next();
        int count3 = IOUtils.copy(gzMember3, new NullOutputStream());
        assertEquals("wrong 5-byte member count", 5, count3);
        assertEquals("wrong member number", 3, gzin.getMemberNumber());
        assertEquals("wrong member3 start", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());
        assertEquals("wrong member3 end", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());
        assertFalse(iter.hasNext());
    }
} </s>
<s>class temp {    public static void readShaderSource(ClassLoader context, String path, URL url, StringBuffer result) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("#include ")) {
                    String includeFile = line.substring(9).trim();
                    String next = Locator.getRelativeOf(path, includeFile);
                    URL nextURL = Locator.getResource(next, context);
                    if (nextURL == null) {
                        next = includeFile;
                        nextURL = Locator.getResource(next, context);
                    }
                    if (nextURL == null) {
                        throw new FileNotFoundException("Can't find include file " + includeFile);
                    }
                    readShaderSource(context, next, nextURL, result);
                } else {
                    result.append(line + "\n");
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static ByteBuffer readShaderBinary(Class context, String path) {
        try {
            URL url = Locator.getResource(context, path);
            if (url == null) {
                return null;
            }
            return StreamUtil.readAll2Buffer(new BufferedInputStream(url.openStream()));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public synchronized void connect() throws FTPException, IOException {
        if (eventAggregator != null) {
            eventAggregator.setConnId(ftpClient.getId());
            ftpClient.setMessageListener(eventAggregator);
            ftpClient.setProgressMonitor(eventAggregator);
            ftpClient.setProgressMonitorEx(eventAggregator);
        }
        statistics.clear();
        configureClient();
        log.debug("Configured client");
        ftpClient.connect();
        log.debug("Client connected");
        if (masterContext.isAutoLogin()) {
            log.debug("Logging in");
            ftpClient.login(masterContext.getUserName(), masterContext.getPassword());
            log.debug("Logged in");
            configureTransferType(masterContext.getContentType());
        } else {
            log.debug("Manual login enabled");
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException {
        FileChannel fc = new FileOutputStream("src/com/aaron/nio/data.txt").getChannel();
        fc.write(ByteBuffer.wrap("dfsdf ".getBytes()));
        fc.close();
        fc = new RandomAccessFile("src/com/aaron/nio/data.txt", "rw").getChannel();
        fc.position(fc.size());
        fc.write(ByteBuffer.wrap("中文的 ".getBytes()));
        fc.close();
        fc = new FileInputStream("src/com/aaron/nio/data.txt").getChannel();
        ByteBuffer buff = ByteBuffer.allocate(1024);
        fc.read(buff);
        buff.flip();
        while (buff.hasRemaining()) {
            System.out.print(buff.getChar());
        }
        fc.close();
    }
} </s>
<s>class temp {    @Override
    public void exec() {
        BufferedReader in = null;
        try {
            URL url = new URL(getUrl());
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer result = new StringBuffer();
            String str;
            while ((str = in.readLine()) != null) {
                result.append(str);
            }
            logger.info("received message: " + result);
        } catch (Exception e) {
            logger.error("HttpGetEvent could not execute", e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    logger.error("BufferedReader could not be closed", e);
                }
            }
        }
    }
} </s>
<s>class temp {    public Model read(String uri, String base, String lang) {
        try {
            URL url = new URL(uri);
            return read(url.openStream(), base, lang);
        } catch (IOException e) {
            throw new OntologyException("I/O error while reading from uri " + uri);
        }
    }
} </s>
<s>class temp {    public static String hash(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            digest.update(password.getBytes(charset));
            byte[] rawHash = digest.digest();
            return new String(Hex.encodeHex(rawHash));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    private ContactModel convertJajahContactToContact(com.funambol.jajah.www.Contact jajahContact) throws JajahException {
        String temp;
        if (log.isTraceEnabled()) {
            log.trace("Converting Jajah contact to Foundation contact: Name:" + jajahContact.getName() + " Email:" + jajahContact.getEmail());
        }
        try {
            ContactModel contactModel;
            Contact contact = new Contact();
            if (jajahContact.getName() != null && jajahContact.getName().equals("") == false) {
                if (log.isDebugEnabled()) {
                    log.debug("NAME: " + jajahContact.getName());
                }
                contact.getName().getFirstName().setPropertyValue(jajahContact.getName());
            }
            if (jajahContact.getEmail() != null && jajahContact.getEmail().equals("") == false) {
                if (log.isDebugEnabled()) {
                    log.debug("EMAIL1_ADDRESS: " + jajahContact.getEmail());
                }
                Email email1 = new Email();
                email1.setEmailType(SIFC.EMAIL1_ADDRESS);
                email1.setPropertyValue(jajahContact.getEmail());
                contact.getPersonalDetail().addEmail(email1);
            }
            if (jajahContact.getMobile() != null && jajahContact.getMobile().equals("") == false) {
                if (log.isDebugEnabled()) {
                    log.debug("MOBILE_TELEPHONE_NUMBER: " + jajahContact.getMobile());
                }
                Phone phone = new Phone();
                phone.setPhoneType(SIFC.MOBILE_TELEPHONE_NUMBER);
                temp = jajahContact.getMobile().replace("-", "");
                if (!(temp.startsWith("+") || temp.startsWith("00"))) temp = "+".concat(temp);
                phone.setPropertyValue(temp);
                contact.getPersonalDetail().addPhone(phone);
            }
            if (jajahContact.getLandline() != null && jajahContact.getLandline().equals("") == false) {
                if (log.isDebugEnabled()) {
                    log.debug("HOME_TELEPHONE_NUMBER: " + jajahContact.getLandline());
                }
                Phone phone = new Phone();
                phone.setPhoneType(SIFC.HOME_TELEPHONE_NUMBER);
                temp = jajahContact.getLandline().replace("-", "");
                if (!(temp.startsWith("+") || temp.startsWith("00"))) temp = "+".concat(temp);
                phone.setPropertyValue(temp);
                contact.getPersonalDetail().addPhone(phone);
            }
            if (jajahContact.getOffice() != null && jajahContact.getOffice().equals("") == false) {
                if (log.isDebugEnabled()) {
                    log.debug("BUSINESS_TELEPHONE_NUMBER: " + jajahContact.getOffice());
                }
                Phone phone = new Phone();
                phone.setPhoneType(SIFC.BUSINESS_TELEPHONE_NUMBER);
                temp = jajahContact.getOffice().replace("-", "");
                if (!(temp.startsWith("+") || temp.startsWith("00"))) temp = "+".concat(temp);
                phone.setPropertyValue(temp);
                contact.getBusinessDetail().addPhone(phone);
            }
            if (log.isDebugEnabled()) {
                log.debug("CONTACT_ID: " + jajahContact.getId());
            }
            contactModel = new ContactModel(String.valueOf(jajahContact.getId()), contact);
            ContactToSIFC convert = new ContactToSIFC(null, null);
            String sifObject = convert.convert(contactModel);
            MessageDigest m = MessageDigest.getInstance("MD5");
            m.update(sifObject.getBytes());
            String md5Hash = (new BigInteger(m.digest())).toString();
            contactModel.setMd5Hash(md5Hash);
            return contactModel;
        } catch (Exception e) {
            throw new JajahException("JAJAH  - convertJajahContactToContact error: " + e.getMessage());
        }
    }
} </s>
<s>class temp {    @Override
    public final boolean exists() {
        try {
            final URLConnection uc = this.url.openConnection();
            uc.connect();
            uc.getInputStream().close();
            return true;
        } catch (final IOException e) {
            return false;
        }
    }
} </s>
<s>class temp {    @Override
    public long getLastModifiedOn() {
        try {
            final URLConnection uc = this.url.openConnection();
            uc.connect();
            final long res = uc.getLastModified();
            try {
                uc.getInputStream().close();
            } catch (final Exception ignore) {
            }
            return res;
        } catch (final IOException e) {
            return 0;
        }
    }
} </s>
<s>class temp {    public TemplateLibrary loadTemplateLibrary(GadgetContext context, Uri uri) throws GadgetException {
        HttpRequest request = new HttpRequest(uri);
        request.setCacheTtl(300);
        HttpResponse response = pipeline.execute(request);
        if (response.getHttpStatusCode() != HttpResponse.SC_OK) {
            throw new GadgetException(GadgetException.Code.FAILED_TO_RETRIEVE_CONTENT, "Unable to retrieve template library xml. HTTP error " + response.getHttpStatusCode());
        }
        String content = response.getResponseAsString();
        try {
            String key = null;
            Element element = null;
            if (!context.getIgnoreCache()) {
                key = HashUtil.rawChecksum(content.getBytes());
                element = parsedXmlCache.getElement(key);
            }
            if (element == null) {
                element = XmlUtil.parse(content);
                if (key != null) {
                    parsedXmlCache.addElement(key, element);
                }
            }
            return new XmlTemplateLibrary(uri, element, content);
        } catch (XmlException e) {
            throw new GadgetException(GadgetException.Code.MALFORMED_XML_DOCUMENT, e);
        }
    }
} </s>
<s>class temp {    private String hashPassword(String password) {
        if (password != null && password.trim().length() > 0) {
            try {
                MessageDigest md5 = MessageDigest.getInstance("MD5");
                md5.update(password.trim().getBytes());
                BigInteger hash = new BigInteger(1, md5.digest());
                return hash.toString(16);
            } catch (NoSuchAlgorithmException nsae) {
            }
        }
        return null;
    }
} </s>
<s>class temp {    private void loadRDFURL(URL url) throws RDFParseException, RepositoryException {
        URI urlContext = valueFactory.createURI(url.toString());
        try {
            URLConnection urlConn = url.openConnection();
            urlConn.setRequestProperty("Accept", "application/rdf+xml");
            InputStream is = urlConn.getInputStream();
            repoConn.add(is, url.toString(), RDFFormat.RDFXML, urlContext);
            is.close();
            repoConn.commit();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public void init(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes("UTF-8"), 0, password.length());
            byte[] rawKey = md.digest();
            skeySpec = new SecretKeySpec(rawKey, "AES");
            ivSpec = new IvParameterSpec(rawKey);
            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
} </s>
<s>class temp {    public void copyImage(String from, String to) {
        File inputFile = new File(from);
        File outputFile = new File(to);
        try {
            if (inputFile.canRead()) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                byte[] buf = new byte[65536];
                int c;
                while ((c = in.read(buf)) > 0) out.write(buf, 0, c);
                in.close();
                out.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public XmlDocument parseLocation(String locationUrl) {
        URL url = null;
        try {
            url = new URL(locationUrl);
        } catch (MalformedURLException e) {
            throw new XmlBuilderException("could not parse URL " + locationUrl, e);
        }
        try {
            return parseInputStream(url.openStream());
        } catch (IOException e) {
            throw new XmlBuilderException("could not open connection to URL " + locationUrl, e);
        }
    }
} </s>
<s>class temp {    static Object executeMethod(HttpMethod method, int timeout, boolean array) throws HttpRequestFailureException, HttpException, IOException, HttpRequestTimeoutException {
        try {
            method.getParams().setSoTimeout(timeout * 1000);
            int status = -1;
            Object result = null;
            System.out.println("Execute method: " + method.getPath() + " " + method.getQueryString());
            TwitterclipseConfig config = TwitterclipsePlugin.getDefault().getTwitterclipseConfiguration();
            HttpClient httpClient = HttpClientUtils.createHttpClient(TWITTER_BASE_URL, config.getUserId(), config.getPassword());
            status = httpClient.executeMethod(method);
            System.out.println("Received response. status = " + status);
            if (status == HttpStatus.SC_OK) {
                InputStream inputStream = method.getResponseBodyAsStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                IOUtils.copy(inputStream, baos);
                String response = new String(baos.toByteArray(), "UTF-8");
                System.out.println(response);
                if (array) result = JSONArray.fromString(response); else result = JSONObject.fromString(response);
            } else {
                throw new HttpRequestFailureException(status);
            }
            return result;
        } catch (SocketTimeoutException e) {
            throw new HttpRequestTimeoutException(e);
        } finally {
            method.releaseConnection();
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Usage: java JMEImpl inputfile");
            System.exit(0);
        }
        JME jme = null;
        try {
            URL url = new URL(Util.makeAbsoluteURL(args[0]));
            BufferedReader bReader = new BufferedReader(new InputStreamReader(url.openStream()));
            int idx = args[0].indexOf(".");
            String id = (idx == -1) ? args[0] : args[0].substring(0, idx);
            idx = id.lastIndexOf("\\");
            if (idx != -1) id = id.substring(idx + 1);
            jme = new JMEImpl(bReader, id);
            CMLMolecule mol = jme.getMolecule();
            StringWriter sw = new StringWriter();
            mol.debug(sw);
            System.out.println(sw.toString());
            SpanningTree sTree = new SpanningTreeImpl(mol);
            System.out.println(sTree.toSMILES());
            Writer w = new OutputStreamWriter(new FileOutputStream(id + ".xml"));
            PMRDelegate.outputEventStream(mol, w, PMRNode.PRETTY, 0);
            w.close();
            w = new OutputStreamWriter(new FileOutputStream(id + "-new.mol"));
            jme.setOutputCMLMolecule(mol);
            jme.output(w);
            w.close();
        } catch (Exception e) {
            System.out.println("JME failed: " + e);
            e.printStackTrace();
            System.exit(0);
        }
    }
} </s>
<s>class temp {    public static void concatenateToDestFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            if (!destFile.createNewFile()) {
                throw new IllegalArgumentException("Could not create destination file:" + destFile.getName());
            }
        }
        BufferedOutputStream bufferedOutputStream = null;
        BufferedInputStream bufferedInputStream = null;
        byte[] buffer = new byte[1024];
        try {
            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(destFile, true));
            bufferedInputStream = new BufferedInputStream(new FileInputStream(sourceFile));
            while (true) {
                int readByte = bufferedInputStream.read(buffer, 0, buffer.length);
                if (readByte == -1) {
                    break;
                }
                bufferedOutputStream.write(buffer, 0, readByte);
            }
        } finally {
            if (bufferedOutputStream != null) {
                bufferedOutputStream.close();
            }
            if (bufferedInputStream != null) {
                bufferedInputStream.close();
            }
        }
    }
} </s>
<s>class temp {    protected void handleHttp(String path, IProgressMonitor monitor, SchemaGeneratorContext ctx) throws CoreException, DuplicateFileException {
        InputStream is = null;
        try {
            URL url = new URL(path);
            is = url.openStream();
            IFolder folder = getXsdFolder();
            String _path = url.getPath();
            String[] contents = StringUtils.tokenizeToStringArray(_path, "/");
            String file = contents[contents.length - 1];
            if (file.indexOf(".") > -1) {
                IFile f = folder.getFile(file);
                if (!f.exists()) {
                    f.create(is, false, monitor);
                    String schemaFile = f.getLocation().toFile().getAbsolutePath();
                    ctx.setSchemaFiles(schemaFile);
                    return;
                }
                throw new DuplicateFileException("File " + file + " already exists");
            }
            IStatus status = new Status(IStatus.ERROR, JeeServiceComponentUIPlugin.PLUGIN_ID, IStatus.OK, "I/O Exception", new FileNotFoundException("No file associated to " + url));
            throw new CoreException(status);
        } catch (MalformedURLException e) {
            IStatus status = new Status(IStatus.ERROR, JeeServiceComponentUIPlugin.PLUGIN_ID, IStatus.OK, "Malformed URL Exception", e);
            throw new CoreException(status);
        } catch (IOException e) {
            IStatus status = new Status(IStatus.ERROR, JeeServiceComponentUIPlugin.PLUGIN_ID, IStatus.OK, "I/O Exception", e);
            throw new CoreException(status);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {        @Override
        public String entryToObject(TupleInput input) {
            boolean zipped = input.readBoolean();
            if (!zipped) {
                return input.readString();
            }
            int len = input.readInt();
            try {
                byte array[] = new byte[len];
                input.read(array);
                GZIPInputStream in = new GZIPInputStream(new ByteArrayInputStream(array));
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                IOUtils.copyTo(in, out);
                in.close();
                out.close();
                return new String(out.toByteArray());
            } catch (IOException err) {
                throw new RuntimeException(err);
            }
        }
} </s>
<s>class temp {        @Override
        public void objectToEntry(String object, TupleOutput output) {
            byte array[] = object.getBytes();
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                GZIPOutputStream out = new GZIPOutputStream(baos);
                ByteArrayInputStream in = new ByteArrayInputStream(array);
                IOUtils.copyTo(in, out);
                in.close();
                out.close();
                byte array2[] = baos.toByteArray();
                if (array2.length + 4 < array.length) {
                    output.writeBoolean(true);
                    output.writeInt(array2.length);
                    output.write(array2);
                } else {
                    output.writeBoolean(false);
                    output.writeString(object);
                }
            } catch (IOException err) {
                throw new RuntimeException(err);
            }
        }
} </s>
<s>class temp {    protected Scanner createScanner(InputSource source) {
        documentURI = source.getURI();
        if (documentURI == null) {
            documentURI = "";
        }
        Reader r = source.getCharacterStream();
        if (r != null) {
            return new Scanner(r);
        }
        InputStream is = source.getByteStream();
        if (is != null) {
            return new Scanner(is, source.getEncoding());
        }
        String uri = source.getURI();
        if (uri == null) {
            throw new CSSException(formatMessage("empty.source", null));
        }
        try {
            ParsedURL purl = new ParsedURL(uri);
            is = purl.openStreamRaw(CSSConstants.CSS_MIME_TYPE);
            return new Scanner(is, source.getEncoding());
        } catch (IOException e) {
            throw new CSSException(e);
        }
    }
} </s>
<s>class temp {    public static String getEncodedPassword(String buff) {
        if (buff == null) return null;
        String t = new String();
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(buff.getBytes());
            byte[] r = md.digest();
            for (int i = 0; i < r.length; i++) {
                t += toHexString(r[i]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return t;
    }
} </s>
<s>class temp {    public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(getOption("destination")).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error("File transfer failed", e);
                }
            }
        }
    }
} </s>
<s>class temp {    public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {
        parseURL = url;
        URLConnection connection = url.openConnection();
        if (charset == null) {
            charset = Charset.forName("UTF-8");
        }
        Reader reader = new InputStreamReader(connection.getInputStream(), charset);
        return internalParse(reader, target);
    }
} </s>
<s>class temp {    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', "format");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', "outcharset");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', "incharset");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("")) {
                outputEncoding = "utf-8";
                System.out.println("Defaulting to output charset utf-8 as argument -c is missing or not valid.");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("")) {
                inputEncoding = "utf-8";
                System.out.println("Defaulting to input charset utf-8 as argument -i is missing or not valid.");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage("Input and output file are not specified correctly. ");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage("Input file " + remainingArgs[0] + " does not exist. ");
            }
            if (format == null || format.trim().equals("")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println("format detected: " + format);
            if ("html".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage("Format not specified via argument -f. Also guessing for the extension of input file " + inputFile.getName() + " failed");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
} </s>
<s>class temp {    public static void parseRDFXML(String url, StatementHandler handler) throws IOException {
        ARP parser = new ARP();
        parser.getHandlers().setStatementHandler(handler);
        URLConnection conn = new URL(url).openConnection();
        String encoding = conn.getContentEncoding();
        InputStream in = null;
        try {
            in = conn.getInputStream();
            if (encoding == null) parser.load(in, url); else parser.load(new InputStreamReader(in, encoding), url);
            in.close();
        } catch (org.xml.sax.SAXException e) {
            throw new OntopiaRuntimeException(e);
        } finally {
            if (in != null) in.close();
        }
    }
} </s>
<s>class temp {    public static InputStream getData(DataTransferDescriptor desc, GlobusCredential creds) throws Exception {
        URL url = new URL(desc.getUrl());
        if (url.getProtocol().equals("http")) {
            URLConnection conn = url.openConnection();
            conn.connect();
            return conn.getInputStream();
        } else if (url.getProtocol().equals("https")) {
            if (creds != null) {
                GlobusGSSCredentialImpl cred = new GlobusGSSCredentialImpl(creds, GSSCredential.INITIATE_AND_ACCEPT);
                GSIHttpURLConnection connection = new GSIHttpURLConnection(url);
                connection.setGSSMode(GSIConstants.MODE_SSL);
                connection.setCredentials(cred);
                return connection.getInputStream();
            } else {
                throw new Exception("To use the https protocol to retrieve data from the Transfer Service you must have credentials");
            }
        }
        throw new Exception("Protocol " + url.getProtocol() + " not supported.");
    }
} </s>
<s>class temp {    protected BufferedReader getBufferedReader(InputSource input) throws IOException, SAXException {
        BufferedReader br = null;
        if (input.getCharacterStream() != null) {
            br = new BufferedReader(input.getCharacterStream());
        } else if (input.getByteStream() != null) {
            br = new BufferedReader(new InputStreamReader(input.getByteStream()));
        } else if (input.getSystemId() != null) {
            URL url = new URL(input.getSystemId());
            br = new BufferedReader(new InputStreamReader(url.openStream()));
        } else {
            throw new SAXException("Invalid InputSource!");
        }
        return br;
    }
} </s>
<s>class temp {    private synchronized Frame addFrame(INSERT_TYPE type, File source) throws IOException {
        if (source == null) throw new NullPointerException("Parameter 'source' is null");
        if (!source.exists()) throw new IOException("File does not exist: " + source.getAbsolutePath());
        if (source.length() <= 0) throw new IOException("File is empty: " + source.getAbsolutePath());
        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(frames_.size()));
        if (newLocation.compareTo(source) != 0) {
            switch(type) {
                case MOVE:
                    source.renameTo(newLocation);
                    break;
                case COPY:
                    FileChannel inChannel = new FileInputStream(source).getChannel();
                    FileChannel outChannel = new FileOutputStream(newLocation).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                    if (inChannel != null) inChannel.close();
                    if (outChannel != null) outChannel.close();
                    break;
            }
        }
        Frame f = new Frame(newLocation);
        f.createThumbNail();
        frames_.add(f);
        return f;
    }
} </s>
<s>class temp {    private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {
        if (source == null) throw new NullPointerException("Parameter 'source' is null");
        if (!source.exists()) throw new IOException("File does not exist: " + source.getAbsolutePath());
        if (source.length() <= 0) throw new IOException("File is empty: " + source.getAbsolutePath());
        if (index < 0) throw new IndexOutOfBoundsException("index < 0");
        if (index >= frames_.size()) throw new IndexOutOfBoundsException("index >= frames_.size()");
        File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), "tmp.jpg");
        switch(type) {
            case MOVE:
                if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches("img_[0-9]{5}\\.jpg")) {
                    for (int i = 0; i < frames_.size(); i++) {
                        Frame f = frames_.get(i);
                        if (f.getFile().compareTo(source) == 0) {
                            frames_.remove(i);
                            break;
                        }
                    }
                }
                source.renameTo(tmp);
                break;
            case COPY:
                FileChannel inChannel = new FileInputStream(source).getChannel();
                FileChannel outChannel = new FileOutputStream(tmp).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
                break;
        }
        for (int i = frames_.size() - 1; i >= index; i--) {
            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));
            frames_.get(i).moveTo(newFrame);
            frames_.set(i, newFrame);
        }
        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));
        tmp.renameTo(newLocation);
        Frame f = new Frame(newLocation);
        f.createThumbNail();
        frames_.set(index, f);
        return f;
    }
} </s>
<s>class temp {    @Before
    public void setUp() throws Exception {
        connectionDigestHandler = new ConnectionDigestHandlerDefaultImpl();
        URL url = null;
        try {
            url = new URL("http://dev2dev.bea.com.cn/bbs/servlet/D2DServlet/download/64104-35000-204984-2890/webwork2guide.pdf");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        try {
            uc = url.openConnection();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public String parse(String term) throws OntologyAdaptorException {
        try {
            String sUrl = getUrl(term);
            if (sUrl.length() > 0) {
                URL url = new URL(sUrl);
                InputStream in = url.openStream();
                StringBuilder sb = new StringBuilder();
                BufferedReader r = new BufferedReader(new InputStreamReader(in));
                String line = null;
                while ((line = r.readLine()) != null) {
                    if (sb.length() > 0) {
                        sb.append("\r\n");
                    }
                    sb.append(line);
                }
                return sb.toString();
            } else {
                return "";
            }
        } catch (Exception ex) {
            throw new OntologyAdaptorException("Convertion to lucene failed.", ex);
        }
    }
} </s>
<s>class temp {    public String sendSMS(String host, String port, String username, String password, String from, String to, String text, String uhd, String charset, String coding, String validity, String deferred, String dlrmask, String dlrurl, String pid, String mclass, String mwi) throws SMSPushRequestException, Exception {
        StringBuffer res = new StringBuffer();
        if (!Utils.checkNonEmptyStringAttribute(coding) || coding.equals("0")) text = Utils.convertTextForGSMEncodingURLEncoded(text); else if (coding.equals("1")) text = Utils.convertTextForUTFEncodingURLEncoded(text, "UTF-8"); else text = Utils.convertTextForUTFEncodingURLEncoded(text, "UCS-2");
        String directives = "username=" + username;
        directives += "&password=" + password;
        directives += "&from=" + URLEncoder.encode(from, "UTF-8");
        directives += "&to=" + to;
        directives += "&text=" + text;
        if (Utils.checkNonEmptyStringAttribute(uhd)) directives += "&uhd=" + uhd;
        if (Utils.checkNonEmptyStringAttribute(charset)) directives += "&charset=" + charset;
        if (Utils.checkNonEmptyStringAttribute(coding)) directives += "&coding=" + coding;
        if (Utils.checkNonEmptyStringAttribute(validity)) directives += "&validity=" + validity;
        if (Utils.checkNonEmptyStringAttribute(deferred)) directives += "&deferred=" + deferred;
        if (Utils.checkNonEmptyStringAttribute(dlrmask)) directives += "&dlrmask=" + dlrmask;
        if (Utils.checkNonEmptyStringAttribute(dlrurl)) directives += "&dlrurl=" + dlrurl;
        if (Utils.checkNonEmptyStringAttribute(pid)) directives += "&pid=" + pid;
        if (Utils.checkNonEmptyStringAttribute(mclass)) directives += "&mclass=" + mclass;
        if (Utils.checkNonEmptyStringAttribute(mwi)) directives += "&mwi=" + mwi;
        URL url = new URL("http://" + host + ":" + port + "/cgi-bin/sendsms?" + directives);
        URLConnection conn = url.openConnection();
        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response;
        while ((response = rd.readLine()) != null) res.append(response);
        rd.close();
        String resultCode = res.substring(0, res.indexOf(":"));
        if (!resultCode.equals(SMS_PUSH_RESPONSE_SUCCESS_CODE)) throw new SMSPushRequestException(resultCode);
        return res.toString();
    }
} </s>
<s>class temp {    public void searchEntity(HttpServletRequest req, HttpServletResponse resp, SearchCommand command) {
        setHeader(resp);
        logger.debug("Search: Looking for the entity with the id:" + command.getSearchedid());
        String login = command.getLogin();
        String password = command.getPassword();
        SynchronizableUser currentUser = userAccessControl.authenticate(login, password);
        if (currentUser != null) {
            try {
                File tempFile = File.createTempFile("medoo", "search");
                OutputStream fos = new FileOutputStream(tempFile);
                syncServer.searchEntity(currentUser, command.getSearchedid(), fos);
                InputStream fis = new FileInputStream(tempFile);
                resp.setContentLength(fis.available());
                while (fis.available() > 0) {
                    resp.getOutputStream().write(fis.read());
                }
                resp.getOutputStream().flush();
                resp.flushBuffer();
            } catch (IOException ioe) {
                logger.error(ioe.getMessage(), ioe);
            } catch (ImogSerializationException ex) {
                logger.error(ex.getMessage(), ex);
            }
        } else {
            try {
                OutputStream out = resp.getOutputStream();
                out.write("-ERROR-".getBytes());
                out.flush();
                out.close();
                logger.debug("Search: user " + login + " has not been authenticated");
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public void reqservmodif(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) {
        setHeader(resp);
        try {
            logger.debug("SeMo: Requesting server modification for session " + command.getSession());
            File tempFile = new File(getSyncWorkDirectory(req), command.getSession() + ".smodif");
            OutputStream fos = new FileOutputStream(tempFile);
            syncServer.getServerModifications(command.getSession(), fos);
            InputStream fis = new FileInputStream(tempFile);
            resp.setContentLength(fis.available());
            while (fis.available() > 0) {
                resp.getOutputStream().write(fis.read());
            }
            resp.getOutputStream().flush();
            resp.flushBuffer();
        } catch (IOException ioe) {
            logger.error(ioe.getMessage());
        } catch (ImogSerializationException ex) {
            logger.error(ex.getMessage());
        }
    }
} </s>
<s>class temp {    public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) {
        setHeader(resp);
        try {
            logger.debug("ResRec: Resume a 'receive' session with session id " + command.getSession() + " this client already received " + command.getLen() + " bytes");
            File tempFile = new File(this.getSyncWorkDirectory(req), command.getSession() + ".smodif");
            if (!tempFile.exists()) {
                logger.debug("ResRec: the file doesn't exist, so we created it by serializing the entities");
                try {
                    OutputStream fos = new FileOutputStream(tempFile);
                    syncServer.getServerModifications(command.getSession(), fos);
                    fos.close();
                } catch (ImogSerializationException mse) {
                    logger.error(mse.getMessage(), mse);
                }
            }
            InputStream fis = new FileInputStream(tempFile);
            fis.skip(command.getLen());
            resp.setContentLength(fis.available());
            while (fis.available() > 0) {
                resp.getOutputStream().write(fis.read());
            }
            resp.getOutputStream().flush();
            resp.flushBuffer();
            fis.close();
        } catch (IOException ioe) {
            logger.error(ioe.getMessage());
        }
    }
} </s>
<s>class temp {    protected Properties loadFile(String fileName) {
        Properties prop = new Properties();
        try {
            String packageName = getClass().getName();
            packageName = packageName.substring(0, packageName.lastIndexOf("."));
            String src = "src";
            if (mavenBuild) {
                src = src + File.separator + "test" + File.separator + "resources";
            }
            packageName = src + File.separator + packageName.replace('.', File.separatorChar);
            packageName += File.separator;
            packageName += fileName;
            URL url0 = new File(packageName).toURI().toURL();
            final InputStream input = url0.openStream();
            prop.load(input);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return prop;
    }
} </s>
<s>class temp {    private void download(String address, String localFileName, String host, int porta) {
        InputStream in = null;
        URLConnection conn = null;
        OutputStream out = null;
        System.out.println("Update.download() BAIXANDO " + address);
        try {
            URL url = new URL(address);
            out = new BufferedOutputStream(new FileOutputStream(localFileName));
            if (host != "" && host != null) {
                Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(host, porta));
                conn = url.openConnection(proxy);
            } else {
                conn = url.openConnection();
            }
            in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
            System.out.println(localFileName + "\t" + numWritten);
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
    }
} </s>
<s>class temp {    public static String post(String strUrl, String data) throws Exception {
        URL url = new URL(strUrl);
        final String method = "POST";
        final String host = url.getHost();
        final String contentType = "application/x-www-form-urlencoded";
        final int contentLength = getContentLength(data);
        final String encoding = "UTF-8";
        final String connection = "Close";
        Config.log(DEBUG, "Sending data to: " + url + " (host=" + host + ", encoding=" + encoding + ", method=" + method + ", Content-Type=" + contentType + ", Content-Length=" + contentLength + ", Connection=" + connection + "):" + "\r\n" + data);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod(method);
        conn.setRequestProperty("host", host);
        conn.setRequestProperty("content-type", contentType);
        conn.setRequestProperty("Content-Encoding", encoding);
        conn.setRequestProperty("content-length", contentLength + "");
        conn.setRequestProperty("connection", connection);
        if (tools.valid(Config.JSON_RPC_WEBSERVER_USERNAME) && tools.valid(Config.JSON_RPC_WEBSERVER_PASSWORD)) {
            String authString = Config.JSON_RPC_WEBSERVER_USERNAME + ":" + Config.JSON_RPC_WEBSERVER_PASSWORD;
            String authStringEnc = new sun.misc.BASE64Encoder().encode(authString.getBytes());
            conn.setRequestProperty("Authorization", "Basic " + authStringEnc);
        }
        conn.setReadTimeout((int) (Config.JSON_RPC_TIMEOUT_SECONDS * 1000));
        OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
        writer.write(data);
        writer.flush();
        writer.close();
        int responseCode = 400;
        try {
            responseCode = conn.getResponseCode();
        } catch (Exception x) {
            Config.log(ERROR, "Failed to get response code from HTTP Server. Check your URL and username/password.", x);
        }
        String response = readStream(responseCode == 200 ? conn.getInputStream() : conn.getErrorStream());
        if (response == null) {
            return null;
        }
        Config.log(DEBUG, "Raw response from POST. Response Code = " + conn.getResponseCode() + " (" + conn.getResponseMessage() + "):\r\n" + response);
        return response.toString();
    }
} </s>
<s>class temp {    private void convertFile() {
        final File fileToConvert = filePanel.getInputFile();
        final File convertedFile = filePanel.getOutputFile();
        if (fileToConvert == null || convertedFile == null) {
            Main.showMessage("Select valid files for both input and output");
            return;
        }
        if (fileToConvert.getName().equals(convertedFile.getName())) {
            Main.showMessage("Input and Output files are same.. select different files");
            return;
        }
        final int len = (int) fileToConvert.length();
        progressBar.setMinimum(0);
        progressBar.setMaximum(len);
        progressBar.setValue(0);
        try {
            fileCopy(fileToConvert, fileToConvert.getAbsolutePath() + ".bakup");
        } catch (IOException e) {
            Main.showMessage("Unable to Backup input file");
            return;
        }
        final BufferedReader bufferedReader;
        try {
            bufferedReader = new BufferedReader(new FileReader(fileToConvert));
        } catch (FileNotFoundException e) {
            Main.showMessage("Unable to create reader - file not found");
            return;
        }
        final BufferedWriter bufferedWriter;
        try {
            bufferedWriter = new BufferedWriter(new FileWriter(convertedFile));
        } catch (IOException e) {
            Main.showMessage("Unable to create writer for output file");
            return;
        }
        String input;
        try {
            while ((input = bufferedReader.readLine()) != null) {
                if (stopRequested) {
                    break;
                }
                bufferedWriter.write(parseLine(input));
                bufferedWriter.newLine();
                progressBar.setValue(progressBar.getValue() + input.length());
            }
        } catch (IOException e) {
            Main.showMessage("Unable to convert " + e.getMessage());
            return;
        } finally {
            try {
                bufferedReader.close();
                bufferedWriter.close();
            } catch (IOException e) {
                Main.showMessage("Unable to close reader/writer " + e.getMessage());
                return;
            }
        }
        if (!stopRequested) {
            filePanel.readOutputFile();
            progressBar.setValue(progressBar.getMaximum());
            Main.setStatus("Transliterate Done.");
        }
        progressBar.setValue(progressBar.getMinimum());
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        try {
            Class.forName("org.hsqldb.jdbcDriver");
        } catch (ClassNotFoundException e) {
            System.out.println("HSQL Driver not found.");
            System.exit(1);
        }
        Connection con = null;
        try {
            con = DriverManager.getConnection("jdbc:hsqldb:.", "sa", "");
            con.setAutoCommit(false);
        } catch (SQLException e) {
            System.out.println("Connection error: " + e.getMessage());
            System.exit(e.getErrorCode());
        }
        String createTable = "CREATE TABLE NAMES (NAME VARCHAR(100))";
        Statement stmt = null;
        try {
            stmt = con.createStatement();
            con.commit();
            stmt.executeUpdate(createTable);
            con.commit();
        } catch (SQLException e) {
            System.out.println("Create table error: " + e.getMessage());
            try {
                con.rollback();
                con.close();
                System.exit(e.getErrorCode());
            } catch (SQLException ex) {
            }
        }
        Vector names = new Vector(4);
        names.addElement("FRANK");
        names.addElement("FRED");
        names.addElement("JACK");
        names.addElement("JIM");
        String ins = "INSERT INTO NAMES VALUES (?)";
        PreparedStatement pstmt = null;
        try {
            con.commit();
            pstmt = con.prepareStatement(ins);
            for (int i = 0; i < names.size(); i++) {
                pstmt.setString(1, (String) names.elementAt(i));
                pstmt.executeUpdate();
            }
            con.commit();
        } catch (SQLException e) {
            System.out.println("Insert error: " + e.getMessage());
            try {
                con.rollback();
                con.close();
                System.exit(e.getErrorCode());
            } catch (SQLException ex) {
            }
        }
        String selAll = "SELECT * FROM NAMES";
        ResultSet rs = null;
        stmt = null;
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery(selAll);
            System.out.println("SELECT * FROM NAMES");
            while (rs.next()) {
                String name = rs.getString(1);
                System.out.println("\t" + name);
            }
            stmt.close();
        } catch (SQLException e) {
            System.out.println("Select All error: " + e.getMessage());
            try {
                con.close();
                System.exit(e.getErrorCode());
            } catch (SQLException ex) {
            }
        }
        String selectLike = "SELECT * FROM NAMES WHERE NAME LIKE 'F%'";
        rs = null;
        stmt = null;
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery(selectLike);
            System.out.println("SELECT * FROM NAMES WHERE NAME LIKE 'F%'");
            while (rs.next()) {
                String name = rs.getString(1);
                System.out.println("\t" + name);
            }
            stmt.close();
        } catch (SQLException e) {
            System.out.println("Select Like error: " + e.getMessage());
            try {
                con.close();
                System.exit(e.getErrorCode());
            } catch (SQLException ex) {
            }
        }
        try {
            con.close();
        } catch (SQLException e) {
        }
    }
} </s>
<s>class temp {    private String fetchCompareContent() throws IOException {
        URL url = new URL(compareTo);
        StringWriter sw = new StringWriter();
        IOUtils.copy(url.openStream(), sw);
        return sw.getBuffer().toString();
    }
} </s>
<s>class temp {    public void execute() {
        checkInput();
        try {
            client = new FTPClient();
            log("Connecting to " + ftpServer, Project.MSG_INFO);
            client.connect(ftpServer, ftpPort);
            checkFtpCode(client, "FTP server refused connection:");
            log("Connected", Project.MSG_INFO);
            log("Logging in", Project.MSG_INFO);
            if (!client.login(username, password)) {
                log("Login failed: " + client.getReplyString(), Project.MSG_ERR);
            }
            log("Login successful", Project.MSG_INFO);
            client.enterLocalPassiveMode();
            checkFtpCode(client, "Couldn't change connection type to passive: ");
            log("Changed to passive mode.", Project.MSG_VERBOSE);
            client.changeWorkingDirectory(remoteDir);
            checkFtpCode(client, "Can't change to directory: " + remoteDir);
            log("Listing FTP files", Project.MSG_INFO);
            for (int i = 0; i < remoteFileStrings.length; i++) {
                remoteFilePatterns = makePattern(remoteFileStrings[i]);
                numDir = remoteFilePatterns.length - 1;
                log("Setting number of directories to: " + numDir, Project.MSG_VERBOSE);
                FTPFile[] files = client.listFiles(remoteDir);
                files = followSymLink(client, files);
                log("# of files in " + remoteDir + " is " + files.length, Project.MSG_VERBOSE);
                scanDir(0, numDir, files, null);
            }
            bw.flush();
            bw.close();
        } catch (IOException ioe) {
            if (client.isConnected()) {
                try {
                    client.disconnect();
                } catch (IOException iof) {
                }
            }
            log("Could not connect to " + ftpServer + " " + ioe.getMessage(), Project.MSG_ERR);
        }
    }
} </s>
<s>class temp {    public WebResponse getResponse(WebRequest webRequest, String charset) throws IOException {
        initHttpClient();
        switch(webRequest.getRequestMethod()) {
            case GET:
                httpRequest.set(populateHttpRequestBaseMethod(webRequest, new HttpGet(webRequest.getUrl())));
                break;
            case HEAD:
                httpRequest.set(populateHttpRequestBaseMethod(webRequest, new HttpHead(webRequest.getUrl())));
                break;
            case OPTIONS:
                httpRequest.set(populateHttpRequestBaseMethod(webRequest, new HttpOptions(webRequest.getUrl())));
                break;
            case TRACE:
                httpRequest.set(populateHttpRequestBaseMethod(webRequest, new HttpTrace(webRequest.getUrl())));
                break;
            case DELETE:
                httpRequest.set(populateHttpRequestBaseMethod(webRequest, new HttpDelete(webRequest.getUrl())));
                break;
            case POST:
                httpRequest.set(populateHttpEntityEnclosingRequestBaseMethod(webRequest, new HttpPost(webRequest.getUrl())));
                break;
            case PUT:
                httpRequest.set(populateHttpEntityEnclosingRequestBaseMethod(webRequest, new HttpPut(webRequest.getUrl())));
                break;
            default:
                throw new RuntimeException("Method not yet supported: " + webRequest.getRequestMethod());
        }
        WebResponse resp;
        HttpResponse response = executeMethod(httpRequest.get());
        if (response == null) {
            throw new IOException("LIGHTHTTP. An empty response received from server. Possible reason: host is offline");
        }
        resp = processResponse(response, httpRequest.get(), charset);
        httpRequest.set(null);
        return resp;
    }
} </s>
<s>class temp {    public void copyFile(File sourceFile, String toDir, boolean create, boolean overwrite) throws FileNotFoundException, IOException {
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        File toFile = new File(toDir);
        if (create && !toFile.exists()) toFile.mkdirs();
        if (toFile.exists()) {
            File destFile = new File(toDir + "/" + sourceFile.getName());
            try {
                if (!destFile.exists() || overwrite) {
                    source = new FileInputStream(sourceFile);
                    destination = new FileOutputStream(destFile);
                    buffer = new byte[1024];
                    while (true) {
                        bytes_read = source.read(buffer);
                        if (bytes_read == -1) break;
                        destination.write(buffer, 0, bytes_read);
                    }
                }
            } catch (Exception exx) {
                exx.printStackTrace();
            } finally {
                if (source != null) try {
                    source.close();
                } catch (IOException e) {
                }
                if (destination != null) try {
                    destination.close();
                } catch (IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {    protected void initGame() {
        try {
            for (File fonte : files) {
                String absolutePath = outputDir.getAbsolutePath();
                String separator = System.getProperty("file.separator");
                String name = fonte.getName();
                String destName = name.substring(0, name.length() - 3);
                File destino = new File(absolutePath + separator + destName + "jme");
                FileInputStream reader = new FileInputStream(fonte);
                OutputStream writer = new FileOutputStream(destino);
                conversor.setProperty("mtllib", fonte.toURL());
                conversor.convert(reader, writer);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        super.finish();
    }
} </s>
<s>class temp {    protected PTask commit_result(Result r, SyrupConnection con) throws Exception {
        try {
            int logAction = LogEntry.ENDED;
            String kk = r.context().task().key();
            if (r.in_1_consumed() && r.context().in_1_link() != null) {
                sqlImpl().updateFunctions().updateInLink(kk, false, null, con);
                logAction = logAction | LogEntry.IN_1;
            }
            if (r.in_2_consumed() && r.context().in_2_link() != null) {
                sqlImpl().updateFunctions().updateInLink(kk, true, null, con);
                logAction = logAction | LogEntry.IN_2;
            }
            if (r.out_1_result() != null && r.context().out_1_link() != null) {
                sqlImpl().updateFunctions().updateOutLink(kk, false, r.out_1_result(), con);
                logAction = logAction | LogEntry.OUT_1;
            }
            if (r.out_2_result() != null && r.context().out_2_link() != null) {
                sqlImpl().updateFunctions().updateOutLink(kk, true, r.out_2_result(), con);
                logAction = logAction | LogEntry.OUT_2;
            }
            sqlImpl().loggingFunctions().log(r.context().task().key(), logAction, con);
            boolean isParent = r.context().task().isParent();
            if (r instanceof Workflow) {
                Workflow w = (Workflow) r;
                Task[] tt = w.tasks();
                Link[] ll = w.links();
                Hashtable tkeyMap = new Hashtable();
                for (int i = 0; i < tt.length; i++) {
                    String key = sqlImpl().creationFunctions().newTask(tt[i], r.context().task(), con);
                    tkeyMap.put(tt[i], key);
                }
                for (int j = 0; j < ll.length; j++) {
                    sqlImpl().creationFunctions().newLink(ll[j], tkeyMap, con);
                }
                String in_link_1 = sqlImpl().queryFunctions().readInTask(kk, false, con);
                String in_link_2 = sqlImpl().queryFunctions().readInTask(kk, true, con);
                String out_link_1 = sqlImpl().queryFunctions().readOutTask(kk, false, con);
                String out_link_2 = sqlImpl().queryFunctions().readOutTask(kk, true, con);
                sqlImpl().updateFunctions().rewireInLink(kk, false, w.in_1_binding(), tkeyMap, con);
                sqlImpl().updateFunctions().rewireInLink(kk, true, w.in_2_binding(), tkeyMap, con);
                sqlImpl().updateFunctions().rewireOutLink(kk, false, w.out_1_binding(), tkeyMap, con);
                sqlImpl().updateFunctions().rewireOutLink(kk, true, w.out_2_binding(), tkeyMap, con);
                for (int k = 0; k < tt.length; k++) {
                    String kkey = (String) tkeyMap.get(tt[k]);
                    sqlImpl().updateFunctions().checkAndUpdateDone(kkey, con);
                }
                sqlImpl().updateFunctions().checkAndUpdateDone(in_link_1, con);
                sqlImpl().updateFunctions().checkAndUpdateDone(in_link_2, con);
                sqlImpl().updateFunctions().checkAndUpdateDone(out_link_1, con);
                sqlImpl().updateFunctions().checkAndUpdateDone(out_link_2, con);
                for (int k = 0; k < tt.length; k++) {
                    String kkey = (String) tkeyMap.get(tt[k]);
                    sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(kkey, con);
                }
                sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(in_link_1, con);
                sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(in_link_2, con);
                sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(out_link_1, con);
                sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(out_link_2, con);
                isParent = true;
            }
            sqlImpl().updateFunctions().checkAndUpdateDone(kk, con);
            sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(kk, con);
            PreparedStatement s3 = null;
            s3 = con.prepareStatementFromCache(sqlImpl().sqlStatements().updateTaskModificationStatement());
            java.util.Date dd = new java.util.Date();
            s3.setLong(1, dd.getTime());
            s3.setBoolean(2, isParent);
            s3.setString(3, r.context().task().key());
            s3.executeUpdate();
            sqlImpl().loggingFunctions().log(kk, LogEntry.ENDED, con);
            con.commit();
            return sqlImpl().queryFunctions().readPTask(kk, con);
        } finally {
            con.rollback();
        }
    }
} </s>
<s>class temp {    public synchronized String encrypt(String p_plainText) throws ServiceUnavailableException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA");
        } catch (NoSuchAlgorithmException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        try {
            md.update(p_plainText.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            throw new ServiceUnavailableException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
} </s>
<s>class temp {    public static String getMD5Hash(String original) {
        StringBuffer sb = new StringBuffer();
        try {
            StringReader sr = null;
            int crypt_byte = 0;
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.reset();
            md.update(original.getBytes());
            byte[] digest = md.digest();
            sr = new StringReader(new String(digest, "ISO8859_1"));
            while ((crypt_byte = sr.read()) != -1) {
                String hexString = Integer.toHexString(crypt_byte);
                if (crypt_byte < 16) {
                    hexString = "0" + hexString;
                }
                sb.append(hexString);
            }
        } catch (NoSuchAlgorithmException nsae) {
        } catch (IOException ioe) {
        }
        return sb.toString();
    }
} </s>
<s>class temp {    protected void initializeFromURL(URL url, AVList params) throws IOException {
        URLConnection connection = url.openConnection();
        String message = this.validateURLConnection(connection, SHAPE_CONTENT_TYPES);
        if (message != null) {
            throw new IOException(message);
        }
        this.shpChannel = Channels.newChannel(WWIO.getBufferedInputStream(connection.getInputStream()));
        URLConnection shxConnection = this.getURLConnection(WWIO.replaceSuffix(url.toString(), INDEX_FILE_SUFFIX));
        if (shxConnection != null) {
            message = this.validateURLConnection(shxConnection, INDEX_CONTENT_TYPES);
            if (message != null) Logging.logger().warning(message); else {
                InputStream shxStream = this.getURLStream(shxConnection);
                if (shxStream != null) this.shxChannel = Channels.newChannel(WWIO.getBufferedInputStream(shxStream));
            }
        }
        URLConnection prjConnection = this.getURLConnection(WWIO.replaceSuffix(url.toString(), PROJECTION_FILE_SUFFIX));
        if (prjConnection != null) {
            message = this.validateURLConnection(prjConnection, PROJECTION_CONTENT_TYPES);
            if (message != null) Logging.logger().warning(message); else {
                InputStream prjStream = this.getURLStream(prjConnection);
                if (prjStream != null) this.prjChannel = Channels.newChannel(WWIO.getBufferedInputStream(prjStream));
            }
        }
        this.setValue(AVKey.DISPLAY_NAME, url.toString());
        this.initialize(params);
        URL dbfURL = WWIO.makeURL(WWIO.replaceSuffix(url.toString(), ATTRIBUTE_FILE_SUFFIX));
        if (dbfURL != null) {
            try {
                this.attributeFile = new DBaseFile(dbfURL);
            } catch (Exception e) {
            }
        }
    }
} </s>
<s>class temp {    public JTips(String tipFile) {
        super(new BorderLayout());
        BufferedReader in = null;
        try {
            URL url = getClass().getResource(tipFile);
            if (url != null) {
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = null;
                StringBuffer sb = new StringBuffer();
                while (null != (line = in.readLine())) {
                    if (sep.equals(line)) {
                        addTip(sb.toString());
                        sb = new StringBuffer();
                    } else {
                        sb.append(line);
                        sb.append("\n");
                    }
                }
                if (sb != null && sb.length() > 1) {
                    addTip(sb.toString());
                }
            } else {
                Activator.log.warn("No tip file: " + tipFile);
            }
        } catch (Exception e) {
            Activator.log.error("Failed to load tips from " + tipFile, e);
        } finally {
            try {
                in.close();
            } catch (Exception ignored) {
            }
        }
        if (tips.size() == 0) {
            tips.add(new Tip("", "No tips found", ""));
        } else {
            Activator.log.info("loaded " + tips.size() + " tips");
        }
        html = new JTextPane();
        html.setContentType("text/html");
        html.setEditable(false);
        html.addHyperlinkListener(new HyperlinkListener() {

            public void hyperlinkUpdate(HyperlinkEvent ev) {
                if (ev.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    URL url = ev.getURL();
                    try {
                        Util.openExternalURL(url);
                    } catch (Exception e) {
                        Activator.log.warn("Failed to open external url=" + url, e);
                    }
                }
            }
        });
        scroll = new JScrollPane(html);
        scroll.setPreferredSize(new Dimension(350, 200));
        scroll.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), BorderFactory.createLoweredBevelBorder()));
        final ActionListener nextAction = new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                setTip((tipIx + 1) % tips.size());
            }
        };
        JButton closeButton = new JButton(Strings.get("close"));
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                if (frame != null) {
                    frame.setVisible(false);
                }
            }
        });
        nextButton = new JButton(Strings.get("next_tip"));
        nextButton.addActionListener(nextAction);
        prevButton = new JButton(Strings.get("prev_tip"));
        prevButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                setTip((tipIx + tips.size() - 1) % tips.size());
            }
        });
        JPanel bottomPanel = new JPanel(new BorderLayout());
        JPanel topPanel = new JPanel(new BorderLayout());
        ctrlPanel = new JPanel(new FlowLayout());
        ctrlPanel.add(closeButton);
        ctrlPanel.add(prevButton);
        ctrlPanel.add(nextButton);
        bottomPanel.add(ctrlPanel, BorderLayout.EAST);
        JLabel titleC = new JLabel("Did you know that...");
        titleC.setFont(new Font("Dialog", Font.BOLD, 15));
        titleC.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
        topPanel.add(titleC, BorderLayout.WEST);
        JLabel icon = new JLabel(Activator.desktop.tipIcon);
        icon.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent ev) {
                nextAction.actionPerformed(null);
            }
        });
        icon.setToolTipText(nextButton.getText());
        add(icon, BorderLayout.WEST);
        add(scroll, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);
        add(topPanel, BorderLayout.NORTH);
        setTip((int) (Math.random() * tips.size()));
    }
} </s>
<s>class temp {    public static int numberofLines(JApplet ja, String filename) {
        int count = 0;
        URL url = null;
        String FileToRead;
        FileToRead = "data/" + filename + ".csv";
        try {
            url = new URL(ja.getCodeBase(), FileToRead);
        } catch (MalformedURLException e) {
            System.out.println("Malformed URL ");
            ja.stop();
        }
        System.out.println(url.toString());
        try {
            InputStream in = url.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            while ((reader.readLine()) != null) {
                count++;
            }
            in.close();
        } catch (IOException e) {
        }
        return count;
    }
} </s>
<s>class temp {    public void doRecurringPayment(Subscription subscription) {
        int amount = Math.round(subscription.getTotalCostWithDiscounts() * 100.0f);
        String currency = subscription.getCurrency();
        String aliasCC = subscription.getAliasCC();
        String expm = subscription.getLastCardExpm();
        String expy = subscription.getLastCardExpy();
        String subscriptionId = String.valueOf(subscription.getSubscriptionId());
        StringBuffer xmlSB = new StringBuffer("");
        xmlSB.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
        xmlSB.append("<authorizationService version=\"1\">\n");
        xmlSB.append(" <body merchantId=\"" + getMerchantId() + "\" testOnly=\"" + getTestOnly() + "\">\n");
        xmlSB.append("    <transaction refno=\"" + REF_NO + "\">\n");
        xmlSB.append("      <request>\n");
        xmlSB.append("        <amount>" + amount + "</amount>\n");
        xmlSB.append("        <currency>" + currency + "</currency>\n");
        xmlSB.append("        <aliasCC>" + aliasCC + "</aliasCC>\n");
        xmlSB.append("        <expm>" + expm + "</expm>\n");
        xmlSB.append("        <expy>" + expy + "</expy>\n");
        xmlSB.append("        <subscriptionId>" + subscriptionId + "</subscriptionId>\n");
        xmlSB.append("      </request>\n");
        xmlSB.append("    </transaction>\n");
        xmlSB.append(" </body>\n");
        xmlSB.append("</authorizationService>\n");
        String xmlS = xmlSB.toString();
        try {
            java.net.URL murl = new java.net.URL(getRecurringPaymentUrl());
            java.net.HttpURLConnection mcon = (java.net.HttpURLConnection) murl.openConnection();
            mcon.setRequestMethod("POST");
            mcon.setRequestProperty("encoding", "UTF-8");
            mcon.setRequestProperty("Content-Type", "text/xml");
            mcon.setRequestProperty("Content-length", String.valueOf(xmlS.length()));
            mcon.setDoOutput(true);
            java.io.OutputStream outs = mcon.getOutputStream();
            outs.write(xmlS.getBytes("UTF-8"));
            outs.close();
            java.io.BufferedReader inps = new java.io.BufferedReader(new java.io.InputStreamReader(mcon.getInputStream()));
            StringBuffer respSB = new StringBuffer("");
            String s = null;
            while ((s = inps.readLine()) != null) {
                respSB.append(s);
            }
            inps.close();
            String respXML = respSB.toString();
            processReccurentPaymentResponce(respXML);
        } catch (Exception ex) {
            throw new SecurusException(ex);
        }
    }
} </s>
<s>class temp {    public void run() {
        try {
            URL url = new URL("http://www.sourceforge.net/projects/beobachter/files/beobachter_version.html");
            InputStreamReader reader = new InputStreamReader(url.openStream());
            BufferedReader buffer = new BufferedReader(reader);
            String version = buffer.readLine();
            buffer.close();
            reader.close();
            int serverVersion = Integer.valueOf(version.replaceAll("\\.", "")).intValue();
            int currentVersion = Integer.valueOf(Constants.APP_VERSION.replaceAll("\\.", "")).intValue();
            if (serverVersion > currentVersion) {
                StringBuilder sb = new StringBuilder();
                sb.append(MessageFormat.format(Translator.t("New_version_0_available"), new Object[] { version })).append(Constants.LINE_SEP).append(Constants.LINE_SEP);
                sb.append(Translator.t("Please_visit_us_on_sourceforge")).append(Constants.LINE_SEP);
                DialogFactory.showInformationMessage(MainGUI.instance, sb.toString());
            } else if (serverVersion <= currentVersion) {
                DialogFactory.showInformationMessage(MainGUI.instance, Translator.t("There_are_not_updates_available"));
            }
        } catch (Exception e) {
            DialogFactory.showErrorMessage(MainGUI.instance, Translator.t("Unable_to_fetch_server_information"));
        }
    }
} </s>
<s>class temp {    public MemoryTextBody(InputStream is, String mimeCharset) throws IOException {
        this.mimeCharset = mimeCharset;
        TempPath tempPath = TempStorage.getInstance().getRootTempPath();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        IOUtils.copy(is, out);
        out.close();
        tempFile = out.toByteArray();
    }
} </s>
<s>class temp {    private String md5Digest(String plain) throws Exception {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        digest.update(plain.trim().getBytes());
        byte pwdDigest[] = digest.digest();
        StringBuilder md5buffer = new StringBuilder();
        for (int i = 0; i < pwdDigest.length; i++) {
            int number = 0xFF & pwdDigest[i];
            if (number <= 0xF) {
                md5buffer.append('0');
            }
            md5buffer.append(Integer.toHexString(number));
        }
        return md5buffer.toString();
    }
} </s>
<s>class temp {    public static String getETag(final String uri, final long lastModified) {
        try {
            final MessageDigest dg = MessageDigest.getInstance("MD5");
            dg.update(uri.getBytes("utf-8"));
            dg.update(new byte[] { (byte) ((lastModified >> 24) & 0xFF), (byte) ((lastModified >> 16) & 0xFF), (byte) ((lastModified >> 8) & 0xFF), (byte) (lastModified & 0xFF) });
            return CBASE64Codec.encode(dg.digest());
        } catch (final Exception ignore) {
            return uri + lastModified;
        }
    }
} </s>
<s>class temp {    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
} </s>
<s>class temp {    static ConversionMap create(String file) {
        ConversionMap out = new ConversionMap();
        URL url = ConversionMap.class.getResource(file);
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = in.readLine();
            while (line != null) {
                if (line.length() > 0) {
                    String[] arr = line.split("\t");
                    try {
                        double value = Double.parseDouble(arr[1]);
                        out.put(translate(lowercase(arr[0].getBytes())), value);
                        out.defaultValue += value;
                        out.length = arr[0].length();
                    } catch (NumberFormatException e) {
                        throw new RuntimeException("Something is wrong with in conversion file: " + e);
                    }
                }
                line = in.readLine();
            }
            in.close();
            out.defaultValue /= Math.pow(4, out.length);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Their was an error while reading the conversion map: " + e);
        }
        return out;
    }
} </s>
<s>class temp {    public Vocabulary build(String url) {
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream is = entity.getContent();
                try {
                    Vocabulary tv = build(is);
                    LOG.info("Successfully parsed Thesaurus: " + tv.getTitle());
                    return tv;
                } catch (SAXException e) {
                    LOG.error("Unable to parse XML for extension: " + e.getMessage(), e);
                } finally {
                    is.close();
                }
                entity.consumeContent();
            }
        } catch (Exception e) {
            LOG.error(e);
        }
        return null;
    }
} </s>
<s>class temp {    private void init() throws IOException {
        JarInputStream jis = new JarInputStream(new BufferedInputStream(url.openStream()));
        try {
            do {
                ZipEntry ze = jis.getNextEntry();
                if (ze == null) {
                    break;
                }
                if (!ze.isDirectory()) {
                    entries.add(ze.getName());
                }
            } while (true);
        } finally {
            jis.close();
        }
    }
} </s>
<s>class temp {    public InputStream getEntry(String entryPath) throws IOException {
        if (!entries.contains(entryPath)) {
            return null;
        }
        JarInputStream jis = new JarInputStream(new BufferedInputStream(url.openStream()));
        do {
            ZipEntry ze = jis.getNextEntry();
            if (ze == null) {
                break;
            }
            if (ze.getName().equals(entryPath)) {
                return jis;
            }
        } while (true);
        assert (false);
        return null;
    }
} </s>
<s>class temp {    private void doDissemTest(String what, boolean redirectOK) throws Exception {
        final int num = 30;
        System.out.println("Getting " + what + " " + num + " times...");
        int i = 0;
        try {
            URL url = new URL(BASE_URL + "/get/" + what);
            for (i = 0; i < num; i++) {
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                InputStream in = conn.getInputStream();
                in.read();
                in.close();
                conn.disconnect();
            }
        } catch (Exception e) {
            fail("Dissemination of " + what + " failed on iter " + i + ": " + e.getMessage());
        }
    }
} </s>
<s>class temp {    public InputStream getConfResourceAsInputStream(String name) {
        try {
            URL url = getResource(name);
            if (url == null) {
                LOG.info(name + " not found");
                return null;
            } else {
                LOG.info("found resource " + name + " at " + url);
            }
            return url.openStream();
        } catch (Exception e) {
            return null;
        }
    }
} </s>
<s>class temp {    public Reader getConfResourceAsReader(String name) {
        try {
            URL url = getResource(name);
            if (url == null) {
                LOG.info(name + " not found");
                return null;
            } else {
                LOG.info("found resource " + name + " at " + url);
            }
            return new InputStreamReader(url.openStream());
        } catch (Exception e) {
            return null;
        }
    }
} </s>
<s>class temp {    @Override
    public CelShadingModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {
        boolean baseURLWasNull = setBaseURLFromModelURL(url);
        CelShadingModel model = loadModel(url.openStream(), skin);
        if (baseURLWasNull) {
            popBaseURL();
        }
        return (model);
    }
} </s>
<s>class temp {    public String getHash(String key, boolean base64) throws Exception {
        MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(key.getBytes());
        if (base64) return new String(new Base64().encode(md.digest()), "UTF8"); else return new String(md.digest(), "UTF8");
    }
} </s>
<s>class temp {    public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd");
        DateFormat hhmmss = new SimpleDateFormat("HHmmss");
        DateFormat sss = new SimpleDateFormat("S");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = "UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?" + ((hayVisadoExtracto) ? ", FZJIEXTR=?" : "") + ((hayVisadoRemitente) ? ", FZJIREMI=?" : "") + " WHERE FZJCENSA='E' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, "X");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, "X");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoEntrada);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZENTRA(conn);
                }
                String rem = "";
                String com = "";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup("es.caib.regweb.ValoresHome");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup("es.caib.regweb.ValoresHome");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName("es.caib.regweb.module.PluginHook");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class, String.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class };
                    Object[] params = { "V", new Integer(anoEntrada), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma, null, null, null, null, null, null, null };
                    java.lang.reflect.Method metodo = t.getMethod("entrada", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = "00" + Stringsss;
                    break;
                case (2):
                    Stringsss = "0" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF("UPDATE", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'E', numeroRegistro, anoEntrada, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println("ERROR: No es pot fer rollback sense connexió!");
            } catch (Exception ex) {
                System.out.println("Error: " + ex.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
} </s>
<s>class temp {    public static byte[] post(String path, Map<String, String> params, String encode) throws Exception {
        StringBuilder parambuilder = new StringBuilder("");
        if (params != null && !params.isEmpty()) {
            for (Map.Entry<String, String> entry : params.entrySet()) {
                parambuilder.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), encode)).append("&");
            }
            parambuilder.deleteCharAt(parambuilder.length() - 1);
        }
        byte[] data = parambuilder.toString().getBytes();
        URL url = new URL(path);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setUseCaches(false);
        conn.setConnectTimeout(5 * 1000);
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Accept", "image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*");
        conn.setRequestProperty("Accept-Language", "zh-CN");
        conn.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)");
        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        conn.setRequestProperty("Content-Length", String.valueOf(data.length));
        conn.setRequestProperty("Connection", "Keep-Alive");
        DataOutputStream outStream = new DataOutputStream(conn.getOutputStream());
        outStream.write(data);
        outStream.flush();
        outStream.close();
        if (conn.getResponseCode() == 200) {
            return StreamTool.readInputStream(conn.getInputStream());
        }
        return null;
    }
} </s>
<s>class temp {    private String xifraPassword() throws Exception {
        String password2 = instance.getUsuaris().getPassword2();
        MessageDigest m = MessageDigest.getInstance("MD5");
        m.update(password2.getBytes(), 0, password2.length());
        password2 = new BigInteger(1, m.digest()).toString(16);
        return password2;
    }
} </s>
<s>class temp {    public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception {
        JCRNodeSource emptySource = loadTestSource();
        assertEquals(false, emptySource.exists());
        OutputStream sourceOut = emptySource.getOutputStream();
        assertNotNull(sourceOut);
        InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE);
        try {
            IOUtils.copy(contentIn, sourceOut);
            sourceOut.flush();
        } finally {
            sourceOut.close();
            contentIn.close();
        }
        InputStream expected = getClass().getResourceAsStream(CONTENT_FILE);
        JCRNodeSource persistentSource = loadTestSource();
        assertEquals(true, persistentSource.exists());
        InputStream actual = persistentSource.getInputStream();
        try {
            assertTrue(isXmlEqual(expected, actual));
        } finally {
            expected.close();
            actual.close();
        }
        JCRNodeSource tmpSrc = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.saar");
        persistentSource.delete();
        tmpSrc.delete();
    }
} </s>
<s>class temp {        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
            String resource = schemaMapping.get(systemId);
            if (resource != null) {
                URL url = getClass().getClassLoader().getResource(resource);
                return new InputSource(url.openStream());
            }
            return null;
        }
} </s>
<s>class temp {    public static final boolean checkForUpdate(final String currentVersion, final String updateURL, boolean noLock) throws Exception {
        try {
            final String parentFDTConfDirName = System.getProperty("user.home") + File.separator + ".fdt";
            final String fdtUpdateConfFileName = "update.properties";
            final File confFile = createOrGetRWFile(parentFDTConfDirName, fdtUpdateConfFileName);
            if (confFile != null) {
                long lastCheck = 0;
                Properties updateProperties = new Properties();
                FileInputStream fis = null;
                FileOutputStream fos = null;
                try {
                    fis = new FileInputStream(confFile);
                    updateProperties.load(fis);
                    final String lastCheckProp = (String) updateProperties.get("LastCheck");
                    lastCheck = 0;
                    if (lastCheckProp != null) {
                        try {
                            lastCheck = Long.parseLong(lastCheckProp);
                        } catch (Throwable t) {
                            if (logger.isLoggable(Level.FINE)) {
                                logger.log(Level.FINE, "Got exception parsing LastCheck param", t);
                            }
                            lastCheck = 0;
                        }
                    }
                } catch (Throwable t) {
                    logger.log(Level.WARNING, "Cannot load update properties file: " + confFile, t);
                } finally {
                    closeIgnoringExceptions(fos);
                    closeIgnoringExceptions(fis);
                }
                final long now = System.currentTimeMillis();
                boolean bHaveUpdates = false;
                checkAndSetInstanceID(updateProperties);
                if (lastCheck + FDT.UPDATE_PERIOD < now) {
                    lastCheck = now;
                    try {
                        logger.log("\n\nChecking for remote updates ... This may be disabled using -noupdates flag.");
                        bHaveUpdates = updateFDT(currentVersion, updateURL, false, noLock);
                        if (bHaveUpdates) {
                            logger.log("FDT may be updated using: java -jar fdt.jar -update");
                        } else {
                            if (logger.isLoggable(Level.FINE)) {
                                logger.log(Level.FINE, "No updates available");
                            }
                        }
                    } catch (Throwable t) {
                        if (logger.isLoggable(Level.FINE)) {
                            logger.log(Level.WARNING, "Got exception", t);
                        }
                    }
                    updateProperties.put("LastCheck", "" + now);
                    try {
                        fos = new FileOutputStream(confFile);
                        updateProperties.store(fos, null);
                    } catch (Throwable t1) {
                        logger.log(Level.WARNING, "Cannot store update properties file", t1);
                    } finally {
                        closeIgnoringExceptions(fos);
                    }
                    return bHaveUpdates;
                }
            } else {
                if (logger.isLoggable(Level.FINE)) {
                    logger.log(Level.FINE, " [ checkForUpdate ] Cannot read or write the update conf file: " + parentFDTConfDirName + File.separator + fdtUpdateConfFileName);
                }
                return false;
            }
        } catch (Throwable t) {
            logger.log(Level.WARNING, "Got exception checking for updates", t);
        }
        return false;
    }
} </s>
<s>class temp {    public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception {
        final String partialURL = updateURL + (updateURL.endsWith("/") ? "" : "/") + "fdt.jar";
        logger.log("Checking remote fdt.jar at URL: " + partialURL);
        String JVMVersion = "NotAvailable";
        String JVMRuntimeVersion = "NotAvailable";
        String OSVersion = "NotAvailable";
        String OSName = "NotAvailable";
        String OSArch = "NotAvailable";
        try {
            JVMVersion = System.getProperty("java.vm.version");
        } catch (Throwable t) {
            JVMVersion = "NotAvailable";
        }
        try {
            JVMRuntimeVersion = System.getProperty("java.runtime.version");
        } catch (Throwable t) {
            JVMRuntimeVersion = "NotAvailable";
        }
        try {
            OSName = System.getProperty("os.name");
        } catch (Throwable t) {
            OSName = "NotAvailable";
        }
        try {
            OSArch = System.getProperty("os.arch");
        } catch (Throwable t) {
            OSArch = "NotAvailable";
        }
        try {
            OSVersion = System.getProperty("os.version");
        } catch (Throwable t) {
            OSVersion = "NotAvailable";
        }
        StringBuilder urlBuilder = new StringBuilder();
        urlBuilder.append(partialURL);
        urlBuilder.append("?FDTCurrentVersion=").append(currentVersion);
        urlBuilder.append("&shouldUpdate=").append(shouldUpdate);
        urlBuilder.append("&tstamp=").append(System.currentTimeMillis());
        urlBuilder.append("&java.vm.version=").append(JVMVersion);
        urlBuilder.append("&java.runtime.version=").append(JVMRuntimeVersion);
        urlBuilder.append("&os.name=").append(OSName);
        urlBuilder.append("&os.version=").append(OSVersion);
        urlBuilder.append("&os.arch=").append(OSArch);
        final Properties p = getFDTUpdateProperties();
        if (p.getProperty("totalRead") == null) {
            p.put("totalRead", "0");
        }
        if (p.getProperty("totalWrite") == null) {
            p.put("totalWrite", "0");
        }
        checkAndSetInstanceID(p);
        if (p.getProperty("totalRead_rst") != null) {
            p.remove("totalRead_rst");
        }
        if (p.getProperty("totalWrite_rst") != null) {
            p.remove("totalWrite_rst");
        }
        if (p != null && p.size() > 0) {
            for (final Map.Entry<Object, Object> entry : p.entrySet()) {
                urlBuilder.append("&").append(entry.getKey()).append("=").append(entry.getValue());
            }
        }
        final String finalPath = new URI(FDT.class.getProtectionDomain().getCodeSource().getLocation().toString()).getPath();
        if (finalPath == null || finalPath.length() == 0) {
            throw new IOException("Cannot determine the path to current fdt jar");
        }
        final File currentJar = new File(finalPath);
        if (!currentJar.exists()) {
            throw new IOException("Current fdt.jar path seems to be [ " + finalPath + " ] but the JVM cannot access it!");
        }
        if (currentJar.isFile() && currentJar.canWrite()) {
            logger.log("\nCurrent fdt.jar path is: " + finalPath);
        } else {
            throw new IOException("Current fdt.jar path seems to be [ " + finalPath + " ] but it does not have write access!");
        }
        File tmpUpdateFile = null;
        FileOutputStream fos = null;
        JarFile jf = null;
        InputStream connInputStream = null;
        try {
            tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar");
            tmpUpdateFile.deleteOnExit();
            fos = new FileOutputStream(tmpUpdateFile);
            final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection();
            urlConnection.setDefaultUseCaches(false);
            urlConnection.setUseCaches(false);
            urlConnection.setConnectTimeout(URL_CONNECTION_TIMEOUT);
            urlConnection.setReadTimeout(URL_CONNECTION_TIMEOUT);
            logger.log("Connecting ... ");
            urlConnection.connect();
            connInputStream = urlConnection.getInputStream();
            logger.log("OK");
            byte[] buff = new byte[8192];
            int count = 0;
            while ((count = connInputStream.read(buff)) > 0) {
                fos.write(buff, 0, count);
            }
            fos.flush();
            jf = new JarFile(tmpUpdateFile);
            final Manifest mf = jf.getManifest();
            final Attributes attr = mf.getMainAttributes();
            final String remoteVersion = attr.getValue("Implementation-Version");
            if (remoteVersion == null || remoteVersion.trim().length() == 0) {
                throw new Exception("Cannot read the version from the downloaded jar...Cannot compare versions!");
            }
            if (currentVersion.equals(remoteVersion.trim())) {
                return false;
            }
            logger.log("Remote FDT version: " + remoteVersion + " Local FDT version: " + currentVersion + ". Update available.");
            if (shouldUpdate) {
                try {
                    final String parent = currentJar.getParent();
                    if (parent == null) {
                        logger.log("Unable to determine parent dir for: " + currentJar);
                        throw new IOException("Unable to determine parent dir for: " + currentJar);
                    }
                    final File parentDir = new File(parent);
                    if (!parentDir.canWrite()) {
                        logger.log(Level.WARNING, "[ WARNING CHECK ] The OS reported that is unable to write in parent dir: " + parentDir + " continue anyway; the call might be broken.");
                    }
                    final File bkpJar = new File(parentDir.getPath() + File.separator + "fdt_" + Config.FDT_FULL_VERSION + ".jar");
                    boolean bDel = bkpJar.exists();
                    if (bDel) {
                        bDel = bkpJar.delete();
                        if (!bDel) {
                            logger.log("[ WARNING ] Unable to delete backup jar with the same version: " + bkpJar + " ... will continue");
                        } else {
                            logger.log("[ INFO ] Backup jar (same version as the update) " + bkpJar + " delete it.");
                        }
                    }
                    boolean renameSucced = currentJar.renameTo(bkpJar);
                    if (!renameSucced) {
                        logger.log(Level.WARNING, "Unable to create backup: " + bkpJar + " for current FDT before update.");
                    } else {
                        logger.log("Backing up old FDT succeeded: " + bkpJar);
                    }
                } catch (Throwable t) {
                    logger.log(Level.WARNING, "Unable to create a backup for current FDT before update. Exception: ", t);
                }
                copyFile2File(tmpUpdateFile, currentJar, noLock);
            }
            return true;
        } finally {
            closeIgnoringExceptions(connInputStream);
            closeIgnoringExceptions(fos);
            if (tmpUpdateFile != null) {
                try {
                    tmpUpdateFile.delete();
                } catch (Throwable ignore) {
                }
            }
        }
    }
} </s>
<s>class temp {    public boolean receiveFile(FileDescriptor fileDescriptor) {
        try {
            byte[] block = new byte[1024];
            int sizeRead = 0;
            int totalRead = 0;
            File dir = new File(Constants.DOWNLOAD_DIR + fileDescriptor.getLocation());
            if (!dir.exists()) {
                dir.mkdirs();
            }
            File file = new File(Constants.DOWNLOAD_DIR + fileDescriptor.getLocation() + fileDescriptor.getName());
            if (!file.exists()) {
                file.createNewFile();
            }
            SSLSocket sslsocket = getFileTransferConectionConnectMode(ServerAdress.getServerAdress());
            OutputStream fileOut = new FileOutputStream(file);
            InputStream dataIn = sslsocket.getInputStream();
            while ((sizeRead = dataIn.read(block)) >= 0) {
                totalRead += sizeRead;
                fileOut.write(block, 0, sizeRead);
                propertyChangeSupport.firePropertyChange("fileByte", 0, totalRead);
            }
            fileOut.close();
            dataIn.close();
            sslsocket.close();
            if (fileDescriptor.getName().contains(".snapshot")) {
                try {
                    File fileData = new File(Constants.DOWNLOAD_DIR + fileDescriptor.getLocation() + fileDescriptor.getName());
                    File dirData = new File(Constants.PREVAYLER_DATA_DIRETORY + Constants.FILE_SEPARATOR);
                    File destino = new File(dirData, fileData.getName());
                    boolean success = fileData.renameTo(destino);
                    if (!success) {
                        deleteDir(Constants.DOWNLOAD_DIR);
                        return false;
                    }
                    deleteDir(Constants.DOWNLOAD_DIR);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                if (Server.isServerOpen()) {
                    FileChannel inFileChannel = new FileInputStream(file).getChannel();
                    File dirServer = new File(Constants.DOWNLOAD_DIR + fileDescriptor.getLocation());
                    if (!dirServer.exists()) {
                        dirServer.mkdirs();
                    }
                    File fileServer = new File(Constants.DOWNLOAD_DIR + fileDescriptor.getName());
                    if (!fileServer.exists()) {
                        fileServer.createNewFile();
                    }
                    inFileChannel.transferTo(0, inFileChannel.size(), new FileOutputStream(fileServer).getChannel());
                    inFileChannel.close();
                }
            }
            if (totalRead == fileDescriptor.getSize()) {
                return true;
            }
        } catch (Exception e) {
            logger.error("Receive File:", e);
        }
        return false;
    }
} </s>
<s>class temp {    public static Properties load(URL url) {
        if (url == null) {
            return new Properties();
        }
        InputStream in = null;
        try {
            in = url.openStream();
            Properties ret = new Properties();
            ret.load(in);
            return ret;
        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    LOG.error("Error closing", e);
                }
            }
        }
    }
} </s>
<s>class temp {    public I18N(JApplet applet) {
        if (prop != null) return;
        String lang = "en";
        try {
            Properties userProperties = new Properties();
            if (applet != null) {
                URL url = new URL(applet.getCodeBase() + "logicsim.cfg");
                userProperties.load(url.openStream());
            } else {
                userProperties.load(new FileInputStream("logicsim.cfg"));
            }
            if (userProperties.containsKey("language")) lang = userProperties.getProperty("language");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        prop = new Properties();
        try {
            if (applet != null) {
                URL url = new URL(applet.getCodeBase() + "languages/" + lang + ".txt");
                prop.load(url.openStream());
            } else {
                prop.load(new FileInputStream("languages/" + lang + ".txt"));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            try {
                if (applet != null) {
                    URL url = new URL(applet.getCodeBase() + "languages/en.txt");
                    prop.load(url.openStream());
                } else {
                    prop.load(new FileInputStream("languages/en.txt"));
                }
            } catch (Exception ex2) {
                JOptionPane.showMessageDialog(null, "Language file languages/en.txt not found.\nPlease run the program from its directory.");
                System.exit(5);
            }
        }
    }
} </s>
<s>class temp {    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
} </s>
<s>class temp {    public HttpClient(String urlString, String jsonMessage) throws Exception {
        this.jsonMessage = jsonMessage;
        connection = (HttpURLConnection) (new URL(urlString)).openConnection();
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-type", "text/plain");
    }
} </s>
<s>class temp {    private int getCountFromUrl(String url) {
        HttpGet request = new HttpGet(url);
        try {
            HttpResponse response = httpClient.execute(request);
            int status = response.getStatusLine().getStatusCode();
            if (status != HttpStatus.SC_OK) {
                ByteArrayOutputStream ostream = new ByteArrayOutputStream();
                response.getEntity().writeTo(ostream);
                Log.e(TAG, ostream.toString());
            } else {
                InputStream content = response.getEntity().getContent();
                BufferedReader reader = new BufferedReader(new InputStreamReader(content), 10);
                String count = reader.readLine();
                content.close();
                return Integer.parseInt(count);
            }
        } catch (IOException e) {
            Log.e(TAG, Log.getStackTraceString(e));
        }
        return -1;
    }
} </s>
<s>class temp {    public SRWGuiClient(String initialURL) {
        super("Simple Swing Browser");
        this.initialURL = initialURL;
        addWindowListener(new ExitListener());
        WindowUtilities.setNativeLookAndFeel();
        JPanel topPanel = new JPanel();
        topPanel.setBackground(Color.lightGray);
        homeButton = new JIconButton("home.gif");
        homeButton.addActionListener(this);
        JLabel urlLabel = new JLabel("URL:");
        urlField = new JTextField(30);
        urlField.setText(initialURL);
        urlField.addActionListener(this);
        topPanel.add(homeButton);
        topPanel.add(urlLabel);
        topPanel.add(urlField);
        getContentPane().add(topPanel, BorderLayout.NORTH);
        try {
            URL url = new URL(initialURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            boolean xml = true;
            String inputLine;
            StringBuffer content = new StringBuffer(), stylesheet = null;
            Transformer transformer = null;
            inputLine = in.readLine();
            if (inputLine == null) {
                System.out.println("No input read from URL: " + initialURL);
                return;
            }
            if (!inputLine.startsWith("<?xml ")) {
                xml = false;
                content.append(inputLine);
            }
            if (xml) {
                inputLine = in.readLine();
                if (inputLine.startsWith("<?xml-stylesheet ")) {
                    int offset = inputLine.indexOf("href=");
                    String href = (inputLine.substring(inputLine.indexOf("href=") + 6));
                    href = href.substring(0, href.indexOf('"'));
                    System.out.println("href=" + href);
                    url = new URL(url, href);
                    String stylesheetURL = url.toString();
                    System.out.println("stylesheet URL=" + url.toString());
                    transformer = (Transformer) transformers.get(stylesheetURL);
                    if (transformer == null) {
                        BufferedReader sheetIn = new BufferedReader(new InputStreamReader(url.openStream()));
                        sheetIn.readLine();
                        stylesheet = new StringBuffer();
                        while ((inputLine = sheetIn.readLine()) != null) stylesheet.append(inputLine).append('\n');
                        System.out.println(stylesheet.toString());
                        TransformerFactory tFactory = TransformerFactory.newInstance();
                        StreamSource xslSource = new StreamSource(new StringReader(stylesheet.toString()));
                        transformer = tFactory.newTransformer(xslSource);
                        transformers.put(stylesheetURL, transformer);
                    }
                }
            }
            while ((inputLine = in.readLine()) != null) content.append(inputLine).append('\n');
            htmlPane = new JEditorPane();
            if (transformer != null) {
                StringReader stringRecordReader = new StringReader(content.toString());
                StringWriter xmlRecordWriter = new StringWriter();
                StreamSource streamXMLRecord = new StreamSource(stringRecordReader);
                transformer.transform(streamXMLRecord, new StreamResult(xmlRecordWriter));
                String html = xmlRecordWriter.toString();
                int i = html.indexOf('>');
                html = "<html>" + html.substring(html.indexOf('>') + 1);
                System.out.println(html);
                htmlPane.setContentType("text/html");
                htmlPane.setText("<html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><title>GSAFD Thesaurus</title></head><body><center><h2>GSAFD Thesaurus</h2></center><p>A thesaurus of genre terms to support the \"Guidelines on Subject Access to Individual Works of Fiction , Drama\" (GSAFD)</p><table cellspacing=\"5\" width=\"100%\"><tr><td><h3>Search</h3><p></p></td><td valign=\"top\"><h3>Browse</h3></td></tr></table></body></html>");
            } else htmlPane.setText(content.toString());
            htmlPane.setEditable(false);
            htmlPane.addHyperlinkListener(this);
            JScrollPane scrollPane = new JScrollPane(htmlPane);
            getContentPane().add(scrollPane, BorderLayout.CENTER);
        } catch (IOException ioe) {
            warnUser("Can't build HTML pane for " + initialURL + ": " + ioe);
        } catch (TransformerException e) {
        }
        Dimension screenSize = getToolkit().getScreenSize();
        int width = screenSize.width * 8 / 10;
        int height = screenSize.height * 8 / 10;
        setBounds(width / 8, height / 8, width, height);
        setVisible(true);
    }
} </s>
