<s>class temp {    public void testPostWithGzip() throws Exception {
        HttpPost request = new HttpPost(baseUri + "/echo");
        request.setEntity(new GZIPCompressedEntity(new StringEntity("test")));
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals("test", TestUtil.getResponseAsString(response));
    }
} </s>
<s>class temp {    public void testGetWithKeepAlive() throws Exception {
        HttpGet request = new HttpGet(baseUri + "/test");
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals("test", TestUtil.getResponseAsString(response));
        response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals("test", TestUtil.getResponseAsString(response));
    }
} </s>
<s>class temp {    public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception {
        log.debug("Determining zip file organization...");
        BosVisitor visitor = new DxpFileOrganizingBosVisitor();
        visitor.visit(mapBos);
        if (!options.isQuiet()) log.info("Creating DXP package \"" + outputZipFile.getAbsolutePath() + "\"...");
        OutputStream outStream = new FileOutputStream(outputZipFile);
        ZipOutputStream zipOutStream = new ZipOutputStream(outStream);
        ZipEntry entry = null;
        URI rootMapUri = mapBos.getRoot().getEffectiveUri();
        URI baseUri = null;
        try {
            baseUri = AddressingUtil.getParent(rootMapUri);
        } catch (URISyntaxException e) {
            throw new BosException("URI syntax exception getting parent URI: " + e.getMessage());
        }
        Set<String> dirs = new HashSet<String>();
        if (!options.isQuiet()) log.info("Constructing DXP package...");
        for (BosMember member : mapBos.getMembers()) {
            if (!options.isQuiet()) log.info("Adding member " + member + " to zip...");
            URI relativeUri = baseUri.relativize(member.getEffectiveUri());
            File temp = new File(relativeUri.getPath());
            String parentPath = temp.getParent();
            if (parentPath != null && !"".equals(parentPath) && !parentPath.endsWith("/")) {
                parentPath += "/";
            }
            log.debug("parentPath=\"" + parentPath + "\"");
            if (!"".equals(parentPath) && parentPath != null && !dirs.contains(parentPath)) {
                entry = new ZipEntry(parentPath);
                zipOutStream.putNextEntry(entry);
                zipOutStream.closeEntry();
                dirs.add(parentPath);
            }
            entry = new ZipEntry(relativeUri.getPath());
            zipOutStream.putNextEntry(entry);
            IOUtils.copy(member.getInputStream(), zipOutStream);
            zipOutStream.closeEntry();
        }
        zipOutStream.close();
        if (!options.isQuiet()) log.info("DXP package \"" + outputZipFile.getAbsolutePath() + "\" created.");
    }
} </s>
<s>class temp {    void loadListFile(String listFileName, String majorType, String minorType, String languages, String annotationType) throws MalformedURLException, IOException {
        Lookup defaultLookup = new Lookup(listFileName, majorType, minorType, languages, annotationType);
        URL lurl = new URL(listsURL, listFileName);
        BufferedReader listReader = new BomStrippingInputStreamReader(lurl.openStream(), encoding);
        String line;
        int lines = 0;
        while (null != (line = listReader.readLine())) {
            GazetteerNode node = new GazetteerNode(line, unescapedSeparator, false);
            Lookup lookup = defaultLookup;
            Map<String, String> fm = node.getFeatureMap();
            if (fm != null && fm.size() > 0) {
                lookup = new Lookup(listFileName, majorType, minorType, languages, annotationType);
                Set<String> keyset = fm.keySet();
                if (keyset.size() <= 4) {
                    Map<String, String> newfm = null;
                    for (String key : keyset) {
                        if (key.equals("majorType")) {
                            String tmp = fm.get("majorType");
                            if (canonicalizeStrings) {
                                tmp.intern();
                            }
                            lookup.majorType = tmp;
                        } else if (key.equals("minorType")) {
                            String tmp = fm.get("minorType");
                            if (canonicalizeStrings) {
                                tmp.intern();
                            }
                            lookup.minorType = tmp;
                        } else if (key.equals("languages")) {
                            String tmp = fm.get("languages");
                            if (canonicalizeStrings) {
                                tmp.intern();
                            }
                            lookup.languages = tmp;
                        } else if (key.equals("annotationType")) {
                            String tmp = fm.get("annotationType");
                            if (canonicalizeStrings) {
                                tmp.intern();
                            }
                            lookup.annotationType = tmp;
                        } else {
                            if (newfm == null) {
                                newfm = new HashMap<String, String>();
                            }
                            String tmp = fm.get(key);
                            if (canonicalizeStrings) {
                                tmp.intern();
                            }
                            newfm.put(key, tmp);
                        }
                    }
                    if (newfm != null) {
                        lookup.features = newfm;
                    }
                } else {
                    if (canonicalizeStrings) {
                        for (String key : fm.keySet()) {
                            String tmp = fm.get(key);
                            tmp.intern();
                            fm.put(key, tmp);
                        }
                    }
                    lookup.features = fm;
                }
            }
            addLookup(node.getEntry(), lookup);
            lines++;
        }
        logger.debug("Lines read: " + lines);
    }
} </s>
<s>class temp {    private void copyFile(File dir, File fileToAdd) {
        try {
            byte[] readBuffer = new byte[1024];
            File file = new File(dir.getCanonicalPath() + File.separatorChar + fileToAdd.getName());
            if (file.createNewFile()) {
                FileInputStream fis = new FileInputStream(fileToAdd);
                FileOutputStream fos = new FileOutputStream(file);
                int bytesRead;
                do {
                    bytesRead = fis.read(readBuffer);
                    fos.write(readBuffer, 0, bytesRead);
                } while (bytesRead == 0);
                fos.flush();
                fos.close();
                fis.close();
            } else {
                logger.severe("unable to create file:" + file.getAbsolutePath());
            }
        } catch (IOException ioe) {
            logger.severe("unable to create file:" + ioe);
        }
    }
} </s>
<s>class temp {    private MailBox authenticate() throws Exception {
        String line = "POP3 Server Ready" + ((mChallenge == null) ? "" : (" " + mChallenge));
        MailBox mailbox = null;
        mStream.writeOk(line);
        while (mailbox == null) {
            line = mStream.readLine();
            if (isQuit(line)) break;
            String body;
            if ((body = isCommand(line, "USER")) != null) {
                String user = body;
                MailBox mb = mRepository.getMailBox(user);
                if (mb == null) mStream.writeErr("No mailbox for: " + line); else {
                    mStream.writeOk();
                    String pswd, line2 = mStream.readLine();
                    if (isQuit(line2)) break;
                    if ((pswd = isCommand(line2, "PASS")) == null) mStream.writeErr("Expected PASS but got {" + line2 + "}"); else {
                        String realPswd = mb.getPassword();
                        if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) {
                            mailbox = mb;
                            mStream.writeOk();
                        } else mStream.writeErr("Bad password for " + user);
                    }
                }
            } else if ((body = isCommand(line, "APOP")) != null) {
                if (mChallenge == null) mStream.writeErr("APOP Not Supported"); else {
                    int space = body.indexOf(' ');
                    if (space < 0) mStream.writeErr("Bad APOP command {" + line + "}"); else {
                        String user = body.substring(0, space);
                        String hash = body.substring(space + 1);
                        MailBox mb = mRepository.getMailBox(user);
                        if (mb == null) mStream.writeErr("No mailbox for: " + line); else if (mb.getPassword() == null) mStream.writeErr("User(" + user + ") cannot login using APOP"); else {
                            String secret = mChallenge + mb.getPassword();
                            MessageDigest md5 = MessageDigest.getInstance("MD5");
                            md5.update(secret.getBytes("UTF-8"));
                            byte[] digest = md5.digest();
                            String digestStr = new String(Hex.encodeHex(digest));
                            if (hash.equalsIgnoreCase(digestStr)) {
                                mailbox = mb;
                                mStream.writeOk();
                            } else mStream.writeErr("Bad password for " + user);
                        }
                    }
                }
            } else mStream.writeErr("Authentication required (got '" + line + "')");
        }
        return mailbox;
    }
} </s>
<s>class temp {    public int download(String fileName) {
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        int numRead = 0;
        int totalRead = 0;
        try {
            URL url = new URL(URL);
            out = new BufferedOutputStream(new FileOutputStream(fileName));
            conn = url.openConnection();
            in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                totalRead += numRead;
            }
        } catch (IOException exception) {
            totalRead = 0;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
            return totalRead;
        }
    }
} </s>
<s>class temp {    private static String doGetForSessionKey(String authCode) throws Exception {
        String sessionKey = "";
        HttpClient hc = new DefaultHttpClient();
        HttpGet hg = new HttpGet(Common.TEST_SESSION_HOST + Common.TEST_SESSION_PARAM + authCode);
        HttpResponse hr = hc.execute(hg);
        BufferedReader br = new BufferedReader(new InputStreamReader(hr.getEntity().getContent()));
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }
        String result = sb.toString();
        Log.i("sessionKeyMessages", result);
        Map<String, String> map = Util.handleURLParameters(result);
        sessionKey = map.get(Common.TOP_SESSION);
        String topParameters = map.get(Common.TOP_PARAMETERS);
        String decTopParameters = Util.decodeBase64(topParameters);
        Log.i("base64", decTopParameters);
        map = Util.handleURLParameters(decTopParameters);
        Log.i("nick", map.get(Common.VISITOR_NICK));
        CachePool.put(Common.VISITOR_NICK, map.get(Common.VISITOR_NICK));
        return sessionKey;
    }
} </s>
<s>class temp {    private String getEncoding() throws IOException {
        BufferedReader reader = null;
        String encoding = null;
        try {
            URLConnection connection = url.openConnection();
            Map<String, List<String>> header = connection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : header.entrySet()) {
                if (entry.getKey().toLowerCase().equals("content-type")) {
                    String item = entry.getValue().toString().toLowerCase();
                    if (item.contains("charset")) {
                        encoding = extractEncoding(item);
                        if (encoding != null && !encoding.isEmpty()) return encoding;
                    }
                }
            }
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.toLowerCase();
                if (line.contains("charset") || line.contains("encoding")) {
                    encoding = extractEncoding(line);
                    if (encoding != null && !encoding.isEmpty()) return encoding;
                }
            }
            return STANDARDENCODING;
        } finally {
            if (reader != null) reader.close();
        }
    }
} </s>
<s>class temp {    public void testRegister() throws IOException {
        User newUser = new User(false, "testregUser", "regUser");
        newUser.setEmail("eagle-r@gmx.de");
        newUser.setUniversity("uni");
        newUser.setFirstName("first");
        newUser.setLastName("last");
        User regUser = null;
        try {
            regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] { newUser.getUsername() }, new UserMapper());
        } catch (EmptyResultDataAccessException e) {
        }
        assertNull("This test user already exists! Abort test", regUser);
        userServiceRemote.registrate(newUser);
        setComplete();
        endTransaction();
        regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] { newUser.getUsername() }, new UserMapper());
        assertNotNull(regUser);
        assertNotNull(regUser.getId());
        assertNotNull(regUser.getHash());
        assertFalse(regUser.getHash().isEmpty());
        assertEquals(regUser.getLogin(), newUser.getLogin());
        assertEquals(regUser.getPassword(), newUser.getPassword());
        assertEquals(regUser.getUniversity(), newUser.getUniversity());
        assertEquals(regUser.getEmail(), newUser.getEmail());
        Integer id = newUser.getId();
        getJdbcTemplate().execute("DELETE FROM USER_AUTHORITIES WHERE USER_ID =" + id);
        getJdbcTemplate().execute("DELETE FROM USER WHERE ID = " + id);
        StringBuilder urlString = new StringBuilder(userService.getForumUrl());
        urlString.append("phpBB.php?action=remove").append("&id=").append(newUser.getForumID()).append("&mode=remove");
        logger.debug("Connecting to URL: " + urlString.toString());
        URL url = new URL(urlString.toString());
        URLConnection con = url.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine);
        in.close();
    }
} </s>
<s>class temp {    public void putFile(CompoundName file, FileInputStream fileInput) throws IOException {
        File fullDir = new File(REMOTE_BASE_DIR.getCanonicalPath());
        for (int i = 0; i < file.size() - 1; i++) fullDir = new File(fullDir, file.get(i));
        fullDir.mkdirs();
        File outputFile = new File(fullDir, file.get(file.size() - 1));
        FileOutputStream outStream = new FileOutputStream(outputFile);
        for (int byteIn = fileInput.read(); byteIn != -1; byteIn = fileInput.read()) outStream.write(byteIn);
        fileInput.close();
        outStream.close();
    }
} </s>
<s>class temp {    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);
        if (delegate == null) {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError("errors.session"));
            saveErrors(request, errors);
            return mapping.findForward("fail");
        }
        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();
        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();
        String urlSonido = traAyudaPantalla.getUrlSonido();
        if (urlSonido == null) {
            return null;
        }
        URL url = new URL(urlSonido);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        String tipoMime = urlConnection.getContentType();
        log.debug("Tipo Mime: " + tipoMime);
        Map audioOptions = new HashMap();
        if (tipoMime.indexOf("audio") != -1 || tipoMime.indexOf("asf") != -1 || tipoMime.equals("unknown/unknown")) {
            audioOptions.put("id", "MediaPlayer");
            audioOptions.put("codeBase", "http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112");
            audioOptions.put("classId", "CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95");
            audioOptions.put("mimeType", "application/x-mplayer2");
            audioOptions.put("urlSonido", urlSonido);
            audioOptions.put("pluginSpage", "http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/");
        } else if (tipoMime.indexOf("real") != -1) {
            audioOptions.put("id", "RVOCX");
            audioOptions.put("codeBase", "");
            audioOptions.put("classId", "clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA");
            audioOptions.put("mimeType", "audio/x-pn-realaudio-plugin");
            audioOptions.put("urlSonido", urlSonido);
            audioOptions.put("pluginSpage", "");
        }
        request.setAttribute("audioOptions", audioOptions);
        log.debug("entra success");
        return mapping.findForward("success");
    }
} </s>
<s>class temp {    void readFileHeader(DmgConfigDMO config, ConfigLocation sl) throws IOException {
        fileHeader = "";
        if (config.getGeneratedFileHeader() != null) {
            StringBuffer sb = new StringBuffer();
            if (sl.getJarFilename() != null) {
                URL url = new URL("jar:file:" + sl.getJarFilename() + "!/" + sl.getJarDirectory() + "/" + config.getGeneratedFileHeader());
                LineNumberReader in = new LineNumberReader(new InputStreamReader(url.openStream()));
                String str;
                while ((str = in.readLine()) != null) {
                    sb.append(str + "\n");
                }
                in.close();
            } else {
                LineNumberReader in = new LineNumberReader(new FileReader(sl.getDirectory() + File.separator + config.getGeneratedFileHeader()));
                String str;
                while ((str = in.readLine()) != null) {
                    sb.append(str + "\n");
                }
                in.close();
            }
            fileHeader = sb.toString();
        }
    }
} </s>
<s>class temp {    private static String getRegistrationClasses() {
        CentralRegistrationClass c = new CentralRegistrationClass();
        String name = c.getClass().getCanonicalName().replace('.', '/').concat(".class");
        try {
            Enumeration<URL> urlEnum = c.getClass().getClassLoader().getResources("META-INF/MANIFEST.MF");
            while (urlEnum.hasMoreElements()) {
                URL url = urlEnum.nextElement();
                String file = url.getFile();
                JarURLConnection jarConnection = (JarURLConnection) url.openConnection();
                Manifest mf = jarConnection.getManifest();
                Attributes attrs = (Attributes) mf.getAttributes(name);
                if (attrs != null) {
                    String classes = attrs.getValue("RegistrationClasses");
                    return classes;
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return "";
    }
} </s>
<s>class temp {    public Vector Get() throws Exception {
        String query_str = BuildYahooQueryString();
        if (query_str == null) return null;
        Vector result = new Vector();
        HttpURLConnection urlc = null;
        try {
            URL url = new URL(URL_YAHOO_QUOTE + "?" + query_str + "&" + FORMAT);
            urlc = (HttpURLConnection) url.openConnection();
            urlc.setRequestMethod("GET");
            urlc.setDoOutput(true);
            urlc.setDoInput(true);
            urlc.setUseCaches(false);
            urlc.setAllowUserInteraction(false);
            urlc.setRequestProperty("Content-type", "text/html;charset=UTF-8");
            if (urlc.getResponseCode() == 200) {
                InputStream in = urlc.getInputStream();
                BufferedReader reader = null;
                try {
                    reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
                    String msg = null;
                    while ((msg = reader.readLine()) != null) {
                        ExchangeRate rate = ParseYahooData(msg);
                        if (rate != null) result.add(rate);
                    }
                } finally {
                    if (reader != null) try {
                        reader.close();
                    } catch (Exception e1) {
                    }
                    if (in != null) try {
                        in.close();
                    } catch (Exception e1) {
                    }
                }
                return result;
            }
        } finally {
            if (urlc != null) try {
                urlc.disconnect();
            } catch (Exception e) {
            }
        }
        return null;
    }
} </s>
<s>class temp {    protected void downloadCacheFile(File file) throws Exception {
        ApplicationProperties app = ApplicationProperties.getInstance();
        String address = app.getProperty(JabberConstants.PROPERTY_JABBER_SERVERLIST, DEFAULT_SERVER_URL);
        URL url = new URL(address);
        file.createNewFile();
        OutputStream cache = new FileOutputStream(file);
        InputStream input = url.openStream();
        byte buffer[] = new byte[1024];
        int bytesRead = 0;
        while ((bytesRead = input.read(buffer)) >= 0) cache.write(buffer, 0, bytesRead);
        input.close();
        cache.close();
    }
} </s>
<s>class temp {    public void copyFile(String oldPath, String newPath) {
        try {
            int bytesum = 0;
            int byteread = 0;
            File oldfile = new File(oldPath);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(oldPath);
                FileOutputStream fs = new FileOutputStream(newPath);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
                fs.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private void getEventHeapsFromWeb() {
        try {
            URL url = getServersURL();
            InputStream in = url.openStream();
            Document doc = factory.newDocumentBuilder().parse(in);
            readFromDocument(doc);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
} </s>
<s>class temp {    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            log.warn("HttpProxyServlet: no session");
            response.setStatus(404);
            return;
        }
        User user = (User) session.getAttribute("user");
        if (user == null) {
            log.warn("HttpProxyServlet: user not logged in");
            response.setStatus(404);
            return;
        }
        String target = null;
        if (request.getPathInfo() != null && !request.getPathInfo().equals("")) {
            target = "http:/" + request.getPathInfo() + "?" + request.getQueryString();
            log.info("HttpProxyServlet: target=" + target);
        } else {
            log.warn("HttpProxyServlet: missing pathInfo");
            response.setStatus(404);
            return;
        }
        InputStream is = null;
        ServletOutputStream out = null;
        try {
            URL url = new URL(target);
            URLConnection uc = url.openConnection();
            response.setContentType(uc.getContentType());
            is = uc.getInputStream();
            out = response.getOutputStream();
            byte[] buf = new byte[4096];
            int bytesRead;
            while ((bytesRead = is.read(buf)) != -1) {
                out.write(buf, 0, bytesRead);
            }
        } catch (MalformedURLException e) {
            log.warn("HttpProxyServlet: malformed URL");
            response.setStatus(404);
        } catch (IOException e) {
            log.warn("HttpProxyServlet: I/O exception");
            response.setStatus(404);
        } finally {
            if (is != null) {
                is.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static String getMD5Str(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.reset();
            messageDigest.update(str.getBytes("UTF-8"));
        } catch (NoSuchAlgorithmException e) {
            System.out.println("NoSuchAlgorithmException caught!");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
} </s>
<s>class temp {    public static String upload(File tmpFile, URL url) throws IOException {
        StringBuffer reply = new StringBuffer();
        URLConnection uc = url.openConnection();
        ClientHttpRequest request = new ClientHttpRequest(uc);
        String file = "file";
        String filename = tmpFile.getName();
        InputStream fileinput = new FileInputStream(tmpFile);
        request.setParameter(file, filename, fileinput);
        InputStream serverInput = request.post();
        BufferedReader in = new BufferedReader(new InputStreamReader(serverInput));
        String line = in.readLine();
        while (line != null) {
            reply.append(line + "\n");
            line = in.readLine();
        }
        in.close();
        return reply.toString();
    }
} </s>
<s>class temp {    public byte[] getHTTPByte(String sUrl) {
        HttpURLConnection connection = null;
        InputStream inputStream = null;
        ByteArrayOutputStream os = null;
        try {
            URL url = new URL(sUrl);
            connection = (HttpURLConnection) url.openConnection();
            connection.connect();
            int httpStatus = connection.getResponseCode();
            if (httpStatus != 200) log.info("getHTTPConent error httpStatus - " + httpStatus);
            inputStream = new BufferedInputStream(connection.getInputStream());
            os = new ByteArrayOutputStream();
            InputStream is = new BufferedInputStream(inputStream);
            byte bytes[] = new byte[40960];
            int nRead = -1;
            while ((nRead = is.read(bytes, 0, 40960)) > 0) {
                os.write(bytes, 0, nRead);
            }
            os.close();
            is.close();
            inputStream.close();
        } catch (IOException e) {
            log.warn("SpiderUtil getHTTPConent IOException -> ", e);
        } finally {
            if (inputStream != null) try {
                os.close();
                inputStream.close();
            } catch (IOException e) {
            }
        }
        return os.toByteArray();
    }
} </s>
<s>class temp {    public String getHTTPContent(String sUrl, String encode, String cookie, String host, String referer) {
        HttpURLConnection connection = null;
        InputStream in = null;
        StringBuffer strResult = new StringBuffer();
        try {
            URL url = new URL(sUrl);
            connection = (HttpURLConnection) url.openConnection();
            if (!isStringNull(host)) this.setHttpInfo(connection, cookie, host, referer);
            connection.connect();
            int httpStatus = connection.getResponseCode();
            if (httpStatus != 200) log.info("getHTTPConent error httpStatus - " + httpStatus);
            in = new BufferedInputStream(connection.getInputStream());
            String inputLine = null;
            byte[] b = new byte[40960];
            int len = 0;
            while ((len = in.read(b)) > 0) {
                inputLine = new String(b, 0, len, encode);
                strResult.append(inputLine.replaceAll("[\t\n\r ]", " "));
            }
            in.close();
        } catch (IOException e) {
            log.warn("SpiderUtil getHTTPConent IOException -> ", e);
        } finally {
            if (in != null) try {
                in.close();
            } catch (IOException e) {
            }
        }
        return strResult.toString();
    }
} </s>
<s>class temp {    public int getHttpStatus(ProxyInfo proxyInfo, String sUrl, String cookie, String host) {
        HttpURLConnection connection = null;
        try {
            if (proxyInfo == null) {
                URL url = new URL(sUrl);
                connection = (HttpURLConnection) url.openConnection();
            } else {
                InetSocketAddress addr = new InetSocketAddress(proxyInfo.getPxIp(), proxyInfo.getPxPort());
                Proxy proxy = new Proxy(Proxy.Type.HTTP, addr);
                URL url = new URL(sUrl);
                connection = (HttpURLConnection) url.openConnection(proxy);
            }
            if (!isStringNull(host)) setHttpInfo(connection, cookie, host, "");
            connection.setConnectTimeout(90 * 1000);
            connection.setReadTimeout(90 * 1000);
            connection.connect();
            connection.getInputStream();
            return connection.getResponseCode();
        } catch (IOException e) {
            log.info(proxyInfo + " getHTTPConent Error ");
            return 0;
        } catch (Exception e) {
            log.info(proxyInfo + " getHTTPConent Error ");
            return 0;
        }
    }
} </s>
<s>class temp {    private void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println("Getting web by url: " + strUrl);
            addReport("Getting web by url: " + strUrl + "\n");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + "/web" + fileIndex + ".htm";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append("\n" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println("Get web successfully! " + strUrl);
            addReport("Get web successfully! " + strUrl + "\n");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println("Get web failed!       " + strUrl);
            addReport("Get web failed!       " + strUrl + "\n");
            addWebFailed();
        }
    }
} </s>
<s>class temp {    public static Dimension getJPEGDimension(String urls) throws IOException {
        URL url;
        Dimension d = null;
        try {
            url = new URL(urls);
            InputStream fis = url.openStream();
            if (fis.read() != 255 || fis.read() != 216) throw new RuntimeException("SOI (Start Of Image) marker 0xff 0xd8 missing");
            while (fis.read() == 255) {
                int marker = fis.read();
                int len = fis.read() << 8 | fis.read();
                if (marker == 192) {
                    fis.skip(1);
                    int height = fis.read() << 8 | fis.read();
                    int width = fis.read() << 8 | fis.read();
                    d = new Dimension(width, height);
                    break;
                }
                fis.skip(len - 2);
            }
            fis.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        return d;
    }
} </s>
<s>class temp {    @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv("content-type");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText("name");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split("\\.");
                if (fields != null) {
                    String content = metaNode.getAttributeText("content");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText("name");
            String attr_http_equiv = node.getAttributeText("http-equiv");
            if ("keywords".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if ("description".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if ("robots".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if ("dc.language".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if ("content-language".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains("noindex")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, "noindex");
            }
            if (metaRobots.contains("nofollow")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, "nofollow");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes("a", "frame");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if ("a".equals(nodeName)) {
                    href = node.getAttributeText("href");
                    rel = node.getAttributeText("rel");
                } else if ("frame".equals(nodeName)) {
                    href = node.getAttributeText("src");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains("nofollow")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith("javascript:")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes("html", "body");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes("html");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { "html" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = "html lang attribute";
            String l = nodes.get(0).getAttributeText("lang");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = "meta http-equiv content-language";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = "meta dc.language";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
} </s>
<s>class temp {    public static synchronized String encrypt(String x) throws Exception {
        MessageDigest d = MessageDigest.getInstance("SHA-1");
        d.reset();
        d.update(String.valueOf(x).getBytes());
        return byteArrayToHexString(d.digest());
    }
} </s>
<s>class temp {    public void truncateLog(long finalZxid) throws IOException {
        long highestZxid = 0;
        for (File f : dataDir.listFiles()) {
            long zxid = isValidSnapshot(f);
            if (zxid == -1) {
                LOG.warn("Skipping " + f);
                continue;
            }
            if (zxid > highestZxid) {
                highestZxid = zxid;
            }
        }
        File[] files = getLogFiles(dataLogDir.listFiles(), highestZxid);
        boolean truncated = false;
        for (File f : files) {
            FileInputStream fin = new FileInputStream(f);
            InputArchive ia = BinaryInputArchive.getArchive(fin);
            FileChannel fchan = fin.getChannel();
            try {
                while (true) {
                    byte[] bytes = ia.readBuffer("txtEntry");
                    if (bytes.length == 0) {
                        throw new EOFException();
                    }
                    InputArchive iab = BinaryInputArchive.getArchive(new ByteArrayInputStream(bytes));
                    TxnHeader hdr = new TxnHeader();
                    deserializeTxn(iab, hdr);
                    if (ia.readByte("EOF") != 'B') {
                        throw new EOFException();
                    }
                    if (hdr.getZxid() == finalZxid) {
                        long pos = fchan.position();
                        fin.close();
                        FileOutputStream fout = new FileOutputStream(f);
                        FileChannel fchanOut = fout.getChannel();
                        fchanOut.truncate(pos);
                        truncated = true;
                        break;
                    }
                }
            } catch (EOFException eof) {
            }
            if (truncated == true) {
                break;
            }
        }
        if (truncated == false) {
            LOG.error("Not able to truncate the log " + Long.toHexString(finalZxid));
            System.exit(13);
        }
    }
} </s>
<s>class temp {    public void getZipFiles(String filename) {
        try {
            String destinationname = "c:\\mods\\peu\\";
            byte[] buf = new byte[1024];
            ZipInputStream zipinputstream = null;
            ZipEntry zipentry;
            zipinputstream = new ZipInputStream(new FileInputStream(filename));
            zipentry = zipinputstream.getNextEntry();
            while (zipentry != null) {
                String entryName = zipentry.getName();
                System.out.println("entryname " + entryName);
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(entryName);
                String directory = newFile.getParent();
                if (directory == null) {
                    if (newFile.isDirectory()) break;
                }
                fileoutputstream = new FileOutputStream(destinationname + entryName);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
                zipentry = zipinputstream.getNextEntry();
            }
            zipinputstream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    @Override
    public boolean postPage() {
        MySpaceBlogExporterGuiApp.getApplication().getWizContainer().showStatus(myResourceMap.getString("CheckingBlogUrl.text"));
        URL url;
        try {
            url = new URL(txtBlogUrl.getText());
            URLConnection con = url.openConnection();
            con.getContentType();
            String newLink = con.getURL().toString();
            if (!newLink.equalsIgnoreCase(txtBlogUrl.getText())) {
                JOptionPane.showMessageDialog(new JFrame(), myResourceMap.getString("InvalidBlogUrl.text"), "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), myResourceMap.getString("InvalidUrl.text"), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } finally {
            MySpaceBlogExporterGuiApp.getApplication().getWizContainer().hideStatus();
        }
        if (txtBlogUrl.getText().toLowerCase().indexOf("friendid") > 0) {
            JOptionPane.showMessageDialog(new JFrame(), myResourceMap.getString("InvalidBlogUrl.text"), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        MySpaceBlogExporterGuiApp.getApplication().getMySpaceBlogExporter().setBlogUrl(txtBlogUrl.getText());
        return true;
    }
} </s>
<s>class temp {    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection urlConn = serverURL.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + "=" + command;
        content += "&" + ApplyChangesServlet.PARAMETER_CAPSULE + "=" + URLEncoder.encode(changeCapsule.toJSON(), "UTF-8");
        wr.write(content);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            response.append(str);
        }
        wr.close();
        input.close();
        return response.toString();
    }
} </s>
<s>class temp {    public void delUser(User user) throws SQLException, IOException, ClassNotFoundException {
        String dbUserID;
        String stockSymbol;
        Statement stmt = con.createStatement();
        try {
            con.setAutoCommit(false);
            dbUserID = user.getUserID();
            if (getUser(dbUserID) != null) {
                ResultSet rs1 = stmt.executeQuery("SELECT userID, symbol " + "FROM UserStocks WHERE userID = '" + dbUserID + "'");
                while (rs1.next()) {
                    try {
                        stockSymbol = rs1.getString("symbol");
                        delUserStocks(dbUserID, stockSymbol);
                    } catch (SQLException ex) {
                        throw new SQLException("Deletion of user stock holding failed: " + ex.getMessage());
                    }
                }
                try {
                    stmt.executeUpdate("DELETE FROM Users WHERE " + "userID = '" + dbUserID + "'");
                } catch (SQLException ex) {
                    throw new SQLException("User deletion failed: " + ex.getMessage());
                }
            } else throw new IOException("User not found in database - cannot delete.");
            try {
                con.commit();
            } catch (SQLException ex) {
                throw new SQLException("Transaction commit failed: " + ex.getMessage());
            }
        } catch (SQLException ex) {
            try {
                con.rollback();
            } catch (SQLException sqx) {
                throw new SQLException("Transaction failed then rollback failed: " + sqx.getMessage());
            }
            throw new SQLException("Transaction failed; was rolled back: " + ex.getMessage());
        }
        stmt.close();
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".build")) develBuild = line.substring(6).trim(); else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    private void download(String fileName, HttpServletResponse response) throws IOException {
        TelnetInputStream ftpIn = ftpClient_sun.get(fileName);
        response.setHeader("Content-disposition", "attachment;filename=" + URLEncoder.encode(fileName, "UTF-8"));
        OutputStream out = null;
        try {
            out = response.getOutputStream();
            IOUtils.copy(ftpIn, out);
        } finally {
            if (ftpIn != null) {
                ftpIn.close();
            }
        }
    }
} </s>
<s>class temp {    private void show(String fileName, HttpServletResponse response) throws IOException {
        TelnetInputStream ftpIn = ftpClient_sun.get(fileName);
        OutputStream out = null;
        try {
            out = response.getOutputStream();
            IOUtils.copy(ftpIn, out);
        } finally {
            if (ftpIn != null) {
                ftpIn.close();
            }
        }
    }
} </s>
<s>class temp {    public static String connRemote(JSONObject jsonObject, String OPCode) {
        String retSrc = "";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            List<NameValuePair> nameValuePair = new ArrayList<NameValuePair>();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
} </s>
<s>class temp {    public static String connRemote(JSONObject jsonObject, String OPCode, List<NameValuePair> nameValuePair) {
        String retSrc = "";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
} </s>
<s>class temp {    private static void generateSQLUpgradeFile(String milestoneDefFileName, String sqlDirectoryName, String fromMilestone, String destMilestone, String destFileName) throws Exception {
        File milestoneDefFile = new File(milestoneDefFileName);
        if (!milestoneDefFile.exists()) {
            throw new IllegalArgumentException("Cannot read [" + milestoneDefFileName + "] : does not exists");
        }
        if (!milestoneDefFile.isFile()) {
            throw new IllegalArgumentException("Cannot read [" + milestoneDefFileName + "] : not a file");
        }
        if (!milestoneDefFile.canRead()) {
            throw new IllegalArgumentException("Cannot read [" + milestoneDefFileName + "] : not readable");
        }
        File sqlDirectory = new File(sqlDirectoryName);
        if (!sqlDirectory.exists()) {
            throw new IllegalArgumentException("Cannot read [" + sqlDirectoryName + "] : does not exists");
        }
        if (!sqlDirectory.isDirectory()) {
            throw new IllegalArgumentException("Cannot read [" + sqlDirectoryName + "] : not a directory");
        }
        if (!sqlDirectory.canRead()) {
            throw new IllegalArgumentException("Cannot read [" + sqlDirectoryName + "] : not readable");
        }
        File destFile = new File(destFileName);
        if (destFile.exists()) {
            throw new IllegalArgumentException("Cannot write to [" + destFileName + "] : already exists");
        }
        destFile.createNewFile();
        SqlUpgradeXmlParser parser = SqlUpgradeXmlParser.newParser();
        FileInputStream milestoneDefFIS = null;
        try {
            milestoneDefFIS = new FileInputStream(milestoneDefFile);
            parser.parse(milestoneDefFIS);
        } catch (XMLParseException e) {
            printXmlError(e, milestoneDefFileName);
        } finally {
            try {
                if (milestoneDefFIS != null) milestoneDefFIS.close();
            } catch (Exception e) {
                _logger.warn("Exception caught when closing inputstream ", e);
            }
        }
        int fromMilestoneIdx = parser.getMilestoneIndex(fromMilestone);
        int toMilestoneIdx = parser.getMilestoneIndex(destMilestone);
        if (fromMilestoneIdx < 0) {
            throw new IllegalArgumentException("Cannot upgrade from milestone [" + fromMilestone + "] : does not exist . (Exisiting milestones " + parser.listMilestones() + ")");
        }
        if (toMilestoneIdx < 0) {
            throw new IllegalArgumentException("Cannot upgrade to milestone [" + destMilestone + "] : does not exist . (Exisiting milestones " + parser.listMilestones() + ")");
        }
        if (fromMilestoneIdx == toMilestoneIdx) {
            throw new IllegalArgumentException("Cannot upgrade to the same milestone");
        }
        List<String> files = parser.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);
        List<String> views = parser.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(destFile);
            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, sqlDirectory, it.next());
            }
            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, sqlDirectory, it.next());
            }
        } catch (Exception e) {
            fos.close();
            destFile.delete();
            throw e;
        } finally {
            try {
                if (fos != null) fos.close();
            } catch (Exception e) {
                _logger.warn("Exception caught when closing outputstream ", e);
            }
        }
        System.out.println("An SQL update file has been generated to " + destFileName + ".");
    }
} </s>
<s>class temp {    private void loadInitialDbState() throws IOException {
        InputStream in = SchemaAndDataPopulator.class.getClassLoader().getResourceAsStream(resourceName);
        StringWriter writer = new StringWriter();
        IOUtils.copy(in, writer);
        for (String statement : writer.toString().split(SQL_STATEMENT_DELIMITER)) {
            logger.info("Executing SQL Statement {}", statement);
            template.execute(statement);
        }
    }
} </s>
<s>class temp {    public SM2Client(String umn, String authorizationID, String protocol, String serverName, Map props, CallbackHandler handler) {
        super(SM2_MECHANISM + "-" + umn, authorizationID, protocol, serverName, props, handler);
        this.umn = umn;
        complete = false;
        state = 0;
        if (sha == null) try {
            sha = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException x) {
            cat.error("SM2Client()", x);
            throw new RuntimeException(String.valueOf(x));
        }
        sha.update(String.valueOf(umn).getBytes());
        sha.update(String.valueOf(authorizationID).getBytes());
        sha.update(String.valueOf(protocol).getBytes());
        sha.update(String.valueOf(serverName).getBytes());
        sha.update(String.valueOf(properties).getBytes());
        sha.update(String.valueOf(Thread.currentThread().getName()).getBytes());
        uid = new BigInteger(1, sha.digest()).toString(26);
        Ec = null;
    }
} </s>
<s>class temp {    @Override
    public byte[] read(String path) throws PersistenceException {
        InputStream reader = null;
        ByteArrayOutputStream sw = new ByteArrayOutputStream();
        try {
            reader = new FileInputStream(path);
            IOUtils.copy(reader, sw);
        } catch (Exception e) {
            LOGGER.error("fail to read file - " + path, e);
            throw new PersistenceException(e);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    LOGGER.error("fail to close reader", e);
                }
            }
        }
        return sw.toByteArray();
    }
} </s>
<s>class temp {    @Override
    public void write(String path, InputStream is) throws PersistenceException {
        Writer out = null;
        try {
            out = new OutputStreamWriter(new FileOutputStream(path), "utf-8");
            IOUtils.copy(is, out);
        } catch (IOException e) {
            LOGGER.error("fail to write file", e);
            throw new PersistenceException(e);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    out = null;
                }
            }
        }
    }
} </s>
<s>class temp {    public static String createNormalizedJarDescriptorDigest(String path) throws Exception {
        String descriptor = createNormalizedDescriptor(new JarFile2(path));
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(descriptor.getBytes());
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return "";
    }
} </s>
<s>class temp {    public static BufferedInputStream getEventAttacchment(final String url) throws IOException {
        int slashIndex = url.lastIndexOf("/");
        String encodedUrl = url.substring(0, slashIndex + 1) + URLEncoder.encode(url.substring(slashIndex + 1), "UTF-8");
        String urlwithtoken = encodedUrl + "?ticket=" + getToken();
        BufferedInputStream in = new BufferedInputStream(new URL(urlwithtoken).openStream());
        return in;
    }
} </s>
<s>class temp {    protected GVTFontFamily getFontFamily(BridgeContext ctx, ParsedURL purl) {
        String purlStr = purl.toString();
        Element e = getBaseElement(ctx);
        SVGDocument svgDoc = (SVGDocument) e.getOwnerDocument();
        String docURL = svgDoc.getURL();
        ParsedURL pDocURL = null;
        if (docURL != null) pDocURL = new ParsedURL(docURL);
        String baseURI = XMLBaseSupport.getCascadedXMLBase(e);
        purl = new ParsedURL(baseURI, purlStr);
        UserAgent userAgent = ctx.getUserAgent();
        try {
            userAgent.checkLoadExternalResource(purl, pDocURL);
        } catch (SecurityException ex) {
            userAgent.displayError(ex);
            return null;
        }
        if (purl.getRef() != null) {
            Element ref = ctx.getReferencedElement(e, purlStr);
            if (!ref.getNamespaceURI().equals(SVG_NAMESPACE_URI) || !ref.getLocalName().equals(SVG_FONT_TAG)) {
                return null;
            }
            SVGDocument doc = (SVGDocument) e.getOwnerDocument();
            SVGDocument rdoc = (SVGDocument) ref.getOwnerDocument();
            Element fontElt = ref;
            if (doc != rdoc) {
                fontElt = (Element) doc.importNode(ref, true);
                String base = XMLBaseSupport.getCascadedXMLBase(ref);
                Element g = doc.createElementNS(SVG_NAMESPACE_URI, SVG_G_TAG);
                g.appendChild(fontElt);
                g.setAttributeNS(XMLBaseSupport.XML_NAMESPACE_URI, "xml:base", base);
                CSSUtilities.computeStyleAndURIs(ref, fontElt, purlStr);
            }
            Element fontFaceElt = null;
            for (Node n = fontElt.getFirstChild(); n != null; n = n.getNextSibling()) {
                if ((n.getNodeType() == Node.ELEMENT_NODE) && n.getNamespaceURI().equals(SVG_NAMESPACE_URI) && n.getLocalName().equals(SVG_FONT_FACE_TAG)) {
                    fontFaceElt = (Element) n;
                    break;
                }
            }
            SVGFontFaceElementBridge fontFaceBridge;
            fontFaceBridge = (SVGFontFaceElementBridge) ctx.getBridge(SVG_NAMESPACE_URI, SVG_FONT_FACE_TAG);
            GVTFontFace gff = fontFaceBridge.createFontFace(ctx, fontFaceElt);
            return new SVGFontFamily(gff, fontElt, ctx);
        }
        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, purl.openStream());
            return new AWTFontFamily(this, font);
        } catch (Exception ex) {
        }
        return null;
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        int result = 20;
        if (args.length == 1) {
            StringBuffer urlString = new StringBuffer(args[0]);
            if (urlString.lastIndexOf("/") != urlString.length() - 1) {
                urlString.append('/');
            }
            urlString.append("GetConfig.jsp");
            URLConnection conn = new URL(urlString.toString()).openConnection();
            System.out.println(Configuration.readObject(conn.getInputStream()));
            result = 0;
        } else {
            System.err.println("usage: GetConfig <URL>");
        }
        System.exit(result);
    }
} </s>
<s>class temp {    protected static boolean isLatestVersion(double myVersion, String referenceAddress) {
        Scanner scanner = null;
        try {
            URL url = new URL(referenceAddress);
            InputStream iS = url.openStream();
            scanner = new Scanner(iS);
            String firstLine = scanner.nextLine();
            double latestVersion = Double.valueOf(firstLine.trim());
            double thisVersion = OpenSONAR.VERSION;
            return thisVersion >= latestVersion;
        } catch (UnknownHostException e) {
            System.out.println("Unknown Host!!!");
            return false;
        } catch (Exception e) {
            System.out.println("Can't decide latest version");
            e.printStackTrace();
            return false;
        }
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = null;
        try {
            serverSocket = new ServerSocket(4444);
        } catch (IOException e) {
            System.err.println("Could not listen on port: 4444.");
            System.exit(1);
        }
        Socket clientSocket = null;
        try {
            clientSocket = serverSocket.accept();
        } catch (IOException e) {
            System.err.println("Accept failed.");
            System.exit(1);
        }
        DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        String inputLine, outputLine;
        inputLine = in.readLine();
        String dist_metric = in.readLine();
        File outFile = new File("data.txt");
        FileWriter outw = new FileWriter(outFile);
        outw.write(inputLine);
        outw.close();
        File sample_coords = new File("sample_coords.txt");
        sample_coords.delete();
        File sp_coords = new File("sp_coords.txt");
        sp_coords.delete();
        try {
            System.out.println("Running python script...");
            System.out.println("Command: " + "python l19test.py " + "\"" + dist_metric + "\"");
            Process pr = Runtime.getRuntime().exec("python l19test.py " + dist_metric);
            BufferedReader br = new BufferedReader(new InputStreamReader(pr.getErrorStream()));
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
            int exitVal = pr.waitFor();
            System.out.println("Process Exit Value: " + exitVal);
            System.out.println("done.");
        } catch (Exception e) {
            System.out.println("Unable to run python script for PCoA analysis");
        }
        File myFile = new File("sp_coords.txt");
        byte[] mybytearray = new byte[(new Long(myFile.length())).intValue()];
        FileInputStream fis = new FileInputStream(myFile);
        System.out.println(".");
        System.out.println(myFile.length());
        out.writeInt((int) myFile.length());
        for (int i = 0; i < myFile.length(); i++) {
            out.writeByte(fis.read());
        }
        myFile = new File("sample_coords.txt");
        mybytearray = new byte[(int) myFile.length()];
        fis = new FileInputStream(myFile);
        fis.read(mybytearray);
        System.out.println(".");
        System.out.println(myFile.length());
        out.writeInt((int) myFile.length());
        out.write(mybytearray);
        myFile = new File("evals.txt");
        mybytearray = new byte[(new Long(myFile.length())).intValue()];
        fis = new FileInputStream(myFile);
        fis.read(mybytearray);
        System.out.println(".");
        System.out.println(myFile.length());
        out.writeInt((int) myFile.length());
        out.write(mybytearray);
        out.flush();
        out.close();
        in.close();
        clientSocket.close();
        serverSocket.close();
    }
} </s>
<s>class temp {    public byte[] pipeBytes() {
        byte ba[] = null;
        try {
            URL url = new URL(server);
            conn = (HttpURLConnection) url.openConnection();
            InputStream is = conn.getInputStream();
            ByteArrayOutputStream tout = new ByteArrayOutputStream();
            int nmax = 10000;
            byte b[] = new byte[nmax + 1];
            int nread = 0;
            while ((nread = is.read(b, 0, nmax)) >= 0) tout.write(b, 0, nread);
            ba = tout.toByteArray();
        } catch (Exception ex) {
            System.err.println(ex);
        }
        return ba;
    }
} </s>
<s>class temp {    public static String encrypt(String password, Long digestSeed) {
        try {
            MessageDigest algorithm = MessageDigest.getInstance("MD5");
            algorithm.reset();
            algorithm.update(password.getBytes("UTF-8"));
            algorithm.update(digestSeed.toString().getBytes("UTF-8"));
            byte[] messageDigest = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xff & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static String getMD5(String... list) {
        if (list.length == 0) return null;
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        md.reset();
        for (String in : list) md.update(in.getBytes());
        byte[] digest = md.digest();
        StringBuilder hexString = new StringBuilder();
        for (int i = 0; i < digest.length; ++i) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    @Test
    public void testSecondary() throws Exception {
        ConnectionFactoryIF cf = new DefaultConnectionFactory(PropertyUtils.loadProperties(StreamUtils.getInputStream(propfile)), false);
        Connection conn = cf.requestConnection();
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("drop table if exists first");
            stm.executeUpdate("drop table if exists first_changes");
            stm.executeUpdate("drop table if exists second");
            stm.executeUpdate("drop table if exists second_changes");
            stm.executeUpdate("create table first (a integer, b varchar, c integer, d date)");
            stm.executeUpdate("create table first_changes (a integer, b varchar, c integer, d date, ct varchar, cd integer)");
            stm.executeUpdate("create table second (a integer, b varchar, c integer, d date)");
            stm.executeUpdate("create table second_changes (a integer, b varchar, c integer, d date, ct varchar, cd integer)");
            stm.executeUpdate("insert into first (a,b,c,d) values (1,'a',10, date '2007-01-01')");
            stm.executeUpdate("insert into first (a,b,c,d) values (2,'b',20, date '2007-01-02')");
            stm.executeUpdate("insert into first (a,b,c,d) values (3,'c',30, date '2007-01-03')");
            stm.executeUpdate("insert into first (a,b,c,d) values (4,'d',40, date '2007-01-04')");
            stm.executeUpdate("insert into second (a,b,c,d) values (1,'e',50, date '2007-02-01')");
            stm.executeUpdate("insert into second (a,b,c,d) values (2,'f',60, date '2007-02-02')");
            stm.executeUpdate("insert into second (a,b,c,d) values (3,'g',70, date '2007-02-03')");
            stm.executeUpdate("insert into second (a,b,c,d) values (4,'h',80, date '2007-02-04')");
            conn.commit();
            RelationMapping mapping = RelationMapping.readFromClasspath("net/ontopia/topicmaps/db2tm/JDBCDataSourceTest-secondary.xml");
            TopicMapStoreIF store = new InMemoryTopicMapStore();
            LocatorIF baseloc = URIUtils.getURILocator("base:foo");
            store.setBaseAddress(baseloc);
            TopicMapIF topicmap = store.getTopicMap();
            Processor.addRelations(mapping, null, topicmap, baseloc);
            exportTopicMap(topicmap, "after-first-sync");
            stm.executeUpdate("insert into second_changes (a,b,c,d,ct,cd) values (2,'f',60,date '2007-02-02', 'r', 2)");
            stm.executeUpdate("delete from second where a = 2");
            conn.commit();
            Processor.synchronizeRelations(mapping, null, topicmap, baseloc);
            exportTopicMap(topicmap, "after-second-sync");
            mapping.close();
            stm.executeUpdate("drop table first");
            stm.executeUpdate("drop table first_changes");
            stm.executeUpdate("drop table second");
            stm.executeUpdate("drop table second_changes");
            stm.close();
            store.close();
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw e;
        } finally {
            conn.close();
        }
    }
} </s>
<s>class temp {    private static void main(String[] args) {
        try {
            File f = new File("test.txt");
            if (f.exists()) {
                throw new IOException(f + " already exists.  I don't want to overwrite it.");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println("Error: " + i + " read as " + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) {
            if (force) {
                dest.delete();
            } else {
                throw new IOException(className + "Cannot overwrite existing file: " + dest.getAbsolutePath());
            }
        }
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) {
                    break;
                }
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } finally {
                    if (out != null) {
                        out.close();
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    private void sort() {
        boolean unsortiert = true;
        Datei tmp = null;
        while (unsortiert) {
            unsortiert = false;
            for (int i = 0; i < this.size - 1; i++) {
                if (dateien[i] != null && dateien[i + 1] != null) {
                    if (dateien[i].compareTo(dateien[i + 1]) < 0) {
                        tmp = dateien[i];
                        dateien[i] = dateien[i + 1];
                        dateien[i + 1] = tmp;
                        unsortiert = true;
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    public osid.shared.Id ingest(String fileName, String templateFileName, String fileType, File file, Properties properties) throws osid.repository.RepositoryException, java.net.SocketException, java.io.IOException, osid.shared.SharedException, javax.xml.rpc.ServiceException {
        long sTime = System.currentTimeMillis();
        if (DEBUG) System.out.println("INGESTING FILE TO FEDORA:fileName =" + fileName + "fileType =" + fileType + "t = 0");
        String host = FedoraUtils.getFedoraProperty(this, "admin.ftp.address");
        String url = FedoraUtils.getFedoraProperty(this, "admin.ftp.url");
        int port = Integer.parseInt(FedoraUtils.getFedoraProperty(this, "admin.ftp.port"));
        String userName = FedoraUtils.getFedoraProperty(this, "admin.ftp.username");
        String password = FedoraUtils.getFedoraProperty(this, "admin.ftp.password");
        String directory = FedoraUtils.getFedoraProperty(this, "admin.ftp.directory");
        FTPClient client = new FTPClient();
        client.connect(host, port);
        client.login(userName, password);
        client.changeWorkingDirectory(directory);
        client.setFileType(FTP.BINARY_FILE_TYPE);
        client.storeFile(fileName, new FileInputStream(file));
        client.logout();
        client.disconnect();
        if (DEBUG) System.out.println("INGESTING FILE TO FEDORA: Writting to FTP Server:" + (System.currentTimeMillis() - sTime));
        fileName = url + fileName;
        int BUFFER_SIZE = 10240;
        StringBuffer sb = new StringBuffer();
        String s = new String();
        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(new File(getResource(templateFileName).getFile().replaceAll("%20", " "))));
        byte[] buf = new byte[BUFFER_SIZE];
        int ch;
        int len;
        while ((len = fis.read(buf)) > 0) {
            s = s + new String(buf);
        }
        fis.close();
        if (DEBUG) System.out.println("INGESTING FILE TO FEDORA: Read Mets File:" + (System.currentTimeMillis() - sTime));
        String r = updateMetadata(s, fileName, file.getName(), fileType, properties);
        if (DEBUG) System.out.println("INGESTING FILE TO FEDORA: Resplaced Metadata:" + (System.currentTimeMillis() - sTime));
        File METSfile = File.createTempFile("vueMETSMap", ".xml");
        FileOutputStream fos = new FileOutputStream(METSfile);
        fos.write(r.getBytes());
        fos.close();
        AutoIngestor a = new AutoIngestor(address.getHost(), address.getPort(), FedoraUtils.getFedoraProperty(this, "admin.fedora.username"), FedoraUtils.getFedoraProperty(this, "admin.fedora.username"));
        String pid = a.ingestAndCommit(new FileInputStream(METSfile), "Test Ingest");
        if (DEBUG) System.out.println("INGESTING FILE TO FEDORA: Ingest complete:" + (System.currentTimeMillis() - sTime));
        System.out.println(" METSfile= " + METSfile.getPath() + " PID = " + pid);
        return new PID(pid);
    }
} </s>
<s>class temp {    public static PipeID getPipeIDForService(ServiceDescriptor descriptor) {
        PipeID id = null;
        URI uri = descriptor.getUri();
        if (uri != null) {
            try {
                id = (PipeID) IDFactory.fromURI(uri);
            } catch (URISyntaxException e) {
                throw new RuntimeException("Error creating id for pipe " + uri, e);
            }
        }
        if (id == null) {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance("MD5");
            } catch (NoSuchAlgorithmException e) {
            }
            String idToHash = descriptor.getName();
            if (descriptor.getHost() != null) {
                idToHash += descriptor.getHost();
            }
            md.update(idToHash.getBytes());
            id = IDFactory.newPipeID(InfrastructurePeerGroupID, md.digest());
        }
        return id;
    }
} </s>
<s>class temp {    public LocalizationSolver(String name, String serverIP, int portNum, String workDir) {
        this.info = new HashMap<String, Object>();
        this.workDir = workDir;
        try {
            Socket solverSocket = new Socket(serverIP, portNum);
            this.fromServer = new Scanner(solverSocket.getInputStream());
            this.toServer = new PrintWriter(solverSocket.getOutputStream(), true);
            this.toServer.println("login client abc");
            this.toServer.println("solver " + name);
            System.out.println(this.fromServer.nextLine());
        } catch (IOException e) {
            System.err.println(e);
            e.printStackTrace();
            System.exit(1);
        }
        System.out.println("Localization Solver started with name: " + name);
    }
} </s>
<s>class temp {    public static String replace(URL url, Replacer replacer) throws Exception {
        URLConnection con = url.openConnection();
        InputStreamReader reader = new InputStreamReader(con.getInputStream());
        StringWriter wr = new StringWriter();
        int c;
        StringBuffer token = null;
        while ((c = reader.read()) != -1) {
            if (c == '@') {
                if (token == null) {
                    token = new StringBuffer();
                } else {
                    String val = replacer.replace(token.toString());
                    if (val != null) {
                        wr.write(val);
                        token = null;
                    } else {
                        wr.write('@');
                        wr.write(token.toString());
                        token.delete(0, token.length());
                    }
                }
            } else {
                if (token == null) {
                    wr.write((char) c);
                } else {
                    token.append((char) c);
                }
            }
        }
        if (token != null) {
            wr.write('@');
            wr.write(token.toString());
        }
        return wr.toString();
    }
} </s>
<s>class temp {    public static final String getUniqueId() {
        String digest = "";
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            String timeVal = "" + (System.currentTimeMillis() + 1);
            String localHost = "";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                throw new RuntimeException("Error trying to get localhost" + e.getMessage());
            }
            String randVal = "" + new Random().nextInt();
            String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("NoSuchAlgorithmException : " + e.getMessage());
        }
        return digest;
    }
} </s>
<s>class temp {    public void readContents() throws IOException {
        fireProgressEvent(new ProgressEvent(this, ProgressEvent.PROGRESS_START, 0.0f, "loading file"));
        URLConnection conn = url.openConnection();
        conn.connect();
        filesize = conn.getContentLength();
        logger.finest("filesize: " + filesize);
        InputStreamReader in = new InputStreamReader(conn.getInputStream());
        readFirstLine(in);
        readHeaderLines(in);
        readData(in);
        fireProgressEvent(new ProgressEvent(this, ProgressEvent.PROGRESS_FINISH, 1.0f, "loading file"));
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    private String listaArquivo() {
        String arquivo = "";
        String linha = "";
        try {
            URL url = new URL(this.getCodeBase(), "./listador?dir=" + "cenarios" + "/" + user);
            URLConnection con = url.openConnection();
            con.setUseCaches(false);
            InputStream in = con.getInputStream();
            DataInputStream result = new DataInputStream(new BufferedInputStream(in));
            while ((linha = result.readLine()) != null) {
                arquivo += linha + "\n";
            }
            return arquivo;
        } catch (Exception e) {
            return null;
        }
    }
} </s>
<s>class temp {    private String callBambooApi(URL theURL) throws MonitoringException, BambooTicketNeedToBeRenewedError {
        String returnedValue = null;
        HttpURLConnection urlConnection = null;
        BufferedReader urlConnectionReader = null;
        try {
            urlConnection = (HttpURLConnection) theURL.openConnection();
            urlConnection.connect();
            urlConnectionReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            String line = null;
            StringBuffer serverResponse = new StringBuffer();
            while ((line = urlConnectionReader.readLine()) != null) {
                serverResponse.append(line);
            }
            returnedValue = serverResponse.toString();
            if (returnedValue.contains("<title>Bamboo Setup Wizard - Atlassian Bamboo</title>")) {
                throw new MonitoringException("Your Bamboo server installation is not finished ! Double click here to complete the Bamboo Setup Wizard !", getMainPageURI());
            }
            InputSource is = new InputSource(new StringReader(serverResponse.toString()));
            XPath xpath = XPathFactory.newInstance().newXPath();
            String error = xpath.evaluate("/errors/error", is);
            if (!"".equals(error)) {
                if ("User not authenticated yet, or session timed out.".equals(error)) {
                    throw new BambooTicketNeedToBeRenewedError();
                } else {
                    boolean isErrorOptionsRelated = false;
                    URI uriForNonOptionsRelatedErrors = getMainPageURI();
                    if ("Invalid username or password.".equals(error)) {
                        isErrorOptionsRelated = true;
                    }
                    if ("The remote API has been disabled.".equals(error)) {
                        error += " Double click here to enable it.";
                        try {
                            synchronized (this.bambooProperties) {
                                uriForNonOptionsRelatedErrors = new URI(this.bambooProperties.getServerBaseUrl() + "/admin/configure!default.action");
                            }
                        } catch (URISyntaxException e) {
                            throw new RuntimeException(e);
                        }
                    }
                    throw new MonitoringException("Error reported by the Bamboo server: " + error, isErrorOptionsRelated, uriForNonOptionsRelatedErrors);
                }
            }
        } catch (ClassCastException e) {
            throw new MonitoringException("Problem: the base URL defined for the Bamboo server in Options is not an http URL.", true, null);
        } catch (UnknownHostException e) {
            throw new MonitoringException("Problem: cannot find host " + theURL.getHost() + " on the network.", true, null);
        } catch (ConnectException e) {
            throw new MonitoringException("Problem: cannot connect to port " + theURL.getPort() + " on host " + theURL.getHost() + ".", true, null);
        } catch (FileNotFoundException e) {
            throw new MonitoringException("Problem: cannot find the Bamboo server REST api using the base URL defined for the Bamboo server in Options. Seems that this URL is not the one to your Bamboo server home page...", true, null);
        } catch (SocketException e) {
            throw new MonitoringException("Problem: network error, connection lost.", null);
        } catch (XPathExpressionException e) {
            throw new MonitoringException("Problem: the Bamboo Server returned an unexpected content for attribute <error>: " + returnedValue, null);
        } catch (MonitoringException e) {
            throw e;
        } catch (Throwable t) {
            throw new MonitoringException(t, null);
        } finally {
            if (urlConnectionReader != null) {
                try {
                    urlConnectionReader.close();
                } catch (IOException e) {
                }
            }
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
        return returnedValue;
    }
} </s>
<s>class temp {    public void manageRequest(Transformer transformer) throws ServletException {
        try {
            this.parser.reset();
            String encodedQuery = URLEncoder.encode(this.query, "ISO-8859-1");
            URL url = new URL(EXIST_SERVER + "?_query=" + encodedQuery);
            InputStream in = url.openStream();
            Document doc = this.parser.parse(in);
            Source source = new DOMSource(doc);
            transformer.transform(source, new StreamResult(this.getOut()));
        } catch (TransformerException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length <= 0) {
            System.out.println(" *** DML script generator and executor ***");
            System.out.println(" You must specify name of the file with SQL script data");
            System.out.println(" Fisrt rows of this file must be:");
            System.out.println(" 1) JDBC driver class for your DBMS");
            System.out.println(" 2) URL for your database instance");
            System.out.println(" 3) user in that database (with sufficient priviliges)");
            System.out.println(" 4) password of that user");
            System.out.println(" Next rows can have:");
            System.out.println("   '&' before table to insert into,");
            System.out.println("   '^' before table delete from,");
            System.out.println("   '*' before table update.");
            System.out.println(" Other rows contain parameters of these actions:");
            System.out.println("   for & action each parameter is a list of values,");
            System.out.println("   for * action -//- pare of values with 1st PK (will be in where clause),");
            System.out.println("   for ^ (not obligatory) -//- part of where clause or AND or OR");
            System.out.println("    (by depault parts are united with OR)");
            System.out.println(" Note: despite SQLScript, 1) list (pare) of values can be separated");
            System.out.println("   by space or tab, not only comma and 2) string values can be not quoted,");
            System.out.println("   but in this (2) case only 2 values allowed (even in insert)");
            System.out.println(" '!' before row means that it is a comment.");
            System.out.println(" If some exception is occured, all script is rolled back.");
            System.out.println(" If you specify 2nd command line argument - file name too -");
            System.out.println("   connection will be established but all statements will");
            System.out.println("   be saved in that output file and not transmitted to DB");
            System.out.println(" If you specify 3nd command line argument - connect_string -");
            System.out.println("   connect information will be added to output file");
            System.out.println("   in the form 'connect user/password@connect_string'");
            System.exit(0);
        }
        try {
            String[] info = new String[4];
            BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])));
            Writer writer = null;
            try {
                for (int i = 0; i < info.length; i++) info[i] = reader.readLine();
                try {
                    Class.forName(info[0]);
                    Connection connection = DriverManager.getConnection(info[1], info[2], info[3]);
                    SQLScript script = new DMLScript(connection);
                    if (args.length > 1) {
                        writer = new BufferedWriter(new FileWriter(args[1]));
                        if (args.length > 2) writer.write("connect " + info[2] + "/" + info[3] + "@" + args[2] + script.statementTerminator);
                    }
                    try {
                        System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution");
                    } catch (SQLException e4) {
                        reader.close();
                        if (writer != null) writer.close();
                        System.out.println(" Script execution error: " + e4);
                    }
                    connection.close();
                } catch (Exception e3) {
                    reader.close();
                    if (writer != null) writer.close();
                    System.out.println(" Connection error: " + e3);
                }
            } catch (IOException e2) {
                System.out.println("Error in file " + args[0]);
            }
        } catch (FileNotFoundException e1) {
            System.out.println("File " + args[0] + " not found");
        }
    }
} </s>
<s>class temp {    public void SetRoles(Connection conn, User user, String[] roles) throws NpsException {
        if (!IsSysAdmin() && !IsLocalAdmin()) throw new NpsException(ErrorHelper.ACCESS_NOPRIVILEGE);
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            String sql = "delete from userrole where userid=?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, user.id);
            pstmt.executeUpdate();
            if (roles != null && roles.length > 0) {
                try {
                    pstmt.close();
                } catch (Exception e1) {
                }
                sql = "insert into userrole(userid,roleid) values(?,?)";
                pstmt = conn.prepareStatement(sql);
                for (int i = 0; i < roles.length; i++) {
                    if (roles[i] != null && roles[i].length() > 0) {
                        pstmt.setString(1, user.GetId());
                        pstmt.setString(2, roles[i]);
                        pstmt.executeUpdate();
                    }
                }
            }
            try {
                pstmt.close();
            } catch (Exception e1) {
            }
            if (user.roles_by_name != null) user.roles_by_name.clear();
            if (user.roles_by_id != null) user.roles_by_id.clear();
            if (roles != null && roles.length > 0) {
                sql = "select b.* from UserRole a,Role b where a.roleid = b.id and a.userid=?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, user.id);
                rs = pstmt.executeQuery();
                while (rs.next()) {
                    if (user.roles_by_name == null) user.roles_by_name = new Hashtable();
                    if (user.roles_by_id == null) user.roles_by_id = new Hashtable();
                    user.roles_by_name.put(rs.getString("name"), rs.getString("id"));
                    user.roles_by_id.put(rs.getString("id"), rs.getString("name"));
                }
            }
        } catch (Exception e) {
            try {
                conn.rollback();
            } catch (Exception e1) {
            }
            com.microfly.util.DefaultLog.error(e);
        } finally {
            if (rs != null) try {
                rs.close();
            } catch (Exception e) {
            }
            if (pstmt != null) try {
                pstmt.close();
            } catch (Exception e1) {
            }
        }
    }
} </s>
<s>class temp {    public void writeToFtp(String login, String password, String address, String directory, String filename) {
        String newline = System.getProperty("line.separator");
        try {
            URL url = new URL("ftp://" + login + ":" + password + "@ftp." + address + directory + filename + ".html" + ";type=i");
            URLConnection urlConn = url.openConnection();
            urlConn.setDoOutput(true);
            OutputStreamWriter stream = new OutputStreamWriter(urlConn.getOutputStream());
            stream.write("<html><title>" + title + "</title>" + newline);
            stream.write("<h1><b>" + title + "</b></h1>" + newline);
            stream.write("<h2>Table Of Contents:</h2><ul>" + newline);
            for (int k = 0; k < rings.size(); k++) {
                stream.write("<li><i><a href=\"#");
                stream.write(readNoteTitle(k));
                stream.write("\">");
                stream.write(readNoteTitle(k));
                stream.write("</a></i></li>" + newline);
            }
            stream.write("</ul><hr>" + newline + newline);
            for (int k = 0; k < rings.size(); k++) {
                stream.write("<h3><b>");
                stream.write("<a name=\"");
                stream.write(readNoteTitle(k));
                stream.write("\">");
                stream.write(readNoteTitle(k) + "</a>");
                stream.write("</b></h3>" + newline);
                stream.write(readNoteBody(k) + newline);
            }
            stream.write(newline + "<br><hr><a>This was created using Scribe, a free crutch editor.</a></html>");
            stream.close();
        } catch (IOException error) {
            System.out.println("There was an error: " + error);
        }
    }
} </s>
<s>class temp {    private void copyFile(File src_file, File dest_file) {
        InputStream src_stream = null;
        OutputStream dest_stream = null;
        try {
            int b;
            src_stream = new BufferedInputStream(new FileInputStream(src_file));
            dest_stream = new BufferedOutputStream(new FileOutputStream(dest_file));
            while ((b = src_stream.read()) != -1) dest_stream.write(b);
        } catch (Exception e) {
            XRepository.getLogger().warning(this, "Error on copying the plugin file!");
            XRepository.getLogger().warning(this, e);
        } finally {
            try {
                src_stream.close();
                dest_stream.close();
            } catch (Exception ex2) {
            }
        }
    }
} </s>
<s>class temp {    public void process(String dir) {
        String[] list = new File(dir).list();
        if (list == null) return;
        int n = list.length;
        long[] bubblesort = new long[list.length + 1];
        if (!statustext) {
            IJ.log("Current Directory is: " + dir);
            IJ.log(" ");
            IJ.log("DICOM File Name / " + prefix1 + " / " + prefix2 + " / " + prefix3 + " / " + pick);
            IJ.log(" ");
        }
        for (int i = 0; i < n; i++) {
            IJ.showStatus(i + "/" + n);
            File f = new File(dir + list[i]);
            if (!f.isDirectory()) {
                ImagePlus img = new Opener().openImage(dir, list[i]);
                if (img != null && img.getStackSize() == 1) {
                    if (!scoutengine(img)) return;
                    if (!statustext) {
                        IJ.log(list[i] + "/" + whichprefix1 + "/" + whichprefix2 + "/" + whichprefix3 + "/" + whichcase);
                    }
                    int lastDigit = whichcase.length() - 1;
                    while (lastDigit > 0) {
                        if (!Character.isDigit(whichcase.charAt(lastDigit))) lastDigit -= 1; else break;
                    }
                    if (lastDigit < whichcase.length() - 1) whichcase = whichcase.substring(0, lastDigit + 1);
                    bubblesort[i] = Long.parseLong(whichcase);
                }
            }
        }
        if (statussorta || statussortd || statustext) {
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < n - 1; i++) {
                    if (statussorta) {
                        if (bubblesort[i] > bubblesort[i + 1]) {
                            long temp = bubblesort[i];
                            tempp = list[i];
                            bubblesort[i] = bubblesort[i + 1];
                            list[i] = list[i + 1];
                            bubblesort[i + 1] = temp;
                            list[i + 1] = tempp;
                            sorted = false;
                        }
                    } else {
                        if (bubblesort[i] < bubblesort[i + 1]) {
                            long temp = bubblesort[i];
                            tempp = list[i];
                            bubblesort[i] = bubblesort[i + 1];
                            list[i] = list[i + 1];
                            bubblesort[i + 1] = temp;
                            list[i + 1] = tempp;
                            sorted = false;
                        }
                    }
                }
            }
            IJ.log(" ");
            for (int i = 0; i < n; i++) {
                if (!statustext) {
                    IJ.log(list[i] + " / " + bubblesort[i]);
                } else {
                    IJ.log(dir + list[i]);
                }
            }
        }
        if (open_as_stack || only_images) {
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < n - 1; i++) {
                    if (bubblesort[i] > bubblesort[i + 1]) {
                        long temp = bubblesort[i];
                        tempp = list[i];
                        bubblesort[i] = bubblesort[i + 1];
                        list[i] = list[i + 1];
                        bubblesort[i + 1] = temp;
                        list[i + 1] = tempp;
                        sorted = false;
                    }
                }
            }
            if (only_images) {
                Opener o = new Opener();
                int counter = 0;
                IJ.log(" ");
                for (int i = 0; i < n; i++) {
                    String path = (dir + list[i]);
                    if (path == null) break; else {
                        ImagePlus imp = o.openImage(path);
                        counter++;
                        if (imp != null) {
                            IJ.log(counter + " + " + path);
                            imp.show();
                        } else IJ.log(counter + " - " + path);
                    }
                }
                return;
            }
            int width = 0, height = 0, type = 0;
            ImageStack stack = null;
            double min = Double.MAX_VALUE;
            double max = -Double.MAX_VALUE;
            int k = 0;
            try {
                for (int i = 0; i < n; i++) {
                    String path = (dir + list[i]);
                    if (path == null) break;
                    if (list[i].endsWith(".txt")) continue;
                    ImagePlus imp = new Opener().openImage(path);
                    if (imp != null && stack == null) {
                        width = imp.getWidth();
                        height = imp.getHeight();
                        type = imp.getType();
                        ColorModel cm = imp.getProcessor().getColorModel();
                        if (halfSize) stack = new ImageStack(width / 2, height / 2, cm); else stack = new ImageStack(width, height, cm);
                    }
                    if (stack != null) k = stack.getSize() + 1;
                    IJ.showStatus(k + "/" + n);
                    IJ.showProgress((double) k / n);
                    if (imp == null) IJ.log(list[i] + ": unable to open"); else if (imp.getWidth() != width || imp.getHeight() != height) IJ.log(list[i] + ": wrong dimensions"); else if (imp.getType() != type) IJ.log(list[i] + ": wrong type"); else {
                        ImageProcessor ip = imp.getProcessor();
                        if (grayscale) ip = ip.convertToByte(true);
                        if (halfSize) ip = ip.resize(width / 2, height / 2);
                        if (ip.getMin() < min) min = ip.getMin();
                        if (ip.getMax() > max) max = ip.getMax();
                        String label = imp.getTitle();
                        String info = (String) imp.getProperty("Info");
                        if (info != null) label += "\n" + info;
                        stack.addSlice(label, ip);
                    }
                    System.gc();
                }
            } catch (OutOfMemoryError e) {
                IJ.outOfMemory("FolderOpener");
                stack.trim();
            }
            if (stack != null && stack.getSize() > 0) {
                ImagePlus imp2 = new ImagePlus("Stack", stack);
                if (imp2.getType() == ImagePlus.GRAY16 || imp2.getType() == ImagePlus.GRAY32) imp2.getProcessor().setMinAndMax(min, max);
                imp2.show();
            }
            IJ.showProgress(1.0);
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".version")) version = line.substring(8).trim(); else if (line.startsWith(".build")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    private void sendToFtp(String outputText) {
        String uid = this.properties.get(PROPERTY_OUTPUT_FTP_USERNAME);
        String pwd = this.properties.get(PROPERTY_OUTPUT_FTP_PASSWORD);
        String address = this.properties.get(PROPERTY_OUTPUT_FTP_ADDRESS);
        int port = 21;
        try {
            port = Integer.valueOf(this.properties.get(PROPERTY_OUTPUT_FTP_PORT));
        } catch (Exception ex) {
            LOG.log(Level.WARNING, "Could not read FTP port from properties. Using port 21");
        }
        String location = this.properties.get(PROPERTY_OUTPUT_FTP_LOCATION);
        String filename = this.properties.get(PROPERTY_OUTPUT_FTP_FILENAME);
        LOG.log(Level.INFO, "Uploading text output to {0}:{1}/{2}/{3}", new Object[] { address, port, location, filename });
        FTPClient ftpClient = new FTPClient();
        try {
            ftpClient.connect(address, port);
            int reply = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftpClient.disconnect();
                LOG.log(Level.SEVERE, "Could not connect to FTP server: {0}", reply);
                return;
            }
            if (!ftpClient.login(uid, pwd)) {
                LOG.log(Level.SEVERE, "Could not login to FTP server ({0}) with given credentials.", address);
                return;
            }
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
            ftpClient.enterLocalPassiveMode();
            if (ftpClient.storeFile(location + "/" + filename, new ByteArrayInputStream(outputText.getBytes()))) {
                LOG.log(Level.INFO, "Transfer complete");
            } else {
                LOG.log(Level.WARNING, "Transfer incomplete");
            }
        } catch (SocketException ex) {
            LOG.log(Level.SEVERE, "Could not transfer file.", ex.getMessage());
            LOG.log(Level.FINE, "", ex);
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, "Could not transfer file.", ex.getMessage());
            LOG.log(Level.FINE, "", ex);
        }
        if (ftpClient.isConnected()) {
            try {
                ftpClient.disconnect();
            } catch (IOException ex) {
                LOG.log(Level.SEVERE, "Could not disconnect from FTP.", ex.getMessage());
                LOG.log(Level.FINE, "", ex);
            }
        }
    }
} </s>
<s>class temp {    public static boolean copy(File source, File target, boolean owrite) {
        if (!source.exists()) {
            log.error("Invalid input to copy: source " + source + "doesn't exist");
            return false;
        } else if (!source.isFile()) {
            log.error("Invalid input to copy: source " + source + "isn't a file.");
            return false;
        } else if (target.exists() && !owrite) {
            log.error("Invalid input to copy: target " + target + " exists.");
            return false;
        }
        try {
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(source));
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(target));
            byte buffer[] = new byte[1024];
            int read = -1;
            while ((read = in.read(buffer, 0, 1024)) != -1) out.write(buffer, 0, read);
            out.flush();
            out.close();
            in.close();
            return true;
        } catch (IOException e) {
            log.error("Copy failed: ", e);
            return false;
        }
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public synchronized String encrypt(String text) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        md.update(text.getBytes());
        byte raw[] = md.digest();
        String hash = "";
        for (int i = 0; i < raw.length; i++) {
            byte temp = raw[i];
            String s = Integer.toHexString(new Byte(temp));
            while (s.length() < 2) {
                s = "0" + s;
            }
            s = s.substring(s.length() - 2);
            hash += s;
        }
        return hash;
    }
} </s>
<s>class temp {    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println("GestorPedido.elimina()");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = "DELETE FROM pedido WHERE id=" + id;
            System.out.println("Ejecutando: " + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println("executeUpdate");
            gd.commit();
            System.out.println("commit");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println("Error en GestorPedido.elimina(): " + e);
        } catch (errorSQL e) {
            System.err.println("Error en GestorPedido.elimina(): " + e);
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException {
        PostParameter a1 = new PostParameter("v", Utils.encode("1.0"));
        PostParameter a2 = new PostParameter("api_key", Utils.encode(RenRenConstant.apiKey));
        PostParameter a3 = new PostParameter("method", Utils.encode("notifications.send"));
        PostParameter a4 = new PostParameter("call_id", System.nanoTime());
        PostParameter a5 = new PostParameter("session_key", Utils.encode("5.22af9ee9ad842c7eb52004ece6e96b10.86400.1298646000-350727914"));
        PostParameter a6 = new PostParameter("to_ids", Utils.encode("350727914"));
        PostParameter a7 = new PostParameter("notification", "又到了要睡觉的时间了。");
        PostParameter a8 = new PostParameter("format", Utils.encode("JSON"));
        RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));
        ps.addParameter(a1);
        ps.addParameter(a2);
        ps.addParameter(a3);
        ps.addParameter(a4);
        ps.addParameter(a5);
        ps.addParameter(a6);
        ps.addParameter(a7);
        ps.addParameter(a8);
        System.out.println(RenRenConstant.apiUrl + "?" + ps.generateUrl());
        URL url = new URL(RenRenConstant.apiUrl + "?" + ps.generateUrl());
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod("POST");
        System.out.println("Sending request...");
        request.connect();
        System.out.println("Response: " + request.getResponseCode() + " " + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
} </s>
<s>class temp {    public static String checksum(URL url, String algorithm) {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance(algorithm);
        } catch (Exception ex) {
            throw new RuntimeException("Could not create an instance of MessageDigest", ex);
        }
        byte[] bytes = new byte[4 * 1024];
        try {
            InputStream in = null;
            try {
                in = url.openStream();
                int nBytesRead = 0;
                while ((nBytesRead = in.read(bytes)) > 0) {
                    messageDigest.update(bytes, 0, nBytesRead);
                }
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("Could not read message digest for: " + url.toExternalForm() + " using algorithm: " + algorithm);
        }
        byte[] checksumValue = messageDigest.digest();
        return digestAsString(checksumValue);
    }
} </s>
<s>class temp {    public void testBlobB() {
        ResultSet rs;
        byte[] ba;
        byte[] baR1 = new byte[] { (byte) 0xF1, (byte) 0xF2, (byte) 0xF3, (byte) 0xF4, (byte) 0xF5, (byte) 0xF6, (byte) 0xF7, (byte) 0xF8, (byte) 0xF9, (byte) 0xFA, (byte) 0xFB };
        byte[] baR2 = new byte[] { (byte) 0xE1, (byte) 0xE2, (byte) 0xE3, (byte) 0xE4, (byte) 0xE5, (byte) 0xE6, (byte) 0xE7, (byte) 0xE8, (byte) 0xE9, (byte) 0xEA, (byte) 0xEB };
        try {
            connection.setAutoCommit(false);
            Statement st = connection.createStatement();
            st.executeUpdate("DROP TABLE blo IF EXISTS");
            st.executeUpdate("CREATE TABLE blo (id INTEGER, b blob( 100))");
            PreparedStatement ps = connection.prepareStatement("INSERT INTO blo(id, b) values(2, ?)");
            ps.setBlob(1, new SerialBlob(baR1));
            ps.executeUpdate();
            rs = st.executeQuery("SELECT b FROM blo WHERE id = 2");
            if (!rs.next()) {
                assertTrue("No row with id 2", false);
            }
            java.sql.Blob blob1 = rs.getBlob("b");
            System.out.println("Size of retrieved blob: " + blob1.length());
            byte[] baOut = blob1.getBytes(1, (int) blob1.length());
            if (baOut.length != baR1.length) {
                assertTrue("Expected array len " + baR1.length + ", got len " + baOut.length, false);
            }
            for (int i = 0; i < baOut.length; i++) {
                if (baOut[i] != baR1[i]) {
                    assertTrue("Expected array len " + baR1.length + ", got len " + baOut.length, false);
                }
            }
            rs.close();
            rs = st.executeQuery("SELECT b FROM blo WHERE id = 2");
            if (!rs.next()) {
                assertTrue("No row with id 2", false);
            }
            blob1 = rs.getBlob("b");
            ba = blob1.getBytes(1, baR2.length);
            if (ba.length != baR2.length) {
                assertTrue("row2 byte length differs", false);
            }
            for (int i = 0; i < ba.length; i++) {
                if (ba[i] != baR1[i]) {
                    assertTrue("row2 byte " + i + " differs", false);
                }
            }
            rs.close();
            connection.rollback();
            ps.setBinaryStream(1, new HsqlByteArrayInputStream(baR1), baR1.length);
            ps.executeUpdate();
            rs = st.executeQuery("SELECT b FROM blo WHERE id = 2");
            if (!rs.next()) {
                assertTrue("No row with id 2", false);
            }
            blob1 = rs.getBlob("b");
            System.out.println("Size of retrieved blob: " + blob1.length());
            baOut = blob1.getBytes(1, (int) blob1.length());
            if (baOut.length != baR1.length) {
                assertTrue("Expected array len " + baR1.length + ", got len " + baOut.length, false);
            }
            for (int i = 0; i < baOut.length; i++) {
                if (baOut[i] != baR1[i]) {
                    assertTrue("Expected array len " + baR1.length + ", got len " + baOut.length, false);
                }
            }
            rs.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
            fail("test failure");
        }
    }
} </s>
<s>class temp {    public static String hashString(String pwd) {
        StringBuffer hex = new StringBuffer();
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(pwd.getBytes());
            byte[] d = md.digest();
            String plaintxt;
            for (int i = 0; i < d.length; i++) {
                plaintxt = Integer.toHexString(0xFF & d[i]);
                if (plaintxt.length() < 2) {
                    plaintxt = "0" + plaintxt;
                }
                hex.append(plaintxt);
            }
        } catch (NoSuchAlgorithmException nsae) {
        }
        return hex.toString();
    }
} </s>
<s>class temp {    public void store(Component component, String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement("UPDATE component_prop " + "SET size_height = ?, size_width = ?, pos_x = ?, pos_y = ? " + "WHERE pilot_id = ? " + "AND component_name = ?");
            psta.setInt(1, component.getHeight());
            psta.setInt(2, component.getWidth());
            Point point = component.getLocation();
            psta.setInt(3, point.x);
            psta.setInt(4, point.y);
            psta.setInt(5, currentPilot);
            psta.setString(6, componentName);
            int update = psta.executeUpdate();
            if (update == 0) {
                psta = jdbc.prepareStatement("INSERT INTO component_prop " + "(size_height, size_width, pos_x, pos_y, pilot_id, component_name) " + "VALUES (?,?,?,?,?,?)");
                psta.setInt(1, component.getHeight());
                psta.setInt(2, component.getWidth());
                psta.setInt(3, point.x);
                psta.setInt(4, point.y);
                psta.setInt(5, currentPilot);
                psta.setString(6, componentName);
                psta.executeUpdate();
            }
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
} </s>
<s>class temp {    public void reset(String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement("DELETE FROM component_prop " + "WHERE pilot_id = ? " + "AND component_name = ?");
            psta.setInt(1, currentPilot);
            psta.setString(2, componentName);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
} </s>
<s>class temp {    public void reset(int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement("DELETE FROM component_prop " + "WHERE pilot_id = ? ");
            psta.setInt(1, currentPilot);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
} </s>
<s>class temp {    public void testDecode1000BinaryStore() throws Exception {
        EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/DataStore/DataStore.xsd", getClass(), m_compilerErrors);
        Assert.assertEquals(0, m_compilerErrors.getTotalCount());
        GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS);
        String[] base64Values100 = { "R0lGODdhWALCov////T09M7Ozqampn19fVZWVi0tLQUFBSxYAsJAA/8Iutz+MMpJq7046827/2Ao\n", "/9j/4BBKRklGAQEBASwBLP/hGlZFeGlmTU0qF5ZOSUtPTiBDT1JQT1JBVElPTk5J", "R0lGODlhHh73KSkpOTk5QkJCSkpKUlJSWlpaY2Nja2trc3Nze3t7hISEjIyMlJSUnJycpaWlra2t\n" + "tbW1vb29xsbGzs7O1tbW3t7e5+fn7+/v//////////8=", "/9j/4BBKRklGAQEBAf/bQwYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBc=", "R0lGODlhHh73M2aZzP8zMzNmM5kzzDP/M2YzZmZmmWbM", "/9j/4BBKRklGAQEBAf/bQwYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsj\n" + "HBYWICwgIyYnKSopGR8tMC0oMCUoKSj/20M=", "R0lGODdhWAK+ov////j4+NTU1JOTk0tLSx8fHwkJCSxYAr5AA/8IMkzjrEEmahy23SpC", "R0lGODdh4QIpAncJIf4aU29mdHdhcmU6IE1pY3Jvc29mdCBPZmZpY2Us4QIpAof//////8z//5n/\n", "R0lGODdhWAK+ov////v7++fn58DAwI6Ojl5eXjExMQMDAyxYAr5AA/8Iutz+MMpJq7046827/2Ao\n" + "jmRpnmiqPsKxvg==", "R0lGODdh4QIpAncJIf4aU29mdHdhcmU6IE1pY3Jvc29mdCBPZmZpY2Us4QIpAob//////8z//5n/\nzP//zMw=" };
        AlignmentType alignment = AlignmentType.bitPacked;
        Transmogrifier encoder = new Transmogrifier();
        encoder.setEXISchema(grammarCache);
        encoder.setAlignmentType(alignment);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        encoder.setOutputStream(baos);
        URL url = resolveSystemIdAsURL("/DataStore/instance/1000BinaryStore.xml");
        encoder.encode(new InputSource(url.openStream()));
        byte[] bts = baos.toByteArray();
        Scanner scanner;
        int n_texts;
        EXIDecoder decoder = new EXIDecoder(999);
        decoder.setEXISchema(grammarCache);
        decoder.setAlignmentType(alignment);
        decoder.setInputStream(new ByteArrayInputStream(bts));
        scanner = decoder.processHeader();
        EXIEvent exiEvent;
        n_texts = 0;
        while ((exiEvent = scanner.nextEvent()) != null) {
            if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) {
                if (++n_texts % 100 == 0) {
                    String expected = base64Values100[(n_texts / 100) - 1];
                    String val = exiEvent.getCharacters().makeString();
                    Assert.assertEquals(expected, val);
                }
            }
        }
        Assert.assertEquals(1000, n_texts);
    }
} </s>
<s>class temp {    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException("Could not load configuration from " + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
} </s>
<s>class temp {    public Ftp(Resource resource, String basePath) throws Exception {
        super(resource, basePath);
        client = new FTPClient();
        client.addProtocolCommandListener(new CommandLogger());
        client.connect(resource.getString("host"), Integer.parseInt(resource.getString("port")));
        client.login(resource.getString("user"), resource.getString("pw"));
        client.setFileType(FTPClient.BINARY_FILE_TYPE);
        client.enterLocalPassiveMode();
    }
} </s>
<s>class temp {    public String get(String s) {
        s = s.replaceAll("[^a-z0-9_]", "");
        StringBuilder sb = new StringBuilder();
        try {
            String result = null;
            URL url = new URL("http://docs.google.com/Doc?id=" + URLEncoder.encode(s, "UTF-8"));
            URLConnection connection = url.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)");
            connection.setDoOutput(false);
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
            String inputLine;
            int state = 0;
            while ((inputLine = in.readLine()) != null) {
                if (state == 0) {
                    int textPos = inputLine.indexOf("id=\"doc-contents");
                    if (textPos >= 0) {
                        state = 1;
                    }
                } else if (state == 1) {
                    int textPos = inputLine.indexOf("</div>");
                    if (textPos >= 0) break;
                    inputLine = inputLine.replaceAll("[\\u0000-\\u001F]", "");
                    sb.append(inputLine);
                }
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sb.toString();
    }
} </s>
<s>class temp {    public void create() {
        Connection conn = OrmHandler.getInstance().getSession().getConnection(this);
        Statement stat = null;
        StringBuilder sql = new StringBuilder(256);
        try {
            getRenderer().printCreateDatabase(this, sql);
            conn = createConnection();
            stat = conn.createStatement();
            stat.executeUpdate(sql.toString());
            conn.commit();
            if (LOGGER.isLoggable(Level.INFO)) {
                LOGGER.info(sql.toString());
            }
        } catch (Throwable e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    LOGGER.log(Level.WARNING, "Can't rollback DB" + toString(), ex);
                }
            }
            throw new IllegalArgumentException("Statement error:\n" + sql, e);
        } finally {
            try {
                close(conn, stat, null, true);
            } catch (IllegalStateException ex) {
                LOGGER.log(Level.WARNING, "Can't rollback DB" + toString(), ex);
            }
        }
    }
} </s>
<s>class temp {    public void moveMessage(DBMimeMessage oSrcMsg) throws MessagingException {
        if (DebugFile.trace) {
            DebugFile.writeln("Begin DBFolder.moveMessage()");
            DebugFile.incIdent();
        }
        JDCConnection oConn = null;
        PreparedStatement oStmt = null;
        ResultSet oRSet = null;
        BigDecimal oPg = null;
        BigDecimal oPos = null;
        int iLen = 0;
        try {
            oConn = ((DBStore) getStore()).getConnection();
            oStmt = oConn.prepareStatement("SELECT " + DB.pg_message + "," + DB.nu_position + "," + DB.len_mimemsg + " FROM " + DB.k_mime_msgs + " WHERE " + DB.gu_mimemsg + "=?");
            oStmt.setString(1, oSrcMsg.getMessageGuid());
            oRSet = oStmt.executeQuery();
            if (oRSet.next()) {
                oPg = oRSet.getBigDecimal(1);
                oPos = oRSet.getBigDecimal(2);
                iLen = oRSet.getInt(3);
            }
            oRSet.close();
            oRSet = null;
            oStmt.close();
            oStmt = null;
            oConn.setAutoCommit(false);
            oStmt = oConn.prepareStatement("UPDATE " + DB.k_categories + " SET " + DB.len_size + "=" + DB.len_size + "-" + String.valueOf(iLen) + " WHERE " + DB.gu_category + "=?");
            oStmt.setString(1, ((DBFolder) (oSrcMsg.getFolder())).getCategory().getString(DB.gu_category));
            oStmt.executeUpdate();
            oStmt.close();
            oStmt = null;
            oStmt = oConn.prepareStatement("UPDATE " + DB.k_categories + " SET " + DB.len_size + "=" + DB.len_size + "+" + String.valueOf(iLen) + " WHERE " + DB.gu_category + "=?");
            oStmt.setString(1, getCategory().getString(DB.gu_category));
            oStmt.executeUpdate();
            oStmt.close();
            oStmt = null;
            oConn.commit();
        } catch (SQLException sqle) {
            if (null != oRSet) {
                try {
                    oRSet.close();
                } catch (Exception ignore) {
                }
            }
            if (null != oStmt) {
                try {
                    oStmt.close();
                } catch (Exception ignore) {
                }
            }
            if (null != oConn) {
                try {
                    oConn.rollback();
                } catch (Exception ignore) {
                }
            }
            throw new MessagingException(sqle.getMessage(), sqle);
        }
        if (null == oPg) throw new MessagingException("Source message not found");
        if (null == oPos) throw new MessagingException("Source message position is not valid");
        DBFolder oSrcFldr = (DBFolder) oSrcMsg.getFolder();
        MboxFile oMboxSrc = null, oMboxThis = null;
        try {
            oMboxSrc = new MboxFile(oSrcFldr.getFile(), MboxFile.READ_WRITE);
            oMboxThis = new MboxFile(oSrcFldr.getFile(), MboxFile.READ_WRITE);
            oMboxThis.appendMessage(oMboxSrc, oPos.longValue(), iLen);
            oMboxThis.close();
            oMboxThis = null;
            oMboxSrc.purge(new int[] { oPg.intValue() });
            oMboxSrc.close();
            oMboxSrc = null;
        } catch (Exception e) {
            if (oMboxThis != null) {
                try {
                    oMboxThis.close();
                } catch (Exception ignore) {
                }
            }
            if (oMboxSrc != null) {
                try {
                    oMboxSrc.close();
                } catch (Exception ignore) {
                }
            }
            throw new MessagingException(e.getMessage(), e);
        }
        try {
            oConn = ((DBStore) getStore()).getConnection();
            BigDecimal dNext = getNextMessage();
            String sCatGuid = getCategory().getString(DB.gu_category);
            oStmt = oConn.prepareStatement("UPDATE " + DB.k_mime_msgs + " SET " + DB.gu_category + "=?," + DB.pg_message + "=? WHERE " + DB.gu_mimemsg + "=?");
            oStmt.setString(1, sCatGuid);
            oStmt.setBigDecimal(2, dNext);
            oStmt.setString(3, oSrcMsg.getMessageGuid());
            oStmt.executeUpdate();
            oStmt.close();
            oStmt = null;
            oConn.commit();
        } catch (SQLException sqle) {
            if (null != oStmt) {
                try {
                    oStmt.close();
                } catch (Exception ignore) {
                }
            }
            if (null != oConn) {
                try {
                    oConn.rollback();
                } catch (Exception ignore) {
                }
            }
            throw new MessagingException(sqle.getMessage(), sqle);
        }
        if (DebugFile.trace) {
            DebugFile.decIdent();
            DebugFile.writeln("End DBFolder.moveMessage()");
        }
    }
} </s>
<s>class temp {    public void open(int mode) throws MessagingException {
        final int ALL_OPTIONS = READ_ONLY | READ_WRITE | MODE_MBOX | MODE_BLOB;
        if (DebugFile.trace) {
            DebugFile.writeln("DBFolder.open(" + String.valueOf(mode) + ")");
            DebugFile.incIdent();
        }
        if ((0 == (mode & READ_ONLY)) && (0 == (mode & READ_WRITE))) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new MessagingException("Folder must be opened in either READ_ONLY or READ_WRITE mode");
        } else if (ALL_OPTIONS != (mode | ALL_OPTIONS)) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new MessagingException("Invalid DBFolder open() option mode");
        } else {
            if ((0 == (mode & MODE_MBOX)) && (0 == (mode & MODE_BLOB))) mode = mode | MODE_MBOX;
            iOpenMode = mode;
            oConn = ((DBStore) getStore()).getConnection();
            if ((iOpenMode & MODE_MBOX) != 0) {
                String sFolderUrl;
                try {
                    sFolderUrl = Gadgets.chomp(getStore().getURLName().getFile(), File.separator) + oCatg.getPath(oConn);
                    if (DebugFile.trace) DebugFile.writeln("mail folder directory is " + sFolderUrl);
                    if (sFolderUrl.startsWith("file://")) sFolderDir = sFolderUrl.substring(7); else sFolderDir = sFolderUrl;
                } catch (SQLException sqle) {
                    iOpenMode = 0;
                    oConn = null;
                    if (DebugFile.trace) DebugFile.decIdent();
                    throw new MessagingException(sqle.getMessage(), sqle);
                }
                try {
                    File oDir = new File(sFolderDir);
                    if (!oDir.exists()) {
                        FileSystem oFS = new FileSystem();
                        oFS.mkdirs(sFolderUrl);
                    }
                } catch (IOException ioe) {
                    iOpenMode = 0;
                    oConn = null;
                    if (DebugFile.trace) DebugFile.decIdent();
                    throw new MessagingException(ioe.getMessage(), ioe);
                } catch (SecurityException se) {
                    iOpenMode = 0;
                    oConn = null;
                    if (DebugFile.trace) DebugFile.decIdent();
                    throw new MessagingException(se.getMessage(), se);
                } catch (Exception je) {
                    iOpenMode = 0;
                    oConn = null;
                    if (DebugFile.trace) DebugFile.decIdent();
                    throw new MessagingException(je.getMessage(), je);
                }
                JDCConnection oConn = getConnection();
                PreparedStatement oStmt = null;
                ResultSet oRSet = null;
                boolean bHasFilePointer;
                try {
                    oStmt = oConn.prepareStatement("SELECT NULL FROM " + DB.k_x_cat_objs + " WHERE " + DB.gu_category + "=? AND " + DB.id_class + "=15", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                    oStmt.setString(1, getCategory().getString(DB.gu_category));
                    oRSet = oStmt.executeQuery();
                    bHasFilePointer = oRSet.next();
                    oRSet.close();
                    oRSet = null;
                    oStmt.close();
                    oStmt = null;
                    if (!bHasFilePointer) {
                        oConn.setAutoCommit(false);
                        Product oProd = new Product();
                        oProd.put(DB.gu_owner, oCatg.getString(DB.gu_owner));
                        oProd.put(DB.nm_product, oCatg.getString(DB.nm_category));
                        oProd.store(oConn);
                        ProductLocation oLoca = new ProductLocation();
                        oLoca.put(DB.gu_product, oProd.getString(DB.gu_product));
                        oLoca.put(DB.gu_owner, oCatg.getString(DB.gu_owner));
                        oLoca.put(DB.pg_prod_locat, 1);
                        oLoca.put(DB.id_cont_type, 1);
                        oLoca.put(DB.id_prod_type, "MBOX");
                        oLoca.put(DB.len_file, 0);
                        oLoca.put(DB.xprotocol, "file://");
                        oLoca.put(DB.xhost, "localhost");
                        oLoca.put(DB.xpath, Gadgets.chomp(sFolderDir, File.separator));
                        oLoca.put(DB.xfile, oCatg.getString(DB.nm_category) + ".mbox");
                        oLoca.put(DB.xoriginalfile, oCatg.getString(DB.nm_category) + ".mbox");
                        oLoca.store(oConn);
                        oStmt = oConn.prepareStatement("INSERT INTO " + DB.k_x_cat_objs + " (" + DB.gu_category + "," + DB.gu_object + "," + DB.id_class + ") VALUES (?,?,15)");
                        oStmt.setString(1, oCatg.getString(DB.gu_category));
                        oStmt.setString(2, oProd.getString(DB.gu_product));
                        oStmt.executeUpdate();
                        oStmt.close();
                        oStmt = null;
                        oConn.commit();
                    }
                } catch (SQLException sqle) {
                    if (DebugFile.trace) {
                        DebugFile.writeln("SQLException " + sqle.getMessage());
                        DebugFile.decIdent();
                    }
                    if (oStmt != null) {
                        try {
                            oStmt.close();
                        } catch (SQLException ignore) {
                        }
                    }
                    if (oConn != null) {
                        try {
                            oConn.rollback();
                        } catch (SQLException ignore) {
                        }
                    }
                    throw new MessagingException(sqle.getMessage(), sqle);
                }
            } else {
                sFolderDir = null;
            }
            if (DebugFile.trace) {
                DebugFile.decIdent();
                String sMode = "";
                if ((iOpenMode & READ_WRITE) != 0) sMode += " READ_WRITE ";
                if ((iOpenMode & READ_ONLY) != 0) sMode += " READ_ONLY ";
                if ((iOpenMode & MODE_BLOB) != 0) sMode += " MODE_BLOB ";
                if ((iOpenMode & MODE_MBOX) != 0) sMode += " MODE_MBOX ";
                DebugFile.writeln("End DBFolder.open() :");
            }
        }
    }
} </s>
<s>class temp {    public boolean renameTo(Folder f) throws MessagingException, StoreClosedException, NullPointerException {
        String[] aLabels = new String[] { "en", "es", "fr", "de", "it", "pt", "ca", "ja", "cn", "tw", "fi", "ru", "pl", "nl", "xx" };
        PreparedStatement oUpdt = null;
        if (!((DBStore) getStore()).isConnected()) throw new StoreClosedException(getStore(), "Store is not connected");
        if (oCatg.isNull(DB.gu_category)) throw new NullPointerException("Folder is closed");
        try {
            oUpdt = getConnection().prepareStatement("DELETE FROM " + DB.k_cat_labels + " WHERE " + DB.gu_category + "=?");
            oUpdt.setString(1, oCatg.getString(DB.gu_category));
            oUpdt.executeUpdate();
            oUpdt.close();
            oUpdt.getConnection().prepareStatement("INSERT INTO " + DB.k_cat_labels + " (" + DB.gu_category + "," + DB.id_language + "," + DB.tr_category + "," + DB.url_category + ") VALUES (?,?,?,NULL)");
            oUpdt.setString(1, oCatg.getString(DB.gu_category));
            for (int l = 0; l < aLabels.length; l++) {
                oUpdt.setString(2, aLabels[l]);
                oUpdt.setString(3, f.getName().substring(0, 1).toUpperCase() + f.getName().substring(1).toLowerCase());
                oUpdt.executeUpdate();
            }
            oUpdt.close();
            oUpdt = null;
            getConnection().commit();
        } catch (SQLException sqle) {
            try {
                if (null != oUpdt) oUpdt.close();
            } catch (SQLException ignore) {
            }
            try {
                getConnection().rollback();
            } catch (SQLException ignore) {
            }
            throw new MessagingException(sqle.getMessage(), sqle);
        }
        return true;
    }
} </s>
<s>class temp {    public Message[] expunge() throws MessagingException {
        Statement oStmt = null;
        CallableStatement oCall = null;
        PreparedStatement oUpdt = null;
        ResultSet oRSet;
        if (DebugFile.trace) {
            DebugFile.writeln("Begin DBFolder.expunge()");
            DebugFile.incIdent();
        }
        if (0 == (iOpenMode & READ_WRITE)) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new javax.mail.FolderClosedException(this, "Folder is not open is READ_WRITE mode");
        }
        if ((0 == (iOpenMode & MODE_MBOX)) && (0 == (iOpenMode & MODE_BLOB))) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new javax.mail.FolderClosedException(this, "Folder is not open in MBOX nor BLOB mode");
        }
        MboxFile oMBox = null;
        DBSubset oDeleted = new DBSubset(DB.k_mime_msgs, DB.gu_mimemsg + "," + DB.pg_message, DB.bo_deleted + "=1 AND " + DB.gu_category + "='" + oCatg.getString(DB.gu_category) + "'", 100);
        try {
            int iDeleted = oDeleted.load(getConnection());
            File oFile = getFile();
            if (oFile.exists() && iDeleted > 0) {
                oMBox = new MboxFile(oFile, MboxFile.READ_WRITE);
                int[] msgnums = new int[iDeleted];
                for (int m = 0; m < iDeleted; m++) msgnums[m] = oDeleted.getInt(1, m);
                oMBox.purge(msgnums);
                oMBox.close();
            }
            oStmt = oConn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            oRSet = oStmt.executeQuery("SELECT p." + DB.file_name + " FROM " + DB.k_mime_parts + " p," + DB.k_mime_msgs + " m WHERE p." + DB.gu_mimemsg + "=m." + DB.gu_mimemsg + " AND m." + DB.id_disposition + "='reference' AND m." + DB.bo_deleted + "=1 AND m." + DB.gu_category + "='" + oCatg.getString(DB.gu_category) + "'");
            while (oRSet.next()) {
                String sFileName = oRSet.getString(1);
                if (!oRSet.wasNull()) {
                    try {
                        File oRef = new File(sFileName);
                        oRef.delete();
                    } catch (SecurityException se) {
                        if (DebugFile.trace) DebugFile.writeln("SecurityException " + sFileName + " " + se.getMessage());
                    }
                }
            }
            oRSet.close();
            oRSet = null;
            oStmt.close();
            oStmt = null;
            oFile = getFile();
            oStmt = oConn.createStatement();
            oStmt.executeUpdate("UPDATE " + DB.k_categories + " SET " + DB.len_size + "=" + String.valueOf(oFile.length()) + " WHERE " + DB.gu_category + "='" + getCategory().getString(DB.gu_category) + "'");
            oStmt.close();
            oStmt = null;
            if (oConn.getDataBaseProduct() == JDCConnection.DBMS_POSTGRESQL) {
                oStmt = oConn.createStatement();
                for (int d = 0; d < iDeleted; d++) oStmt.executeQuery("SELECT k_sp_del_mime_msg('" + oDeleted.getString(0, d) + "')");
                oStmt.close();
                oStmt = null;
            } else {
                oCall = oConn.prepareCall("{ call k_sp_del_mime_msg(?) }");
                for (int d = 0; d < iDeleted; d++) {
                    oCall.setString(1, oDeleted.getString(0, d));
                    oCall.execute();
                }
                oCall.close();
                oCall = null;
            }
            if (oFile.exists() && iDeleted > 0) {
                BigDecimal oUnit = new BigDecimal(1);
                oStmt = oConn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                oRSet = oStmt.executeQuery("SELECT MAX(" + DB.pg_message + ") FROM " + DB.k_mime_msgs + " WHERE " + DB.gu_category + "='getCategory().getString(DB.gu_category)'");
                oRSet.next();
                BigDecimal oMaxPg = oRSet.getBigDecimal(1);
                if (oRSet.wasNull()) oMaxPg = new BigDecimal(0);
                oRSet.close();
                oRSet = null;
                oStmt.close();
                oStmt = null;
                oMaxPg = oMaxPg.add(oUnit);
                oStmt = oConn.createStatement();
                oStmt.executeUpdate("UPDATE " + DB.k_mime_msgs + " SET " + DB.pg_message + "=" + DB.pg_message + "+" + oMaxPg.toString() + " WHERE " + DB.gu_category + "='" + getCategory().getString(DB.gu_category) + "'");
                oStmt.close();
                oStmt = null;
                DBSubset oMsgSet = new DBSubset(DB.k_mime_msgs, DB.gu_mimemsg + "," + DB.pg_message, DB.gu_category + "='" + getCategory().getString(DB.gu_category) + "' ORDER BY " + DB.pg_message, 1000);
                int iMsgCount = oMsgSet.load(oConn);
                oMBox = new MboxFile(oFile, MboxFile.READ_ONLY);
                long[] aPositions = oMBox.getMessagePositions();
                oMBox.close();
                if (iMsgCount != aPositions.length) {
                    throw new IOException("DBFolder.expunge() Message count of " + String.valueOf(aPositions.length) + " at MBOX file " + oFile.getName() + " does not match message count at database index of " + String.valueOf(iMsgCount));
                }
                oMaxPg = new BigDecimal(0);
                oUpdt = oConn.prepareStatement("UPDATE " + DB.k_mime_msgs + " SET " + DB.pg_message + "=?," + DB.nu_position + "=? WHERE " + DB.gu_mimemsg + "=?");
                for (int m = 0; m < iMsgCount; m++) {
                    oUpdt.setBigDecimal(1, oMaxPg);
                    oUpdt.setBigDecimal(2, new BigDecimal(aPositions[m]));
                    oUpdt.setString(3, oMsgSet.getString(0, m));
                    oUpdt.executeUpdate();
                    oMaxPg = oMaxPg.add(oUnit);
                }
                oUpdt.close();
            }
            oConn.commit();
        } catch (SQLException sqle) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception e) {
            }
            try {
                if (oStmt != null) oStmt.close();
            } catch (Exception e) {
            }
            try {
                if (oCall != null) oCall.close();
            } catch (Exception e) {
            }
            try {
                if (oConn != null) oConn.rollback();
            } catch (Exception e) {
            }
            throw new MessagingException(sqle.getMessage(), sqle);
        } catch (IOException sqle) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception e) {
            }
            try {
                if (oStmt != null) oStmt.close();
            } catch (Exception e) {
            }
            try {
                if (oCall != null) oCall.close();
            } catch (Exception e) {
            }
            try {
                if (oConn != null) oConn.rollback();
            } catch (Exception e) {
            }
            throw new MessagingException(sqle.getMessage(), sqle);
        }
        if (DebugFile.trace) {
            DebugFile.decIdent();
            DebugFile.writeln("End DBFolder.expunge()");
        }
        return null;
    }
} </s>
<s>class temp {    private void saveMimeParts(MimeMessage oMsg, String sMsgCharSeq, String sBoundary, String sMsgGuid, String sMsgId, int iPgMessage, int iOffset) throws MessagingException, OutOfMemoryError {
        if (DebugFile.trace) {
            DebugFile.writeln("Begin DBFolder.saveMimeParts([Connection], [MimeMessage], " + sBoundary + ", " + sMsgGuid + "," + sMsgId + ", " + String.valueOf(iPgMessage) + ", " + String.valueOf(iOffset) + ", [Properties])");
            DebugFile.incIdent();
        }
        PreparedStatement oStmt = null;
        Blob oContentTxt;
        ByteArrayOutputStream byOutPart;
        int iPrevPart = 0, iThisPart = 0, iNextPart = 0, iPartStart = 0;
        try {
            MimeMultipart oParts = (MimeMultipart) oMsg.getContent();
            final int iParts = oParts.getCount();
            if (DebugFile.trace) DebugFile.writeln("message has " + String.valueOf(iParts) + " parts");
            if (iParts > 0) {
                if (sMsgCharSeq != null && sBoundary != null && ((iOpenMode & MODE_MBOX) != 0)) {
                    iPrevPart = sMsgCharSeq.indexOf(sBoundary, iPrevPart);
                    if (iPrevPart > 0) {
                        iPrevPart += sBoundary.length();
                        if (DebugFile.trace) DebugFile.writeln("found message boundary token at " + String.valueOf(iPrevPart));
                    }
                }
                String sSQL = "INSERT INTO " + DB.k_mime_parts + "(gu_mimemsg,id_message,pg_message,nu_offset,id_part,id_content,id_type,id_disposition,len_part,de_part,tx_md5,file_name,by_content) VALUES ('" + sMsgGuid + "',?,?,?,?,?,?,?,?,?,NULL,?,?)";
                if (DebugFile.trace) DebugFile.writeln("Connection.prepareStatement(" + sSQL + ")");
                oStmt = oConn.prepareStatement(sSQL);
                for (int p = 0; p < iParts; p++) {
                    if (DebugFile.trace) DebugFile.writeln("processing part " + String.valueOf(p));
                    BodyPart oPart = oParts.getBodyPart(p);
                    byOutPart = new ByteArrayOutputStream(oPart.getSize() > 0 ? oPart.getSize() : 131072);
                    oPart.writeTo(byOutPart);
                    if (sMsgCharSeq != null && sBoundary != null && iPrevPart > 0) {
                        iThisPart = sMsgCharSeq.indexOf(sBoundary, iPrevPart);
                        if (iThisPart > 0) {
                            if (DebugFile.trace) DebugFile.writeln("found part " + String.valueOf(p + iOffset) + " boundary at " + String.valueOf(iThisPart));
                            iPartStart = iThisPart + sBoundary.length();
                            while (iPartStart < sMsgCharSeq.length()) {
                                if (sMsgCharSeq.charAt(iPartStart) != ' ' && sMsgCharSeq.charAt(iPartStart) != '\r' && sMsgCharSeq.charAt(iPartStart) != '\n' && sMsgCharSeq.charAt(iPartStart) != '\t') break; else iPartStart++;
                            }
                        }
                        iNextPart = sMsgCharSeq.indexOf(sBoundary, iPartStart);
                        if (iNextPart < 0) {
                            if (DebugFile.trace) DebugFile.writeln("no next part found");
                            iNextPart = sMsgCharSeq.length();
                        } else {
                            if (DebugFile.trace) DebugFile.writeln("next part boundary found at " + String.valueOf(iNextPart));
                        }
                    }
                    String sContentType = oPart.getContentType();
                    if (sContentType != null) sContentType = MimeUtility.decodeText(sContentType);
                    boolean bForwardedAttachment = false;
                    if ((null != sContentType) && (null != ((DBStore) getStore()).getSession())) {
                        if (DebugFile.trace) DebugFile.writeln("Part Content-Type: " + sContentType.replace('\r', ' ').replace('\n', ' '));
                        if (sContentType.toUpperCase().startsWith("MULTIPART/ALTERNATIVE") || sContentType.toUpperCase().startsWith("MULTIPART/RELATED") || sContentType.toUpperCase().startsWith("MULTIPART/SIGNED")) {
                            try {
                                ByteArrayInputStream byInStrm = new ByteArrayInputStream(byOutPart.toByteArray());
                                MimeMessage oForwarded = new MimeMessage(((DBStore) getStore()).getSession(), byInStrm);
                                saveMimeParts(oForwarded, sMsgCharSeq, getPartsBoundary(oForwarded), sMsgGuid, sMsgId, iPgMessage, iOffset + iParts);
                                byInStrm.close();
                                byInStrm = null;
                                bForwardedAttachment = true;
                            } catch (Exception e) {
                                if (DebugFile.trace) DebugFile.writeln(e.getClass().getName() + " " + e.getMessage());
                            }
                        }
                    }
                    if (!bForwardedAttachment) {
                        oStmt.setString(1, sMsgId);
                        oStmt.setBigDecimal(2, new BigDecimal(iPgMessage));
                        if ((iPartStart > 0) && ((iOpenMode & MODE_MBOX) != 0)) oStmt.setBigDecimal(3, new BigDecimal(iPartStart)); else oStmt.setNull(3, oConn.getDataBaseProduct() == JDCConnection.DBMS_ORACLE ? Types.NUMERIC : Types.DECIMAL);
                        oStmt.setInt(4, p + iOffset);
                        oStmt.setString(5, ((javax.mail.internet.MimeBodyPart) oPart).getContentID());
                        oStmt.setString(6, Gadgets.left(sContentType, 254));
                        oStmt.setString(7, Gadgets.left(oPart.getDisposition(), 100));
                        if ((iOpenMode & MODE_MBOX) != 0) oStmt.setInt(8, iNextPart - iPartStart); else oStmt.setInt(8, oPart.getSize() > 0 ? oPart.getSize() : byOutPart.size());
                        if (oPart.getDescription() != null) oStmt.setString(9, Gadgets.left(MimeUtility.decodeText(oPart.getDescription()), 254)); else oStmt.setNull(9, Types.VARCHAR);
                        if (DebugFile.trace) DebugFile.writeln("file name is " + oPart.getFileName());
                        if (oPart.getFileName() != null) oStmt.setString(10, Gadgets.left(MimeUtility.decodeText(oPart.getFileName()), 254)); else oStmt.setNull(10, Types.VARCHAR);
                        if ((iOpenMode & MODE_BLOB) != 0) oStmt.setBinaryStream(11, new ByteArrayInputStream(byOutPart.toByteArray()), byOutPart.size()); else oStmt.setNull(11, Types.LONGVARBINARY);
                        if (DebugFile.trace) DebugFile.writeln("PreparedStatement.executeUpdate()");
                        oStmt.executeUpdate();
                    }
                    byOutPart.close();
                    byOutPart = null;
                    oContentTxt = null;
                    if ((iOpenMode & MODE_MBOX) != 0) iPrevPart = iNextPart;
                }
                if (DebugFile.trace) DebugFile.writeln("PreparedStatement.close()");
                oStmt.close();
            }
        } catch (SQLException e) {
            if (DebugFile.trace) {
                DebugFile.writeln("SQLException " + e.getMessage());
                DebugFile.decIdent();
            }
            if (null != oStmt) {
                try {
                    oStmt.close();
                } catch (Exception ignore) {
                }
            }
            try {
                if (null != oConn) oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException(e.getMessage(), e);
        } catch (IOException e) {
            if (DebugFile.trace) {
                DebugFile.writeln("IOException " + e.getMessage());
                DebugFile.decIdent();
            }
            if (null != oStmt) {
                try {
                    oStmt.close();
                } catch (Exception ignore) {
                }
            }
            throw new MessagingException(e.getMessage(), e);
        } catch (Exception e) {
            if (DebugFile.trace) {
                DebugFile.writeln(e.getClass().getName() + " " + e.getMessage());
                DebugFile.decIdent();
            }
            if (null != oStmt) {
                try {
                    oStmt.close();
                } catch (Exception ignore) {
                }
            }
            throw new MessagingException(e.getMessage(), e);
        }
        if (DebugFile.trace) {
            DebugFile.decIdent();
            DebugFile.writeln("End DBFolder.saveMimeParts()");
        }
    }
} </s>
<s>class temp {    public void appendMessage(MimeMessage oMsg) throws FolderClosedException, StoreClosedException, MessagingException {
        if (DebugFile.trace) {
            DebugFile.writeln("Begin DBFolder.appendMessage()");
            DebugFile.incIdent();
        }
        final String EmptyString = "";
        if (!((DBStore) getStore()).isConnected()) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new StoreClosedException(getStore(), "Store is not connected");
        }
        if (0 == (iOpenMode & READ_WRITE)) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new javax.mail.FolderClosedException(this, "Folder is not open is READ_WRITE mode");
        }
        if ((0 == (iOpenMode & MODE_MBOX)) && (0 == (iOpenMode & MODE_BLOB))) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new javax.mail.FolderClosedException(this, "Folder is not open in MBOX nor BLOB mode");
        }
        String gu_mimemsg;
        if (oMsg.getClass().getName().equals("com.knowgate.hipermail.DBMimeMessage")) {
            gu_mimemsg = ((DBMimeMessage) oMsg).getMessageGuid();
            if (((DBMimeMessage) oMsg).getFolder() == null) ((DBMimeMessage) oMsg).setFolder(this);
        } else {
            gu_mimemsg = Gadgets.generateUUID();
        }
        String gu_workarea = ((DBStore) getStore()).getUser().getString(DB.gu_workarea);
        int iSize = oMsg.getSize();
        if (DebugFile.trace) DebugFile.writeln("MimeMessage.getSize() = " + String.valueOf(iSize));
        String sContentType, sContentID, sMessageID, sDisposition, sContentMD5, sDescription, sFileName, sEncoding, sSubject, sPriority, sMsgCharSeq;
        long lPosition = -1;
        try {
            sMessageID = oMsg.getMessageID();
            if (sMessageID == null || EmptyString.equals(sMessageID)) {
                try {
                    sMessageID = oMsg.getHeader("X-Qmail-Scanner-Message-ID", null);
                } catch (Exception ignore) {
                }
            }
            if (sMessageID != null) sMessageID = MimeUtility.decodeText(sMessageID);
            sContentType = oMsg.getContentType();
            if (sContentType != null) sContentType = MimeUtility.decodeText(sContentType);
            sContentID = oMsg.getContentID();
            if (sContentID != null) sContentID = MimeUtility.decodeText(sContentID);
            sDisposition = oMsg.getDisposition();
            if (sDisposition != null) sDisposition = MimeUtility.decodeText(sDisposition);
            sContentMD5 = oMsg.getContentMD5();
            if (sContentMD5 != null) sContentMD5 = MimeUtility.decodeText(sContentMD5);
            sDescription = oMsg.getDescription();
            if (sDescription != null) sDescription = MimeUtility.decodeText(sDescription);
            sFileName = oMsg.getFileName();
            if (sFileName != null) sFileName = MimeUtility.decodeText(sFileName);
            sEncoding = oMsg.getEncoding();
            if (sEncoding != null) sEncoding = MimeUtility.decodeText(sEncoding);
            sSubject = oMsg.getSubject();
            if (sSubject != null) sSubject = MimeUtility.decodeText(sSubject);
            sPriority = null;
            sMsgCharSeq = null;
        } catch (UnsupportedEncodingException uee) {
            throw new MessagingException(uee.getMessage(), uee);
        }
        BigDecimal dPgMessage = null;
        try {
            dPgMessage = getNextMessage();
        } catch (SQLException sqle) {
            throw new MessagingException(sqle.getMessage(), sqle);
        }
        String sBoundary = getPartsBoundary(oMsg);
        if (DebugFile.trace) DebugFile.writeln("part boundary is \"" + (sBoundary == null ? "null" : sBoundary) + "\"");
        if (sMessageID == null) sMessageID = gu_mimemsg; else if (sMessageID.length() == 0) sMessageID = gu_mimemsg;
        Timestamp tsSent;
        if (oMsg.getSentDate() != null) tsSent = new Timestamp(oMsg.getSentDate().getTime()); else tsSent = null;
        Timestamp tsReceived;
        if (oMsg.getReceivedDate() != null) tsReceived = new Timestamp(oMsg.getReceivedDate().getTime()); else tsReceived = new Timestamp(new java.util.Date().getTime());
        try {
            String sXPriority = oMsg.getHeader("X-Priority", null);
            if (sXPriority == null) sPriority = null; else {
                sPriority = "";
                for (int x = 0; x < sXPriority.length(); x++) {
                    char cAt = sXPriority.charAt(x);
                    if (cAt >= (char) 48 || cAt <= (char) 57) sPriority += cAt;
                }
                sPriority = Gadgets.left(sPriority, 10);
            }
        } catch (MessagingException msge) {
            if (DebugFile.trace) DebugFile.writeln("MessagingException " + msge.getMessage());
        }
        boolean bIsSpam = false;
        try {
            String sXSpam = oMsg.getHeader("X-Spam-Flag", null);
            if (sXSpam != null) bIsSpam = (sXSpam.toUpperCase().indexOf("YES") >= 0 || sXSpam.toUpperCase().indexOf("TRUE") >= 0 || sXSpam.indexOf("1") >= 0);
        } catch (MessagingException msge) {
            if (DebugFile.trace) DebugFile.writeln("MessagingException " + msge.getMessage());
        }
        if (DebugFile.trace) DebugFile.writeln("MimeMessage.getFrom()");
        Address[] aFrom = null;
        try {
            aFrom = oMsg.getFrom();
        } catch (AddressException adre) {
            if (DebugFile.trace) DebugFile.writeln("From AddressException " + adre.getMessage());
        }
        InternetAddress oFrom;
        if (aFrom != null) {
            if (aFrom.length > 0) oFrom = (InternetAddress) aFrom[0]; else oFrom = null;
        } else oFrom = null;
        if (DebugFile.trace) DebugFile.writeln("MimeMessage.getReplyTo()");
        Address[] aReply = null;
        InternetAddress oReply;
        try {
            aReply = oMsg.getReplyTo();
        } catch (AddressException adre) {
            if (DebugFile.trace) DebugFile.writeln("Reply-To AddressException " + adre.getMessage());
        }
        if (aReply != null) {
            if (aReply.length > 0) oReply = (InternetAddress) aReply[0]; else oReply = null;
        } else {
            if (DebugFile.trace) DebugFile.writeln("no reply-to address found");
            oReply = null;
        }
        if (DebugFile.trace) DebugFile.writeln("MimeMessage.getRecipients()");
        Address[] oTo = null;
        Address[] oCC = null;
        Address[] oBCC = null;
        try {
            oTo = oMsg.getRecipients(MimeMessage.RecipientType.TO);
            oCC = oMsg.getRecipients(MimeMessage.RecipientType.CC);
            oBCC = oMsg.getRecipients(MimeMessage.RecipientType.BCC);
        } catch (AddressException adre) {
            if (DebugFile.trace) DebugFile.writeln("Recipient AddressException " + adre.getMessage());
        }
        Properties pFrom = new Properties(), pTo = new Properties(), pCC = new Properties(), pBCC = new Properties();
        if (DebugFile.trace) DebugFile.writeln("MimeMessage.getFlags()");
        Flags oFlgs = oMsg.getFlags();
        if (oFlgs == null) oFlgs = new Flags();
        MimePart oText = null;
        ByteArrayOutputStream byOutStrm = null;
        File oFile = null;
        MboxFile oMBox = null;
        if ((iOpenMode & MODE_MBOX) != 0) {
            try {
                if (DebugFile.trace) DebugFile.writeln("new File(" + Gadgets.chomp(sFolderDir, File.separator) + oCatg.getStringNull(DB.nm_category, "null") + ".mbox)");
                oFile = getFile();
                lPosition = oFile.length();
                if (DebugFile.trace) DebugFile.writeln("message position is " + String.valueOf(lPosition));
                oMBox = new MboxFile(oFile, MboxFile.READ_WRITE);
                if (DebugFile.trace) DebugFile.writeln("new ByteArrayOutputStream(" + String.valueOf(iSize > 0 ? iSize : 16000) + ")");
                byOutStrm = new ByteArrayOutputStream(iSize > 0 ? iSize : 16000);
                oMsg.writeTo(byOutStrm);
                sMsgCharSeq = byOutStrm.toString("ISO8859_1");
                byOutStrm.close();
            } catch (IOException ioe) {
                try {
                    if (oMBox != null) oMBox.close();
                } catch (Exception ignore) {
                }
                if (DebugFile.trace) DebugFile.decIdent();
                throw new MessagingException(ioe.getMessage(), ioe);
            }
        }
        try {
            if (oMsg.getClass().getName().equals("com.knowgate.hipermail.DBMimeMessage")) oText = ((DBMimeMessage) oMsg).getBody(); else {
                oText = new DBMimeMessage(oMsg).getBody();
            }
            if (DebugFile.trace) DebugFile.writeln("ByteArrayOutputStream byOutStrm = new ByteArrayOutputStream(" + oText.getSize() + ")");
            byOutStrm = new ByteArrayOutputStream(oText.getSize() > 0 ? oText.getSize() : 8192);
            oText.writeTo(byOutStrm);
            if (null == sContentMD5) {
                MD5 oMd5 = new MD5();
                oMd5.Init();
                oMd5.Update(byOutStrm.toByteArray());
                sContentMD5 = Gadgets.toHexString(oMd5.Final());
                oMd5 = null;
            }
        } catch (IOException ioe) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new MessagingException("IOException " + ioe.getMessage(), ioe);
        } catch (OutOfMemoryError oom) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new MessagingException("OutOfMemoryError " + oom.getMessage());
        }
        String sSQL = "INSERT INTO " + DB.k_mime_msgs + "(gu_mimemsg,gu_workarea,gu_category,id_type,id_content,id_message,id_disposition,len_mimemsg,tx_md5,de_mimemsg,file_name,tx_encoding,tx_subject,dt_sent,dt_received,tx_email_from,nm_from,tx_email_reply,nm_to,id_priority,bo_answered,bo_deleted,bo_draft,bo_flagged,bo_recent,bo_seen,bo_spam,pg_message,nu_position,by_content) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        if (DebugFile.trace) DebugFile.writeln("Connection.prepareStatement(" + sSQL + ")");
        PreparedStatement oStmt = null;
        try {
            oStmt = oConn.prepareStatement(sSQL);
            oStmt.setString(1, gu_mimemsg);
            oStmt.setString(2, gu_workarea);
            if (oCatg.isNull(DB.gu_category)) oStmt.setNull(3, Types.CHAR); else oStmt.setString(3, oCatg.getString(DB.gu_category));
            oStmt.setString(4, Gadgets.left(sContentType, 254));
            oStmt.setString(5, Gadgets.left(sContentID, 254));
            oStmt.setString(6, Gadgets.left(sMessageID, 254));
            oStmt.setString(7, Gadgets.left(sDisposition, 100));
            if ((iOpenMode & MODE_MBOX) != 0) {
                iSize = sMsgCharSeq.length();
                oStmt.setInt(8, iSize);
            } else {
                if (iSize >= 0) oStmt.setInt(8, iSize); else oStmt.setNull(8, Types.INTEGER);
            }
            oStmt.setString(9, Gadgets.left(sContentMD5, 32));
            oStmt.setString(10, Gadgets.left(sDescription, 254));
            oStmt.setString(11, Gadgets.left(sFileName, 254));
            oStmt.setString(12, Gadgets.left(sEncoding, 16));
            oStmt.setString(13, Gadgets.left(sSubject, 254));
            oStmt.setTimestamp(14, tsSent);
            oStmt.setTimestamp(15, tsReceived);
            if (null == oFrom) {
                oStmt.setNull(16, Types.VARCHAR);
                oStmt.setNull(17, Types.VARCHAR);
            } else {
                oStmt.setString(16, Gadgets.left(oFrom.getAddress(), 254));
                oStmt.setString(17, Gadgets.left(oFrom.getPersonal(), 254));
            }
            if (null == oReply) oStmt.setNull(18, Types.VARCHAR); else oStmt.setString(18, Gadgets.left(oReply.getAddress(), 254));
            Address[] aRecipients;
            String sRecipientName;
            aRecipients = oMsg.getRecipients(MimeMessage.RecipientType.TO);
            if (null != aRecipients) if (aRecipients.length == 0) aRecipients = null;
            if (null != aRecipients) {
                sRecipientName = ((InternetAddress) aRecipients[0]).getPersonal();
                if (null == sRecipientName) sRecipientName = ((InternetAddress) aRecipients[0]).getAddress();
                oStmt.setString(19, Gadgets.left(sRecipientName, 254));
            } else {
                aRecipients = oMsg.getRecipients(MimeMessage.RecipientType.CC);
                if (null != aRecipients) {
                    if (aRecipients.length > 0) {
                        sRecipientName = ((InternetAddress) aRecipients[0]).getPersonal();
                        if (null == sRecipientName) sRecipientName = ((InternetAddress) aRecipients[0]).getAddress();
                        oStmt.setString(19, Gadgets.left(sRecipientName, 254));
                    } else oStmt.setNull(19, Types.VARCHAR);
                } else {
                    aRecipients = oMsg.getRecipients(MimeMessage.RecipientType.BCC);
                    if (null != aRecipients) {
                        if (aRecipients.length > 0) {
                            sRecipientName = ((InternetAddress) aRecipients[0]).getPersonal();
                            if (null == sRecipientName) sRecipientName = ((InternetAddress) aRecipients[0]).getAddress();
                            oStmt.setString(19, Gadgets.left(sRecipientName, 254));
                        } else oStmt.setNull(19, Types.VARCHAR);
                    } else {
                        oStmt.setNull(19, Types.VARCHAR);
                    }
                }
            }
            if (null == sPriority) oStmt.setNull(20, Types.VARCHAR); else oStmt.setString(20, sPriority);
            if (oConn.getDataBaseProduct() == JDCConnection.DBMS_ORACLE) {
                if (DebugFile.trace) DebugFile.writeln("PreparedStatement.setBigDecimal(21, ...)");
                oStmt.setBigDecimal(21, new BigDecimal(oFlgs.contains(Flags.Flag.ANSWERED) ? "1" : "0"));
                oStmt.setBigDecimal(22, new BigDecimal(oFlgs.contains(Flags.Flag.DELETED) ? "1" : "0"));
                oStmt.setBigDecimal(23, new BigDecimal(0));
                oStmt.setBigDecimal(24, new BigDecimal(oFlgs.contains(Flags.Flag.FLAGGED) ? "1" : "0"));
                oStmt.setBigDecimal(25, new BigDecimal(oFlgs.contains(Flags.Flag.RECENT) ? "1" : "0"));
                oStmt.setBigDecimal(26, new BigDecimal(oFlgs.contains(Flags.Flag.SEEN) ? "1" : "0"));
                oStmt.setBigDecimal(27, new BigDecimal(bIsSpam ? "1" : "0"));
                oStmt.setBigDecimal(28, dPgMessage);
                if ((iOpenMode & MODE_MBOX) != 0) oStmt.setBigDecimal(29, new BigDecimal(lPosition)); else oStmt.setNull(29, Types.NUMERIC);
                if (DebugFile.trace) DebugFile.writeln("PreparedStatement.setBinaryStream(30, new ByteArrayInputStream(" + String.valueOf(byOutStrm.size()) + "))");
                if (byOutStrm.size() > 0) oStmt.setBinaryStream(30, new ByteArrayInputStream(byOutStrm.toByteArray()), byOutStrm.size()); else oStmt.setNull(30, Types.LONGVARBINARY);
            } else {
                if (DebugFile.trace) DebugFile.writeln("PreparedStatement.setShort(21, ...)");
                oStmt.setShort(21, (short) (oFlgs.contains(Flags.Flag.ANSWERED) ? 1 : 0));
                oStmt.setShort(22, (short) (oFlgs.contains(Flags.Flag.DELETED) ? 1 : 0));
                oStmt.setShort(23, (short) (0));
                oStmt.setShort(24, (short) (oFlgs.contains(Flags.Flag.FLAGGED) ? 1 : 0));
                oStmt.setShort(25, (short) (oFlgs.contains(Flags.Flag.RECENT) ? 1 : 0));
                oStmt.setShort(26, (short) (oFlgs.contains(Flags.Flag.SEEN) ? 1 : 0));
                oStmt.setShort(27, (short) (bIsSpam ? 1 : 0));
                oStmt.setBigDecimal(28, dPgMessage);
                if ((iOpenMode & MODE_MBOX) != 0) oStmt.setBigDecimal(29, new BigDecimal(lPosition)); else oStmt.setNull(29, Types.NUMERIC);
                if (DebugFile.trace) DebugFile.writeln("PreparedStatement.setBinaryStream(30, new ByteArrayInputStream(" + String.valueOf(byOutStrm.size()) + "))");
                if (byOutStrm.size() > 0) oStmt.setBinaryStream(30, new ByteArrayInputStream(byOutStrm.toByteArray()), byOutStrm.size()); else oStmt.setNull(30, Types.LONGVARBINARY);
            }
            if (DebugFile.trace) DebugFile.writeln("Statement.executeUpdate()");
            oStmt.executeUpdate();
            oStmt.close();
            oStmt = null;
        } catch (SQLException sqle) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception ignore) {
            }
            try {
                if (null != oStmt) oStmt.close();
                oStmt = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oConn) oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException(DB.k_mime_msgs + " " + sqle.getMessage(), sqle);
        }
        if ((iOpenMode & MODE_BLOB) != 0) {
            try {
                byOutStrm.close();
            } catch (IOException ignore) {
            }
            byOutStrm = null;
        }
        try {
            Object oContent = oMsg.getContent();
            if (oContent instanceof MimeMultipart) {
                try {
                    saveMimeParts(oMsg, sMsgCharSeq, sBoundary, gu_mimemsg, sMessageID, dPgMessage.intValue(), 0);
                } catch (MessagingException msge) {
                    try {
                        if (oMBox != null) oMBox.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        oConn.rollback();
                    } catch (Exception ignore) {
                    }
                    throw new MessagingException(msge.getMessage(), msge.getNextException());
                }
            }
        } catch (Exception xcpt) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception ignore) {
            }
            try {
                oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException("MimeMessage.getContent() " + xcpt.getMessage(), xcpt);
        }
        sSQL = "SELECT " + DB.gu_contact + "," + DB.gu_company + "," + DB.tx_name + "," + DB.tx_surname + "," + DB.tx_surname + " FROM " + DB.k_member_address + " WHERE " + DB.tx_email + "=? AND " + DB.gu_workarea + "=? UNION SELECT " + DB.gu_user + ",'****************************USER'," + DB.nm_user + "," + DB.tx_surname1 + "," + DB.tx_surname2 + " FROM " + DB.k_users + " WHERE (" + DB.tx_main_email + "=? OR " + DB.tx_alt_email + "=?) AND " + DB.gu_workarea + "=?";
        if (DebugFile.trace) DebugFile.writeln("Connection.prepareStatement(" + sSQL + ")");
        PreparedStatement oAddr = null;
        try {
            oAddr = oConn.prepareStatement(sSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet oRSet;
            InternetAddress oInetAdr;
            String sTxEmail, sGuCompany, sGuContact, sGuUser, sTxName, sTxSurname1, sTxSurname2, sTxPersonal;
            if (oFrom != null) {
                oAddr.setString(1, oFrom.getAddress());
                oAddr.setString(2, gu_workarea);
                oAddr.setString(3, oFrom.getAddress());
                oAddr.setString(4, oFrom.getAddress());
                oAddr.setString(5, gu_workarea);
                oRSet = oAddr.executeQuery();
                if (oRSet.next()) {
                    sGuContact = oRSet.getString(1);
                    if (oRSet.wasNull()) sGuContact = "null";
                    sGuCompany = oRSet.getString(2);
                    if (oRSet.wasNull()) sGuCompany = "null";
                    if (sGuCompany.equals("****************************USER")) {
                        sTxName = oRSet.getString(3);
                        if (oRSet.wasNull()) sTxName = "";
                        sTxSurname1 = oRSet.getString(4);
                        if (oRSet.wasNull()) sTxSurname1 = "";
                        sTxSurname2 = oRSet.getString(4);
                        if (oRSet.wasNull()) sTxSurname2 = "";
                        sTxPersonal = Gadgets.left(sTxName + " " + sTxSurname1 + " " + sTxSurname2, 254).replace(',', ' ').trim();
                    } else sTxPersonal = "null";
                    pFrom.put(oFrom.getAddress(), sGuContact + "," + sGuCompany + "," + sTxPersonal);
                } else pFrom.put(oFrom.getAddress(), "null,null,null");
                oRSet.close();
            }
            if (DebugFile.trace) DebugFile.writeln("from count = " + pFrom.size());
            if (oTo != null) {
                for (int t = 0; t < oTo.length; t++) {
                    oInetAdr = (InternetAddress) oTo[t];
                    sTxEmail = Gadgets.left(oInetAdr.getAddress(), 254);
                    oAddr.setString(1, sTxEmail);
                    oAddr.setString(2, gu_workarea);
                    oAddr.setString(3, sTxEmail);
                    oAddr.setString(4, sTxEmail);
                    oAddr.setString(5, gu_workarea);
                    oRSet = oAddr.executeQuery();
                    if (oRSet.next()) {
                        sGuContact = oRSet.getString(1);
                        if (oRSet.wasNull()) sGuContact = "null";
                        sGuCompany = oRSet.getString(2);
                        if (oRSet.wasNull()) sGuCompany = "null";
                        if (sGuCompany.equals("****************************USER")) {
                            sTxName = oRSet.getString(3);
                            if (oRSet.wasNull()) sTxName = "";
                            sTxSurname1 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname1 = "";
                            sTxSurname2 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname2 = "";
                            sTxPersonal = Gadgets.left(sTxName + " " + sTxSurname1 + " " + sTxSurname2, 254).replace(',', ' ').trim();
                        } else sTxPersonal = "null";
                        pTo.put(sTxEmail, sGuContact + "," + sGuCompany + "," + sTxPersonal);
                    } else pTo.put(sTxEmail, "null,null,null");
                    oRSet.close();
                }
            }
            if (DebugFile.trace) DebugFile.writeln("to count = " + pTo.size());
            if (oCC != null) {
                for (int c = 0; c < oCC.length; c++) {
                    oInetAdr = (InternetAddress) oCC[c];
                    sTxEmail = Gadgets.left(oInetAdr.getAddress(), 254);
                    oAddr.setString(1, sTxEmail);
                    oAddr.setString(2, gu_workarea);
                    oAddr.setString(3, sTxEmail);
                    oAddr.setString(4, sTxEmail);
                    oAddr.setString(5, gu_workarea);
                    oRSet = oAddr.executeQuery();
                    if (oRSet.next()) {
                        sGuContact = oRSet.getString(1);
                        if (oRSet.wasNull()) sGuContact = "null";
                        sGuCompany = oRSet.getString(2);
                        if (oRSet.wasNull()) sGuCompany = "null";
                        if (sGuCompany.equals("****************************USER")) {
                            sTxName = oRSet.getString(3);
                            if (oRSet.wasNull()) sTxName = "";
                            sTxSurname1 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname1 = "";
                            sTxSurname2 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname2 = "";
                            sTxPersonal = Gadgets.left(sTxName + " " + sTxSurname1 + " " + sTxSurname2, 254).replace(',', ' ').trim();
                        } else sTxPersonal = "null";
                        pCC.put(sTxEmail, sGuContact + "," + sGuCompany + "," + sTxPersonal);
                    } else pCC.put(sTxEmail, "null,null,null");
                    oRSet.close();
                }
            }
            if (DebugFile.trace) DebugFile.writeln("cc count = " + pCC.size());
            if (oBCC != null) {
                for (int b = 0; b < oBCC.length; b++) {
                    oInetAdr = (InternetAddress) oBCC[b];
                    sTxEmail = Gadgets.left(oInetAdr.getAddress(), 254);
                    oAddr.setString(1, sTxEmail);
                    oAddr.setString(2, gu_workarea);
                    oAddr.setString(3, sTxEmail);
                    oAddr.setString(4, sTxEmail);
                    oAddr.setString(5, gu_workarea);
                    oRSet = oAddr.executeQuery();
                    if (oRSet.next()) {
                        sGuContact = oRSet.getString(1);
                        if (oRSet.wasNull()) sGuContact = "null";
                        sGuCompany = oRSet.getString(2);
                        if (oRSet.wasNull()) sGuCompany = "null";
                        if (sGuCompany.equals("****************************USER")) {
                            sTxName = oRSet.getString(3);
                            if (oRSet.wasNull()) sTxName = "";
                            sTxSurname1 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname1 = "";
                            sTxSurname2 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname2 = "";
                            sTxPersonal = Gadgets.left(sTxName + " " + sTxSurname1 + " " + sTxSurname2, 254).replace(',', ' ').trim();
                        } else sTxPersonal = "null";
                        pBCC.put(sTxEmail, sGuContact + "," + sGuCompany);
                    } else pBCC.put(sTxEmail, "null,null,null");
                    oRSet.close();
                }
            }
            if (DebugFile.trace) DebugFile.writeln("bcc count = " + pBCC.size());
            oAddr.close();
            sSQL = "INSERT INTO " + DB.k_inet_addrs + " (gu_mimemsg,id_message,tx_email,tp_recipient,gu_user,gu_contact,gu_company,tx_personal) VALUES ('" + gu_mimemsg + "','" + sMessageID + "',?,?,?,?,?,?)";
            if (DebugFile.trace) DebugFile.writeln("Connection.prepareStatement(" + sSQL + ")");
            oStmt = oConn.prepareStatement(sSQL);
            java.util.Enumeration oMailEnum;
            String[] aRecipient;
            if (!pFrom.isEmpty()) {
                oMailEnum = pFrom.keys();
                while (oMailEnum.hasMoreElements()) {
                    sTxEmail = (String) oMailEnum.nextElement();
                    aRecipient = Gadgets.split(pFrom.getProperty(sTxEmail), ',');
                    oStmt.setString(1, sTxEmail);
                    oStmt.setString(2, "from");
                    if (aRecipient[0].equals("null") && aRecipient[1].equals("null")) {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else if (aRecipient[1].equals("****************************USER")) {
                        oStmt.setString(3, aRecipient[0]);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setString(4, aRecipient[0].equals("null") ? null : aRecipient[0]);
                        oStmt.setString(5, aRecipient[1].equals("null") ? null : aRecipient[1]);
                    }
                    if (aRecipient[2].equals("null")) oStmt.setNull(6, Types.VARCHAR); else oStmt.setString(6, aRecipient[2]);
                    if (DebugFile.trace) DebugFile.writeln("Statement.executeUpdate()");
                    oStmt.executeUpdate();
                }
            }
            if (!pTo.isEmpty()) {
                oMailEnum = pTo.keys();
                while (oMailEnum.hasMoreElements()) {
                    sTxEmail = (String) oMailEnum.nextElement();
                    aRecipient = Gadgets.split(pTo.getProperty(sTxEmail), ',');
                    oStmt.setString(1, sTxEmail);
                    oStmt.setString(2, "to");
                    if (aRecipient[0].equals("null") && aRecipient[1].equals("null")) {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else if (aRecipient[1].equals("****************************USER")) {
                        oStmt.setString(3, aRecipient[0]);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setString(4, aRecipient[0].equals("null") ? null : aRecipient[0]);
                        oStmt.setString(5, aRecipient[1].equals("null") ? null : aRecipient[1]);
                    }
                    if (aRecipient[2].equals("null")) oStmt.setNull(6, Types.VARCHAR); else oStmt.setString(6, aRecipient[2]);
                    if (DebugFile.trace) DebugFile.writeln("Statement.executeUpdate()");
                    oStmt.executeUpdate();
                }
            }
            if (!pCC.isEmpty()) {
                oMailEnum = pCC.keys();
                while (oMailEnum.hasMoreElements()) {
                    sTxEmail = (String) oMailEnum.nextElement();
                    aRecipient = Gadgets.split(pCC.getProperty(sTxEmail), ',');
                    oStmt.setString(1, sTxEmail);
                    oStmt.setString(2, "cc");
                    if (aRecipient[0].equals("null") && aRecipient[1].equals("null")) {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else if (aRecipient[1].equals("****************************USER")) {
                        oStmt.setString(3, aRecipient[0]);
                        oStmt.setString(4, null);
                        oStmt.setString(5, null);
                    } else {
                        oStmt.setString(3, null);
                        oStmt.setString(4, aRecipient[0].equals("null") ? null : aRecipient[0]);
                        oStmt.setString(5, aRecipient[1].equals("null") ? null : aRecipient[1]);
                    }
                    if (aRecipient[2].equals("null")) oStmt.setNull(6, Types.VARCHAR); else oStmt.setString(6, aRecipient[2]);
                    if (DebugFile.trace) DebugFile.writeln("Statement.executeUpdate()");
                    oStmt.executeUpdate();
                }
            }
            if (!pBCC.isEmpty()) {
                oMailEnum = pBCC.keys();
                while (oMailEnum.hasMoreElements()) {
                    sTxEmail = (String) oMailEnum.nextElement();
                    aRecipient = Gadgets.split(pBCC.getProperty(sTxEmail), ',');
                    oStmt.setString(1, sTxEmail);
                    oStmt.setString(2, "bcc");
                    if (aRecipient[0].equals("null") && aRecipient[1].equals("null")) {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else if (aRecipient[1].equals("****************************USER")) {
                        oStmt.setString(3, aRecipient[0]);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setString(4, aRecipient[0].equals("null") ? null : aRecipient[0]);
                        oStmt.setString(5, aRecipient[1].equals("null") ? null : aRecipient[1]);
                    }
                    if (aRecipient[2].equals("null")) oStmt.setNull(6, Types.VARCHAR); else oStmt.setString(6, aRecipient[2]);
                    oStmt.executeUpdate();
                }
            }
            oStmt.close();
            oStmt = null;
            oStmt = oConn.prepareStatement("UPDATE " + DB.k_categories + " SET " + DB.len_size + "=" + DB.len_size + "+" + String.valueOf(iSize) + " WHERE " + DB.gu_category + "=?");
            oStmt.setString(1, getCategory().getString(DB.gu_category));
            oStmt.executeUpdate();
            oStmt.close();
            oStmt = null;
            if ((iOpenMode & MODE_MBOX) != 0) {
                if (DebugFile.trace) DebugFile.writeln("MboxFile.appendMessage(" + (oMsg.getContentID() != null ? oMsg.getContentID() : "") + ")");
                oMBox.appendMessage(sMsgCharSeq);
                oMBox.close();
                oMBox = null;
            }
            if (DebugFile.trace) DebugFile.writeln("Connection.commit()");
            oConn.commit();
        } catch (SQLException sqle) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception ignore) {
            }
            try {
                if (null != oStmt) oStmt.close();
                oStmt = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oAddr) oAddr.close();
                oAddr = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oConn) oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException(sqle.getMessage(), sqle);
        } catch (IOException ioe) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception ignore) {
            }
            try {
                if (null != oStmt) oStmt.close();
                oStmt = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oAddr) oAddr.close();
                oAddr = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oConn) oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException(ioe.getMessage(), ioe);
        }
        if (DebugFile.trace) {
            DebugFile.decIdent();
            DebugFile.writeln("End DBFolder.appendMessage() : " + gu_mimemsg);
        }
    }
} </s>
<s>class temp {    private void openConnection() throws IOException {
        connection = (HttpURLConnection) url.openConnection();
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "text/xml");
    }
} </s>
