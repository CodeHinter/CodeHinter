<s>class temp {    public static void main(String[] args) {
        try {
            boolean readExp = Utils.getFlag('l', args);
            final boolean writeExp = Utils.getFlag('s', args);
            final String expFile = Utils.getOption('f', args);
            if ((readExp || writeExp) && (expFile.length() == 0)) {
                throw new Exception("A filename must be given with the -f option");
            }
            Experiment exp = null;
            if (readExp) {
                FileInputStream fi = new FileInputStream(expFile);
                ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));
                exp = (Experiment) oi.readObject();
                oi.close();
            } else {
                exp = new Experiment();
            }
            System.err.println("Initial Experiment:\n" + exp.toString());
            final JFrame jf = new JFrame("Weka Experiment Setup");
            jf.getContentPane().setLayout(new BorderLayout());
            final SetupPanel sp = new SetupPanel();
            jf.getContentPane().add(sp, BorderLayout.CENTER);
            jf.addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent e) {
                    System.err.println("\nFinal Experiment:\n" + sp.m_Exp.toString());
                    if (writeExp) {
                        try {
                            FileOutputStream fo = new FileOutputStream(expFile);
                            ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));
                            oo.writeObject(sp.m_Exp);
                            oo.close();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            System.err.println("Couldn't write experiment to: " + expFile + '\n' + ex.getMessage());
                        }
                    }
                    jf.dispose();
                    System.exit(0);
                }
            });
            jf.pack();
            jf.setVisible(true);
            System.err.println("Short nap");
            Thread.currentThread().sleep(3000);
            System.err.println("Done");
            sp.setExperiment(exp);
        } catch (Exception ex) {
            ex.printStackTrace();
            System.err.println(ex.getMessage());
        }
    }
} </s>
<s>class temp {    public static void copy(File source, File target) {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(target).getChannel();
            ByteBuffer buffer = ByteBuffer.allocateDirect(BUFFER);
            while (in.read(buffer) != -1) {
                buffer.flip();
                while (buffer.hasRemaining()) {
                    out.write(buffer);
                }
                buffer.clear();
            }
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        } finally {
            close(in);
            close(out);
        }
    }
} </s>
<s>class temp {    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setCharacterEncoding("UTF-8");
        try {
            String content = "";
            URL url = new URL(request.getParameter("url"));
            URLConnection connection = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                content += line + "\n";
            }
            in.close();
            String result = getResult(content);
            response.setContentType("text/plain");
            PrintWriter out = response.getWriter();
            out.println(result);
        } catch (Exception e) {
            response.setContentType("text/html");
            PrintWriter out = response.getWriter();
            out.println(getErrorPage(e));
        }
    }
} </s>
<s>class temp {    public static void zipFile(String file, String entry) throws IOException {
        FileInputStream in = new FileInputStream(file);
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file + ".zip"));
        out.putNextEntry(new ZipEntry(entry));
        byte[] buffer = new byte[4096];
        int bytes_read;
        while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
        in.close();
        out.closeEntry();
        out.close();
        File fin = new File(file);
        fin.delete();
    }
} </s>
<s>class temp {    public String getHash(String type, String text, String salt) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(type);
        byte[] hash = new byte[md.getDigestLength()];
        if (!salt.isEmpty()) {
            md.update(salt.getBytes("iso-8859-1"), 0, salt.length());
        }
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        hash = md.digest();
        return convertToHex(hash);
    }
} </s>
<s>class temp {    public void connect(String username, String passwordMd5) {
        this.username = username;
        this.passwordMd5 = passwordMd5;
        StringBuffer handshakeUrl = new StringBuffer();
        handshakeUrl.append("http://ws.audioscrobbler.com/radio/handshake.php?version=");
        handshakeUrl.append(LastFM.VERSION);
        handshakeUrl.append("&platform=linux&username=");
        handshakeUrl.append(this.username);
        handshakeUrl.append("&passwordmd5=");
        handshakeUrl.append(this.passwordMd5);
        handshakeUrl.append("&language=en&player=aTunes");
        URL url;
        try {
            url = new URL(handshakeUrl.toString());
            URLConnection connection = url.openConnection();
            InputStream inputStream = new BufferedInputStream(connection.getInputStream());
            byte[] buffer = new byte[4069];
            int read = 0;
            StringBuffer result = new StringBuffer();
            while ((read = inputStream.read(buffer)) > -1) {
                result.append((new String(buffer, 0, read)));
            }
            String[] rows = result.toString().split("\n");
            this.data = new HashMap<String, String>();
            for (String row : rows) {
                row = row.trim();
                int firstEquals = row.indexOf("=");
                data.put(row.substring(0, firstEquals), row.substring(firstEquals + 1));
            }
            String streamingUrl = data.get("stream_url");
            streamingUrl = streamingUrl.substring(7);
            int delimiter = streamingUrl.indexOf("/");
            String hostname = streamingUrl.substring(0, delimiter);
            String path = streamingUrl.substring(delimiter + 1);
            String[] tokens = hostname.split(":");
            hostname = tokens[0];
            int port = Integer.parseInt(tokens[1]);
            this.lastFmSocket = new Socket(hostname, port);
            OutputStreamWriter osw = new OutputStreamWriter(this.lastFmSocket.getOutputStream());
            osw.write("GET /" + path + " HTTP/1.0\r\n");
            osw.write("Host: " + hostname + "\r\n");
            osw.write("\r\n");
            osw.flush();
            this.lastFmInputStream = this.lastFmSocket.getInputStream();
            result = new StringBuffer();
            while ((read = this.lastFmInputStream.read(buffer)) > -1) {
                String line = new String(buffer, 0, read);
                result.append(line);
                if (line.contains("\r\n\r\n")) break;
            }
            String response = result.toString();
            logger.info("Result: " + response);
            if (!response.startsWith("HTTP/1.0 200 OK")) {
                this.lastFmSocket.close();
                throw new LastFmException("Could not handshake with lastfm. Check credential!");
            }
            StringBuffer sb = new StringBuffer();
            sb.append("http://");
            sb.append(this.data.get("base_url"));
            sb.append(this.data.get("base_path"));
            sb.append("/xspf.php?sk=");
            sb.append(this.data.get("session"));
            sb.append("&discovery=1&desktop=");
            sb.append(LastFM.VERSION);
            logger.info(sb.toString());
            this.playlistUrl = new URL(sb.toString());
            this.playlist = this.playlistParser.fetchPlaylist(this.playlistUrl.toString());
            Iterator<LastFmTrack> it = this.playlist.iterator();
            while (it.hasNext()) {
                System.out.println(it.next().getCreator());
            }
            this.connected = true;
        } catch (MalformedURLException e) {
            throw new LastFmException("Could not handshake with lastfm", e.getCause());
        } catch (IOException e) {
            throw new LastFmException("Could not initialise lastfm", e.getCause());
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".build")) develBuild = line.substring(6).trim(); else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    public void parseFile(String dataurl, URL documentBase) {
        DataInputStream in;
        if (_debug > 2) System.out.println("PlotBox: parseFile(" + dataurl + " " + documentBase + ") _dataurl = " + _dataurl + " " + _documentBase);
        if (dataurl == null || dataurl.length() == 0) {
            in = new DataInputStream(System.in);
        } else {
            try {
                URL url;
                if (documentBase == null && _documentBase != null) {
                    documentBase = _documentBase;
                }
                if (documentBase == null) {
                    url = new URL(_dataurl);
                } else {
                    try {
                        url = new URL(documentBase, dataurl);
                    } catch (NullPointerException e) {
                        url = new URL(_dataurl);
                    }
                }
                in = new DataInputStream(url.openStream());
            } catch (MalformedURLException e) {
                try {
                    in = new DataInputStream(new FileInputStream(dataurl));
                } catch (FileNotFoundException me) {
                    _errorMsg = new String[2];
                    _errorMsg[0] = "File not found: " + dataurl;
                    _errorMsg[1] = me.getMessage();
                    return;
                } catch (SecurityException me) {
                    _errorMsg = new String[2];
                    _errorMsg[0] = "Security Exception: " + dataurl;
                    _errorMsg[1] = me.getMessage();
                    return;
                }
            } catch (IOException ioe) {
                _errorMsg = new String[2];
                _errorMsg[0] = "Failure opening URL: " + dataurl;
                _errorMsg[1] = ioe.getMessage();
                return;
            }
        }
        _newFile();
        try {
            if (_binary) {
                _parseBinaryStream(in);
            } else {
                String line = in.readLine();
                while (line != null) {
                    _parseLine(line);
                    line = in.readLine();
                }
            }
        } catch (MalformedURLException e) {
            _errorMsg = new String[2];
            _errorMsg[0] = "Malformed URL: " + dataurl;
            _errorMsg[1] = e.getMessage();
            return;
        } catch (IOException e) {
            _errorMsg = new String[2];
            _errorMsg[0] = "Failure reading data: " + dataurl;
            _errorMsg[1] = e.getMessage();
        } catch (PlotDataException e) {
            _errorMsg = new String[2];
            _errorMsg[0] = "Incorrectly formatted plot data in " + dataurl;
            _errorMsg[1] = e.getMessage();
        } finally {
            try {
                in.close();
            } catch (IOException me) {
            }
        }
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    private void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
} </s>
<s>class temp {    public boolean register(Object o) {
        String passwordAsText;
        if (o == null) throw new IllegalArgumentException("object cannot be null");
        if (!(o instanceof User)) {
            throw new IllegalArgumentException("passed argument is not an instance of the User class");
        }
        User newUser = (User) o;
        passwordAsText = newUser.getPassword();
        newUser.setPassword(passwordEncoder.encodePassword(passwordAsText, null));
        newUser.setRegDate(new Date());
        logger.debug("Setting default Authority {} to new user!", Authority.DEFAULT_NAME);
        newUser.getAuthorities().add(super.find(Authority.class, 1));
        logger.debug("Creating hash from email address! using Base64");
        newUser.setHash(new String(Base64.encodeBase64(newUser.getEmail().getBytes())));
        logger.debug("Creating phpBB forum User, by calling URL: {}", forumUrl);
        try {
            StringBuilder urlString = new StringBuilder(forumUrl);
            urlString.append("phpBB.php?action=register").append("&login=").append(newUser.getLogin()).append("&password=").append(passwordAsText).append("&email=").append(newUser.getEmail());
            sqlInjectionPreventer(urlString.toString());
            logger.debug("Connecting to URL: {}", urlString.toString());
            URL url = new URL(urlString.toString());
            URLConnection urlCon = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlCon.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) newUser.setForumID(Integer.valueOf(inputLine));
            in.close();
        } catch (IOException io) {
            logger.error("Connecting failed! Msg: {}", io.getMessage());
            throw new RuntimeException("Couldn't conntect to phpBB");
        } catch (NumberFormatException e) {
            logger.error("phpBB user generation failed! Msg: {}", e.getMessage());
            throw new RuntimeException("phpBB user generation failed!");
        }
        entityManager.persist(newUser);
        try {
            sendConfirmationEmail(newUser);
            return true;
        } catch (MailException ex) {
            return false;
        }
    }
} </s>
<s>class temp {    public static String hashPassword(String password) {
        String passwordHash = "";
        try {
            MessageDigest sha1 = MessageDigest.getInstance("SHA-1");
            sha1.reset();
            sha1.update(password.getBytes());
            Base64 encoder = new Base64();
            passwordHash = new String(encoder.encode(sha1.digest()));
        } catch (NoSuchAlgorithmException e) {
            LoggerFactory.getLogger(UmsAuthenticationProcessingFilter.class.getClass()).error("Failed to generate password hash: " + e.getMessage());
        }
        return passwordHash;
    }
} </s>
<s>class temp {    private void copyFile(File file, File targetFile) {
        try {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(targetFile));
            byte[] tmp = new byte[8192];
            int read = -1;
            while ((read = bis.read(tmp)) > 0) {
                bos.write(tmp, 0, read);
            }
            bis.close();
            bos.close();
        } catch (Exception e) {
            if (!targetFile.delete()) {
                System.err.println("Ups, created copy cant be deleted (" + targetFile.getAbsolutePath() + ")");
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Throwable {
        Options options = new Options();
        options.addOption(new CommandLineOptionBuilder("cas", "cas file").isRequired(true).build());
        options.addOption(new CommandLineOptionBuilder("o", "output directory").longName("outputDir").isRequired(true).build());
        options.addOption(new CommandLineOptionBuilder("tempDir", "temp directory").build());
        options.addOption(new CommandLineOptionBuilder("prefix", "file prefix for all generated files ( default " + DEFAULT_PREFIX + " )").build());
        options.addOption(new CommandLineOptionBuilder("trim", "trim file in sfffile's tab delimmed trim format").build());
        options.addOption(new CommandLineOptionBuilder("trimMap", "trim map file containing tab delimited trimmed fastX file to untrimmed counterpart").build());
        options.addOption(new CommandLineOptionBuilder("chromat_dir", "directory of chromatograms to be converted into phd " + "(it is assumed the read data for these chromatograms are in a fasta file which the .cas file knows about").build());
        options.addOption(new CommandLineOptionBuilder("s", "cache size ( default " + DEFAULT_CACHE_SIZE + " )").longName("cache_size").build());
        options.addOption(new CommandLineOptionBuilder("useIllumina", "any FASTQ files in this assembly are encoded in Illumina 1.3+ format (default is Sanger)").isFlag(true).build());
        options.addOption(new CommandLineOptionBuilder("useClosureTrimming", "apply additional contig trimming based on JCVI Closure rules").isFlag(true).build());
        CommandLine commandLine;
        try {
            commandLine = CommandLineUtils.parseCommandLine(options, args);
            int cacheSize = commandLine.hasOption("s") ? Integer.parseInt(commandLine.getOptionValue("s")) : DEFAULT_CACHE_SIZE;
            File casFile = new File(commandLine.getOptionValue("cas"));
            File casWorkingDirectory = casFile.getParentFile();
            ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o"));
            String prefix = commandLine.hasOption("prefix") ? commandLine.getOptionValue("prefix") : DEFAULT_PREFIX;
            TrimDataStore trimDatastore;
            if (commandLine.hasOption("trim")) {
                List<TrimDataStore> dataStores = new ArrayList<TrimDataStore>();
                final String trimFiles = commandLine.getOptionValue("trim");
                for (String trimFile : trimFiles.split(",")) {
                    System.out.println("adding trim file " + trimFile);
                    dataStores.add(new DefaultTrimFileDataStore(new File(trimFile)));
                }
                trimDatastore = MultipleDataStoreWrapper.createMultipleDataStoreWrapper(TrimDataStore.class, dataStores);
            } else {
                trimDatastore = TrimDataStoreUtil.EMPTY_DATASTORE;
            }
            CasTrimMap trimToUntrimmedMap;
            if (commandLine.hasOption("trimMap")) {
                trimToUntrimmedMap = new DefaultTrimFileCasTrimMap(new File(commandLine.getOptionValue("trimMap")));
            } else {
                trimToUntrimmedMap = new UnTrimmedExtensionTrimMap();
            }
            boolean useClosureTrimming = commandLine.hasOption("useClosureTrimming");
            TraceDataStore<FileSangerTrace> sangerTraceDataStore = null;
            Map<String, File> sangerFileMap = null;
            ReadOnlyDirectoryFileServer sourceChromatogramFileServer = null;
            if (commandLine.hasOption("chromat_dir")) {
                sourceChromatogramFileServer = DirectoryFileServer.createReadOnlyDirectoryFileServer(new File(commandLine.getOptionValue("chromat_dir")));
                sangerTraceDataStore = new SingleSangerTraceDirectoryFileDataStore(sourceChromatogramFileServer, ".scf");
                sangerFileMap = new HashMap<String, File>();
                Iterator<String> iter = sangerTraceDataStore.getIds();
                while (iter.hasNext()) {
                    String id = iter.next();
                    sangerFileMap.put(id, sangerTraceDataStore.get(id).getFile());
                }
            }
            PrintWriter logOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".log")), true);
            PrintWriter consensusOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".consensus.fasta")), true);
            PrintWriter traceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".traceFiles.txt")), true);
            PrintWriter referenceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".referenceFiles.txt")), true);
            long startTime = System.currentTimeMillis();
            logOut.println(System.getProperty("user.dir"));
            final ReadWriteDirectoryFileServer tempDir;
            if (!commandLine.hasOption("tempDir")) {
                tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(DEFAULT_TEMP_DIR);
            } else {
                File t = new File(commandLine.getOptionValue("tempDir"));
                IOUtil.mkdirs(t);
                tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(t);
            }
            try {
                if (!outputDir.contains("chromat_dir")) {
                    outputDir.createNewDir("chromat_dir");
                }
                if (sourceChromatogramFileServer != null) {
                    for (File f : sourceChromatogramFileServer) {
                        String name = f.getName();
                        OutputStream out = new FileOutputStream(outputDir.createNewFile("chromat_dir/" + name));
                        final FileInputStream fileInputStream = new FileInputStream(f);
                        try {
                            IOUtils.copy(fileInputStream, out);
                        } finally {
                            IOUtils.closeQuietly(out);
                            IOUtils.closeQuietly(fileInputStream);
                        }
                    }
                }
                FastQQualityCodec qualityCodec = commandLine.hasOption("useIllumina") ? FastQQualityCodec.ILLUMINA : FastQQualityCodec.SANGER;
                CasDataStoreFactory casDataStoreFactory = new MultiCasDataStoreFactory(new H2SffCasDataStoreFactory(casWorkingDirectory, tempDir, EmptyDataStoreFilter.INSTANCE), new H2FastQCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, qualityCodec, tempDir.getRootDir()), new FastaCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, cacheSize));
                final SliceMapFactory sliceMapFactory = new LargeNoQualitySliceMapFactory();
                CasAssembly casAssembly = new DefaultCasAssembly.Builder(casFile, casDataStoreFactory, trimDatastore, trimToUntrimmedMap, casWorkingDirectory).build();
                System.out.println("finished making casAssemblies");
                for (File traceFile : casAssembly.getNuceotideFiles()) {
                    traceFilesOut.println(traceFile.getAbsolutePath());
                    final String name = traceFile.getName();
                    String extension = FilenameUtils.getExtension(name);
                    if (name.contains("fastq")) {
                        if (!outputDir.contains("solexa_dir")) {
                            outputDir.createNewDir("solexa_dir");
                        }
                        if (outputDir.contains("solexa_dir/" + name)) {
                            IOUtil.delete(outputDir.getFile("solexa_dir/" + name));
                        }
                        outputDir.createNewSymLink(traceFile.getAbsolutePath(), "solexa_dir/" + name);
                    } else if ("sff".equals(extension)) {
                        if (!outputDir.contains("sff_dir")) {
                            outputDir.createNewDir("sff_dir");
                        }
                        if (outputDir.contains("sff_dir/" + name)) {
                            IOUtil.delete(outputDir.getFile("sff_dir/" + name));
                        }
                        outputDir.createNewSymLink(traceFile.getAbsolutePath(), "sff_dir/" + name);
                    }
                }
                for (File traceFile : casAssembly.getReferenceFiles()) {
                    referenceFilesOut.println(traceFile.getAbsolutePath());
                }
                DataStore<CasContig> contigDatastore = casAssembly.getContigDataStore();
                Map<String, AceContig> aceContigs = new HashMap<String, AceContig>();
                CasIdLookup readIdLookup = sangerFileMap == null ? casAssembly.getReadIdLookup() : new DifferentFileCasIdLookupAdapter(casAssembly.getReadIdLookup(), sangerFileMap);
                Date phdDate = new Date(startTime);
                NextGenClosureAceContigTrimmer closureContigTrimmer = null;
                if (useClosureTrimming) {
                    closureContigTrimmer = new NextGenClosureAceContigTrimmer(2, 5, 10);
                }
                for (CasContig casContig : contigDatastore) {
                    final AceContigAdapter adpatedCasContig = new AceContigAdapter(casContig, phdDate, readIdLookup);
                    CoverageMap<CoverageRegion<AcePlacedRead>> coverageMap = DefaultCoverageMap.buildCoverageMap(adpatedCasContig);
                    for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) {
                        if (useClosureTrimming) {
                            AceContig trimmedAceContig = closureContigTrimmer.trimContig(aceContig);
                            if (trimmedAceContig == null) {
                                System.out.printf("%s was completely trimmed... skipping%n", aceContig.getId());
                                continue;
                            }
                            aceContig = trimmedAceContig;
                        }
                        aceContigs.put(aceContig.getId(), aceContig);
                        consensusOut.print(new DefaultNucleotideEncodedSequenceFastaRecord(aceContig.getId(), NucleotideGlyph.convertToString(NucleotideGlyph.convertToUngapped(aceContig.getConsensus().decode()))));
                    }
                }
                System.out.printf("finished adapting %d casAssemblies into %d ace contigs%n", contigDatastore.size(), aceContigs.size());
                QualityDataStore qualityDataStore = sangerTraceDataStore == null ? casAssembly.getQualityDataStore() : MultipleDataStoreWrapper.createMultipleDataStoreWrapper(QualityDataStore.class, TraceQualityDataStoreAdapter.adapt(sangerTraceDataStore), casAssembly.getQualityDataStore());
                final DateTime phdDateTime = new DateTime(phdDate);
                final PhdDataStore casPhdDataStore = CachedDataStore.createCachedDataStore(PhdDataStore.class, new ArtificalPhdDataStore(casAssembly.getNucleotideDataStore(), qualityDataStore, phdDateTime), cacheSize);
                final PhdDataStore phdDataStore = sangerTraceDataStore == null ? casPhdDataStore : MultipleDataStoreWrapper.createMultipleDataStoreWrapper(PhdDataStore.class, new PhdSangerTraceDataStoreAdapter<FileSangerTrace>(sangerTraceDataStore, phdDateTime), casPhdDataStore);
                WholeAssemblyAceTag pathToPhd = new DefaultWholeAssemblyAceTag("phdball", "cas2consed", new Date(DateTimeUtils.currentTimeMillis()), "../phd_dir/" + prefix + ".phd.ball");
                AceAssembly aceAssembly = new DefaultAceAssembly<AceContig>(new SimpleDataStore<AceContig>(aceContigs), phdDataStore, Collections.<File>emptyList(), new DefaultAceTagMap(Collections.<ConsensusAceTag>emptyList(), Collections.<ReadAceTag>emptyList(), Arrays.asList(pathToPhd)));
                System.out.println("writing consed package...");
                ConsedWriter.writeConsedPackage(aceAssembly, sliceMapFactory, outputDir.getRootDir(), prefix, false);
            } catch (Throwable t) {
                t.printStackTrace(logOut);
                throw t;
            } finally {
                long endTime = System.currentTimeMillis();
                logOut.printf("took %s%n", new Period(endTime - startTime));
                logOut.flush();
                logOut.close();
                outputDir.close();
                consensusOut.close();
                traceFilesOut.close();
                referenceFilesOut.close();
                trimDatastore.close();
            }
        } catch (ParseException e) {
            printHelp(options);
            System.exit(1);
        }
    }
} </s>
<s>class temp {    private String getManifestVersion() {
        URL url = AceTree.class.getResource("/org/rhwlab/help/messages/manifest.html");
        InputStream istream = null;
        String s = "";
        try {
            istream = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(istream));
            while (br.ready()) {
                s = br.readLine();
                if (s.indexOf("Manifest-Version:") == 0) {
                    s = s.substring(17);
                    break;
                }
                System.out.println("read: " + s);
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "Version: " + s + C.NL;
    }
} </s>
<s>class temp {    static void copy(String scr, String dest) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(scr);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = in.read(buf)) >= 0) out.write(buf, 0, n);
        } finally {
            closeIgnoringException(in);
            closeIgnoringException(out);
        }
    }
} </s>
<s>class temp {    public void init() {
        updateLoc = "none";
        mt = new MediaTracker(this);
        thisThread = new Thread(this);
        i = 0;
        thisThread.start();
        try {
            base = getDocumentBase();
            username = getParameter("username");
        } catch (Exception e) {
        }
        String userpng = "images/" + username + ".png";
        String userdat = "data/" + username + "_l.cod";
        URL url = null;
        try {
            url = new URL(base, userdat);
        } catch (MalformedURLException e1) {
        }
        InputStream in = null;
        try {
            in = url.openStream();
        } catch (IOException e1) {
        }
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(in));
        } catch (Exception r) {
        }
        try {
            String line = reader.readLine();
            StringTokenizer tokenizer = new StringTokenizer(line, " ");
            int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase());
            this.topol = tokenizer.nextToken().trim().toLowerCase();
            xunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase());
            yunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase());
            @SuppressWarnings("unused") String neigh = tokenizer.nextToken().trim().toLowerCase();
            String label = null;
            labels = new String[xunit][yunit];
            for (int e = 0; e < yunit; e++) {
                for (int r = 0; r < xunit; r++) {
                    line = reader.readLine();
                    StringTokenizer tokenizer2 = new StringTokenizer(line, " ");
                    for (int w = 0; w < dim; w++) {
                        if (tokenizer2.countTokens() > 0) tokenizer2.nextToken();
                    }
                    while (tokenizer2.countTokens() > 0) {
                        label = tokenizer2.nextToken() + " ";
                    }
                    if (label == null) {
                        labels[r][e] = "none";
                    } else {
                        labels[r][e] = label;
                    }
                    label = null;
                }
            }
            reader.close();
            if (topol.equals("hexa")) {
                xposit = new int[xunit][yunit];
                yposit = new int[xunit][yunit];
                double divisor1 = xunit;
                double divisor2 = yunit;
                for (int p = 0; p < xunit; p++) {
                    for (int q = 0; q < yunit; q++) {
                        if (q % 2 == 0) {
                            double nenner = (p * width);
                            xposit[p][q] = (int) Math.round(nenner / divisor1);
                        }
                        if (q % 2 != 0) {
                            double nenner = (width * 0.5) + (p * width);
                            xposit[p][q] = (int) Math.round(nenner / divisor1);
                        }
                        yposit[p][q] = (int) Math.round(((height * 0.5) + q * height) / divisor2);
                    }
                }
            }
            if (topol.equals("rect")) {
                xposit = new int[xunit][yunit];
                yposit = new int[xunit][yunit];
                double divisor1 = xunit;
                double divisor2 = yunit;
                for (int p = 0; p < xunit; p++) {
                    for (int q = 0; q < yunit; q++) {
                        double nenner = (width * 0.5) + (p * width);
                        xposit[p][q] = (int) Math.round((nenner / divisor1));
                        yposit[p][q] = (int) Math.round(((height * 0.5) + q * height) / divisor2);
                    }
                }
            }
        } catch (IOException o) {
        }
        umat = getImage(base, userpng);
        mt.addImage(umat, 1);
        try {
            mt.waitForAll();
        } catch (InterruptedException e) {
        }
        addMouseListener(new CircleInfo());
    }
} </s>
<s>class temp {    @SuppressWarnings("static-access")
    public void run() {
        while (true) {
            try {
                thisThread.sleep(10000);
            } catch (InterruptedException e) {
                System.out.print("no connection");
            }
            ++i;
            umat.flush();
            umat = null;
            try {
                base = getDocumentBase();
                username = getParameter("username");
            } catch (Exception e) {
            }
            String userdat = "data/" + username + "_l.cod";
            URL url = null;
            try {
                url = new URL(base, userdat);
            } catch (MalformedURLException e1) {
            }
            InputStream in = null;
            try {
                in = url.openStream();
            } catch (IOException e1) {
            }
            BufferedReader reader = null;
            try {
                reader = new BufferedReader(new InputStreamReader(in));
            } catch (Exception r) {
            }
            try {
                String line = reader.readLine();
                StringTokenizer tokenizer = new StringTokenizer(line, " ");
                int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase());
                this.topol = tokenizer.nextToken().trim().toLowerCase();
                xunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase());
                yunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase());
                @SuppressWarnings("unused") String neigh = tokenizer.nextToken().trim().toLowerCase();
                String label = null;
                labels = new String[xunit][yunit];
                for (int e = 0; e < yunit; e++) {
                    for (int r = 0; r < xunit; r++) {
                        line = reader.readLine();
                        StringTokenizer tokenizer2 = new StringTokenizer(line, " ");
                        for (int w = 0; w < dim; w++) {
                            if (tokenizer2.countTokens() > 0) tokenizer2.nextToken();
                        }
                        while (tokenizer2.countTokens() > 0) {
                            label = tokenizer2.nextToken() + " ";
                        }
                        if (label == null) {
                            labels[r][e] = "none";
                        } else {
                            labels[r][e] = label;
                        }
                        label = null;
                    }
                }
                reader.close();
                if (topol.equals("hexa")) {
                    xposit = new int[xunit][yunit];
                    yposit = new int[xunit][yunit];
                    double divisor1 = xunit;
                    double divisor2 = yunit;
                    for (int p = 0; p < xunit; p++) {
                        for (int q = 0; q < yunit; q++) {
                            if (q % 2 == 0) {
                                double nenner = (p * width);
                                xposit[p][q] = (int) Math.round(nenner / divisor1);
                            }
                            if (q % 2 != 0) {
                                double nenner = (width * 0.5) + (p * width);
                                xposit[p][q] = (int) Math.round(nenner / divisor1);
                            }
                            yposit[p][q] = (int) Math.round(((height * 0.5) + q * height) / divisor2);
                        }
                    }
                }
                if (topol.equals("rect")) {
                    xposit = new int[xunit][yunit];
                    yposit = new int[xunit][yunit];
                    double divisor1 = xunit;
                    double divisor2 = yunit;
                    for (int p = 0; p < xunit; p++) {
                        for (int q = 0; q < yunit; q++) {
                            double nenner = (width * 0.5) + (p * width);
                            xposit[p][q] = (int) Math.round((nenner / divisor1));
                            yposit[p][q] = (int) Math.round(((height * 0.5) + q * height) / divisor2);
                        }
                    }
                }
            } catch (IOException o) {
            }
            String userpng = "images/" + username + ".png";
            mt.removeImage(umat);
            umat = getImage(base, userpng);
            mt.addImage(umat, 0);
            try {
                mt.waitForID(0);
            } catch (InterruptedException i) {
                showStatus("Interrupted");
            }
            repaint();
        }
    }
} </s>
<s>class temp {    @Override
    protected void write(InputStream in, OutputStream out, javax.sound.sampled.AudioFormat javaSoundFormat) throws IOException {
        if (USE_JAVASOUND) {
            super.write(in, out, javaSoundFormat);
        } else {
            try {
                byte[] header = JavaSoundCodec.createWavHeader(javaSoundFormat);
                if (header == null) throw new IOException("Unable to create wav header");
                out.write(header);
                IOUtils.copyStream(in, out);
            } catch (InterruptedIOException e) {
                logger.log(Level.FINE, "" + e, e);
                throw e;
            } catch (IOException e) {
                logger.log(Level.WARNING, "" + e, e);
                throw e;
            }
        }
    }
} </s>
<s>class temp {    public static final void copyFile(String srcFilename, String dstFilename) throws IOException {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        FileChannel ifc = null;
        FileChannel ofc = null;
        Util.copyBuffer.clear();
        try {
            fis = new FileInputStream(srcFilename);
            ifc = fis.getChannel();
            fos = new FileOutputStream(dstFilename);
            ofc = fos.getChannel();
            int sz = (int) ifc.size();
            int n = 0;
            while (n < sz) {
                if (ifc.read(Util.copyBuffer) < 0) {
                    break;
                }
                Util.copyBuffer.flip();
                n += ofc.write(Util.copyBuffer);
                Util.copyBuffer.compact();
            }
        } finally {
            try {
                if (ifc != null) {
                    ifc.close();
                } else if (fis != null) {
                    fis.close();
                }
            } catch (IOException exc) {
            }
            try {
                if (ofc != null) {
                    ofc.close();
                } else if (fos != null) {
                    fos.close();
                }
            } catch (IOException exc) {
            }
        }
    }
} </s>
<s>class temp {    public void testStopPoll() throws Exception {
        for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i);
        masterClient.commit();
        NamedList masterQueryRsp = query("*:*", masterClient);
        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
        assertEquals(500, masterQueryResult.getNumFound());
        Thread.sleep(3000);
        NamedList slaveQueryRsp = query("*:*", slaveClient);
        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
        assertEquals(500, slaveQueryResult.getNumFound());
        String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);
        assertEquals(null, cmp);
        String masterUrl = "http://localhost:" + slaveJetty.getLocalPort() + "/solr/replication?command=disablepoll";
        URL url = new URL(masterUrl);
        InputStream stream = url.openStream();
        try {
            stream.close();
        } catch (IOException e) {
        }
        index(masterClient, "id", 501, "name", "name = " + 501);
        masterClient.commit();
        Thread.sleep(3000);
        slaveQueryRsp = query("*:*", slaveClient);
        slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
        assertEquals(500, slaveQueryResult.getNumFound());
        slaveQueryRsp = query("*:*", masterClient);
        slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
        assertEquals(501, slaveQueryResult.getNumFound());
    }
} </s>
<s>class temp {    public void testSnapPullWithMasterUrl() throws Exception {
        copyFile(new File(CONF_DIR + "solrconfig-slave1.xml"), new File(slave.getConfDir(), "solrconfig.xml"));
        slaveJetty.stop();
        slaveJetty = createJetty(slave);
        slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
        for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i);
        masterClient.commit();
        NamedList masterQueryRsp = query("*:*", masterClient);
        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
        assertEquals(500, masterQueryResult.getNumFound());
        String masterUrl = "http://localhost:" + slaveJetty.getLocalPort() + "/solr/replication?command=fetchindex&masterUrl=";
        masterUrl += "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication";
        URL url = new URL(masterUrl);
        InputStream stream = url.openStream();
        try {
            stream.close();
        } catch (IOException e) {
        }
        Thread.sleep(3000);
        NamedList slaveQueryRsp = query("*:*", slaveClient);
        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
        assertEquals(500, slaveQueryResult.getNumFound());
        String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);
        assertEquals(null, cmp);
    }
} </s>
<s>class temp {    public void testReplicateAfterWrite2Slave() throws Exception {
        int nDocs = 50;
        for (int i = 0; i < nDocs; i++) {
            index(masterClient, "id", i, "name", "name = " + i);
        }
        String masterUrl = "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command=disableReplication";
        URL url = new URL(masterUrl);
        InputStream stream = url.openStream();
        try {
            stream.close();
        } catch (IOException e) {
        }
        masterClient.commit();
        NamedList masterQueryRsp = query("*:*", masterClient);
        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
        assertEquals(nDocs, masterQueryResult.getNumFound());
        Thread.sleep(100);
        index(slaveClient, "id", 551, "name", "name = " + 551);
        slaveClient.commit(true, true);
        index(slaveClient, "id", 552, "name", "name = " + 552);
        slaveClient.commit(true, true);
        index(slaveClient, "id", 553, "name", "name = " + 553);
        slaveClient.commit(true, true);
        index(slaveClient, "id", 554, "name", "name = " + 554);
        slaveClient.commit(true, true);
        index(slaveClient, "id", 555, "name", "name = " + 555);
        slaveClient.commit(true, true);
        NamedList slaveQueryRsp = query("id:555", slaveClient);
        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
        assertEquals(1, slaveQueryResult.getNumFound());
        masterUrl = "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command=enableReplication";
        url = new URL(masterUrl);
        stream = url.openStream();
        try {
            stream.close();
        } catch (IOException e) {
        }
        Thread.sleep(3000);
        slaveQueryRsp = query("id:555", slaveClient);
        slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
        assertEquals(0, slaveQueryResult.getNumFound());
    }
} </s>
<s>class temp {    public void testBackup() throws Exception {
        masterJetty.stop();
        copyFile(new File(CONF_DIR + "solrconfig-master1.xml"), new File(master.getConfDir(), "solrconfig.xml"));
        masterJetty = createJetty(master);
        masterClient = createNewSolrServer(masterJetty.getLocalPort());
        for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i);
        masterClient.commit();
        class BackupThread extends Thread {

            volatile String fail = null;

            public void run() {
                String masterUrl = "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command=" + ReplicationHandler.CMD_BACKUP;
                URL url;
                InputStream stream = null;
                try {
                    url = new URL(masterUrl);
                    stream = url.openStream();
                    stream.close();
                } catch (Exception e) {
                    fail = e.getMessage();
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            }

            ;
        }
        ;
        BackupThread backupThread = new BackupThread();
        backupThread.start();
        File dataDir = new File(master.getDataDir());
        class CheckStatus extends Thread {

            volatile String fail = null;

            volatile String response = null;

            volatile boolean success = false;

            public void run() {
                String masterUrl = "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command=" + ReplicationHandler.CMD_DETAILS;
                URL url;
                InputStream stream = null;
                try {
                    url = new URL(masterUrl);
                    stream = url.openStream();
                    response = IOUtils.toString(stream);
                    if (response.contains("<str name=\"status\">success</str>")) {
                        success = true;
                    }
                    stream.close();
                } catch (Exception e) {
                    fail = e.getMessage();
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            }

            ;
        }
        ;
        int waitCnt = 0;
        CheckStatus checkStatus = new CheckStatus();
        while (true) {
            checkStatus.run();
            if (checkStatus.fail != null) {
                fail(checkStatus.fail);
            }
            if (checkStatus.success) {
                break;
            }
            Thread.sleep(200);
            if (waitCnt == 10) {
                fail("Backup success not detected:" + checkStatus.response);
            }
            waitCnt++;
        }
        if (backupThread.fail != null) {
            fail(backupThread.fail);
        }
        File[] files = dataDir.listFiles(new FilenameFilter() {

            public boolean accept(File dir, String name) {
                if (name.startsWith("snapshot")) {
                    return true;
                }
                return false;
            }
        });
        assertEquals(1, files.length);
        File snapDir = files[0];
        IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);
        TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);
        assertEquals(500, hits.totalHits);
    }
} </s>
<s>class temp {            public void run() {
                String masterUrl = "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command=" + ReplicationHandler.CMD_BACKUP;
                URL url;
                InputStream stream = null;
                try {
                    url = new URL(masterUrl);
                    stream = url.openStream();
                    stream.close();
                } catch (Exception e) {
                    fail = e.getMessage();
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            }
} </s>
<s>class temp {            public void run() {
                String masterUrl = "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command=" + ReplicationHandler.CMD_DETAILS;
                URL url;
                InputStream stream = null;
                try {
                    url = new URL(masterUrl);
                    stream = url.openStream();
                    response = IOUtils.toString(stream);
                    if (response.contains("<str name=\"status\">success</str>")) {
                        success = true;
                    }
                    stream.close();
                } catch (Exception e) {
                    fail = e.getMessage();
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            }
} </s>
<s>class temp {    public void testResolveURL() throws Exception {
        System.out.println("resolveURL");
        File bigFile = new File("./src/test/java/big.json");
        File smallFile = new File("./src/test/java/sample1.json");
        Object[] urls = new Object[] { "http://json-schema.org/schema", "http://json-schema.org/hyper-schema", "http://json-schema.org/json-ref", "http://json-schema.org/interfaces", "http://json-schema.org/geo", "http://json-schema.org/card", "http://json-schema.org/calendar", "http://json-schema.org/address", bigFile };
        JSONSchemaURIResolverImpl uriResolver = new JSONSchemaURIResolverImpl();
        JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl();
        try {
            InputStream is = new URL((String) urls[0]).openStream();
            is.close();
        } catch (ConnectException cex) {
            for (int i = 2; i < urls.length; i++) {
                if (urls[i] instanceof String) {
                    String url = (String) urls[i];
                    uriResolver.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"));
                } else if (urls[i] instanceof File) {
                    uriResolver.register(((File) urls[i]).toURI().toURL(), urls[i]);
                }
            }
        } catch (Exception ex) {
        }
        for (int i = 2; i < urls.length; i++) {
            if (urls[i] instanceof String) {
                String url = (String) urls[i];
                uriResolver2.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"));
            } else if (urls[i] instanceof File) {
                uriResolver2.register(((File) urls[i]).toURI().toURL(), urls[i]);
            }
        }
        for (Object source : urls) {
            try {
                if (source instanceof String) {
                    StreamSource ss = uriResolver.resolveURI(new URI((String) source), null);
                    assertNotNull(ss.getReader());
                    assertNull(ss.getInputStream());
                    ss.getReader().close();
                }
            } catch (Throwable th) {
                fail("Unexpected problem: " + source + ". Error: " + th);
            }
        }
        for (Object source : urls) {
            try {
                if (source instanceof String) {
                    StreamSource ss = uriResolver.resolveURL(new URL((String) source), null);
                    assertNotNull(ss.getReader());
                    assertNull(ss.getInputStream());
                    ss.getReader().close();
                }
            } catch (Throwable th) {
                fail("Unexpected problem: " + source + ". Error: " + th);
            }
        }
        for (Object source : urls) {
            try {
                if (source instanceof String) {
                    StreamSource ss = uriResolver2.resolveURI(new URI((String) source), null);
                    assertNotNull(ss.getReader());
                    assertNull(ss.getInputStream());
                    ss.getReader().close();
                    assertTrue((new URL((String) source)).equals(uriResolver2.lastURL));
                    assertFalse((new URL((String) source)).equals(uriResolver2.lastMapped));
                }
            } catch (Throwable th) {
                fail("Unexpected problem: " + source + ". Error: " + th);
            }
        }
        for (Object source : urls) {
            try {
                if (source instanceof String) {
                    StreamSource ss = uriResolver2.resolveURL(new URL((String) source), null);
                    assertNotNull(ss.getReader());
                    assertNull(ss.getInputStream());
                    ss.getReader().close();
                    assertTrue((new URL((String) source)).equals(uriResolver2.lastURL));
                    assertFalse((new URL((String) source)).equals(uriResolver2.lastMapped));
                }
            } catch (Throwable th) {
                fail("Unexpected problem: " + source + ". Error: " + th);
            }
        }
        uriResolver2.register(new URL("ftp://localhost/1"), bigFile);
        uriResolver2.register(new URL("ftp://localhost/2"), smallFile);
        uriResolver2.register(new URL("ftp://localhost/2#2"), smallFile);
        try {
            Reader r1 = uriResolver2.resolveURL(new URL("ftp://localhost/2"), null).getReader();
            Reader r2 = uriResolver2.resolveURL(new URL("ftp://localhost/2#2"), null).getReader();
            int ch = 0;
            while ((ch = r1.read()) != -1) {
                assertEquals(ch, r2.read());
            }
            assertEquals(-1, r2.read());
        } catch (Throwable th) {
            fail("Failed while testing identity of same mapped files. Error: " + th);
        }
        uriResolver2.register(new URL("ftp://localhost/1"), null);
        uriResolver2.register(new URL("ftp://localhost/2"), null);
        uriResolver2.register(new URL("ftp://localhost/2#2"), null);
        uriResolver2.register(new URL("ftp://localhost/1"), bigFile, true);
        uriResolver2.register(new URL("ftp://localhost/2"), smallFile, true);
        uriResolver2.register(new URL("ftp://localhost/2#2"), smallFile, true);
        uriResolver2.unregister(new URL("ftp://localhost/1"), true);
        uriResolver2.unregister(new URL("ftp://localhost/2"), true);
        uriResolver2.unregister(new URL("ftp://localhost/2#2"), true);
    }
} </s>
<s>class temp {    private String cookieString(String url, String ip) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA-1");
            md.update((url + "&&" + ip + "&&" + salt.toString()).getBytes());
            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
            filterConfig.getServletContext().log(this.getClass().getName() + " error " + e);
            return null;
        }
    }
} </s>
<s>class temp {    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException("FileCopy: " + "no such source file: " + fromFileName);
        if (!fromFile.isFile()) throw new IOException("FileCopy: " + "can't copy directory: " + fromFileName);
        if (!fromFile.canRead()) throw new IOException("FileCopy: " + "source file is unreadable: " + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException("FileCopy: " + "destination file is unwriteable: " + toFileName);
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty("user.dir");
            File dir = new File(parent);
            if (!dir.exists()) dir.mkdir();
            if (dir.isFile()) throw new IOException("FileCopy: " + "destination is not a directory: " + parent);
            if (!dir.canWrite()) throw new IOException("FileCopy: " + "destination directory is unwriteable: " + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
} </s>
<s>class temp {    public static String stringOfUrl(String addr) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        System.out.println("test");
        URL url = new URL(addr);
        System.out.println("test2");
        IOUtils.copy(url.openStream(), output);
        return output.toString();
    }
} </s>
<s>class temp {    public int openUrl(String url, String method, Bundle params) {
        int result = 0;
        try {
            if (method.equals("GET")) {
                url = url + "?" + Utility.encodeUrl(params);
            }
            String response = "";
            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
            conn.setRequestProperty("User-Agent", System.getProperties().getProperty("http.agent") + " RenrenAndroidSDK");
            if (!method.equals("GET")) {
                conn.setRequestMethod("POST");
                conn.setDoOutput(true);
                conn.getOutputStream().write(Utility.encodeUrl(params).getBytes("UTF-8"));
            }
            response = Utility.read(conn.getInputStream());
            JSONObject json = new JSONObject(response);
            try {
                int code = json.getInt("result");
                if (code > 0) result = 1;
            } catch (Exception e) {
                result = json.getInt("error_code");
                errmessage = json.getString("error_msg");
            }
        } catch (Exception e) {
            result = -1;
        }
        return result;
    }
} </s>
<s>class temp {    public void loginSendSpace() throws Exception {
        loginsuccessful = false;
        HttpParams params = new BasicHttpParams();
        params.setParameter("http.useragent", "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6");
        DefaultHttpClient httpclient = new DefaultHttpClient(params);
        NULogger.getLogger().info("Trying to log in to sendspace");
        HttpPost httppost = new HttpPost("http://www.sendspace.com/login.html");
        httppost.setHeader("Cookie", sidcookie + ";" + ssuicookie);
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        formparams.add(new BasicNameValuePair("action", "login"));
        formparams.add(new BasicNameValuePair("submit", "login"));
        formparams.add(new BasicNameValuePair("target", "%252F"));
        formparams.add(new BasicNameValuePair("action_type", "login"));
        formparams.add(new BasicNameValuePair("remember", "1"));
        formparams.add(new BasicNameValuePair("username", getUsername()));
        formparams.add(new BasicNameValuePair("password", getPassword()));
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");
        httppost.setEntity(entity);
        HttpResponse httpresponse = httpclient.execute(httppost);
        NULogger.getLogger().info("Getting cookies........");
        Iterator<Cookie> it = httpclient.getCookieStore().getCookies().iterator();
        Cookie escookie = null;
        while (it.hasNext()) {
            escookie = it.next();
            if (escookie.getName().equalsIgnoreCase("ssal")) {
                ssalcookie = escookie.getName() + "=" + escookie.getValue();
                NULogger.getLogger().info(ssalcookie);
                loginsuccessful = true;
            }
        }
        if (loginsuccessful) {
            username = getUsername();
            password = getPassword();
            NULogger.getLogger().info("SendSpace login success :)");
        } else {
            NULogger.getLogger().info("SendSpace login failed :(");
            loginsuccessful = false;
            username = "";
            password = "";
            JOptionPane.showMessageDialog(NeembuuUploader.getInstance(), "<html><b>" + HOSTNAME + "</b> " + TranslationProvider.get("neembuuuploader.accounts.loginerror") + "</html>", HOSTNAME, JOptionPane.WARNING_MESSAGE);
            AccountsManager.getInstance().setVisible(true);
        }
    }
} </s>
<s>class temp {    private static byte[] createHash(EHashType hashType, String string) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(hashType.getJavaHashType());
            md.reset();
            md.update(string.getBytes());
            byte[] byteResult = md.digest();
            return byteResult;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public void run(String srcf, String dst) {
        final Path srcPath = new Path("./" + srcf);
        final Path desPath = new Path(dst);
        try {
            Path[] srcs = FileUtil.stat2Paths(hdfs.globStatus(srcPath), srcPath);
            OutputStream out = FileSystem.getLocal(conf).create(desPath);
            for (int i = 0; i < srcs.length; i++) {
                System.out.println(srcs[i]);
                InputStream in = hdfs.open(srcs[i]);
                IOUtils.copyBytes(in, out, conf, false);
                in.close();
            }
            out.close();
        } catch (IOException ex) {
            System.err.print(ex.getMessage());
        }
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public void copy(File aSource, File aDestDir) throws IOException {
        FileInputStream myInFile = new FileInputStream(aSource);
        FileOutputStream myOutFile = new FileOutputStream(new File(aDestDir, aSource.getName()));
        FileChannel myIn = myInFile.getChannel();
        FileChannel myOut = myOutFile.getChannel();
        boolean end = false;
        while (true) {
            int myBytes = myIn.read(theBuffer);
            if (myBytes != -1) {
                theBuffer.flip();
                myOut.write(theBuffer);
                theBuffer.clear();
            } else break;
        }
        myIn.close();
        myOut.close();
        myInFile.close();
        myOutFile.close();
        long myEnd = System.currentTimeMillis();
    }
} </s>
<s>class temp {    private void getRandomGuid(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error: " + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = secureRandom.nextLong();
            } else {
                rand = random.nextLong();
            }
            sbValueBeforeMD5.append(id);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
} </s>
<s>class temp {    public String translate(String before, int translateType) throws CoreException {
        if (before == null) throw new IllegalArgumentException("before is null.");
        if ((translateType != ENGLISH_TO_JAPANESE) && (translateType != JAPANESE_TO_ENGLISH)) {
            throw new IllegalArgumentException("Invalid translateType. value=" + translateType);
        }
        try {
            URL url = new URL(config.getTranslatorSiteUrl());
            URLConnection connection = url.openConnection();
            sendTranslateRequest(before, translateType, connection);
            String afterContents = receiveTranslatedResponse(connection);
            String afterStartKey = config.getTranslationResultStart();
            String afterEndKey = config.getTranslationResultEnd();
            int startLength = afterStartKey.length();
            int startPos = afterContents.indexOf(afterStartKey);
            if (startPos != -1) {
                int endPos = afterContents.indexOf(afterEndKey, startPos);
                if (endPos != -1) {
                    String after = afterContents.substring(startPos + startLength, endPos);
                    after = replaceEntities(after);
                    return after;
                } else {
                    throwCoreException(ERROR_END_KEYWORD_NOT_FOUND, "End keyword not found.", null);
                }
            } else {
                throwCoreException(ERROR_START_KEYWORD_NOT_FOUND, "Start keyword not found.", null);
            }
        } catch (IOException e) {
            throwCoreException(ERROR_IO, e.getMessage(), e);
        }
        throw new IllegalStateException("CoreException not occurd.");
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        String WTKdir = null;
        String sourceFile = null;
        String instrFile = null;
        String outFile = null;
        String jadFile = null;
        Manifest mnf;
        if (args.length == 0) {
            usage();
            return;
        }
        int i = 0;
        while (i < args.length && args[i].startsWith("-")) {
            if (("-WTK".equals(args[i])) && (i < args.length - 1)) {
                i++;
                WTKdir = args[i];
            } else if (("-source".equals(args[i])) && (i < args.length - 1)) {
                i++;
                sourceFile = args[i];
            } else if (("-instr".equals(args[i])) && (i < args.length - 1)) {
                i++;
                instrFile = args[i];
            } else if (("-o".equals(args[i])) && (i < args.length - 1)) {
                i++;
                outFile = args[i];
            } else if (("-jad".equals(args[i])) && (i < args.length - 1)) {
                i++;
                jadFile = args[i];
            } else {
                System.out.println("Error: Unrecognized option: " + args[i]);
                System.exit(0);
            }
            i++;
        }
        if (WTKdir == null || sourceFile == null || instrFile == null) {
            System.out.println("Error: Missing parameter!!!");
            usage();
            return;
        }
        if (outFile == null) outFile = sourceFile;
        FileInputStream fisJar;
        try {
            fisJar = new FileInputStream(sourceFile);
        } catch (FileNotFoundException e1) {
            System.out.println("Cannot find source jar file: " + sourceFile);
            e1.printStackTrace();
            return;
        }
        FileOutputStream fosJar;
        File aux = null;
        try {
            aux = File.createTempFile("predef", "aux");
            fosJar = new FileOutputStream(aux);
        } catch (IOException e1) {
            System.out.println("Cannot find temporary jar file: " + aux);
            e1.printStackTrace();
            return;
        }
        JarFile instrJar = null;
        Enumeration en = null;
        File tempDir = null;
        try {
            instrJar = new JarFile(instrFile);
            en = instrJar.entries();
            tempDir = File.createTempFile("jbtp", "");
            tempDir.delete();
            System.out.println("Create directory: " + tempDir.mkdirs());
            tempDir.deleteOnExit();
        } catch (IOException e) {
            System.out.println("Cannot open instrumented file: " + instrFile);
            e.printStackTrace();
            return;
        }
        String[] wtklib = new java.io.File(WTKdir + File.separator + "lib").list(new OnlyJar());
        String preverifyCmd = WTKdir + File.separator + "bin" + File.separator + "preverify -classpath " + WTKdir + File.separator + "lib" + File.separator + CLDC_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + MIDP_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + WMA_JAR + File.pathSeparator + instrFile;
        for (int k = 0; k < wtklib.length; k++) {
            preverifyCmd += File.pathSeparator + WTKdir + File.separator + "lib" + wtklib[k];
        }
        preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " ";
        while (en.hasMoreElements()) {
            JarEntry je = (JarEntry) en.nextElement();
            String jeName = je.getName();
            if (jeName.endsWith(".class")) jeName = jeName.substring(0, jeName.length() - 6);
            preverifyCmd += jeName + " ";
        }
        try {
            Process p = Runtime.getRuntime().exec(preverifyCmd);
            if (p.waitFor() != 0) {
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                System.out.println("Error calling the preverify command.");
                while (in.ready()) {
                    System.out.print("" + in.readLine());
                }
                System.out.println();
                in.close();
                return;
            }
        } catch (Exception e) {
            System.out.println("Cannot execute preverify command");
            e.printStackTrace();
            return;
        }
        File[] listOfFiles = computeFiles(tempDir);
        System.out.println("-------------------------------\n" + "Files to insert: ");
        String[] strFiles = new String[listOfFiles.length];
        int l = tempDir.toString().length() + 1;
        for (int j = 0; j < listOfFiles.length; j++) {
            strFiles[j] = listOfFiles[j].toString().substring(l);
            strFiles[j] = strFiles[j].replace(File.separatorChar, '/');
            System.out.println(strFiles[j]);
        }
        System.out.println("-------------------------------");
        try {
            JarInputStream jis = new JarInputStream(fisJar);
            mnf = jis.getManifest();
            JarOutputStream jos = new JarOutputStream(fosJar, mnf);
            nextJar: for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) {
                String s = je.getName();
                for (int k = 0; k < strFiles.length; k++) {
                    if (strFiles[k].equals(s)) continue nextJar;
                }
                jos.putNextEntry(je);
                byte[] b = new byte[512];
                for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) {
                    jos.write(b, 0, k);
                }
            }
            jis.close();
            for (int j = 0; j < strFiles.length; j++) {
                FileInputStream fis = new FileInputStream(listOfFiles[j]);
                JarEntry je = new JarEntry(strFiles[j]);
                jos.putNextEntry(je);
                byte[] b = new byte[512];
                while (fis.available() > 0) {
                    int k = fis.read(b, 0, 512);
                    jos.write(b, 0, k);
                }
                fis.close();
            }
            jos.close();
            fisJar.close();
            fosJar.close();
        } catch (IOException e) {
            System.out.println("Cannot read/write jar file.");
            e.printStackTrace();
            return;
        }
        try {
            FileOutputStream fos = new FileOutputStream(outFile);
            FileInputStream fis = new FileInputStream(aux);
            byte[] b = new byte[512];
            while (fis.available() > 0) {
                int k = fis.read(b, 0, 512);
                fos.write(b, 0, k);
            }
            fis.close();
            fos.close();
        } catch (IOException e) {
            System.out.println("Cannot write output jar file: " + outFile);
            e.printStackTrace();
        }
        Iterator it;
        Attributes atr;
        atr = mnf.getMainAttributes();
        it = atr.keySet().iterator();
        if (jadFile != null) {
            FileOutputStream fos;
            try {
                File outJarFile = new File(outFile);
                fos = new FileOutputStream(jadFile);
                PrintStream psjad = new PrintStream(fos);
                while (it.hasNext()) {
                    Object ats = it.next();
                    psjad.println(ats + ": " + atr.get(ats));
                }
                psjad.println("MIDlet-Jar-URL: " + outFile);
                psjad.println("MIDlet-Jar-Size: " + outJarFile.length());
                fos.close();
            } catch (IOException eio) {
                System.out.println("Cannot create jad file.");
                eio.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public static String getResponseText(String url) throws MalformedURLException, IOException {
        URL m_url = new URL(url);
        URLConnection urlCconn = m_url.openConnection();
        urlCconn.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.16) Gecko/20080702 Firefox/2.0.0.16");
        urlCconn.setRequestProperty("Accept", "text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
        urlCconn.setRequestProperty("Accept-Language", "en-us,en;q=0.5");
        urlCconn.setRequestProperty("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.7");
        urlCconn.setRequestProperty("Keep-Alive", "300");
        urlCconn.setRequestProperty("Connection", "keep-alive");
        return IOUtil.toString(urlCconn.getInputStream());
    }
} </s>
<s>class temp {    private void copyFile(File from, File to) throws IOException {
        FileUtils.ensureParentDirectoryExists(to);
        byte[] buffer = new byte[1024];
        int read;
        FileInputStream is = new FileInputStream(from);
        FileOutputStream os = new FileOutputStream(to);
        while ((read = is.read(buffer)) > 0) {
            os.write(buffer, 0, read);
        }
        is.close();
        os.close();
    }
} </s>
<s>class temp {    private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception {
        Data data = ref.data;
        File file = new File(base + path);
        file.getParentFile().mkdirs();
        if (Debug.level > 1) System.err.println("read file " + data.file + " at index " + data.index);
        OutputStream output = new FileOutputStream(file);
        if (hashall) output = new DigestOutputStream(output, MessageDigest.getInstance("MD5"));
        reader.read(output, data.index, data.file);
        output.close();
        if (hashall) {
            String filehash = StringUtils.toHex(((DigestOutputStream) output).getMessageDigest().digest());
            if (!hash.equals(filehash)) throw new RuntimeException("hash wasn't equal for " + file);
        }
        file.setLastModified(ref.lastmod);
        if (file.length() != data.size) throw new RuntimeException("corrupted file " + file);
    }
} </s>
<s>class temp {    protected Object serveFile(MyServerSocket socket, String filenm, URL url) {
        PrintStream out = null;
        InputStream in = null;
        long len = 0;
        try {
            out = new PrintStream(socket.getOutputStream());
            in = url.openStream();
            len = in.available();
        } catch (IOException e) {
            HttpHelper.httpWrap(HttpHelper.EXC, e.toString(), 0);
        }
        if (HttpHelper.isImage(filenm)) {
            out.print(HttpHelper.httpWrapPic(filenm, len));
        } else if (filenm.endsWith(".html")) {
            Comms.copyStreamSED(in, out, MPRES);
        } else if (HttpHelper.isOtherFile(filenm)) {
            out.print(HttpHelper.httpWrapOtherFile(filenm, len));
        } else {
            String type = MimeUtils.getMimeType(filenm);
            if (type.equals(MimeUtils.UNKNOWN_MIME_TYPE)) {
                out.print(HttpHelper.httpWrapMimeType(type, len));
            } else {
                out.print(HttpHelper.httpWrapMimeType(type, len));
            }
        }
        if (in == null) {
            Log.logThis("THE INPUT STREAM IS NULL...url=" + url);
        } else Files.copyStream(in, out);
        return null;
    }
} </s>
<s>class temp {    public static void copy(String path1, String path2) throws IOException {
        FileReader in = new FileReader(path1);
        FileWriter out = new FileWriter(path2);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    private RatingServiceSelectionResponseType contactService(String xmlInputString) throws Exception {
        OutputStream outputStream = null;
        RatingServiceSelectionResponseType rType = null;
        try {
            URL url = new URL(ENDPOINT_URL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setUseCaches(false);
            outputStream = connection.getOutputStream();
            outputStream.write(xmlInputString.getBytes());
            outputStream.flush();
            outputStream.close();
            rType = readURLConnection(connection);
            connection.disconnect();
        } catch (Exception e) {
            throw e;
        } finally {
            if (outputStream != null) {
                outputStream.close();
                outputStream = null;
            }
        }
        return rType;
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        File rootDir = new File("C:\\dev\\workspace_fgd\\gouvqc_crggid\\WebContent\\WEB-INF\\upload");
        File storeDir = new File(rootDir, "storeDir");
        File workDir = new File(rootDir, "workDir");
        LoggerFacade loggerFacade = new CommonsLoggingLogger(logger);
        final FileResourceManager frm = new SmbFileResourceManager(storeDir.getPath(), workDir.getPath(), true, loggerFacade);
        frm.start();
        final String resourceId = "811375c8-7cae-4429-9a0e-9222f47dab45";
        {
            if (!frm.resourceExists(resourceId)) {
                String txId = frm.generatedUniqueTxId();
                frm.startTransaction(txId);
                FileInputStream inputStream = new FileInputStream(resourceId);
                frm.createResource(txId, resourceId);
                OutputStream outputStream = frm.writeResource(txId, resourceId);
                IOUtils.copy(inputStream, outputStream);
                IOUtils.closeQuietly(inputStream);
                IOUtils.closeQuietly(outputStream);
                frm.prepareTransaction(txId);
                frm.commitTransaction(txId);
            }
        }
        for (int i = 0; i < 30; i++) {
            final int index = i;
            new Thread() {

                @Override
                public void run() {
                    try {
                        String txId = frm.generatedUniqueTxId();
                        frm.startTransaction(txId);
                        InputStream inputStream = frm.readResource(resourceId);
                        frm.prepareTransaction(txId);
                        frm.commitTransaction(txId);
                        synchronized (System.out) {
                            System.out.println(index + " ***********************" + txId + " (début)");
                        }
                        String contenu = TikaUtils.getParsedContent(inputStream, "file.pdf");
                        synchronized (System.out) {
                            System.out.println(index + " ***********************" + txId + " (fin)");
                        }
                    } catch (ResourceManagerSystemException e) {
                        throw new RuntimeException(e);
                    } catch (ResourceManagerException e) {
                        throw new RuntimeException(e);
                    } catch (TikaException e) {
                        throw new RuntimeException(e);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            }.start();
        }
        Thread.sleep(60000);
        frm.stop(FileResourceManager.SHUTDOWN_MODE_NORMAL);
    }
} </s>
<s>class temp {    public static String hash(String arg) throws NoSuchAlgorithmException {
        String input = arg;
        String output;
        MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(input.getBytes());
        output = Hex.encodeHexString(md.digest());
        return output;
    }
} </s>
<s>class temp {    @Override
    protected Metadata doGet(final String url) throws WebServiceException, MbXMLException {
        final HttpGet method = new HttpGet(url);
        this.log.debug(url);
        Metadata metadata = null;
        try {
            final HttpResponse response = this.httpClient.execute(method);
            final int statusCode = response.getStatusLine().getStatusCode();
            if (HttpStatus.SC_OK == statusCode) {
                final InputStream responseStream = response.getEntity().getContent();
                metadata = this.getParser().parse(responseStream);
            } else {
                final String responseString = response.getEntity() != null ? EntityUtils.toString(response.getEntity()) : "";
                switch(statusCode) {
                    case HttpStatus.SC_NOT_FOUND:
                        throw new ResourceNotFoundException(responseString);
                    case HttpStatus.SC_BAD_REQUEST:
                        throw new RequestException(responseString);
                    case HttpStatus.SC_FORBIDDEN:
                        throw new AuthorizationException(responseString);
                    case HttpStatus.SC_UNAUTHORIZED:
                        throw new AuthorizationException(responseString);
                    default:
                        String em = "web service returned unknown status '" + statusCode + "', response was: " + responseString;
                        this.log.error(em);
                        throw new WebServiceException(em);
                }
            }
        } catch (IOException e) {
            this.log.error("Fatal transport error: " + e.getMessage());
            throw new WebServiceException(e.getMessage(), e);
        }
        return metadata;
    }
} </s>
<s>class temp {    @Override
    protected void doPost(final String url, final InputStream data) throws WebServiceException {
        final HttpPost method = new HttpPost(url);
        method.setEntity(new InputStreamEntity(data, -1));
        try {
            final HttpResponse response = this.httpClient.execute(method);
            final String responseString = response.getEntity() != null ? EntityUtils.toString(response.getEntity()) : "";
            final int statusCode = response.getStatusLine().getStatusCode();
            switch(statusCode) {
                case HttpStatus.SC_OK:
                    return;
                case HttpStatus.SC_NOT_FOUND:
                    throw new ResourceNotFoundException(responseString);
                case HttpStatus.SC_BAD_REQUEST:
                    throw new RequestException(responseString);
                case HttpStatus.SC_FORBIDDEN:
                    throw new AuthorizationException(responseString);
                case HttpStatus.SC_UNAUTHORIZED:
                    throw new AuthorizationException(responseString);
                default:
                    String em = "web service returned unknown status '" + statusCode + "', response was: " + responseString;
                    this.log.error(em);
                    throw new WebServiceException(em);
            }
        } catch (IOException e) {
            this.log.error("Fatal transport error: " + e.getMessage());
            throw new WebServiceException(e.getMessage(), e);
        }
    }
} </s>
<s>class temp {    private void javaToHtml(File source, File destination) throws IOException {
        Reader reader = new FileReader(source);
        Writer writer = new FileWriter(destination);
        JavaUtils.writeJava(reader, writer);
        writer.flush();
        writer.close();
    }
} </s>
<s>class temp {    private void copy(File source, File dest) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            close(in);
            close(out);
        }
    }
} </s>
<s>class temp {    public String getMethod(String url) {
        logger.info("Facebook: @executing facebookGetMethod():" + url);
        String responseStr = null;
        try {
            HttpGet loginGet = new HttpGet(url);
            loginGet.addHeader("Accept-Encoding", "gzip");
            HttpResponse response = httpClient.execute(loginGet);
            HttpEntity entity = response.getEntity();
            logger.trace("Facebook: facebookGetMethod: " + response.getStatusLine());
            if (entity != null) {
                InputStream in = response.getEntity().getContent();
                if (response.getEntity().getContentEncoding().getValue().equals("gzip")) {
                    in = new GZIPInputStream(in);
                }
                StringBuffer sb = new StringBuffer();
                byte[] b = new byte[4096];
                int n;
                while ((n = in.read(b)) != -1) {
                    sb.append(new String(b, 0, n));
                }
                responseStr = sb.toString();
                in.close();
                entity.consumeContent();
            }
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != 200) {
                logger.warn("Facebook: Error Occured! Status Code = " + statusCode);
                responseStr = null;
            }
            logger.info("Facebook: Get Method done(" + statusCode + "), response string length: " + (responseStr == null ? 0 : responseStr.length()));
        } catch (IOException e) {
            logger.warn("Facebook: ", e);
        }
        return responseStr;
    }
} </s>
<s>class temp {    public byte[] getBytesMethod(String url) {
        logger.info("Facebook: @executing facebookGetMethod():" + url);
        byte[] responseBytes = null;
        try {
            HttpGet loginGet = new HttpGet(url);
            loginGet.addHeader("Accept-Encoding", "gzip");
            HttpResponse response = httpClient.execute(loginGet);
            HttpEntity entity = response.getEntity();
            logger.trace("Facebook: getBytesMethod: " + response.getStatusLine());
            if (entity != null) {
                InputStream in = response.getEntity().getContent();
                if (response.getEntity().getContentEncoding().getValue().equals("gzip")) {
                    in = new GZIPInputStream(in);
                }
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                byte[] b = new byte[4096];
                int n;
                while ((n = in.read(b)) != -1) {
                    out.write(b, 0, n);
                }
                responseBytes = out.toByteArray();
                in.close();
                entity.consumeContent();
            }
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != 200) {
                logger.warn("Facebook: Error Occured! Status Code = " + statusCode);
                responseBytes = null;
            }
            logger.info("Facebook: Get Bytes Method done(" + statusCode + "), response bytes length: " + (responseBytes == null ? 0 : responseBytes.length));
        } catch (IOException e) {
            logger.warn("Facebook: ", e);
        }
        return responseBytes;
    }
} </s>
<s>class temp {    public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = "";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = "0" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = "INIT " + "servername" + " " + hash + " " + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException("Slave did not send banner !!");
            }
            String sname = "";
            String spass = "";
            String sseed = "";
            try {
                String[] items = txt.split(" ");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                SocketSlaveListener.invalidSlave("INITFAIL BadKey", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance("MD5");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                SocketSlaveListener.invalidSlave("INITFAIL Unknown", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                SocketSlaveListener.invalidSlave("INITFAIL BadKey", _sock);
            }
            start();
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info("Check slaves.xml on the master that you are allowed to connect.");
            }
            logger.info("IOException: " + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn("Exception: " + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
} </s>
<s>class temp {    public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        if (!validado) {
            validado = validar();
        }
        if (!validado) {
            throw new Exception("No s'ha realitzat la validació de les dades del registre ");
        }
        registroActualizado = false;
        try {
            int fzaanoe;
            String campo;
            fechaTest = dateF.parse(dataentrada);
            Calendar cal = Calendar.getInstance();
            cal.setTime(fechaTest);
            DateFormat date1 = new SimpleDateFormat("yyyyMMdd");
            fzaanoe = Integer.parseInt(anoEntrada);
            int fzafent = Integer.parseInt(date1.format(fechaTest));
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            int fzanume = Integer.parseInt(numeroEntrada);
            int fzacagc = Integer.parseInt(oficina);
            int off_codi = 0;
            try {
                off_codi = Integer.parseInt(oficinafisica);
            } catch (Exception e) {
            }
            fechaTest = dateF.parse(data);
            cal.setTime(fechaTest);
            int fzafdoc = Integer.parseInt(date1.format(fechaTest));
            String fzacone, fzacone2;
            if (idioex.equals("1")) {
                fzacone = comentario;
                fzacone2 = "";
            } else {
                fzacone = "";
                fzacone2 = comentario;
            }
            String fzaproce;
            int fzactagg, fzacagge;
            if (fora.equals("")) {
                fzactagg = 90;
                fzacagge = Integer.parseInt(balears);
                fzaproce = "";
            } else {
                fzaproce = fora;
                fzactagg = 0;
                fzacagge = 0;
            }
            int ceros = 0;
            int fzacorg = Integer.parseInt(destinatari);
            int fzanent;
            String fzacent;
            if (altres.equals("")) {
                altres = "";
                fzanent = Integer.parseInt(entidad2);
                fzacent = entidadCastellano;
            } else {
                fzanent = 0;
                fzacent = "";
            }
            int fzacidi = Integer.parseInt(idioex);
            horaTest = horaF.parse(hora);
            cal.setTime(horaTest);
            DateFormat hhmm = new SimpleDateFormat("HHmm");
            int fzahora = Integer.parseInt(hhmm.format(horaTest));
            if (salida1.equals("")) {
                salida1 = "0";
            }
            if (salida2.equals("")) {
                salida2 = "0";
            }
            int fzanloc = Integer.parseInt(salida1);
            int fzaaloc = Integer.parseInt(salida2);
            if (disquet.equals("")) {
                disquet = "0";
            }
            int fzandis = Integer.parseInt(disquet);
            if (fzandis > 0) {
                ToolsBD.actualizaDisqueteEntrada(conn, fzandis, oficina, anoEntrada, errores);
            }
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat("HHmmss");
            DateFormat sss = new SimpleDateFormat("S");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String deleteOfifis = "DELETE FROM BZENTOFF WHERE FOEANOEN=? AND FOENUMEN=? AND FOECAGCO=?";
            ms = conn.prepareStatement(deleteOfifis);
            ms.setInt(1, fzaanoe);
            ms.setInt(2, fzanume);
            ms.setInt(3, fzacagc);
            ms.execute();
            ms.close();
            String insertOfifis = "INSERT INTO BZENTOFF (FOEANOEN, FOENUMEN, FOECAGCO, OFE_CODI)" + "VALUES (?,?,?,?)";
            ms = conn.prepareStatement(insertOfifis);
            ms.setInt(1, fzaanoe);
            ms.setInt(2, fzanume);
            ms.setInt(3, fzacagc);
            ms.setInt(4, off_codi);
            ms.execute();
            ms.close();
            ms = conn.prepareStatement("UPDATE BZENTRA SET FZAFDOCU=?, FZAREMIT=?, FZACONEN=?, FZACTIPE=?, " + "FZACEDIE=?, FZAENULA=?, FZAPROCE=?, FZAFENTR=?, FZACTAGG=?, FZACAGGE=?, FZACORGA=?, " + "FZACENTI=?, FZANENTI=?, FZAHORA=?, FZACIDIO=?, FZACONE2=?, FZANLOC=?, FZAALOC=?, FZANDIS=?, " + "FZACUSU=?, FZACIDI=? WHERE FZAANOEN=? AND FZANUMEN=? AND FZACAGCO=?");
            ms.setInt(1, fzafdoc);
            ms.setString(2, (altres.length() > 30) ? altres.substring(0, 30) : altres);
            ms.setString(3, (fzacone.length() > 160) ? fzacone.substring(0, 160) : fzacone);
            ms.setString(4, (tipo.length() > 2) ? tipo.substring(0, 1) : tipo);
            ms.setString(5, "N");
            ms.setString(6, (registroAnulado.length() > 1) ? registroAnulado.substring(0, 1) : registroAnulado);
            ms.setString(7, (fzaproce.length() > 25) ? fzaproce.substring(0, 25) : fzaproce);
            ms.setInt(8, fzafent);
            ms.setInt(9, fzactagg);
            ms.setInt(10, fzacagge);
            ms.setInt(11, fzacorg);
            ms.setString(12, (fzacent.length() > 7) ? fzacent.substring(0, 8) : fzacent);
            ms.setInt(13, fzanent);
            ms.setInt(14, fzahora);
            ms.setInt(15, fzacidi);
            ms.setString(16, (fzacone2.length() > 160) ? fzacone2.substring(0, 160) : fzacone2);
            ms.setInt(17, fzanloc);
            ms.setInt(18, fzaaloc);
            ms.setInt(19, fzandis);
            ms.setString(20, (usuario.toUpperCase().length() > 10) ? usuario.toUpperCase().substring(0, 10) : usuario.toUpperCase());
            ms.setString(21, idioma);
            ms.setInt(22, fzaanoe);
            ms.setInt(23, fzanume);
            ms.setInt(24, fzacagc);
            boolean modificado = false;
            if (!motivo.equals("")) {
                javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                Object ref = contexto.lookup("es.caib.regweb.RegistroModificadoEntradaHome");
                RegistroModificadoEntradaHome home = (RegistroModificadoEntradaHome) javax.rmi.PortableRemoteObject.narrow(ref, RegistroModificadoEntradaHome.class);
                RegistroModificadoEntrada registroModificado = home.create();
                registroModificado.setAnoEntrada(fzaanoe);
                registroModificado.setOficina(fzacagc);
                if (!entidad1Nuevo.trim().equals("")) {
                    if (entidad2Nuevo.equals("")) {
                        entidad2Nuevo = "0";
                    }
                }
                int fzanentNuevo;
                String fzacentNuevo;
                if (altresNuevo.trim().equals("")) {
                    altresNuevo = "";
                    fzanentNuevo = Integer.parseInt(entidad2Nuevo);
                    fzacentNuevo = convierteEntidadCastellano(entidad1Nuevo, conn);
                } else {
                    fzanentNuevo = 0;
                    fzacentNuevo = "";
                }
                if (!fzacentNuevo.equals(fzacent) || fzanentNuevo != fzanent) {
                    registroModificado.setEntidad2(fzanentNuevo);
                    registroModificado.setEntidad1(fzacentNuevo);
                } else {
                    registroModificado.setEntidad2(0);
                    registroModificado.setEntidad1("");
                }
                if (!comentarioNuevo.trim().equals(comentario.trim())) {
                    registroModificado.setExtracto(comentarioNuevo);
                } else {
                    registroModificado.setExtracto("");
                }
                registroModificado.setUsuarioModificacion(usuario.toUpperCase());
                registroModificado.setNumeroRegistro(fzanume);
                if (altresNuevo.equals(altres)) {
                    registroModificado.setRemitente("");
                } else {
                    registroModificado.setRemitente(altresNuevo);
                }
                registroModificado.setMotivo(motivo);
                modificado = registroModificado.generarModificacion(conn);
                registroModificado.remove();
            }
            if ((modificado && !motivo.equals("")) || motivo.equals("")) {
                int afectados = ms.executeUpdate();
                if (afectados > 0) {
                    registroActualizado = true;
                } else {
                    registroActualizado = false;
                }
                String remitente = "";
                if (!altres.trim().equals("")) {
                    remitente = altres;
                } else {
                    javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                    Object ref = contexto.lookup("es.caib.regweb.ValoresHome");
                    ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                    Valores valor = home.create();
                    remitente = valor.recuperaRemitenteCastellano(fzacent, fzanent + "");
                    valor.remove();
                }
                try {
                    Class t = Class.forName("es.caib.regweb.module.PluginHook");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class, String.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class };
                    Object[] params = { "M", new Integer(fzaanoe), new Integer(fzanume), new Integer(fzacagc), new Integer(fzafdoc), remitente, comentario, tipo, new Integer(fzafent), new Integer(fzacagge), fzaproce, new Integer(fzacorg), idioma, BOIBdata, new Integer(BOIBnumeroBOCAIB), new Integer(BOIBpagina), new Integer(BOIBlineas), BOIBtexto, BOIBobservaciones, correo };
                    java.lang.reflect.Method metodo = t.getMethod("entrada", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
                conn.commit();
                String Stringsss = sss.format(fechaSystem);
                switch(Stringsss.length()) {
                    case (1):
                        Stringsss = "00" + Stringsss;
                        break;
                    case (2):
                        Stringsss = "0" + Stringsss;
                        break;
                }
                int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
                logLopdBZENTRA("UPDATE", (usuario.toUpperCase().length() > 10) ? usuario.toUpperCase().substring(0, 10) : usuario.toUpperCase(), fzafsis, horamili, fzanume, fzaanoe, fzacagc);
            } else {
                registroActualizado = false;
                errores.put("", "Error inesperat, no s'ha modificat el registre");
                throw new RemoteException("Error inesperat, no s'ha modifcat el registre");
            }
            System.out.println("Municipi codi: " + municipi060);
            if (municipi060.equals("000")) eliminar060(); else if (!municipi060.equals("")) actualizar060();
        } catch (Exception ex) {
            System.out.println("Error inesperat, no s'ha desat el registre: " + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("", "Error inesperat, no s'ha desat el registre" + ": " + ex.getClass() + "->" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException("S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats", sqle);
            }
            throw new RemoteException("Error inesperat, no s'ha modifcat el registre", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
} </s>
<s>class temp {    private String fetchContent() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer buf = new StringBuffer();
        String str;
        while ((str = reader.readLine()) != null) {
            buf.append(str);
        }
        return buf.toString();
    }
} </s>
<s>class temp {    public String merge(int width, int height) throws Exception {
        htErrors.clear();
        sendGetImageRequests(width, height);
        Vector files = new Vector();
        ConcurrentHTTPTransactionHandler c = new ConcurrentHTTPTransactionHandler();
        c.setCache(cache);
        c.checkIfModified(false);
        for (int i = 0; i < vImageUrls.size(); i++) {
            if ((String) vImageUrls.get(i) != null) {
                c.register((String) vImageUrls.get(i));
            } else {
            }
        }
        c.doTransactions();
        vTransparency = new Vector();
        for (int i = 0; i < vImageUrls.size(); i++) {
            if (vImageUrls.get(i) != null) {
                String path = c.getResponseFilePath((String) vImageUrls.get(i));
                if (path != null) {
                    String contentType = c.getHeaderValue((String) vImageUrls.get(i), "content-type");
                    if (contentType.startsWith("image")) {
                        files.add(path);
                        vTransparency.add(htTransparency.get(vRank.get(i)));
                    }
                }
            }
        }
        if (files.size() > 1) {
            File output = TempFiles.getFile();
            String path = output.getPath();
            ImageMerger.mergeAndSave(files, vTransparency, path, ImageMerger.GIF);
            imageName = output.getName();
            imagePath = output.getPath();
            return (imageName);
        } else if (files.size() == 1) {
            File f = new File((String) files.get(0));
            File out = TempFiles.getFile();
            BufferedInputStream is = new BufferedInputStream(new FileInputStream(f));
            BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(out));
            byte buf[] = new byte[1024];
            for (int nRead; (nRead = is.read(buf, 0, 1024)) > 0; os.write(buf, 0, nRead)) ;
            os.flush();
            os.close();
            is.close();
            imageName = out.getName();
            return imageName;
        } else return "";
    }
} </s>
<s>class temp {    public void initResources() throws XAwareException {
        final String methodName = "initResources";
        if (!initialized) {
            String host = channelObject.getProperty(XAwareConstants.BIZDRIVER_HOST);
            if (host == null || host.trim().length() == 0) {
                throw new XAwareException("xa:host must be specified.");
            }
            String portString = channelObject.getProperty(XAwareConstants.BIZDRIVER_PORT);
            if (portString == null || portString.trim().length() == 0) {
                throw new XAwareException("xa:port must be specified.");
            }
            int port = 0;
            try {
                port = Integer.parseInt(portString);
            } catch (Exception exception) {
                throw new XAwareException("xa:port must be numeric.");
            }
            String remoteVerification = channelObject.getProperty(XAwareConstants.XAWARE_FTP_REMOTE_VERIFICATION);
            String userName = channelObject.getProperty(XAwareConstants.BIZDRIVER_USER);
            String password = channelObject.getProperty(XAwareConstants.BIZDRIVER_PWD);
            String proxyUser = channelObject.getProperty(XAwareConstants.BIZCOMPONENT_ATTR_PROXYUSER);
            String proxyPassword = channelObject.getProperty(XAwareConstants.BIZCOMPONENT_ATTR_PROXYPASSWORD);
            ftpClient = new FTPClient();
            logger.finest("Connecting to host:" + host + " Port:" + port, className, methodName);
            try {
                ftpClient.connect(host, port);
                if (remoteVerification != null && remoteVerification.trim().equals(XAwareConstants.XAWARE_YES)) {
                    ftpClient.setRemoteVerificationEnabled(true);
                } else {
                    ftpClient.setRemoteVerificationEnabled(false);
                }
                final int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    String errorMessage = "FTP server refused connection. Error Code:" + reply;
                    logger.severe(errorMessage, className, methodName);
                    throw new XAwareException(errorMessage);
                }
                logger.finest("Logging in User:" + userName + " PWD:" + password, className, methodName);
                if (!ftpClient.login(userName, password)) {
                    ftpClient.logout();
                    String errorMessage = "Error logging into server. Please check credentials.";
                    logger.severe(errorMessage, className, methodName);
                    throw new XAwareException(errorMessage);
                }
                if (proxyUser != null && proxyUser.trim().length() > 0) {
                    logger.finest("Logging in again proxy UID:" + proxyUser + " proxy password:" + proxyPassword, className, methodName);
                    if (!ftpClient.login(proxyUser, proxyPassword)) {
                        ftpClient.logout();
                        String errorMessage = "Error logging using proxy user/pwd. Please check proxy credentials.";
                        logger.severe(errorMessage, className, methodName);
                        throw new XAwareException(errorMessage);
                    }
                }
            } catch (SocketException e) {
                String errorMessage = "SocketException: " + ExceptionMessageHelper.getExceptionMessage(e);
                logger.severe(errorMessage, className, methodName);
                throw new XAwareException(errorMessage, e);
            } catch (IOException e) {
                String errorMessage = "IOException: " + ExceptionMessageHelper.getExceptionMessage(e);
                logger.severe(errorMessage, className, methodName);
                throw new XAwareException(errorMessage, e);
            }
            logger.finest("Connected to host:" + host + " Port:" + port, className, methodName);
            initialized = true;
        }
    }
} </s>
<s>class temp {    public static Document getDocument(URL url, EntityResolver resolver, boolean validating) throws IllegalArgumentException, IOException {
        if (url == null) throw new IllegalArgumentException("URL is null");
        InputStream is = null;
        try {
            is = url.openStream();
            InputSource source = new InputSource(is);
            source.setSystemId(url.toString());
            return getDocument(source, resolver, validating);
        } finally {
            try {
                if (is != null) is.close();
            } catch (IOException ioe) {
            }
        }
    }
} </s>
<s>class temp {    private boolean isReservaOK(String urlAddress, String operationId, String idioma, String codigo_pedido, String merchantId) throws ServletException {
        StringBuffer buf = new StringBuffer();
        try {
            URL url = new URL(urlAddress + "?Num_operacion=" + operationId + "&Idioma=" + idioma + "&Codigo_pedido=" + codigo_pedido + "&MerchantID=" + merchantId);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                buf.append(str);
            }
            in.close();
        } catch (IOException e) {
            throw new ServletException(e);
        }
        return buf.indexOf("$*$OKY$*$") != -1;
    }
} </s>
<s>class temp {    private boolean copy_to_file_io(File src, File dst) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(src);
            is = new BufferedInputStream(is);
            os = new FileOutputStream(dst);
            os = new BufferedOutputStream(os);
            byte buffer[] = new byte[1024 * 64];
            int read;
            while ((read = is.read(buffer)) > 0) {
                os.write(buffer, 0, read);
            }
            return true;
        } finally {
            try {
                if (is != null) is.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
            try {
                if (os != null) os.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
        }
    }
} </s>
<s>class temp {    private final boolean copy_to_file_nio(File src, File dst) throws IOException {
        FileChannel srcChannel = null, dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            {
                int safe_max = (64 * 1024 * 1024) / 4;
                long size = srcChannel.size();
                long position = 0;
                while (position < size) {
                    position += srcChannel.transferTo(position, safe_max, dstChannel);
                }
            }
            return true;
        } finally {
            try {
                if (srcChannel != null) srcChannel.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
            try {
                if (dstChannel != null) dstChannel.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
        }
    }
} </s>
<s>class temp {    public static HttpURLConnection createSoapHttpURLConnection(String url) throws MalformedURLException, IOException {
        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("POST");
        connection.addRequestProperty("Connection", "close");
        connection.addRequestProperty("Content-Type", "application/soap+xml; charset=utf-8");
        connection.setDoOutput(true);
        connection.setDoInput(true);
        return connection;
    }
} </s>
<s>class temp {    private static String deviceIdFromCombined_Device_ID(Context context) {
        StringBuilder builder = new StringBuilder();
        builder.append(deviceIdFromIMEI(context));
        builder.append(deviceIdFromPseudo_Unique_Id());
        builder.append(deviceIdFromAndroidId(context));
        builder.append(deviceIdFromWLAN_MAC_Address(context));
        builder.append(deviceIdFromBT_MAC_Address(context));
        String m_szLongID = builder.toString();
        MessageDigest m = null;
        try {
            m = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        m.update(m_szLongID.getBytes(), 0, m_szLongID.length());
        byte p_md5Data[] = m.digest();
        String m_szUniqueID = new String();
        for (int i = 0; i < p_md5Data.length; i++) {
            int b = (0xFF & p_md5Data[i]);
            if (b <= 0xF) m_szUniqueID += "0";
            m_szUniqueID += Integer.toHexString(b);
        }
        return m_szUniqueID;
    }
} </s>
<s>class temp {    private void FindAvail() throws ParserConfigurationException, SQLException {
        Savepoint sp1;
        String availsql = "select xmlquery('$c/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]' ";
        availsql += "passing hp_administrator.availability.AVAIL as \"c\") ";
        availsql += " from hp_administrator.availability ";
        availsql += " where date = '" + booking_details.getDate() + "' and train_no like '" + booking_details.getTrain_no() + "'";
        System.out.println(availsql);
        String availxml = "";
        String seatxml = "";
        String navailstr = "";
        String nspavailstr = "";
        String currentcoachstr = "";
        String srctillstr = "", srcavailstr = "", srcmaxstr = "";
        Integer srctill, srcavail, srcmax;
        Integer navailcoach;
        Integer nspavailcoach, seatstart, seatcnt, alloccnt;
        String routesrcstr = "", routedeststr = "";
        PreparedStatement pstseat;
        Statement stavail, stavailupd, stseatupd, stseat;
        ResultSet rsavail, rsseat;
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document docavail, docseattmp, docseatfin, docseat;
        Element rootavail, rootseat;
        Node n;
        try {
            stavail = conn.createStatement();
            sp1 = conn.setSavepoint();
            rsavail = stavail.executeQuery(availsql);
            if (rsavail.next()) availxml = rsavail.getString(1);
            System.out.println(availxml);
            StringBuffer StringBuffer1 = new StringBuffer(availxml);
            ByteArrayInputStream Bis1 = new ByteArrayInputStream(StringBuffer1.toString().getBytes("UTF-16"));
            docavail = db.parse(Bis1);
            StringWriter sw;
            OutputFormat formatter;
            formatter = new OutputFormat();
            formatter.setPreserveSpace(true);
            formatter.setEncoding("UTF-8");
            formatter.setOmitXMLDeclaration(true);
            XMLSerializer serializer;
            rootavail = docavail.getDocumentElement();
            NodeList coachlist = rootavail.getElementsByTagName("coach");
            Element currentcoach, minseat;
            Element routesrc, routedest, nextstn, dest, user, agent;
            NodeList nl, nl1;
            number_of_tickets_rem = booking_details.getNoOfPersons();
            int tickpos = 0;
            firsttime = true;
            boolean enterloop;
            for (int i = 0; i < coachlist.getLength(); i++) {
                currentcoach = (Element) coachlist.item(i);
                currentcoachstr = currentcoach.getAttribute("number");
                String coachmaxstr = currentcoach.getAttribute("coachmax");
                Integer coachmax = Integer.parseInt(coachmaxstr.trim());
                routesrc = (Element) currentcoach.getFirstChild();
                routedest = (Element) currentcoach.getLastChild();
                routedest = (Element) routedest.getPreviousSibling().getPreviousSibling().getPreviousSibling();
                routesrcstr = routesrc.getNodeName();
                routedeststr = routedest.getNodeName();
                String seatsql = "select xmlquery('$c/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]' ";
                seatsql += " passing hp_administrator.book_tickets.SEAT as \"c\") from hp_administrator.book_tickets ";
                seatsql += " where  date = '" + booking_details.getDate() + "' and train_no like '" + booking_details.getTrain_no() + "' ";
                System.out.println("route  :" + sourcenws);
                System.out.println("route  :" + destnnws);
                System.out.println("route src :" + routesrcstr);
                System.out.println("route dest :" + routedeststr);
                System.out.println(seatsql);
                stseat = conn.createStatement();
                rsseat = stseat.executeQuery(seatsql);
                if (rsseat.next()) seatxml = rsseat.getString(1);
                StringBuffer StringBuffer2 = new StringBuffer(seatxml);
                ByteArrayInputStream Bis2 = new ByteArrayInputStream(StringBuffer2.toString().getBytes("UTF-16"));
                docseat = db.parse(Bis2);
                rootseat = docseat.getDocumentElement();
                enterloop = false;
                if (routesrcstr.equals(sourcenws) && routedeststr.equals(destnnws)) {
                    System.out.println("case 1");
                    navailstr = routesrc.getTextContent();
                    navailcoach = Integer.parseInt(navailstr.trim());
                    if (useragent) nspavailstr = routesrc.getAttribute("agent"); else nspavailstr = routesrc.getAttribute("user");
                    nspavailcoach = Integer.parseInt(nspavailstr.trim());
                    srctillstr = routesrc.getAttribute(sourcenws + "TILL");
                    srctill = Integer.parseInt(srctillstr.trim());
                    srcmaxstr = routesrc.getAttribute(sourcenws);
                    srcmax = Integer.parseInt(srcmaxstr.trim());
                    srcavailstr = routesrc.getTextContent();
                    srcavail = Integer.parseInt(srcavailstr.trim());
                    seatstart = coachmax - srctill + 1;
                    seatcnt = srcmax;
                    alloccnt = srcmax - srcavail;
                    seatstart += alloccnt;
                    seatcnt -= alloccnt;
                    Element seat, stn;
                    NodeList nl3 = rootseat.getElementsByTagName("seat");
                    seat = (Element) nl3.item(0);
                    if (booking_details.getNoOfPersons() <= navailcoach && booking_details.getNoOfPersons() <= nspavailcoach) {
                        coach.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        seatno.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent("0");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        number_of_tickets_rem = 0;
                        navailcoach -= booking_details.getNoOfPersons();
                        nspavailcoach -= booking_details.getNoOfPersons();
                        if (!firsttime) conn.rollback(sp1);
                        String availupdstr = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupdstr += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + navailcoach + "\"";
                        availupdstr += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        int updvar = stavailupd.executeUpdate(availupdstr);
                        if (updvar > 0) System.out.println("upda avail success");
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        System.out.println(seatupdstr);
                        stseatupd = conn.createStatement();
                        updvar = stseatupd.executeUpdate(seatupdstr);
                        if (updvar > 0) System.out.println("upda seat success");
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupdstr = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupdstr += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + nspavailcoach + "\"";
                        availupdstr += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupdstr);
                        stavailupd = conn.createStatement();
                        updvar = stavailupd.executeUpdate(availupdstr);
                        if (updvar > 0) System.out.println("upda" + sp + " success");
                        break;
                    }
                    while (navailcoach > 0 && nspavailcoach > 0 && number_of_tickets_rem > 0) {
                        if (firsttime) {
                            sp1 = conn.setSavepoint();
                            firsttime = false;
                        }
                        enterloop = true;
                        coach.add(currentcoachstr);
                        booking_details.coachlist.add(currentcoachstr);
                        tickpos++;
                        number_of_tickets_rem--;
                        navailcoach--;
                        nspavailcoach--;
                        while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                            seat = (Element) seat.getNextSibling();
                        }
                        seatstart++;
                        System.out.println(seat.getFirstChild().getTextContent().trim());
                        seatno.add(seat.getFirstChild().getTextContent().trim());
                        booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                        nl3 = seat.getElementsByTagName(sourcenws);
                        stn = (Element) nl3.item(0);
                        while (!stn.getNodeName().equals(destnnws)) {
                            stn.setTextContent("0");
                            stn = (Element) stn.getNextSibling();
                        }
                        String availupdstr = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupdstr += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + navailcoach + "\"";
                        availupdstr += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupdstr = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupdstr += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + sp + "\"]/" + sourcenws + "/@" + sp + " with \"" + nspavailcoach + "\"";
                        availupdstr += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                    }
                    if (enterloop) {
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                    }
                } else if (routesrcstr.equals(sourcenws) && !routedeststr.equals(destnnws)) {
                    System.out.println("case 2");
                    String excesssrcstr = routesrc.getTextContent();
                    System.out.println(excesssrcstr);
                    Integer excesssrc = Integer.parseInt(excesssrcstr.trim());
                    NodeList nl2 = currentcoach.getElementsByTagName(destnnws);
                    Element e2 = (Element) nl2.item(0);
                    String desttillstr = e2.getAttribute(destnnws + "TILL");
                    System.out.println(desttillstr);
                    Integer desttillcnt = Integer.parseInt(desttillstr.trim());
                    srcmaxstr = routesrc.getAttribute(sourcenws);
                    System.out.println(srcmaxstr);
                    srcmax = Integer.parseInt(srcmaxstr.trim());
                    String spexcesssrcstr = "", spdesttillstr = "";
                    if (useragent) {
                        spexcesssrcstr = routesrc.getAttribute("agent");
                        spdesttillstr = e2.getAttribute("agenttill");
                    } else {
                        spexcesssrcstr = routesrc.getAttribute("user");
                        spdesttillstr = e2.getAttribute("usertill");
                    }
                    System.out.println(spdesttillstr);
                    System.out.println(spexcesssrcstr);
                    Integer spdesttillcnt = Integer.parseInt(spdesttillstr.trim());
                    Integer spexcesssrc = Integer.parseInt(spexcesssrcstr.trim());
                    Element seat, stn;
                    if (booking_details.getNoOfPersons() <= desttillcnt && booking_details.getNoOfPersons() <= spdesttillcnt) {
                        seatstart = coachmax - desttillcnt + 1;
                        seatcnt = desttillcnt;
                        NodeList nl3 = rootseat.getElementsByTagName("seat");
                        seat = (Element) nl3.item(0);
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent("0");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        number_of_tickets_rem = 0;
                        desttillcnt -= booking_details.getNoOfPersons();
                        spdesttillcnt -= booking_details.getNoOfPersons();
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                        availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + destnnws + "TILL" + " with \"" + desttillcnt + "\" ";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        int upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println("update avail success");
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        System.out.println(seatupdstr);
                        stseatupd = conn.createStatement();
                        upst = stseatupd.executeUpdate(seatupdstr);
                        if (upst > 0) System.out.println("update seat success");
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                        availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + sp + "till" + " with \"" + spdesttillcnt + "\" ";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println("update " + sp + " success");
                        break;
                    } else if (booking_details.getNoOfPersons() > spdesttillcnt && spdesttillcnt > 0 && booking_details.getNoOfPersons() <= spdesttillcnt + spexcesssrc) {
                        int diff = 0;
                        if (booking_details.getNoOfPersons() > spdesttillcnt) diff = booking_details.getNoOfPersons() - spdesttillcnt;
                        tickpos = 0;
                        boolean initflg = true;
                        seatstart = coachmax - desttillcnt + 1;
                        seatcnt = desttillcnt;
                        NodeList nl3 = rootseat.getElementsByTagName("seat");
                        seat = (Element) nl3.item(0);
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent("0");
                                stn = (Element) stn.getNextSibling();
                            }
                            if (spdesttillcnt != 0) {
                                desttillcnt--;
                                spdesttillcnt--;
                            }
                            System.out.println("desttillcnt=" + desttillcnt + " spdes = " + desttillcnt + "initflg =" + initflg);
                            if (spdesttillcnt == 0 && initflg == true) {
                                alloccnt = srcmax - excesssrc;
                                seatstart = 1 + alloccnt;
                                initflg = false;
                                seat = (Element) seat.getParentNode().getFirstChild();
                            }
                        }
                        excesssrc -= diff;
                        spexcesssrc -= diff;
                        number_of_tickets_rem = 0;
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                        availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + destnnws + "TILL" + " with \"" + desttillcnt + "\" ";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        int upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println("update avail success");
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + excesssrc + "\"";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println("update avail success");
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        System.out.println(seatupdstr);
                        stseatupd = conn.createStatement();
                        upst = stseatupd.executeUpdate(seatupdstr);
                        if (upst > 0) System.out.println("update seat success");
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                        availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + sp + "till" + " with \"" + spdesttillcnt + "\" ";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println("update " + sp + " success");
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + spexcesssrc + "\"";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println("update " + sp + " success");
                        break;
                    } else if (booking_details.getNoOfPersons() > spdesttillcnt && spdesttillcnt == 0 && booking_details.getNoOfPersons() <= spexcesssrc) {
                        alloccnt = srcmax - excesssrc;
                        seatstart = 1 + alloccnt;
                        tickpos = 0;
                        boolean initflg = true;
                        NodeList nl3 = rootseat.getElementsByTagName("seat");
                        seat = (Element) nl3.item(0);
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent("0");
                                stn = (Element) stn.getNextSibling();
                            }
                            System.out.println("desttillcnt=" + desttillcnt + " spdes = " + desttillcnt + "initflg =" + initflg);
                        }
                        excesssrc -= booking_details.getNoOfPersons();
                        spexcesssrc -= booking_details.getNoOfPersons();
                        ;
                        number_of_tickets_rem = 0;
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + excesssrc + "\"";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        int upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println("update avail success");
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        System.out.println(seatupdstr);
                        stseatupd = conn.createStatement();
                        upst = stseatupd.executeUpdate(seatupdstr);
                        if (upst > 0) System.out.println("update seat success");
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + spexcesssrc + "\"";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println("update " + sp + " success");
                        break;
                    }
                    NodeList nl3 = rootseat.getElementsByTagName("seat");
                    seat = (Element) nl3.item(0);
                    seatstart = 1;
                    String sp = "";
                    if (useragent) sp = "agent"; else sp = "user";
                    while (spexcesssrc + spdesttillcnt > 0 && number_of_tickets_rem > 0) {
                        if (firsttime) {
                            sp1 = conn.setSavepoint();
                            firsttime = false;
                        }
                        enterloop = true;
                        if (spdesttillcnt > 0) {
                            seatstart = coachmax - desttillcnt + 1;
                            desttillcnt--;
                            spdesttillcnt--;
                            String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                            availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + destnnws + "TILL" + " with \"" + desttillcnt + "\" ";
                            availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                            availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                            availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + sp + "till" + " with \"" + spdesttillcnt + "\" ";
                            availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                        } else if (spdesttillcnt == 0) {
                            alloccnt = srcmax - excesssrc;
                            seatstart = 1 + alloccnt;
                            excesssrc--;
                            spexcesssrc--;
                            String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                            availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + excesssrc + "\"";
                            availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                            availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                            availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + spexcesssrc + "\"";
                            availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                        }
                        while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                            seat = (Element) seat.getNextSibling();
                        }
                        nl3 = seat.getElementsByTagName(sourcenws);
                        stn = (Element) nl3.item(0);
                        while (!stn.getNodeName().equals(destnnws)) {
                            stn.setTextContent("0");
                            stn = (Element) stn.getNextSibling();
                        }
                        coach.add(currentcoachstr);
                        booking_details.coachlist.add(currentcoachstr);
                        tickpos++;
                        number_of_tickets_rem--;
                    }
                    if (enterloop) {
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                    }
                } else if (!routesrcstr.equals(sourcenws) && routedeststr.equals(destnnws)) {
                    System.out.println("case 3");
                    NodeList nl2 = currentcoach.getElementsByTagName(sourcenws);
                    Element e2 = (Element) nl2.item(0);
                    navailstr = e2.getTextContent();
                    System.out.println(navailstr);
                    navailcoach = Integer.parseInt(navailstr.trim());
                    if (useragent) nspavailstr = e2.getAttribute("agent"); else nspavailstr = e2.getAttribute("user");
                    System.out.println(nspavailstr);
                    nspavailcoach = Integer.parseInt(nspavailstr.trim());
                    srctillstr = e2.getAttribute(sourcenws + "TILL");
                    System.out.println(srctillstr);
                    srctill = Integer.parseInt(srctillstr.trim());
                    srcmaxstr = e2.getAttribute(sourcenws);
                    System.out.println(srcmaxstr);
                    srcmax = Integer.parseInt(srcmaxstr.trim());
                    seatstart = coachmax - srctill + 1;
                    seatcnt = srcmax;
                    alloccnt = srcmax - navailcoach;
                    seatstart += alloccnt;
                    seatcnt -= alloccnt;
                    Element seat, stn;
                    NodeList nl3 = rootseat.getElementsByTagName("seat");
                    seat = (Element) nl3.item(0);
                    if (booking_details.getNoOfPersons() <= navailcoach && booking_details.getNoOfPersons() <= nspavailcoach) {
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent("0");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        number_of_tickets_rem = 0;
                        navailcoach -= booking_details.getNoOfPersons();
                        nspavailcoach -= booking_details.getNoOfPersons();
                        String availupdstr = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupdstr += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + navailcoach + "\"";
                        availupdstr += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupdstr = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupdstr += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + nspavailcoach + "\"";
                        availupdstr += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                        break;
                    }
                    while (navailcoach > 0 && nspavailcoach > 0 && number_of_tickets_rem > 0) {
                        if (firsttime) {
                            sp1 = conn.setSavepoint();
                            firsttime = false;
                        }
                        enterloop = true;
                        coach.add(currentcoachstr);
                        booking_details.coachlist.add(currentcoachstr);
                        tickpos++;
                        number_of_tickets_rem--;
                        navailcoach--;
                        nspavailcoach--;
                        while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                            seat = (Element) seat.getNextSibling();
                        }
                        seatstart++;
                        System.out.println(seat.getFirstChild().getTextContent().trim());
                        seatno.add(seat.getFirstChild().getTextContent().trim());
                        booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                        nl3 = seat.getElementsByTagName(sourcenws);
                        stn = (Element) nl3.item(0);
                        while (!stn.getNodeName().equals(destnnws)) {
                            stn.setTextContent("0");
                            stn = (Element) stn.getNextSibling();
                        }
                        String availupdstr = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupdstr += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + navailcoach + "\"";
                        availupdstr += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupdstr);
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupdstr = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupdstr += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + nspavailcoach + "\"";
                        availupdstr += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        System.out.println(availupdstr);
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                    }
                    if (enterloop) {
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        System.out.println("!@#------->" + seatupdstr);
                        stseatupd = conn.createStatement();
                    }
                } else if (!routesrcstr.equals(sourcenws) && !routedeststr.equals(destnnws)) {
                    System.out.println("case 4");
                    srcmaxstr = routesrc.getAttribute(sourcenws);
                    System.out.println(srcmaxstr);
                    srcmax = Integer.parseInt(srcmaxstr.trim());
                    Element seat, stn;
                    NodeList nl2 = currentcoach.getElementsByTagName(sourcenws);
                    Element e2 = (Element) nl2.item(0);
                    navailstr = e2.getTextContent();
                    Integer excesssrc = Integer.parseInt(navailstr.trim());
                    nl2 = currentcoach.getElementsByTagName(destnnws);
                    e2 = (Element) nl2.item(0);
                    navailstr = e2.getAttribute(destnnws + "TILL");
                    Integer desttillcnt = Integer.parseInt(navailstr.trim());
                    String spexcesssrcstr = "", spdesttillstr = "";
                    if (useragent) {
                        spexcesssrcstr = routesrc.getAttribute("agent");
                        spdesttillstr = e2.getAttribute("agenttill");
                    } else {
                        spexcesssrcstr = routesrc.getAttribute("user");
                        spdesttillstr = e2.getAttribute("usertill");
                    }
                    Integer spdesttillcnt = Integer.parseInt(spdesttillstr.trim());
                    Integer spexcesssrc = Integer.parseInt(spexcesssrcstr.trim());
                    NodeList nl3 = rootseat.getElementsByTagName("seat");
                    seat = (Element) nl3.item(0);
                    boolean initflg = true;
                    if (booking_details.getNoOfPersons() <= spdesttillcnt) {
                        seatstart = coachmax - desttillcnt + 1;
                        seatcnt = desttillcnt;
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent("0");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        number_of_tickets_rem = 0;
                        desttillcnt -= booking_details.getNoOfPersons();
                        spdesttillcnt -= booking_details.getNoOfPersons();
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                        availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + destnnws + "TILL" + " with \"" + desttillcnt + "\" ";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                        availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + sp + "till" + " with \"" + spdesttillcnt + "\" ";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        break;
                    } else if (booking_details.getNoOfPersons() > spdesttillcnt && spdesttillcnt > 0 && booking_details.getNoOfPersons() <= spdesttillcnt + spexcesssrc) {
                        int diff = 0;
                        if (booking_details.getNoOfPersons() > spdesttillcnt) diff = booking_details.getNoOfPersons() - spdesttillcnt;
                        seatstart = coachmax - desttillcnt + 1;
                        seatcnt = desttillcnt;
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent("0");
                                stn = (Element) stn.getNextSibling();
                            }
                            if (spdesttillcnt != 0) {
                                desttillcnt--;
                                spdesttillcnt--;
                            }
                            if (spdesttillcnt == 0 && initflg == true) {
                                alloccnt = srcmax - excesssrc;
                                seatstart = 1 + alloccnt;
                                initflg = false;
                            }
                        }
                        excesssrc -= diff;
                        spexcesssrc -= diff;
                        number_of_tickets_rem = 0;
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                        availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + destnnws + "TILL" + " with \"" + desttillcnt + "\" ";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + excesssrc + "\"";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                        availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + sp + "till" + " with \"" + spdesttillcnt + "\" ";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + spexcesssrc + "\"";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        break;
                    } else if (spdesttillcnt == 0 && booking_details.getNoOfPersons() <= spexcesssrc) {
                        alloccnt = srcmax - excesssrc;
                        seatstart = 1 + alloccnt;
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent("0");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        excesssrc -= booking_details.getNoOfPersons();
                        spexcesssrc -= booking_details.getNoOfPersons();
                        number_of_tickets_rem = 0;
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + excesssrc + "\"";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                        String sp = "";
                        if (useragent) sp = "agent"; else sp = "user";
                        availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                        availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + spexcesssrc + "\"";
                        availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        break;
                    }
                    seatstart = 1;
                    String sp = "";
                    if (useragent) sp = "agent"; else sp = "user";
                    while (spexcesssrc + spdesttillcnt > 0 && number_of_tickets_rem > 0) {
                        if (firsttime) {
                            sp1 = conn.setSavepoint();
                            firsttime = false;
                        }
                        enterloop = true;
                        if (spdesttillcnt > 0) {
                            seatstart = coachmax - desttillcnt + 1;
                            desttillcnt--;
                            spdesttillcnt--;
                            String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                            availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + destnnws + "TILL" + " with \"" + desttillcnt + "\" ";
                            availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                            availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of ";
                            availupd += "$new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + destnnws + "/@" + sp + "till" + " with \"" + spdesttillcnt + "\" ";
                            availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                        } else if (spdesttillcnt == 0) {
                            alloccnt = srcmax - excesssrc;
                            seatstart = 1 + alloccnt;
                            excesssrc--;
                            spexcesssrc--;
                            String availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                            availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + "/@" + sp + " with \"" + excesssrc + "\"";
                            availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                            availupd = "update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do ";
                            availupd += " replace value of $new/coach_status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"]/" + sourcenws + " with \"" + spexcesssrc + "\"";
                            availupd += " return  $new')  where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                        }
                        while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                            seat = (Element) seat.getNextSibling();
                        }
                        nl3 = seat.getElementsByTagName(sourcenws);
                        stn = (Element) nl3.item(0);
                        while (!stn.getNodeName().equals(destnnws)) {
                            stn.setTextContent("0");
                            stn = (Element) stn.getNextSibling();
                        }
                        coach.add(currentcoachstr);
                        booking_details.coachlist.add(currentcoachstr);
                        tickpos++;
                        number_of_tickets_rem--;
                    }
                    if (enterloop) {
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = "update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT ";
                        seatupdstr += " modify do replace $new/status/class[@type=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoachstr + "\"] with " + sw.toString();
                        seatupdstr += " return $new') where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "'  ";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                    }
                }
            }
            availfin = true;
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            conn.rollback();
            e.printStackTrace();
        } catch (SAXException e) {
            conn.rollback();
            e.printStackTrace();
        } catch (IOException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String sp = "";
        if (useragent) sp = "agent"; else sp = "user";
        String userbooksql = "";
        String agentbooksql = "";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentcoach;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = "update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert ";
                agentbooksql += " <detail booking_id=\"" + booking_details.getTicketno() + "\" status=\"open\" train_no=\"" + booking_details.getTrain_no() + "\" source=\"" + booking_details.getSource() + "\" dest=\"" + booking_details.getDestination() + "\" dep_date=\"" + booking_details.getDate() + "\" > ";
            } else if (!useragent) {
                userbooksql = "update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert ";
                userbooksql += " <detail booking_id=\"" + booking_details.getTicketno() + "\" status=\"open\" train_no=\"" + booking_details.getTrain_no() + "\" source=\"" + booking_details.getSource() + "\" dest=\"" + booking_details.getDestination() + "\" dep_date=\"" + booking_details.getDate() + "\" > ";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentcoach = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentcoach.equals("WL")) {
                    String chartavailupdsql = "update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert ";
                    chartavailupdsql += "<seat number=\"" + currentseat + "\"><details user_id=\"" + booking_details.getUserId() + "\" usertype=\"" + sp + "\" ticket_no=\"" + booking_details.getTicketno() + "\" name=\"" + booking_details.getNameAt(tickpos) + "\" age=\"" + booking_details.getAgeAt(tickpos) + "\" sex=\"" + booking_details.getSexAt(tickpos) + "\" type=\"primary\"  /></seat>";
                    chartavailupdsql += " into $new/status/class[@name=\"" + booking_details.getTclass() + "\"]/coach[@number=\"" + currentcoach + "\"] ";
                    chartavailupdsql += " return  $new' ) where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                    System.out.println(chartavailupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdsql);
                    if (updstat > 0) System.out.println("chart_wl  availability  updated");
                } else if (currentcoach.equals("WL")) {
                    String chartwlupdsql = "update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert ";
                    chartwlupdsql += "<details user_id=\"" + booking_details.getUserId() + "\" usertype=\"" + sp + "\" ticket_no=\"" + booking_details.getTicketno() + "\" name=\"" + booking_details.getNameAt(tickpos) + "\" age=\"" + booking_details.getAgeAt(tickpos) + "\" sex=\"" + booking_details.getSexAt(tickpos) + "\" type=\"primary\" /></seat>";
                    chartwlupdsql += " into $new/status/class[@name=\"" + booking_details.getTclass() + "\"] ";
                    chartwlupdsql += " return  $new' ) where train_no like '" + booking_details.getTrain_no() + "' and date = '" + booking_details.getDate() + "' ";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println("chart_wl  waitlisting  updated");
                }
                if (useragent) agentbooksql += "<person><coach>" + currentcoach + "</coach><seat>" + currentseat + "</seat></person>"; else userbooksql += "<person><coach>" + currentcoach + "</coach><seat>" + currentseat + "</seat></person>";
            }
            if (useragent) {
                agentbooksql += "</detail>   as first into $new/book return  $new' ) where agent_id like '" + booking_details.getUserId() + "'";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println("agent bookings updated");
            } else {
                userbooksql += "</detail>   as first into $new/book return  $new' ) where user_id like '" + booking_details.getUserId() + "'";
                System.out.println(userbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(userbooksql);
                if (updstat > 0) System.out.println("user bookings  updated");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private Drawable fetchImage(String iconUrl, Context ctx) {
        URL url;
        HttpClient httpClient = new DefaultHttpClient();
        try {
            if (PreferenceManager.getDefaultSharedPreferences(ctx).getBoolean("use.urlimg.com", true)) {
                iconUrl = iconUrl.substring(iconUrl.indexOf("//") + 2);
                iconUrl = "http://urlimg.com/width/100/" + iconUrl;
            }
            Log.d(ImageCache.class.getName(), "Loading image from: " + iconUrl);
            HttpGet httpGet = new HttpGet(iconUrl);
            HttpResponse response = httpClient.execute(httpGet);
            InputStream content = response.getEntity().getContent();
            Drawable d = Drawable.createFromStream(content, "src");
            content.close();
            httpGet.abort();
            return d;
        } catch (IOException e) {
            Log.e(ImageCache.class.getName(), "IOException while fetching: " + iconUrl);
            return TELKA;
        } finally {
        }
    }
} </s>
<s>class temp {    private void removeCollection(long oid, Connection conn) throws XMLDBException {
        try {
            String sql = "DELETE FROM X_DOCUMENT WHERE X_DOCUMENT.XDB_COLLECTION_OID = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setLong(1, oid);
            pstmt.executeUpdate();
            pstmt.close();
            sql = "DELETE FROM XDB_COLLECTION WHERE XDB_COLLECTION.XDB_COLLECTION_OID = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setLong(1, oid);
            pstmt.executeUpdate();
            pstmt.close();
            removeChildCollection(oid, conn);
        } catch (java.sql.SQLException se) {
            try {
                conn.rollback();
            } catch (java.sql.SQLException se2) {
                se2.printStackTrace();
            }
            se.printStackTrace();
        }
    }
} </s>
<s>class temp {    private static void checkForUpgrade() {
        try {
            Log.out("Checking for updates...");
            URL u = ClassLoader.getSystemResource(Settings.readme);
            if (u == null) {
                u = HImage.class.getResource("/" + Settings.readme);
            }
            DataInputStream i = new DataInputStream(u.openStream());
            String tmp = i.readLine();
            tmp = tmp.substring(tmp.lastIndexOf(">"));
            tmp = tmp.substring(tmp.indexOf(".") + 1);
            tmp = tmp.substring(0, tmp.indexOf("<"));
            int x = Integer.parseInt(tmp) + 1;
            String nextVersion = "jftp-1.";
            if (x < 10) {
                nextVersion = nextVersion + "0";
            }
            nextVersion = nextVersion + x + ".tar.gz";
            File dl = new File(nextVersion);
            if (!dl.exists() || (dl.length() <= 0)) {
                URL url = new URL("http://osdn.dl.sourceforge.net/sourceforge/j-ftp/" + nextVersion);
                BufferedOutputStream f = new BufferedOutputStream(new FileOutputStream(dl));
                BufferedInputStream in = new BufferedInputStream(url.openStream());
                byte[] buf = new byte[4096];
                int stat = 1;
                Log.out("\ndownloading update: " + dl.getAbsolutePath() + "\n\n");
                while (stat > 0) {
                    stat = in.read(buf);
                    if (stat == -1) {
                        break;
                    }
                    f.write(buf, 0, stat);
                    System.out.print(".");
                }
                f.flush();
                f.close();
                in.close();
            }
            Log.out("\n\n\na newer version was found!\nplease install the File " + dl.getAbsolutePath() + " or even better visit the homepage to download the latest version...\n" + "you can turn this feature off if you don't like it (view readme for details)\n\nStarting anyway...\n\n");
        } catch (Exception ex) {
        }
        Log.out("finished check...");
    }
} </s>
<s>class temp {    public void testConvert() throws IOException, ConverterException {
        InputStreamReader reader = new InputStreamReader(new FileInputStream("test" + File.separator + "input" + File.separator + "A0851ohneex.dat"), CharsetUtil.forName("x-PICA"));
        FileWriter writer = new FileWriter("test" + File.separator + "output" + File.separator + "ddbInterToMarcxmlTest.out");
        Converter c = context.getConverter("ddb-intern", "MARC21-xml", "x-PICA", "UTF-8");
        ConversionParameters params = new ConversionParameters();
        params.setSourceCharset("x-PICA");
        params.setTargetCharset("UTF-8");
        params.setAddCollectionHeader(true);
        params.setAddCollectionFooter(true);
        c.convert(reader, writer, params);
    }
} </s>
<s>class temp {    @SuppressWarnings("static-access")
    public FastCollection<String> load(Link link) {
        URL url = null;
        FastCollection<String> links = new FastList<String>();
        FTPClient ftp = null;
        try {
            String address = link.getURI();
            address = JGetFileUtils.removeTrailingString(address, "/");
            url = new URL(address);
            host = url.getHost();
            String folder = url.getPath();
            logger.info("Traversing: " + address);
            ftp = new FTPClient(host);
            if (!ftp.connected()) {
                ftp.connect();
            }
            ftp.login("anonymous", "me@mymail.com");
            logger.info("Connected to " + host + ".");
            logger.debug("changing dir to " + folder);
            ftp.chdir(folder);
            String[] files = ftp.dir();
            for (String file : files) {
                links.add(address + "/" + file);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            logger.debug(e.getStackTrace());
        } finally {
            try {
                ftp.quit();
            } catch (Exception e) {
                logger.error("Failed to logout or disconnect from the ftp server: ftp://" + host);
            }
        }
        return links;
    }
} </s>
<s>class temp {    public static Properties parse() {
        try {
            String userHome = System.getProperty("user.home");
            File dsigFolder = new File(userHome, ".dsig");
            if (!dsigFolder.exists() && !dsigFolder.mkdir()) {
                throw new IOException("Could not create .dsig folder in user home directory");
            }
            File settingsFile = new File(dsigFolder, "settings.properties");
            if (!settingsFile.exists()) {
                InputStream is = UserHomeSettingsParser.class.getResourceAsStream("/defaultSettings.properties");
                if (is != null) {
                    IOUtils.copy(is, new FileOutputStream(settingsFile));
                }
            }
            if (settingsFile.exists()) {
                Properties p = new Properties();
                FileInputStream fis = new FileInputStream(settingsFile);
                p.load(fis);
                IOUtils.closeQuietly(fis);
                return p;
            }
        } catch (IOException e) {
            logger.warn("Error while initialize settings", e);
        }
        return null;
    }
} </s>
<s>class temp {    private static FacesBean.Type _createType() {
        try {
            ClassLoader cl = _getClassLoader();
            URL url = cl.getResource("META-INF/faces-bean-type.properties");
            if (url != null) {
                Properties properties = new Properties();
                InputStream is = url.openStream();
                try {
                    properties.load(is);
                    String className = (String) properties.get(UIXComponentBase.class.getName());
                    return (FacesBean.Type) cl.loadClass(className).newInstance();
                } finally {
                    is.close();
                }
            }
        } catch (Exception e) {
            _LOG.severe("CANNOT_LOAD_TYPE_PROPERTIES", e);
        }
        return new FacesBean.Type();
    }
} </s>
<s>class temp {    public static void copy(Object arg1, Object arg2) {
        Writer writer = null;
        Reader reader = null;
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            if (arg2 instanceof Writer) {
                writer = (Writer) arg2;
                if (arg1 instanceof Reader) {
                    reader = (Reader) arg1;
                    copy(reader, writer);
                } else if (arg1 instanceof String) {
                    reader = new FileReader(new File((String) arg1));
                    copy(reader, writer);
                } else if (arg1 instanceof File) {
                    reader = new FileReader((File) arg1);
                    copy(reader, writer);
                } else if (arg1 instanceof URL) {
                    copy(((URL) arg1).openStream(), writer);
                } else if (arg1 instanceof InputStream) {
                    reader = new InputStreamReader((InputStream) arg1);
                    copy(reader, writer);
                } else if (arg1 instanceof RandomAccessFile) {
                    copy((RandomAccessFile) arg1, writer);
                } else {
                    throw new TypeError("Invalid first argument to copy()");
                }
            } else if (arg2 instanceof OutputStream) {
                outStream = (OutputStream) arg2;
                if (arg1 instanceof Reader) {
                    copy((Reader) arg1, new OutputStreamWriter(outStream));
                } else if (arg1 instanceof String) {
                    inStream = new FileInputStream(new File((String) arg1));
                    copy(inStream, outStream);
                } else if (arg1 instanceof File) {
                    inStream = new FileInputStream((File) arg1);
                    copy(inStream, outStream);
                } else if (arg1 instanceof URL) {
                    copy(((URL) arg1).openStream(), outStream);
                } else if (arg1 instanceof InputStream) {
                    copy((InputStream) arg1, outStream);
                } else if (arg1 instanceof RandomAccessFile) {
                    copy((RandomAccessFile) arg1, outStream);
                } else {
                    throw new TypeError("Invalid first argument to copy()");
                }
            } else if (arg2 instanceof RandomAccessFile) {
                RandomAccessFile out = (RandomAccessFile) arg2;
                if (arg1 instanceof Reader) {
                    copy((Reader) arg1, out);
                } else if (arg1 instanceof String) {
                    inStream = new FileInputStream(new File((String) arg1));
                    copy(inStream, out);
                } else if (arg1 instanceof File) {
                    inStream = new FileInputStream((File) arg1);
                    copy(inStream, out);
                } else if (arg1 instanceof URL) {
                    copy(((URL) arg1).openStream(), out);
                } else if (arg1 instanceof InputStream) {
                    copy((InputStream) arg1, out);
                } else if (arg1 instanceof RandomAccessFile) {
                    copy((RandomAccessFile) arg1, out);
                } else {
                    throw new TypeError("Invalid first argument to copy()");
                }
            } else if (arg2 instanceof File || arg2 instanceof String) {
                File outFile = null;
                if (arg2 instanceof File) {
                    outFile = (File) arg2;
                } else {
                    outFile = new File((String) arg2);
                }
                outStream = new FileOutputStream(outFile);
                if (arg1 instanceof Reader) {
                    copy((Reader) arg1, new OutputStreamWriter(outStream));
                } else if (arg1 instanceof String) {
                    inStream = new FileInputStream(new File((String) arg1));
                    copy(inStream, outStream);
                } else if (arg1 instanceof File) {
                    inStream = new FileInputStream((File) arg1);
                    copy(inStream, outStream);
                } else if (arg1 instanceof URL) {
                    copy(((URL) arg1).openStream(), outStream);
                } else if (arg1 instanceof InputStream) {
                    copy((InputStream) arg1, outStream);
                } else if (arg1 instanceof RandomAccessFile) {
                    copy((RandomAccessFile) arg1, outStream);
                } else {
                    throw new TypeError("Invalid first argument to copy()");
                }
            } else {
                throw new TypeError("Invalid second argument to copy()");
            }
        } catch (IOException e) {
            throw new IOError(e.getMessage(), e);
        }
    }
} </s>
<s>class temp {    public HttpURLConnection openConnection(String url) throws IOException {
        if (isDebugMode()) System.out.println("open: " + url);
        URL u = new URL(url);
        HttpURLConnection urlConnection;
        if (proxy != null) urlConnection = (HttpURLConnection) u.openConnection(proxy); else urlConnection = (HttpURLConnection) u.openConnection();
        urlConnection.setRequestProperty("User-Agent", userAgent);
        return urlConnection;
    }
} </s>
<s>class temp {    public Result request(URL url) {
        try {
            return xmlUtil.unmarshall(urlOpener.openStream(url));
        } catch (FileNotFoundException e) {
            log.info("File not found: " + url);
        } catch (IOException e) {
            log.error("Failed to read from url: " + url + ". " + e.getMessage(), e);
        }
        return null;
    }
} </s>
<s>class temp {    public static void parseConfigV2(List rootList, InputStream is, javax.servlet.ServletContext context, List configFileList) throws Exception {
        URL configUrl = CompositePageUtil.class.getResource("/cuttleConfigurationV2.xml");
        if (configUrl == null) configUrl = CompositePageUtil.class.getClassLoader().getResource("/cuttleConfigurationV2.xml");
        URL dtdUrl = CompositePageUtil.class.getResource("/dtd/cuttleConfiguration.dtd");
        if (dtdUrl == null) dtdUrl = CompositePageUtil.class.getClassLoader().getResource("/dtd/cuttleConfiguration.dtd");
        Digester digester = DigesterLoader.createDigester(configUrl);
        digester.setValidating(false);
        digester.register("-//Cuttle MVC Framework//DTD Cuttle Configuration 1.0//EN", dtdUrl.toString());
        XMLCuttleConfiguration cuttleConfiguration = (XMLCuttleConfiguration) digester.parse(is);
        ConfigureDigester.setXmlCuttleConfiguration(cuttleConfiguration);
        if (configFileList != null) {
            for (int i = 0; i < configFileList.size(); i++) {
                String file = (String) configFileList.get(i);
                URL url2 = CompositePageUtil.class.getResource(file);
                if (url2 == null) url2 = CompositePageUtil.class.getClassLoader().getResource(file);
                if (url2 == null) {
                    logger.error("file path:" + file + " not found!");
                }
                XMLRoot root = (XMLRoot) ConfigureDigester.parseXMLToObject(url2.openStream());
                rootList.add(root);
            }
        } else {
            for (int i = 0; i < cuttleConfiguration.getActionConfigs().size(); i++) {
                XMLActionConfig config = (XMLActionConfig) cuttleConfiguration.getActionConfigs().get(i);
                URL url2 = context.getResource(config.getResource());
                if (url2 == null) {
                    logger.error("file path:" + config.getResource() + " not found!");
                }
                XMLRoot root = (XMLRoot) ConfigureDigester.parseXMLToObject(url2.openStream());
                rootList.add(root);
            }
        }
        compositeXMLRoot(rootList);
        XMLCuttleConfiguration config = ConfigureDigester.getXmlCuttleConfiguration();
        if (config != null) {
            List processUnits = config.getProcessUnits();
            if (processUnits != null) {
                for (int i = 0; i < processUnits.size(); i++) {
                    XMLProcessUnit processUnit = (XMLProcessUnit) processUnits.get(i);
                    if (processUnit.getSpringMapping() == null || processUnit.getSpringMapping().equals("")) {
                        Class businessClass = Class.forName(processUnit.getClazz());
                        Object business = businessClass.newInstance();
                        ConfigureDigester.addObjectToPool(business);
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    public static void initConfigurationV2(String cuttleConfiguration, javax.servlet.ServletContext context, List configFileList) throws Exception {
        ConfigureDigester.clearMap();
        List rootList = new ArrayList();
        InputStream is = null;
        if (cuttleConfiguration == null) {
            URL url = CompositePageUtil.class.getResource("/cuttle.xml");
            if (url == null) url = CompositePageUtil.class.getClassLoader().getResource("/cuttle.xml");
            is = url.openStream();
        } else {
            is = context.getResourceAsStream(cuttleConfiguration);
        }
        parseConfigV2(rootList, is, context, configFileList);
        if (ConfigureDigester.getXmlCuttleConfiguration() != null && ConfigureDigester.getXmlCuttleConfiguration().getPlugins() != null) {
            for (int i = 0; i < ConfigureDigester.getXmlCuttleConfiguration().getPlugins().size(); i++) {
                XMLPlugin plugin = (XMLPlugin) ConfigureDigester.getXmlCuttleConfiguration().getPlugins().get(i);
                if (plugin.getConfigurePlugable() != null && !plugin.getConfigurePlugable().equals("")) {
                    Class pluginable = Class.forName(plugin.getConfigurePlugable());
                    ConfigurePlugable pluginableObj = (ConfigurePlugable) pluginable.newInstance();
                    pluginableObj.initConfiguration(plugin.getConfigurationPath(), context);
                }
            }
        }
    }
} </s>
<s>class temp {    public static synchronized int registerVote(String IDVotazione, byte[] T1, byte[] sbT2, byte[] envelope, Config config) {
        if (IDVotazione == null) {
            LOGGER.error("registerVote::IDV null");
            return C_addVote_BOH;
        }
        if (T1 == null) {
            LOGGER.error("registerVote::T1 null");
            return C_addVote_BOH;
        }
        if (envelope == null) {
            LOGGER.error("registerVote::envelope null");
            return C_addVote_BOH;
        }
        LOGGER.info("registering vote started");
        Connection conn = null;
        PreparedStatement stmt = null;
        boolean autoCommitPresent = true;
        int ANSWER = C_addVote_BOH;
        try {
            ByteArrayInputStream tmpXMLStream = new ByteArrayInputStream(envelope);
            SAXReader tmpXMLReader = new SAXReader();
            Document doc = tmpXMLReader.read(tmpXMLStream);
            if (LOGGER.isTraceEnabled()) LOGGER.trace(doc.asXML());
            String sT1 = new String(Base64.encodeBase64(T1), "utf-8");
            String ssbT2 = new String(Base64.encodeBase64(sbT2), "utf-8");
            String sEnvelope = new String(Base64.encodeBase64(envelope), "utf-8");
            LOGGER.trace("loading jdbc driver ...");
            Class.forName("com.mysql.jdbc.Driver");
            LOGGER.trace("... loaded");
            conn = DriverManager.getConnection(config.getSconn());
            autoCommitPresent = conn.getAutoCommit();
            conn.setAutoCommit(false);
            String query = "" + " INSERT INTO votes(IDVotazione, T1, signByT2 , envelope) " + " VALUES           (?          , ? , ?        , ?       ) ";
            stmt = conn.prepareStatement(query);
            stmt.setString(1, IDVotazione);
            stmt.setString(2, sT1);
            stmt.setString(3, ssbT2);
            stmt.setString(4, sEnvelope);
            stmt.executeUpdate();
            stmt.close();
            LOGGER.debug("vote saved for references, now start the parsing");
            query = "" + " INSERT INTO risposte (IDVotazione, T1, IDquestion , myrisposta,freetext) " + " VALUES               (?          , ? , ?          , ?         ,?)        ";
            stmt = conn.prepareStatement(query);
            Element question, itemsElem, rispostaElem;
            List<Element> rispList;
            String id, rispostaText, risposta, freeText, questionType;
            Iterator<Element> questionIterator = doc.selectNodes("/poll/manifest/question").iterator();
            while (questionIterator.hasNext()) {
                question = (Element) questionIterator.next();
                risposta = freeText = "";
                id = question.attributeValue("id");
                itemsElem = question.element("items");
                questionType = itemsElem == null ? "" : itemsElem.attributeValue("type");
                rispostaElem = question.element("myrisposta");
                rispostaText = rispostaElem == null ? "" : rispostaElem.getText();
                if (rispostaText.equals(Votazione.C_TAG_WHITE_XML)) {
                    risposta = C_TAG_WHITE;
                } else if (rispostaText.equals(Votazione.C_TAG_NULL_XML)) {
                    risposta = C_TAG_NULL;
                } else {
                    if (!rispostaText.equals("") && LOGGER.isDebugEnabled()) LOGGER.warn("Risposta text should be empty!: " + rispostaText);
                    risposta = C_TAG_BUG;
                    if (questionType.equals("selection")) {
                        Element rispItem = rispostaElem.element("item");
                        String tmpRisposta = rispItem.attributeValue("index");
                        if (tmpRisposta != null) {
                            risposta = tmpRisposta;
                            if (risposta.equals("0")) freeText = rispItem.getText();
                        }
                    } else if (questionType.equals("borda")) {
                        rispList = rispostaElem.elements("item");
                        if (rispList != null) {
                            risposta = "";
                            String index, tokens;
                            for (Element rispItem : rispList) {
                                index = rispItem.attributeValue("index");
                                tokens = rispItem.attributeValue("tokens");
                                if (index.equals("0")) freeText = rispItem.getText();
                                if (risposta.length() > 0) risposta += ",";
                                risposta += index + ":" + tokens;
                            }
                        }
                    } else if (questionType.equals("ordering")) {
                        rispList = rispostaElem.elements("item");
                        if (rispList != null) {
                            risposta = "";
                            String index, order;
                            for (Element rispItem : rispList) {
                                index = rispItem.attributeValue("index");
                                order = rispItem.attributeValue("order");
                                if (index == null) {
                                    continue;
                                }
                                if (index.equals("0")) freeText = rispItem.getText();
                                if (risposta.length() > 0) risposta += ",";
                                risposta += index + ":" + order;
                            }
                        }
                    } else if (questionType.equals("multiple")) {
                        rispList = rispostaElem.elements("item");
                        if (rispList != null) {
                            risposta = "";
                            String index;
                            for (Element rispItem : rispList) {
                                index = rispItem.attributeValue("index");
                                if (index.equals("0")) freeText = rispItem.getText();
                                if (risposta.length() > 0) risposta += ",";
                                risposta += index;
                            }
                        }
                    } else if (questionType.equals("free")) {
                        freeText = rispostaElem.element("item").getText();
                        risposta = "";
                    }
                }
                if (LOGGER.isTraceEnabled()) {
                    LOGGER.trace("ID_QUESTION: " + id);
                    LOGGER.trace("question type: " + questionType);
                    LOGGER.trace("risposta: " + risposta);
                    LOGGER.trace("freetext: " + freeText);
                }
                if (risposta.equals(C_TAG_BUG)) {
                    LOGGER.error("Invalid answer");
                    LOGGER.error("T1: " + sT1);
                    LOGGER.error("ID_QUESTION: " + id);
                    LOGGER.error("question type: " + questionType);
                }
                stmt.setString(1, IDVotazione);
                stmt.setString(2, sT1);
                stmt.setString(3, id);
                stmt.setString(4, risposta);
                stmt.setString(5, freeText);
                stmt.addBatch();
            }
            stmt.executeBatch();
            stmt.close();
            conn.commit();
            ANSWER = C_addVote_OK;
            LOGGER.info("registering vote end successfully");
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (Exception ex) {
            }
            if (e.getErrorCode() == 1062) {
                ANSWER = C_addVote_DUPLICATE;
                LOGGER.error("error while registering vote (duplication)");
            } else {
                ANSWER = C_addVote_BOH;
                LOGGER.error("error while registering vote", e);
            }
        } catch (UnsupportedEncodingException e) {
            try {
                conn.rollback();
            } catch (Exception ex) {
            }
            LOGGER.error("encoding error", e);
            ANSWER = C_addVote_BOH;
        } catch (DocumentException e) {
            LOGGER.error("DocumentException", e);
            ANSWER = C_addVote_BOH;
        } catch (ClassNotFoundException e) {
            try {
                conn.rollback();
            } catch (Exception ex) {
            }
            LOGGER.error("error while registering vote", e);
            ANSWER = C_addVote_BOH;
        } catch (Exception e) {
            try {
                conn.rollback();
            } catch (Exception ex) {
            }
            LOGGER.error("Unexpected exception while registering vote", e);
            ANSWER = C_addVote_BOH;
        } finally {
            try {
                conn.setAutoCommit(autoCommitPresent);
                conn.close();
            } catch (Exception e) {
            }
            ;
        }
        return ANSWER;
    }
} </s>
<s>class temp {    public static InputStream getFileInputStream(String path) throws IOException {
        InputStream is = null;
        File file = new File(path);
        if (file.exists()) is = new BufferedInputStream(new FileInputStream(file));
        if (is == null) {
            URL url = FileUtils.class.getClassLoader().getResource(path);
            is = (url == null) ? null : url.openStream();
        }
        return is;
    }
} </s>
<s>class temp {    public Document getDocument(String urlString) {
        Document doc = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            SAXBuilder sxbuild = new SAXBuilder();
            if (Osmolt.debug) {
                outputInterface.printDebugMessage("ProcessOSM", "url: " + urlString);
                in = new FileInputStream(new File(System.getProperty("user.home") + "/data.osm"));
                outputInterface.processSetStatus("getting data from " + System.getProperty("user.home") + "/data.osm");
            } else {
                URL url = new URL(urlString);
                outputInterface.printDebugMessage("ProcessOSM", "url: " + urlString);
                outputInterface.processSetStatus("connecting Server");
                conn = url.openConnection();
                outputInterface.processSetStatus("loading Data");
                in = conn.getInputStream();
            }
            doc = sxbuild.build(in);
        } catch (java.net.UnknownHostException e) {
            outputInterface.printError("Unknown Host: " + urlString);
        } catch (java.net.SocketTimeoutException e) {
            outputInterface.printError("Timeout: Server does not response");
        } catch (java.net.ConnectException e) {
            outputInterface.printError("Error Server response: " + e.getMessage());
        } catch (java.net.SocketException e) {
            outputInterface.printError("Error Server response: " + e.getMessage());
        } catch (JDOMException e) {
            outputInterface.printError(e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            outputInterface.printError(e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            outputInterface.printError(e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException ioe) {
            }
        }
        return doc;
    }
} </s>
<s>class temp {    public static String EncryptString(String method, String input) {
        MessageDigest md = null;
        byte[] byteHash = null;
        StringBuffer resultString = new StringBuffer();
        if (method.equals("SHA1") || method.equals("MD5")) {
            try {
                md = MessageDigest.getInstance(method);
            } catch (NoSuchAlgorithmException e) {
                System.out.println("NoSuchAlgorithmException caught!");
                return null;
            }
        } else {
            return null;
        }
        md.reset();
        md.update(input.getBytes());
        byteHash = md.digest();
        for (int i = 0; i < byteHash.length; i++) {
            String tmp = Integer.toHexString(0xff & byteHash[i]);
            if (tmp.length() < 2) tmp = "0" + tmp;
            resultString.append(tmp);
        }
        return (resultString.toString());
    }
} </s>
<s>class temp {    public static String md5sum(String s, String alg) {
        try {
            MessageDigest md = MessageDigest.getInstance(alg);
            md.update(s.getBytes(), 0, s.length());
            StringBuffer sb = new StringBuffer();
            synchronized (sb) {
                for (byte b : md.digest()) sb.append(pad(Integer.toHexString(0xFF & b), ZERO.charAt(0), 2, true));
            }
            return sb.toString();
        } catch (Exception ex) {
            log(ex);
        }
        return null;
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        DefaultHttpClient httpclient = new DefaultHttpClient();
        HttpGet httpget = new HttpGet("https://portal.sun.com/portal/dt");
        HttpResponse response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();
        System.out.println("Login form get: " + response.getStatusLine());
        if (entity != null) {
            entity.consumeContent();
        }
        System.out.println("Initial set of cookies:");
        List<Cookie> cookies = httpclient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
            System.out.println("None");
        } else {
            for (int i = 0; i < cookies.size(); i++) {
                System.out.println("- " + cookies.get(i).toString());
            }
        }
        HttpPost httpost = new HttpPost("https://portal.sun.com/amserver/UI/Login?" + "org=self_registered_users&" + "goto=/portal/dt&" + "gotoOnFail=/portal/dt?error=true");
        List<NameValuePair> nvps = new ArrayList<NameValuePair>();
        nvps.add(new BasicNameValuePair("IDToken1", "username"));
        nvps.add(new BasicNameValuePair("IDToken2", "password"));
        httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));
        response = httpclient.execute(httpost);
        entity = response.getEntity();
        System.out.println("Login form get: " + response.getStatusLine());
        if (entity != null) {
            entity.consumeContent();
        }
        System.out.println("Post logon cookies:");
        cookies = httpclient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
            System.out.println("None");
        } else {
            for (int i = 0; i < cookies.size(); i++) {
                System.out.println("- " + cookies.get(i).toString());
            }
        }
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean copyFile(File source, File dest) {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(dest).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            return false;
        } finally {
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (IOException e) {
            }
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (IOException e) {
            }
        }
        return true;
    }
} </s>
<s>class temp {    public Logging() throws Exception {
        File home = new File(System.getProperty("user.home"), ".jorgan");
        if (!home.exists()) {
            home.mkdirs();
        }
        File logging = new File(home, "logging.properties");
        if (!logging.exists()) {
            InputStream input = getClass().getResourceAsStream("logging.properties");
            OutputStream output = null;
            try {
                output = new FileOutputStream(logging);
                IOUtils.copy(input, output);
            } finally {
                IOUtils.closeQuietly(input);
                IOUtils.closeQuietly(output);
            }
        }
        FileInputStream input = null;
        try {
            input = new FileInputStream(logging);
            LogManager.getLogManager().readConfiguration(input);
        } finally {
            IOUtils.closeQuietly(input);
        }
    }
} </s>
<s>class temp {    public static FTPClient getFtpClient(TopAnalysisConfig topAnalyzerConfig) throws SocketException, IOException {
        FTPClient ftp = new FTPClient();
        ftp.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));
        ftp.connect(topAnalyzerConfig.getFtpServer());
        int reply = ftp.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            ftp.disconnect();
            throw new java.lang.RuntimeException("PullFileJobWorker connect ftp error!");
        }
        if (!ftp.login(topAnalyzerConfig.getFtpUserName(), topAnalyzerConfig.getFtpPassWord())) {
            ftp.logout();
            throw new java.lang.RuntimeException("PullFileJobWorker login ftp error!");
        }
        logger.info("Remote system is " + ftp.getSystemName());
        ftp.setFileType(FTP.BINARY_FILE_TYPE);
        if (topAnalyzerConfig.isLocalPassiveMode()) ftp.enterLocalPassiveMode();
        return ftp;
    }
} </s>
<s>class temp {    public OOXMLSignatureService(InputStream documentInputStream, OutputStream documentOutputStream, SignatureFacet signatureFacet, String role, IdentityDTO identity, byte[] photo, RevocationDataService revocationDataService, TimeStampService timeStampService, DigestAlgo signatureDigestAlgo) throws IOException {
        super(signatureDigestAlgo);
        this.temporaryDataStorage = new HttpSessionTemporaryDataStorage();
        this.documentOutputStream = documentOutputStream;
        this.tmpFile = File.createTempFile("eid-dss-", ".ooxml");
        FileOutputStream fileOutputStream;
        fileOutputStream = new FileOutputStream(this.tmpFile);
        IOUtils.copy(documentInputStream, fileOutputStream);
        addSignatureFacet(signatureFacet);
        addSignatureFacet(new XAdESXLSignatureFacet(timeStampService, revocationDataService, getSignatureDigestAlgorithm()));
        XAdESSignatureFacet xadesSignatureFacet = super.getXAdESSignatureFacet();
        xadesSignatureFacet.setRole(role);
        if (null != identity) {
            IdentitySignatureFacet identitySignatureFacet = new IdentitySignatureFacet(identity, photo, getSignatureDigestAlgorithm());
            addSignatureFacet(identitySignatureFacet);
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        PatternLayout pl = new PatternLayout("%d{ISO8601} %-5p %c: %m\n");
        ConsoleAppender ca = new ConsoleAppender(pl);
        Logger.getRoot().addAppender(ca);
        Logger.getRoot().setLevel(Level.INFO);
        Options options = new Options();
        options.addOption("p", "put", false, "put a file in the DHT overlay");
        options.addOption("g", "get", false, "get a file from the DHT");
        options.addOption("r", "remove", false, "remove a file from the DHT");
        options.addOption("u", "update", false, "updates the lease");
        options.addOption("j", "join", false, "join the DHT overlay");
        options.addOption("c", "config", true, "the configuration file");
        options.addOption("k", "key", true, "the key to read a file from");
        options.addOption("f", "file", true, "the file to read or write");
        options.addOption("a", "app", true, "the application ID");
        options.addOption("s", "secret", true, "the secret used to hide data");
        options.addOption("t", "ttl", true, "how long in seconds data should persist");
        CommandLineParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, args);
        String configFile = null;
        String mode = null;
        String secretStr = null;
        int ttl = 9999;
        String keyStr = null;
        String file = null;
        int appId = 0;
        if (cmd.hasOption("j")) {
            mode = "join";
        }
        if (cmd.hasOption("p")) {
            mode = "put";
        }
        if (cmd.hasOption("g")) {
            mode = "get";
        }
        if (cmd.hasOption("r")) {
            mode = "remove";
        }
        if (cmd.hasOption("u")) {
            mode = "update";
        }
        if (cmd.hasOption("c")) {
            configFile = cmd.getOptionValue("c");
        }
        if (cmd.hasOption("k")) {
            keyStr = cmd.getOptionValue("k");
        }
        if (cmd.hasOption("f")) {
            file = cmd.getOptionValue("f");
        }
        if (cmd.hasOption("s")) {
            secretStr = cmd.getOptionValue("s");
        }
        if (cmd.hasOption("t")) {
            ttl = Integer.parseInt(cmd.getOptionValue("t"));
        }
        if (cmd.hasOption("a")) {
            appId = Integer.parseInt(cmd.getOptionValue("a"));
        }
        if (mode == null) {
            System.err.println("ERROR: --put or --get or --remove or --join or --update is required");
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("DHT", options);
            System.exit(1);
        }
        if (configFile == null) {
            System.err.println("ERROR: --config is required");
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("DHT", options);
            System.exit(1);
        }
        Properties conf = new Properties();
        conf.load(new FileInputStream(configFile));
        DHT dht = new DHT(conf);
        if (mode.equals("join")) {
            dht.join();
        } else if (mode.equals("put")) {
            if (file == null) {
                System.err.println("ERROR: --file is required");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DHT", options);
                System.exit(1);
            }
            if (keyStr == null) {
                System.err.println("ERROR: --key is required");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DHT", options);
                System.exit(1);
            }
            if (secretStr == null) {
                System.err.println("ERROR: --secret is required");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DHT", options);
                System.exit(1);
            }
            logger.info("putting file " + file);
            FileInputStream in = new FileInputStream(file);
            byte[] tmp = new byte[1000000];
            int num = in.read(tmp);
            byte[] value = new byte[num];
            System.arraycopy(tmp, 0, value, 0, num);
            in.close();
            if (dht.put((short) appId, keyStr.getBytes(), value, ttl, secretStr.getBytes()) < 0) {
                logger.info("There was an error while putting a key-value.");
                System.exit(0);
            }
            System.out.println("Ok!");
        } else if (mode.equals("get")) {
            if (file == null) {
                System.err.println("ERROR: --file is required");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DHT", options);
                System.exit(1);
            }
            if (keyStr == null) {
                System.err.println("ERROR: --key is required");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DHT", options);
                System.exit(1);
            }
            logger.info("getting file " + file);
            ArrayList<byte[]> values = new ArrayList<byte[]>();
            if (dht.get((short) appId, keyStr.getBytes(), Integer.MAX_VALUE, values) < 0) {
                logger.info("There was an error while getting a value.");
                System.exit(0);
            }
            if (values.size() == 0 || values == null) {
                System.out.println("No values returned.");
                System.exit(0);
            }
            FileOutputStream out = new FileOutputStream(file);
            System.out.println("Found " + values.size() + " values -- saving the first one only.");
            out.write(values.get(0));
            out.close();
            System.out.println("Ok!");
        } else if (mode.equals("remove")) {
            if (keyStr == null) {
                System.err.println("ERROR: --key is required");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DHT", options);
                System.exit(1);
            }
            if (secretStr == null) {
                System.err.println("ERROR: --secret is required");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DHT", options);
                System.exit(1);
            }
            logger.info("removing <key,value> for key=" + keyStr);
            if (dht.remove((short) appId, keyStr.getBytes(), secretStr.getBytes()) < 0) {
                logger.info("There was an error while removing a key.");
                System.exit(0);
            }
            System.out.println("Ok!");
        } else if (mode.equals("update")) {
            if (keyStr == null) {
                System.err.println("ERROR: --key is required");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DHT", options);
                System.exit(1);
            }
            logger.info("updating <key,value> for key=" + keyStr);
            if (dht.updateLease((short) appId, keyStr.getBytes(), ttl) < 0) {
                logger.info("There was an error while updating data lease.");
                System.exit(0);
            }
            System.out.println("Ok!");
        }
        DHT.getInstance().stop();
    }
} </s>
<s>class temp {    private static String hashPassword(String password, String customsalt) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        password = SALT1 + password;
        MessageDigest md5 = MessageDigest.getInstance("MD5");
        md5.update(password.getBytes(), 0, password.length());
        password += convertToHex(md5.digest()) + SALT2 + customsalt;
        MessageDigest md = MessageDigest.getInstance("SHA-512");
        byte[] sha1hash = new byte[40];
        md.update(password.getBytes("UTF-8"), 0, password.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash) + "|" + customsalt;
    }
} </s>
<s>class temp {    public static String unsecureHashConstantSalt(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        password = SALT3 + password;
        MessageDigest md5 = MessageDigest.getInstance("MD5");
        md5.update(password.getBytes(), 0, password.length());
        password += convertToHex(md5.digest()) + SALT4;
        MessageDigest md = MessageDigest.getInstance("SHA-512");
        byte[] sha1hash = new byte[40];
        md.update(password.getBytes("UTF-8"), 0, password.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
} </s>
<s>class temp {    public static boolean checkUrl(CmsObject cms, String check) {
        URI uri = null;
        try {
            uri = new CmsUriSplitter(check, true).toURI();
        } catch (URISyntaxException exc) {
            return false;
        }
        try {
            if (!uri.isAbsolute()) {
                return cms.existsResource(cms.getRequestContext().removeSiteRoot(uri.getPath()));
            } else {
                URL url = uri.toURL();
                if ("http".equals(url.getProtocol())) {
                    HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
                    return (httpcon.getResponseCode() == 200);
                } else {
                    return true;
                }
            }
        } catch (MalformedURLException mue) {
            return false;
        } catch (Exception ex) {
            return false;
        }
    }
} </s>
<s>class temp {        @SuppressWarnings("unchecked")
        private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception {
            final String url = request.getRequestURL().toString();
            if (url.endsWith("/favicon.ico")) {
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
            if (url.contains("/delay")) {
                final String delay = StringUtils.substringBetween(url, "/delay", "/");
                final int ms = Integer.parseInt(delay);
                if (LOG.isDebugEnabled()) {
                    LOG.debug("Sleeping for " + ms + " before to deliver " + url);
                }
                Thread.sleep(ms);
            }
            final URL requestedUrl = new URL(url);
            final WebRequest webRequest = new WebRequest(requestedUrl);
            webRequest.setHttpMethod(HttpMethod.valueOf(request.getMethod()));
            for (final Enumeration<String> en = request.getHeaderNames(); en.hasMoreElements(); ) {
                final String headerName = en.nextElement();
                final String headerValue = request.getHeader(headerName);
                webRequest.setAdditionalHeader(headerName, headerValue);
            }
            final List<NameValuePair> requestParameters = new ArrayList<NameValuePair>();
            for (final Enumeration<String> paramNames = request.getParameterNames(); paramNames.hasMoreElements(); ) {
                final String name = paramNames.nextElement();
                final String[] values = request.getParameterValues(name);
                for (final String value : values) {
                    requestParameters.add(new NameValuePair(name, value));
                }
            }
            if ("PUT".equals(request.getMethod()) && request.getContentLength() > 0) {
                final byte[] buffer = new byte[request.getContentLength()];
                request.getInputStream().readLine(buffer, 0, buffer.length);
                webRequest.setRequestBody(new String(buffer));
            } else {
                webRequest.setRequestParameters(requestParameters);
            }
            final WebResponse resp = MockConnection_.getResponse(webRequest);
            response.setStatus(resp.getStatusCode());
            for (final NameValuePair responseHeader : resp.getResponseHeaders()) {
                response.addHeader(responseHeader.getName(), responseHeader.getValue());
            }
            if (WriteContentAsBytes_) {
                IOUtils.copy(resp.getContentAsStream(), response.getOutputStream());
            } else {
                final String newContent = getModifiedContent(resp.getContentAsString());
                final String contentCharset = resp.getContentCharset();
                response.setCharacterEncoding(contentCharset);
                response.getWriter().print(newContent);
            }
            response.flushBuffer();
        }
} </s>
<s>class temp {    private void loadOverrideProperties(String uri) {
        try {
            File f = new File(uri);
            Properties temp = new Properties();
            if (f.exists()) {
                info("Found config override file " + f.getAbsolutePath());
                try {
                    InputStream readStream = new BufferedInputStream(new FileInputStream(f));
                    try {
                        temp.load(readStream);
                    } finally {
                        readStream.close();
                    }
                } catch (IOException iex) {
                    warning("Error while loading override properties file; skipping.", iex);
                    return;
                }
            } else {
                InputStream in = null;
                try {
                    URL url = new URL(uri);
                    in = new BufferedInputStream(url.openStream());
                    info("Found config override URI " + uri);
                    temp.load(in);
                } catch (MalformedURLException e) {
                    warning("URI for override properties is malformed, skipping: " + uri);
                    return;
                } catch (IOException e) {
                    warning("Overridden properties could not be loaded from URI: " + uri, e);
                    return;
                } finally {
                    if (in != null) try {
                        in.close();
                    } catch (IOException e) {
                    }
                }
            }
            Enumeration elem = this.properties.keys();
            List lp = Collections.list(elem);
            Collections.sort(lp);
            Iterator iter = lp.iterator();
            int cnt = 0;
            while (iter.hasNext()) {
                String key = (String) iter.next();
                String val = temp.getProperty(key);
                if (val != null) {
                    this.properties.setProperty(key, val);
                    finer("  " + key + " -> " + val);
                    cnt++;
                }
            }
            finer("Configuration: " + cnt + " properties overridden from secondary properties file.");
            Enumeration allRead = temp.keys();
            List ap = Collections.list(allRead);
            Collections.sort(ap);
            iter = ap.iterator();
            cnt = 0;
            while (iter.hasNext()) {
                String key = (String) iter.next();
                String val = temp.getProperty(key);
                if (val != null) {
                    this.properties.setProperty(key, val);
                    finer("  (+)" + key + " -> " + val);
                    cnt++;
                }
            }
            finer("Configuration: " + cnt + " properties added from secondary properties file.");
        } catch (SecurityException e) {
            System.err.println(e.getLocalizedMessage());
        }
    }
} </s>
<s>class temp {    private void extractSourceFiles(String jar) {
        JarInputStream in = null;
        BufferedOutputStream out = null;
        try {
            in = new JarInputStream(new FileInputStream(getProjectFile(jar)));
            JarEntry item;
            byte buffer[] = new byte[4096];
            int buflength;
            while ((item = in.getNextJarEntry()) != null) if (item.getName().startsWith(PREFIX) && (!item.getName().endsWith("/"))) {
                out = new BufferedOutputStream(new FileOutputStream(new File(dest, getFileName(item))));
                while ((buflength = in.read(buffer)) != -1) out.write(buffer, 0, buflength);
                howmany++;
                out.flush();
                out.close();
                out = null;
            }
        } catch (IOException ex) {
            System.out.println("Unable to parse file " + jar + ", reason: " + ex.getMessage());
        } finally {
            try {
                if (in != null) in.close();
            } catch (IOException ex) {
            }
            try {
                if (out != null) out.close();
            } catch (IOException ex) {
            }
        }
    }
} </s>
<s>class temp {    public void actionPerformed(ActionEvent e) {
        if ("register".equals(e.getActionCommand())) {
            buttonClicked = "register";
            try {
                String data = URLEncoder.encode("ver", "UTF-8") + "=" + URLEncoder.encode(Double.toString(questVer), "UTF-8");
                data += "&" + URLEncoder.encode("name", "UTF-8") + "=" + URLEncoder.encode(name.getText(), "UTF-8");
                data += "&" + URLEncoder.encode("os", "UTF-8") + "=" + URLEncoder.encode(os.getText(), "UTF-8");
                data += "&" + URLEncoder.encode("jre", "UTF-8") + "=" + URLEncoder.encode(jre.getText(), "UTF-8");
                data += "&" + URLEncoder.encode("email", "UTF-8") + "=" + URLEncoder.encode(email.getText(), "UTF-8");
                data += "&" + URLEncoder.encode("key", "UTF-8") + "=" + URLEncoder.encode("Qr7SchF", "UTF-8");
                data += "&" + URLEncoder.encode("answers", "UTF-8") + "=" + URLEncoder.encode(Integer.toString(getAnswers()), "UTF-8");
                URL url = new URL("http://ubcdcreator.sourceforge.net/register.php");
                URLConnection conn = url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(data);
                wr.flush();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = rd.readLine()) != null) {
                }
                rd.close();
                wr.close();
            } catch (Exception ex) {
            }
            setVisible(false);
        } else if ("cancel".equals(e.getActionCommand())) {
            buttonClicked = "cancel";
            setVisible(false);
        } else if ("never".equals(e.getActionCommand())) {
            buttonClicked = "never";
            setVisible(false);
        }
    }
} </s>
<s>class temp {    public synchronized String getEncryptedPassword(String plaintext, String algorithm) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(algorithm);
        md.update(plaintext.getBytes("UTF-8"));
        return bytesToHexString(md.digest());
    }
} </s>
<s>class temp {    private void refreshJOGL(final File installDir) {
        try {
            Class subAppletClass = Class.forName(subAppletClassName);
        } catch (ClassNotFoundException cnfe) {
            displayError("Start failed : class not found : " + subAppletClassName);
        }
        if (!installDir.exists()) {
            installDir.mkdirs();
        }
        String libURLName = nativeLibsJarNames[osType];
        URL nativeLibURL;
        URLConnection urlConnection;
        String path = getCodeBase().toExternalForm() + libURLName;
        try {
            nativeLibURL = new URL(path);
            urlConnection = nativeLibURL.openConnection();
        } catch (Exception e) {
            e.printStackTrace();
            displayError("Couldn't access the native lib URL : " + path);
            return;
        }
        long lastModified = urlConnection.getLastModified();
        File localNativeFile = new File(installDir, nativeLibsFileNames[osType]);
        boolean needsRefresh = (!localNativeFile.exists()) || localNativeFile.lastModified() != lastModified;
        if (needsRefresh) {
            displayMessage("Updating local version of the native libraries");
            File localJarFile = new File(installDir, nativeLibsJarNames[osType]);
            try {
                saveNativesJarLocally(localJarFile, urlConnection);
            } catch (IOException ioe) {
                ioe.printStackTrace();
                displayError("Unable to install the native file locally");
                return;
            }
            InputStream is = null;
            BufferedOutputStream out = null;
            try {
                JarFile jf = new JarFile(localJarFile);
                JarEntry nativeLibEntry = findNativeEntry(jf);
                if (nativeLibEntry == null) {
                    displayError("native library not found in jar file");
                } else {
                    is = jf.getInputStream(nativeLibEntry);
                    int totalLength = (int) nativeLibEntry.getSize();
                    try {
                        out = new BufferedOutputStream(new FileOutputStream(localNativeFile));
                    } catch (FileNotFoundException ex) {
                        ex.printStackTrace();
                        return;
                    }
                    byte[] buffer = new byte[1024];
                    int sum = 0;
                    int len;
                    try {
                        while ((len = is.read(buffer)) > 0) {
                            out.write(buffer, 0, len);
                            sum += len;
                            int percent = (100 * sum / totalLength);
                            displayMessage("Installing native files");
                            progressBar.setValue(percent);
                        }
                        displayMessage("Download complete");
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                        displayMessage("An error has occured during native library download");
                        return;
                    } finally {
                        if (out != null) {
                            try {
                                out.close();
                            } catch (IOException ignore) {
                            }
                        }
                    }
                    if (checkNativeCertificates(nativeLibEntry.getCertificates())) {
                        localNativeFile.setLastModified(lastModified);
                        loadNativesAndStart(localNativeFile);
                    } else {
                        displayError("The native librairies aren't properly signed");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException ignore) {
                    }
                }
            }
        } else {
            loadNativesAndStart(localNativeFile);
        }
    }
} </s>
