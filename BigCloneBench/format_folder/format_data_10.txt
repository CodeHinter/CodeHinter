<s>class temp {    public static void fileCopy(File sourceFile, File destFile) throws IOException {
        FileChannel source = null;
        FileChannel destination = null;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(destFile);
            source = fis.getChannel();
            destination = fos.getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            fis.close();
            fos.close();
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
} </s>
<s>class temp {    public void doActionxxx() {
        try {
            System.out.println("app: ggc");
            String server_name = "http://192.168.4.3:8080/";
            server_name = server_name.trim();
            if (server_name.length() == 0) {
                server_name = "http://www.atech-software.com/";
            } else {
                if (!server_name.startsWith("http://")) server_name = "http://" + server_name;
                if (!server_name.endsWith("/")) server_name = server_name + "/";
            }
            URL url = new URL(server_name + "ATechUpdateGetFile?" + "" + "file_id=1" + "&" + "version_requested=1");
            InputStream is = url.openStream();
            RandomAccessFile raf = new RandomAccessFile("/home/andy/test.jpg", "rw");
            ArrayList<Integer> list = new ArrayList<Integer>();
            float size = 671200;
            long current_size = 0;
            System.out.println("File size: " + is.available());
            byte[] array = new byte[1024];
            while (is.available() > 0) {
                if (is.available() < 1024) {
                    array = new byte[is.available()];
                }
                is.read(array);
                raf.write(array);
                current_size += array.length;
                System.out.println("Progress: " + ((current_size / size) * 100));
            }
            System.out.println("Size Arr: " + list.size());
            CheckSumUtility csu = new CheckSumUtility();
            System.out.println("Checksum: " + csu.getChecksumValue("/home/andy/test.jpg"));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
} </s>
<s>class temp {    private String hashKey(String key) {
        String hashed = "";
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(key.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashed = hash.toString(16);
        } catch (Exception ex) {
            ex.printStackTrace();
            hashed = String.valueOf(key.hashCode());
        }
        return hashed;
    }
} </s>
<s>class temp {    private byte[] getMD5(String string) throws IMException {
        byte[] buffer = null;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(string.getBytes("utf-8"));
            buffer = md.digest();
            buffer = getHexString(buffer);
        } catch (NoSuchAlgorithmException e) {
            throw new IMException(e);
        } catch (UnsupportedEncodingException ue) {
            throw new IMException(ue);
        }
        return buffer;
    }
} </s>
<s>class temp {    public void load(String url) throws IOException {
        this.url = url;
        int col = url.indexOf(':');
        if (col > 1 && col < 5) {
            load(new URL(url).openStream());
        } else {
            if (new File(url).exists()) {
                System.out.println("Loading JAD from file : " + url);
                FileInputStream fin = new FileInputStream(url);
                try {
                    load(fin);
                } finally {
                    fin.close();
                }
            } else {
                InputStream in = getClass().getResourceAsStream(url);
                if (in != null) {
                    System.out.println("Loading JAD from classpath : " + url);
                    load(in);
                } else {
                    throw new IOException("\"" + url + "\" was found in file system or classpath");
                }
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            PrintUtil.prt("arguments: sourcefile, destfile");
            System.exit(1);
        }
        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();
        ByteBuffer buff = ByteBuffer.allocate(BSIZE);
        while (in.read(buff) != -1) {
            PrintUtil.prt("%%%");
            buff.flip();
            out.write(buff);
            buff.clear();
        }
    }
} </s>
<s>class temp {                        public Constructor run() throws Exception {
                            String path = "META-INF/services/" + BeanletApplicationContext.class.getName();
                            ClassLoader loader = Thread.currentThread().getContextClassLoader();
                            final Enumeration<URL> urls;
                            if (loader == null) {
                                urls = BeanletApplicationContext.class.getClassLoader().getResources(path);
                            } else {
                                urls = loader.getResources(path);
                            }
                            while (urls.hasMoreElements()) {
                                URL url = urls.nextElement();
                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                                try {
                                    String className = null;
                                    while ((className = reader.readLine()) != null) {
                                        final String name = className.trim();
                                        if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) {
                                            final Class<?> cls;
                                            if (loader == null) {
                                                cls = Class.forName(name);
                                            } else {
                                                cls = Class.forName(name, true, loader);
                                            }
                                            int m = cls.getModifiers();
                                            if (BeanletApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {
                                                Constructor constructor = cls.getDeclaredConstructor();
                                                if (!Modifier.isPublic(constructor.getModifiers())) {
                                                    constructor.setAccessible(true);
                                                }
                                                return constructor;
                                            } else {
                                                throw new ClassCastException(cls.getName());
                                            }
                                        }
                                    }
                                } finally {
                                    reader.close();
                                }
                            }
                            throw new BeanletApplicationException("No " + "BeanletApplicationContext implementation " + "found.");
                        }
} </s>
<s>class temp {        public synchronized FTPClient getFTPClient(String User, String Password) throws IOException {
            if (logger.isDebugEnabled()) {
                logger.debug("getFTPClient(String, String) - start");
            }
            while ((counter >= maxClients)) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    logger.error("getFTPClient(String, String)", e);
                    e.printStackTrace();
                }
            }
            FTPClient result = null;
            String key = User.concat(Password);
            logger.debug("versuche vorhandenen FTPClient aus Liste zu lesen");
            if (Clients != null) {
                if (Clients.containsKey(key)) {
                    LinkedList ClientList = (LinkedList) Clients.get(key);
                    if (!ClientList.isEmpty()) do {
                        result = (FTPClient) ClientList.getLast();
                        logger.debug("-- hole einen Client aus der Liste: " + result.toString());
                        ClientList.removeLast();
                        if (!result.isConnected()) {
                            logger.debug("---- nicht mehr verbunden.");
                            result = null;
                        } else {
                            try {
                                result.changeWorkingDirectory("/");
                            } catch (IOException e) {
                                logger.debug("---- schmei t Exception bei Zugriff.");
                                result = null;
                            }
                        }
                    } while (result == null && !ClientList.isEmpty());
                    if (ClientList.isEmpty()) {
                        Clients.remove(key);
                    }
                } else {
                }
            } else logger.debug("-- keine Liste vorhanden.");
            if (result == null) {
                logger.debug("Kein FTPCLient verf gbar, erstelle einen neuen.");
                result = new FTPClient();
                logger.debug("-- Versuche Connect");
                result.connect(Host);
                logger.debug("-- Versuche Login");
                result.login(User, Password);
                result.setFileType(FTPClient.BINARY_FILE_TYPE);
                if (counter == maxClients - 1) {
                    RemoveBufferedClient();
                }
            }
            logger.debug("OK: neuer FTPClient ist " + result.toString());
            ;
            counter++;
            if (logger.isDebugEnabled()) {
                logger.debug("getFTPClient(String, String) - end");
            }
            return result;
        }
} </s>
<s>class temp {    protected void fixupCategoryAncestry(Context context) throws DataStoreException {
        Connection db = null;
        Statement s = null;
        try {
            db = context.getConnection();
            db.setAutoCommit(false);
            s = db.createStatement();
            s.executeUpdate("delete from category_ancestry");
            walkTreeFixing(db, CATEGORYROOT);
            db.commit();
            context.put(Form.ACTIONEXECUTEDTOKEN, "Category Ancestry regenerated");
        } catch (SQLException sex) {
            try {
                db.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            throw new DataStoreException("Failed to refresh category ancestry");
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (db != null) {
                context.releaseConnection(db);
            }
        }
    }
} </s>
<s>class temp {    @Override
    protected byte[] fetch0() throws IOException {
        if (sourceFile.getProtocol().equalsIgnoreCase("jar")) {
            throw new IOException("Jar protocol unsupported!");
        } else {
            URL url;
            if (sourceFile.getFile().endsWith(CLASS_FILE_EXTENSION)) {
                url = sourceFile;
            } else {
                url = new URL(sourceFile, className.replace(PACKAGE_SEPARATOR, URL_DIRECTORY_SEPARATOR) + CLASS_FILE_EXTENSION);
            }
            InputStream stream = url.openStream();
            try {
                ByteArrayOutputStream output = new ByteArrayOutputStream();
                byte[] buffer = new byte[PACKET_SIZE];
                int bytesRead;
                while ((bytesRead = stream.read(buffer, 0, buffer.length)) != -1) {
                    output.write(buffer, 0, bytesRead);
                }
                return output.toByteArray();
            } finally {
                stream.close();
            }
        }
    }
} </s>
<s>class temp {    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance("MD5");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = "0" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
} </s>
<s>class temp {    public static String generateSHA1(final String data) {
        final StringBuilder hash = new StringBuilder(40);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance("sha1");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = "0" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
} </s>
<s>class temp {    public Reader create(final URI url) throws IOException {
        this.url = url;
        if (!url.isAbsolute()) {
            return new FileReader(new File(url.toString()));
        }
        URLConnection connection = url.toURL().openConnection();
        connection.setDoInput(true);
        final InputStream inputStream = connection.getInputStream();
        return new InputStreamReader(inputStream);
    }
} </s>
<s>class temp {    private void copyResource(String relResourceName) {
        String projectName = layout.getRootDir().getName();
        String resourceName = "/protoj/" + projectName + "/" + relResourceName;
        InputStream source = getClass().getResourceAsStream(resourceName);
        if (source == null) {
            throw new RuntimeException("couldn't find resource " + resourceName);
        }
        File dest = new File(layout.getRootDir(), relResourceName);
        dest.getParentFile().mkdirs();
        dest.createNewFile();
        InputStreamReader in = new InputStreamReader(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                IOUtils.closeQuietly(out);
            }
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            if (System.getProperty("os.name").toUpperCase().indexOf("WIN") != -1) {
                int maxCount = (64 * 1024 * 1024) - (32 * 1024);
                long size = inChannel.size();
                long position = 0;
                while (position < size) {
                    position += inChannel.transferTo(position, maxCount, outChannel);
                }
            } else {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            }
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    public JSONObject executeJSON(final String path, final JSONObject jsRequest) throws IOException, HttpException, JSONException {
        final HttpPost httpRequest = newHttpPost(path);
        httpRequest.setHeader("Content-Type", "application/json");
        final String request = jsRequest.toString();
        httpRequest.setEntity(new StringEntity(request));
        final HttpResponse httpResponse = executeHttp(httpRequest);
        final String response = EntityUtils.toString(httpResponse.getEntity());
        return new JSONObject(response);
    }
} </s>
<s>class temp {    public HTTPResponse makeRequest(BasicHttpRequest request) throws IOException {
        try {
            if (!conn.isOpen()) {
                logger.warn(ApacheHTTP.class, "Creating socket");
                Socket socket = getSocket(host.getHostName(), host.getPort(), ssl, true);
                conn.bind(socket, params);
            }
            HttpContext context = new BasicHttpContext(null);
            context.setAttribute(ExecutionContext.HTTP_CONNECTION, conn);
            context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, host);
            context.setAttribute(ExecutionContext.HTTP_REQUEST, request);
            request.setParams(params);
            httpexecutor.preProcess(request, httpproc, context);
            HttpResponse response = httpexecutor.execute(request, conn, context);
            httpexecutor.postProcess(response, httpproc, context);
            if (!connStrategy.keepAlive(response, context)) keepAlive = false;
            int statusCode = response.getStatusLine().getStatusCode();
            HttpEntity resp = response.getEntity();
            if (statusCode >= 400) {
                HTTPEntityInfo info = new HTTPEntityInfo((int) resp.getContentLength(), "", resp.getContentType().getValue());
                byte[] bytes = IOUtil.toByteArray(resp.getContent());
                throw new HTTPErrorResponse(response.getStatusLine().getReasonPhrase(), statusCode + "", bytes, info);
            } else {
                Header lastmodHeader = response.getLastHeader("last-modified");
                String lastmod = lastmodHeader == null ? "" : lastmodHeader.getValue();
                Header contentType = resp.getContentType();
                HTTPEntityInfo info = new HTTPEntityInfo((int) resp.getContentLength(), lastmod, contentType == null ? null : contentType.getValue());
                return new HTTPResponse(info, resp.getContent());
            }
        } catch (HttpException he) {
            throw new IOException(he);
        }
    }
} </s>
<s>class temp {    public String loadURL(URL url) {
        String retVal = "";
        try {
            InputStream inputStream = url.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            String line = bufferedReader.readLine();
            retVal += line + "\n";
            while (line != null) {
                System.out.println(line);
                line = bufferedReader.readLine();
                if (line != null) retVal += line + "\n";
            }
            bufferedReader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            retVal = e.getMessage();
        }
        return retVal;
    }
} </s>
<s>class temp {        public boolean check(Object credentials) {
            try {
                byte[] digest = null;
                if (credentials instanceof Password || credentials instanceof String) {
                    synchronized (__md5Lock) {
                        if (__md == null) __md = MessageDigest.getInstance("MD5");
                        __md.reset();
                        __md.update(credentials.toString().getBytes(StringUtil.__ISO_8859_1));
                        digest = __md.digest();
                    }
                    if (digest == null || digest.length != _digest.length) return false;
                    for (int i = 0; i < digest.length; i++) if (digest[i] != _digest[i]) return false;
                    return true;
                } else if (credentials instanceof MD5) {
                    MD5 md5 = (MD5) credentials;
                    if (_digest.length != md5._digest.length) return false;
                    for (int i = 0; i < _digest.length; i++) if (_digest[i] != md5._digest[i]) return false;
                    return true;
                } else if (credentials instanceof Credential) {
                    return ((Credential) credentials).check(this);
                } else {
                    Log.warn("Can't check " + credentials.getClass() + " against MD5");
                    return false;
                }
            } catch (Exception e) {
                Log.warn(e);
                return false;
            }
        }
} </s>
<s>class temp {        public static String digest(String password) {
            try {
                byte[] digest;
                synchronized (__md5Lock) {
                    if (__md == null) {
                        try {
                            __md = MessageDigest.getInstance("MD5");
                        } catch (Exception e) {
                            Log.warn(e);
                            return null;
                        }
                    }
                    __md.reset();
                    __md.update(password.getBytes(StringUtil.__ISO_8859_1));
                    digest = __md.digest();
                }
                return __TYPE + TypeUtil.toString(digest, 16);
            } catch (Exception e) {
                Log.warn(e);
                return null;
            }
        }
} </s>
<s>class temp {    public void actionPerformed(ActionEvent ae) {
        String actionCommand = ae.getActionCommand();
        if (actionCommand == null) {
            return;
        }
        if (DataManager.SHOW_DEBUG) {
            System.out.println("Action command : " + actionCommand);
        }
        DataManager dataManager = ClientDirector.getDataManager();
        PlayerImpl myPlayer = dataManager.getMyPlayer();
        if (!myPlayer.getLocation().isRoom() && actionCommand.equals("createChatRoom")) {
            JOptionPane.showMessageDialog(null, "Sorry, but you can not create/leave chat channels\n" + "on World/Town Maps.", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (actionCommand.equals("createChatRoom")) {
            WotlasLocation chatRoomLocation = myPlayer.getLocation();
            String chatRoomName = JOptionPane.showInputDialog("Please enter a Name:");
            if (chatRoomName == null || chatRoomName.length() == 0) {
                return;
            }
            if (this.tabbedPane.getTabCount() >= ChatRoom.MAXIMUM_CHATROOMS_PER_ROOM - 1) {
                this.b_createChatRoom.setEnabled(false);
            } else {
                this.b_createChatRoom.setEnabled(true);
            }
            myPlayer.sendMessage(new ChatRoomCreationMessage(chatRoomName, myPlayer.getPrimaryKey()));
        } else if (actionCommand.equals("leaveChatRoom")) {
            if (!this.currentPrimaryKey.equals(ChatRoom.DEFAULT_CHAT)) {
                myPlayer.sendMessage(new RemPlayerFromChatRoomMessage(myPlayer.getPrimaryKey(), this.currentPrimaryKey));
            }
        } else if (actionCommand.equals("helpChat")) {
            DataManager dManager = ClientDirector.getDataManager();
            dManager.sendMessage(new SendTextMessage(dManager.getMyPlayer().getPrimaryKey(), dManager.getMyPlayer().getPlayerName(), getMyCurrentChatPrimaryKey(), "/help", ChatRoom.NORMAL_VOICE_LEVEL));
        } else if (actionCommand.equals("imageChat")) {
            String imageURL = JOptionPane.showInputDialog("Please enter your image's URL:\nExample: http://wotlas.sf.net/images/wotlas.gif");
            if (imageURL == null || imageURL.length() == 0) {
                return;
            }
            try {
                URL url = new URL(imageURL);
                URLConnection urlC = url.openConnection();
                urlC.connect();
                String ctype = urlC.getContentType();
                if (!ctype.startsWith("image/")) {
                    JOptionPane.showMessageDialog(null, "The specified URL does not refer to an image !", "Information", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                if (urlC.getContentLength() > 50 * 1024) {
                    JOptionPane.showMessageDialog(null, "The specified image is too big (above 50kB).", "Information", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } catch (Exception ex) {
                Debug.signal(Debug.ERROR, this, "Failed to get image: " + ex);
                JOptionPane.showMessageDialog(null, "Failed to get the specified image...\nCheck your URL.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            DataManager dManager = ClientDirector.getDataManager();
            dManager.sendMessage(new SendTextMessage(dManager.getMyPlayer().getPrimaryKey(), dManager.getMyPlayer().getPlayerName(), getMyCurrentChatPrimaryKey(), "<img src='" + imageURL + "'>", ChatRoom.NORMAL_VOICE_LEVEL));
        } else {
            if (DataManager.SHOW_DEBUG) {
                System.out.println("Err : unknown actionCommand");
                System.out.println("No action command found!");
            }
        }
    }
} </s>
<s>class temp {    public static void copyFile(File source, File destination, long copyLength) throws IOException {
        if (!source.exists()) {
            String message = "File " + source + " does not exist";
            throw new FileNotFoundException(message);
        }
        if (destination.getParentFile() != null && !destination.getParentFile().exists()) {
            forceMkdir(destination.getParentFile());
        }
        if (destination.exists() && !destination.canWrite()) {
            String message = "Unable to open file " + destination + " for writing.";
            throw new IOException(message);
        }
        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {
            String message = "Unable to write file " + source + " on itself.";
            throw new IOException(message);
        }
        if (copyLength == 0) {
            truncateFile(destination, 0);
        }
        FileInputStream input = null;
        FileOutputStream output = null;
        try {
            input = new FileInputStream(source);
            output = new FileOutputStream(destination);
            long lengthLeft = copyLength;
            byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)];
            int read;
            while (lengthLeft > 0) {
                read = input.read(buffer);
                if (read == -1) {
                    break;
                }
                lengthLeft -= read;
                output.write(buffer, 0, read);
            }
            output.flush();
            output.getFD().sync();
        } finally {
            IOUtil.closeQuietly(input);
            IOUtil.closeQuietly(output);
        }
        destination.setLastModified(source.lastModified());
    }
} </s>
<s>class temp {    public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException {
        if (destFile.exists()) {
            throw new FileHandlingException(FileHandlingException.FILE_ALREADY_EXISTS);
        }
        if (!sourceFile.exists()) {
            return;
        }
        boolean succ = sourceFile.renameTo(destFile);
        if (succ) {
            NLogger.warn(FileUtils.class, "First renameTo operation worked!");
            return;
        }
        NLogger.warn(FileUtils.class, "First renameTo operation failed.");
        System.gc();
        Thread.yield();
        succ = sourceFile.renameTo(destFile);
        if (succ) {
            return;
        }
        NLogger.warn(FileUtils.class, "Second renameTo operation failed.");
        FileInputStream input = null;
        FileOutputStream output = null;
        try {
            input = new FileInputStream(sourceFile);
            output = new FileOutputStream(destFile);
            long lengthLeft = sourceFile.length();
            byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)];
            int read;
            while (lengthLeft > 0) {
                read = input.read(buffer);
                if (read == -1) {
                    break;
                }
                lengthLeft -= read;
                output.write(buffer, 0, read);
            }
        } catch (IOException exp) {
            NLogger.warn(FileUtils.class, "Third renameTo operation failed.");
            throw new FileHandlingException(FileHandlingException.RENAME_FAILED, exp);
        } finally {
            IOUtil.closeQuietly(input);
            IOUtil.closeQuietly(output);
        }
        destFile.setLastModified(sourceFile.lastModified());
        FileUtils.deleteFileMultiFallback(sourceFile);
    }
} </s>
<s>class temp {    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException("Destination '" + destFile + "' exists but is a directory");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
} </s>
<s>class temp {    public static void rewrite(String[] args) throws IOException, CodeCheckException {
        ClassWriter writer = new ClassWriter();
        writer.readClass(new FileInputStream(args[0]));
        for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) {
            MethodInfo method = (MethodInfo) i.next();
            CodeAttribute attribute = method.getCodeAttribute();
            int origStack = attribute.getMaxStack();
            System.out.print(method.getName());
            attribute.codeCheck();
            System.out.println(" " + origStack + " " + attribute.getMaxStack());
        }
        BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1]));
        writer.writeClass(outStream);
        outStream.close();
    }
} </s>
<s>class temp {    public static void testclass(String[] args) throws IOException, CodeCheckException {
        ClassWriter writer = new ClassWriter();
        writer.emptyClass(ClassWriter.ACC_PUBLIC, "TestClass", "java/lang/Object");
        MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, "main", "([Ljava/lang/String;)V");
        CodeAttribute attribute = newMethod.getCodeAttribute();
        int constantIndex = writer.getStringConstantIndex("It's alive! It's alive!!");
        int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;");
        int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
        ArrayList instructions = new ArrayList();
        byte[] operands;
        operands = new byte[2];
        NetByte.intToPair(fieldRefIndex, operands, 0);
        instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("getstatic"), 0, operands, false));
        operands = new byte[1];
        operands[0] = (byte) constantIndex;
        instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("ldc"), 0, operands, false));
        operands = new byte[2];
        NetByte.intToPair(methodRefIndex, operands, 0);
        instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false));
        instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("return"), 0, null, false));
        attribute.insertInstructions(0, 0, instructions);
        attribute.setMaxLocals(1);
        attribute.codeCheck();
        System.out.println("constantIndex=" + constantIndex + " fieldRef=" + fieldRefIndex + " methodRef=" + methodRefIndex);
        writer.writeClass(new FileOutputStream("c:/cygnus/home/javaodb/classes/TestClass.class"));
        writer.readClass(new FileInputStream("c:/cygnus/home/javaodb/classes/TestClass.class"));
    }
} </s>
<s>class temp {    public static void entering(String[] args) throws IOException, CodeCheckException {
        ClassWriter writer = new ClassWriter();
        writer.readClass(new BufferedInputStream(new FileInputStream(args[0])));
        int constantIndex = writer.getStringConstantIndex("Entering ");
        int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;");
        int printlnRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
        int printRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "print", "(Ljava/lang/String;)V");
        for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) {
            MethodInfo method = (MethodInfo) i.next();
            if (method.getName().equals("readConstant")) continue;
            CodeAttribute attribute = method.getCodeAttribute();
            ArrayList instructions = new ArrayList(10);
            byte[] operands;
            operands = new byte[2];
            NetByte.intToPair(fieldRefIndex, operands, 0);
            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("getstatic"), 0, operands, false));
            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("dup"), 0, null, false));
            instructions.add(Instruction.appropriateLdc(constantIndex, false));
            operands = new byte[2];
            NetByte.intToPair(printRefIndex, operands, 0);
            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false));
            instructions.add(Instruction.appropriateLdc(writer.getStringConstantIndex(method.getName()), false));
            operands = new byte[2];
            NetByte.intToPair(printlnRefIndex, operands, 0);
            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false));
            attribute.insertInstructions(0, 0, instructions);
            attribute.codeCheck();
        }
        BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1]));
        writer.writeClass(outStream);
        outStream.close();
    }
} </s>
<s>class temp {    private void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        final URL url = new URL("http://www.ebi.ac.uk/Tools/webservices/psicquic/registry/registry?action=ACTIVE&format=txt");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        Map<String, String> psiqcuicServices = new HashMap<String, String>();
        while ((str = in.readLine()) != null) {
            final int idx = str.indexOf('=');
            psiqcuicServices.put(str.substring(0, idx), str.substring(idx + 1, str.length()));
        }
        in.close();
        System.out.println("Found " + psiqcuicServices.size() + " active service(s).");
        for (Object o : psiqcuicServices.keySet()) {
            String serviceName = (String) o;
            String serviceUrl = psiqcuicServices.get(serviceName);
            System.out.println(serviceName + " -> " + serviceUrl);
            UniversalPsicquicClient client = new UniversalPsicquicClient(serviceUrl);
            try {
                SearchResult<?> result = client.getByInteractor("brca2", 0, 50);
                System.out.println("Interactions found: " + result.getTotalCount());
                for (BinaryInteraction binaryInteraction : result.getData()) {
                    String interactorIdA = binaryInteraction.getInteractorA().getIdentifiers().iterator().next().getIdentifier();
                    String interactorIdB = binaryInteraction.getInteractorB().getIdentifiers().iterator().next().getIdentifier();
                    String interactionAc = "-";
                    if (!binaryInteraction.getInteractionAcs().isEmpty()) {
                        CrossReference cr = (CrossReference) binaryInteraction.getInteractionAcs().iterator().next();
                        interactionAc = cr.getIdentifier();
                    }
                    System.out.println("\tInteraction (" + interactionAc + "): " + interactorIdA + " interacts with " + interactorIdB);
                }
            } catch (Throwable e) {
                System.err.println("Service is down! " + serviceName + "(" + serviceUrl + ")");
            }
        }
    }
} </s>
<s>class temp {    @Override
    public String getLatestApplicationVersion() {
        String latestVersion = null;
        String latestVersionInfoURL = "http://movie-browser.googlecode.com/svn/site/latest";
        LOGGER.info("Checking latest version info from: " + latestVersionInfoURL);
        BufferedReader in = null;
        try {
            LOGGER.info("Fetcing latest version info from: " + latestVersionInfoURL);
            URL url = new URL(latestVersionInfoURL);
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                latestVersion = str;
            }
        } catch (Exception ex) {
            LOGGER.error("Error fetching latest version info from: " + latestVersionInfoURL, ex);
        } finally {
            try {
                in.close();
            } catch (Exception ex) {
                LOGGER.error("Could not close inputstream", ex);
            }
        }
        return latestVersion;
    }
} </s>
<s>class temp {    protected void assignListeners() {
        groupsList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent event) {
                refreshInfo();
            }
        });
        saveButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent event) {
                JFileChooser fileDialog = new JFileChooser(".");
                fileDialog.setFileFilter(ReaderData.mkExtensionFileFilter(".grp", "Group Files"));
                int outcome = fileDialog.showSaveDialog((Frame) null);
                if (outcome == JFileChooser.APPROVE_OPTION) {
                    assert (fileDialog.getCurrentDirectory() != null);
                    assert (fileDialog.getSelectedFile() != null);
                    String fileName = fileDialog.getCurrentDirectory().toString() + File.separator + fileDialog.getSelectedFile().getName();
                    try {
                        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName)));
                        ReaderWriterGroup.write(out, writer);
                        System.err.println("Wrote groups informations to output '" + fileName + "'.");
                        out.close();
                    } catch (IOException e) {
                        System.err.println("error while writing (GroupManager.saveClt):");
                        e.printStackTrace();
                    }
                } else if (outcome == JFileChooser.CANCEL_OPTION) {
                }
            }
        });
        loadButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                JFileChooser fileDialog = new JFileChooser(".");
                fileDialog.setFileFilter(ReaderData.mkExtensionFileFilter(".grp", "Group Files"));
                int outcome = fileDialog.showOpenDialog((Frame) null);
                if (outcome == JFileChooser.APPROVE_OPTION) {
                    assert (fileDialog.getCurrentDirectory() != null);
                    assert (fileDialog.getSelectedFile() != null);
                    String fileName = fileDialog.getCurrentDirectory().toString() + File.separator + fileDialog.getSelectedFile().getName();
                    BufferedReader fileReader = null;
                    try {
                        fileReader = new BufferedReader(new FileReader(fileName));
                        ReaderWriterGroup.read(fileReader, writer);
                        fileReader.close();
                    } catch (Exception e) {
                        System.err.println("Exception while reading from file '" + fileName + "'.");
                        System.err.println(e);
                    }
                } else if (outcome == JFileChooser.CANCEL_OPTION) {
                }
            }
        });
        ItemListener propItemListener = new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent event) {
                int[] indices = groupsList.getSelectedIndices();
                for (int index : indices) {
                    Group group = getGroupFromListIndex(index);
                    if (group != null) {
                        if (event.getSource() instanceof JComboBox) {
                            JComboBox eventSource = (JComboBox) event.getSource();
                            if (eventSource == colorComboBox) {
                                Color color = colorComboBox.getSelectedColor();
                                assert (color != null);
                                group.setColor(color);
                                shapeComboBox.setColor(color);
                            } else if (eventSource == shapeComboBox) {
                                Shape shape = shapeComboBox.getSelectedShape();
                                assert (shape != null);
                                group.setShape(shape);
                            }
                        } else if (event.getSource() instanceof JCheckBox) {
                            JCheckBox eventSource = (JCheckBox) event.getSource();
                            if (eventSource == showGroupCheckBox) {
                                group.visible = showGroupCheckBox.isSelected();
                            } else if (eventSource == showGraphicInfoCheckBox) {
                                group.info = showGraphicInfoCheckBox.isSelected();
                            }
                        }
                    }
                }
                graph.notifyAboutGroupsChange(null);
            }
        };
        colorComboBox.addItemListener(propItemListener);
        shapeComboBox.addItemListener(propItemListener);
        showGroupCheckBox.addItemListener(propItemListener);
        showGraphicInfoCheckBox.addItemListener(propItemListener);
        showGroupfreeNodesCheckBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent event) {
                graph.getGroup(0).visible = showGroupfreeNodesCheckBox.isSelected();
                graph.notifyAboutGroupsChange(null);
            }
        });
        ActionListener propActionListener = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent event) {
                JButton botton = (JButton) event.getSource();
                Group group = getGroupFromListIndex(groupsList.getSelectedIndex());
                if (group != null) {
                    for (GraphVertex graphVertex : group) {
                        if (botton == showLabelsButton) {
                            graphVertex.setShowName(NameVisibility.Priority.GROUPS, true);
                        } else if (botton == hideLabelsButton) {
                            graphVertex.setShowName(NameVisibility.Priority.GROUPS, false);
                        }
                    }
                    graph.notifyAboutGroupsChange(null);
                }
            }
        };
        showLabelsButton.addActionListener(propActionListener);
        hideLabelsButton.addActionListener(propActionListener);
        newButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent event) {
                String newGroupName = JOptionPane.showInputDialog(null, "Enter a name", "Name of the new group", JOptionPane.QUESTION_MESSAGE);
                if (newGroupName != null) {
                    if (graph.getGroup(newGroupName) == null) {
                        graph.addGroup(new Group(newGroupName, graph));
                    }
                }
            }
        });
        editButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent event) {
                Group group = getGroupFromListIndex(groupsList.getSelectedIndex());
                if (group != null) {
                    DialogEditGroup dialog = new DialogEditGroup(graph, group);
                    dialog.setModal(true);
                    dialog.setVisible(true);
                }
            }
        });
        deleteButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent event) {
                int index = groupsList.getSelectedIndex();
                if (index > 0 && index < graph.getNumberOfGroups() - 1) {
                    graph.removeGroup(index);
                }
            }
        });
        upButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent event) {
                int index = groupsList.getSelectedIndex();
                if (index < graph.getNumberOfGroups() - 1) {
                    graph.moveGroupUp(index);
                    groupsList.setSelectedIndex(index - 1);
                }
            }
        });
        downButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent event) {
                int index = groupsList.getSelectedIndex();
                if (index < graph.getNumberOfGroups() - 1) {
                    graph.moveGroupDown(index);
                    groupsList.setSelectedIndex(index + 1);
                }
            }
        });
    }
} </s>
<s>class temp {    private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException {
        if (local == null) throw new IllegalArgumentException("Must specify remote file");
        if (local.exists() && !local.canWrite()) throw new IOException("Cannot write to " + local);
        long lengthCurrent = local.exists() ? local.length() : -1l;
        if (lengthCurrent == 0) throw new IOException("Cannot get the length for " + local);
        long lastModifiedCurrent = local.exists() ? local.lastModified() : -1l;
        if (remote == null) throw new IllegalArgumentException("Must specify remote url");
        URLConnection urlConnection = remote.openConnection();
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(false);
        long lengthRemote = urlConnection.getContentLength();
        long lastModifiedRemote = urlConnection.getLastModified();
        if (lengthRemote == lengthCurrent) {
            LOGGER.fine("Not downloading " + remote + " of length " + lengthRemote + " and date " + (lastModifiedRemote > 0 ? new Date(lastModifiedRemote).toString() : "n/a") + " for " + local + " of length " + lengthCurrent + " and date " + new Date(lastModifiedCurrent));
            return false;
        }
        BufferedInputStream inputStream = null;
        BufferedOutputStream bufferedOutputStream = null;
        try {
            inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE);
            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local));
            byte[] buffer = new byte[BUFFER_SIZE];
            do {
                int count = inputStream.read(buffer);
                if (count < 0) break;
                bufferedOutputStream.write(buffer, 0, count);
            } while (true);
            return true;
        } finally {
            try {
                if (inputStream != null) inputStream.close();
            } catch (Throwable throwable) {
            }
            try {
                if (bufferedOutputStream != null) bufferedOutputStream.close();
            } catch (Throwable throwable) {
            }
        }
    }
} </s>
<s>class temp {    void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    public byte[] loadResource(String location) throws IOException {
        if ((location == null) || (location.length() == 0)) {
            throw new IOException("The given resource location must not be null and non empty.");
        }
        URL url = buildURL(location);
        URLConnection cxn = url.openConnection();
        InputStream is = null;
        try {
            byte[] byteBuffer = new byte[2048];
            ByteArrayOutputStream bos = new ByteArrayOutputStream(2048);
            is = cxn.getInputStream();
            int bytesRead = 0;
            while ((bytesRead = is.read(byteBuffer, 0, 2048)) >= 0) {
                bos.write(byteBuffer, 0, bytesRead);
            }
            return bos.toByteArray();
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
} </s>
<s>class temp {    public boolean resourceExists(String location) {
        if ((location == null) || (location.length() == 0)) {
            return false;
        }
        try {
            URL url = buildURL(location);
            URLConnection cxn = url.openConnection();
            InputStream is = null;
            try {
                byte[] byteBuffer = new byte[2048];
                is = cxn.getInputStream();
                while (is.read(byteBuffer, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
} </s>
<s>class temp {    public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {
        wabclient.Attributes prop = new wabclient.Attributes(attributes);
        try {
            if (tag.equals("window")) {
                if (prop == null) {
                    System.err.println("window without properties");
                    return;
                }
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                Color bgcolor = prop.getValue("bgcolor", Color.white);
                String caption = prop.getValue("caption", "");
                layout = prop.getValue("layout", 0);
                boolean statusbar = prop.getValue("statusbar", false);
                if (sheet.opentype == WABSheet.LAYERED) {
                    Point pos = frame.getNextMDIPos();
                    sheet.setBounds(pos.x, pos.y, 400, 200);
                    sheet.setNormalBounds(new Rectangle(pos.x, pos.y, 400, 200));
                } else {
                    sheet.setBounds(x, y, width, height);
                    sheet.setNormalBounds(new Rectangle(x, y, width, height));
                }
                if (sheet.opentype == WABSheet.MAXIMIZED) sheet.setMaximum(true); else sheet.setMaximum(false);
                sheet.setTitle(caption);
                frame.addSheetToMenu(caption);
                sheet.setBackground(bgcolor);
                if (layout == 1) sheet.getContentPane().setLayout(new FlowLayout()); else if (layout == 2) sheet.getContentPane().setLayout(new BorderLayout()); else sheet.getContentPane().setLayout(null);
            } else if (tag.equals("menu")) {
                if (prop == null) {
                    System.err.println("menu without properties");
                    return;
                }
                String id = prop.getValue("id", "");
                String label = prop.getValue("label", "");
                if ((id != null && id.equals("WINDOW_MENU") || label.equalsIgnoreCase("window"))) {
                    windowMenu = new JMenu();
                    menu = windowMenu;
                    sheet.setWindowMenu(menu);
                } else {
                    menu = new JMenu();
                }
                menu.setText(label);
                sheet.menubar.add(menu);
            } else if (tag.equals("menuitem")) {
                if (prop == null) {
                    System.err.println("menuitem without properties");
                    return;
                }
                JMenuItem item;
                String action = prop.getValue("action", "");
                String label = prop.getValue("label", "");
                boolean visible = prop.getValue("visible", true);
                String icon = prop.getValue("icon", "");
                if (action.equals("WINDOW_OVERLAPPED")) {
                    item = windowMenuOverlapped = new JMenuItem();
                    item.setActionCommand("10001");
                    item.addActionListener(frame);
                } else if (action.equals("WINDOW_TILE_HORIZONTALLY")) {
                    item = windowMenuTile = new JMenuItem();
                    item.setActionCommand("10002");
                    item.addActionListener(frame);
                } else if (action.equals("WINDOW_TILE_VERTICALLY")) {
                    item = windowMenuArrange = new JMenuItem();
                    item.setActionCommand("10003");
                    item.addActionListener(frame);
                } else {
                    item = new JMenuItem();
                    item.setActionCommand(action);
                    item.addActionListener((WABClient) global);
                }
                item.setText(label);
                if (!visible) menu.setVisible(false);
                menu.add(item);
                if (frame.getToolBar() != null) {
                    if (icon.length() > 0) {
                        try {
                            ImageIcon img = new ImageIcon(new URL(icon));
                            BufferedImage image = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);
                            Graphics g = image.createGraphics();
                            g.setColor(new Color(0, 0, 0, 0));
                            g.fillRect(0, 0, 25, 25);
                            g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null);
                            BufferedImage pressed = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);
                            g = pressed.createGraphics();
                            g.setColor(new Color(0, 0, 0, 0));
                            g.fillRect(0, 0, 25, 25);
                            g.drawImage(img.getImage(), 5, 5, 16, 16, (ImageObserver) null);
                            g.setColor(new Color(132, 132, 132));
                            g.drawLine(0, 0, 24, 0);
                            g.drawLine(0, 0, 0, 24);
                            g.setColor(new Color(255, 255, 255));
                            g.drawLine(24, 24, 24, 0);
                            g.drawLine(24, 24, 0, 24);
                            BufferedImage over = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);
                            g = over.createGraphics();
                            g.setColor(new Color(0, 0, 0, 0));
                            g.fillRect(0, 0, 25, 25);
                            g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null);
                            g.setColor(new Color(255, 255, 255));
                            g.drawLine(0, 0, 24, 0);
                            g.drawLine(0, 0, 0, 24);
                            g.setColor(new Color(132, 132, 132));
                            g.drawLine(24, 24, 24, 0);
                            g.drawLine(24, 24, 0, 24);
                            JButton b = new JButton(new ImageIcon(image));
                            b.setRolloverEnabled(true);
                            b.setPressedIcon(new ImageIcon(pressed));
                            b.setRolloverIcon(new ImageIcon(over));
                            b.setToolTipText(label);
                            b.setActionCommand(action);
                            b.setFocusPainted(false);
                            b.setBorderPainted(false);
                            b.setContentAreaFilled(false);
                            b.setMargin(new Insets(0, 0, 0, 0));
                            b.addActionListener(sheet);
                            sheet.toolbar.add(b);
                        } catch (Exception e) {
                        }
                    }
                }
            } else if (tag.equals("separator")) {
                menu.addSeparator();
            } else if (tag.equals("choice")) {
                if (prop == null) {
                    System.err.println("choice without properties");
                    return;
                }
                combo = new JComboBox();
                list = null;
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                String id = prop.getValue("id", "");
                Object constraints = prop.getValue("constraints");
                boolean editable = prop.getValue("editable", false);
                boolean visible = prop.getValue("visible", true);
                boolean enabled = prop.getValue("enabled", true);
                combo_text = prop.getValue("text", "");
                combo.setBounds(x, y, width, height);
                combo.setName((String) id);
                if (editable) {
                    combo.setEditable(editable);
                    combo.setSelectedItem(combo_text);
                }
                if (!visible) combo.setVisible(false);
                if (!enabled) combo.setEnabled(false);
                if (layout == 0) sheet.getContentPane().add(combo); else sheet.getContentPane().add(combo, constraints);
            } else if (tag.equals("list")) {
                if (prop == null) {
                    System.err.println("list without properties");
                    return;
                }
                list = new JList();
                combo = null;
                listdata = new Vector();
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                String id = prop.getValue("id", "");
                Object constraints = prop.getValue("constraints");
                list.setName((String) id);
                list.setListData(listdata);
                JScrollPane sp = new JScrollPane(list);
                sp.setBounds(x, y, width, height);
                if (layout == 0) sheet.getContentPane().add(sp); else sheet.getContentPane().add(sp, constraints);
            } else if (tag.equals("option")) {
                if (prop == null) {
                    System.err.println("choice.option without properties");
                    return;
                }
                String value = prop.getValue("value", "");
                String text = prop.getValue("text", "");
                if (list != null) listdata.addElement(new ComboOption(text, value));
                if (combo != null) {
                    ComboOption co = new ComboOption(text, value);
                    combo.addItem(co);
                    if (combo_text.equals(text.trim())) combo.setSelectedItem(co);
                }
            } else if (tag.equals("label")) {
                if (prop == null) {
                    System.err.println("label without properties");
                    return;
                }
                JLabel label = new JLabel();
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                String text = prop.getValue("text", "");
                Object constraints = prop.getValue("constraints");
                boolean visible = prop.getValue("visible", true);
                label.setBounds(x, y, width, height);
                label.setText(text);
                if (!visible) label.setVisible(false);
                if (layout == 0) sheet.getContentPane().add(label); else sheet.getContentPane().add(label, constraints);
            } else if (tag.equals("button")) {
                if (prop == null) {
                    System.err.println("button without properties");
                    return;
                }
                JButton btn = new JButton();
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                String id = prop.getValue("id", "");
                String text = prop.getValue("text", "");
                String onmouseup = prop.getValue("onmouseup", "");
                Object constraints = prop.getValue("constraints");
                btn.setBounds(x, y, width, height);
                btn.setText(text);
                btn.addActionListener(sheet);
                btn.setActionCommand(onmouseup);
                if (layout == 0) sheet.getContentPane().add(btn); else sheet.getContentPane().add(btn, constraints);
            } else if (tag.equals("radiobutton")) {
                if (prop == null) {
                    System.err.println("radiobutton without properties");
                    return;
                }
                JRadioButton rb = new JRadioButton();
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                String id = prop.getValue("id", "");
                String text = prop.getValue("text", "");
                Object constraints = prop.getValue("constraints");
                String checked = prop.getValue("checked", "false");
                rb.setBounds(x, y, width, height);
                rb.setText(text);
                rb.setName((String) id);
                rb.addActionListener(sheet);
                rb.setSelected(checked.equalsIgnoreCase("true"));
                if (layout == 0) sheet.getContentPane().add(rb); else sheet.getContentPane().add(rb, constraints);
            } else if (tag.equals("checkbox")) {
                if (prop == null) {
                    System.err.println("checkbox without properties");
                    return;
                }
                JCheckBox cb = new JCheckBox();
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                String id = prop.getValue("id", "");
                String text = prop.getValue("text", "");
                String onmouseup = prop.getValue("onmouseup", "");
                Object constraints = prop.getValue("constraints");
                String checked = prop.getValue("checked", "false");
                cb.setBounds(x, y, width, height);
                cb.setText(text);
                cb.setName((String) id);
                cb.setSelected(checked.equalsIgnoreCase("true"));
                if (layout == 0) sheet.getContentPane().add(cb); else sheet.getContentPane().add(cb, constraints);
            } else if (tag.equals("image")) {
                if (prop == null) {
                    System.err.println("image without properties");
                    return;
                }
                JLabel label = new JLabel();
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                String src = prop.getValue("src", "");
                Object constraints = prop.getValue("constraints");
                label.setIcon(new ImageIcon(new URL(src)));
                label.setBounds(x, y, width, height);
                if (layout == 0) sheet.getContentPane().add(label); else sheet.getContentPane().add(label, constraints);
            } else if (tag.equals("singlelineedit")) {
                if (prop == null) {
                    System.err.println("singlelineedit without properties");
                    return;
                }
                String pwd = prop.getValue("password", "");
                JTextField sle;
                if (pwd.equalsIgnoreCase("true")) sle = new JPasswordField(); else sle = new JTextField();
                int x = prop.getValue("x", 0);
                int y = prop.getValue("y", 0);
                int width = prop.getValue("width", 0);
                int height = prop.getValue("height", 0);
                Object id = prop.getValue("id");
                String text = prop.getValue("text", "");
                Object constraints = prop.getValue("constraints");
                sle.setBounds(x, y, width, height);
                sle.setText(text);
                sle.setName((String) id);
                if (layout == 0) sheet.getContentPane().add(sle); else sheet.getContentPane().add(sle, constraints);
            } else if (tag.equals("treeview")) {
                if (prop == null) {
                    System.err.println("treeview without properties");
                    return;
                }
                treeview_root = new DefaultMutableTreeNode("root");
                treeview = new JTree(treeview_root);
                Object constraints = prop.getValue("constraints");
                sheet.getContentPane().add(new JScrollPane(treeview), constraints);
            } else if (tag.equals("treeitem")) {
                if (prop == null) {
                    System.err.println("treeview.treeitem without properties");
                    return;
                }
                String text = prop.getValue("text", "");
                String value = prop.getValue("value", "");
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(text);
                treeview_root.add(node);
            } else if (tag.equals("table")) {
                if (prop == null) {
                    System.err.println("table without properties");
                    return;
                }
                String id = prop.getValue("id", "");
                table = new JTable();
                model = new DefaultTableModel() {

                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                table.setModel(model);
                table.setName((String) id);
                Object constraints = prop.getValue("constraints");
                sheet.getContentPane().add(new JScrollPane(table), constraints);
                rowNumber = 0;
                columnNumber = 0;
                headerWidths = new Vector();
            } else if (tag.equals("header")) {
                if (prop == null) {
                    System.err.println("table.header without properties");
                    return;
                }
                String text = prop.getValue("text", "");
                int width = prop.getValue("width", 0);
                headerWidths.addElement(new Integer(width));
                model.addColumn(text);
            } else if (tag.equals("row")) {
                rowNumber++;
                columnNumber = 0;
                model.setRowCount(rowNumber);
            } else if (tag.equals("column")) {
                columnNumber++;
                if (prop == null) {
                    System.err.println("table.column without properties");
                    return;
                }
                String value = prop.getValue("value", "");
                model.setValueAt(value, rowNumber - 1, columnNumber - 1);
            } else if (tag.equals("script")) {
                sheet.beginScript();
                String url = prop.getValue("src");
                if (url.length() > 0) {
                    try {
                        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                        String buffer;
                        while (true) {
                            buffer = r.readLine();
                            if (buffer == null) break;
                            sheet.script += buffer + "\n";
                        }
                        r.close();
                        sheet.endScript();
                    } catch (IOException ioe) {
                        System.err.println("[IOError] " + ioe.getMessage());
                        System.exit(0);
                    }
                }
            } else System.err.println("[sheet] unparsed tag: " + tag);
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }
} </s>
<s>class temp {    public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(pass.getBytes("UTF-8"));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException("No se pudo encriptar el password.", e);
        }
    }
} </s>
<s>class temp {    public Object process(Atom oAtm) throws IOException {
        File oFile;
        FileReader oFileRead;
        String sPathHTML;
        char cBuffer[];
        Object oReplaced;
        final String sSep = System.getProperty("file.separator");
        if (DebugFile.trace) {
            DebugFile.writeln("Begin FileDumper.process([Job:" + getStringNull(DB.gu_job, "") + ", Atom:" + String.valueOf(oAtm.getInt(DB.pg_atom)) + "])");
            DebugFile.incIdent();
        }
        if (bHasReplacements) {
            sPathHTML = getProperty("workareasput");
            if (!sPathHTML.endsWith(sSep)) sPathHTML += sSep;
            sPathHTML += getParameter("gu_workarea") + sSep + "apps" + sSep + "Mailwire" + sSep + "html" + sSep + getParameter("gu_pageset") + sSep;
            sPathHTML += getParameter("nm_pageset").replace(' ', '_') + ".html";
            if (DebugFile.trace) DebugFile.writeln("PathHTML = " + sPathHTML);
            oReplaced = oReplacer.replace(sPathHTML, oAtm.getItemMap());
            bHasReplacements = (oReplacer.lastReplacements() > 0);
        } else {
            oReplaced = null;
            if (null != oFileStr) oReplaced = oFileStr.get();
            if (null == oReplaced) {
                sPathHTML = getProperty("workareasput");
                if (!sPathHTML.endsWith(sSep)) sPathHTML += sSep;
                sPathHTML += getParameter("gu_workarea") + sSep + "apps" + sSep + "Mailwire" + sSep + "html" + sSep + getParameter("gu_pageset") + sSep + getParameter("nm_pageset").replace(' ', '_') + ".html";
                if (DebugFile.trace) DebugFile.writeln("PathHTML = " + sPathHTML);
                oFile = new File(sPathHTML);
                cBuffer = new char[new Long(oFile.length()).intValue()];
                oFileRead = new FileReader(oFile);
                oFileRead.read(cBuffer);
                oFileRead.close();
                if (DebugFile.trace) DebugFile.writeln(String.valueOf(cBuffer.length) + " characters readed");
                oReplaced = new String(cBuffer);
                oFileStr = new SoftReference(oReplaced);
            }
        }
        String sPathJobDir = getProperty("storage");
        if (!sPathJobDir.endsWith(sSep)) sPathJobDir += sSep;
        sPathJobDir += "jobs" + sSep + getParameter("gu_workarea") + sSep + getString(DB.gu_job) + sSep;
        FileWriter oFileWrite = new FileWriter(sPathJobDir + getString(DB.gu_job) + "_" + String.valueOf(oAtm.getInt(DB.pg_atom)) + ".html", true);
        oFileWrite.write((String) oReplaced);
        oFileWrite.close();
        iPendingAtoms--;
        if (DebugFile.trace) {
            DebugFile.writeln("End FileDumper.process([Job:" + getStringNull(DB.gu_job, "") + ", Atom:" + String.valueOf(oAtm.getInt(DB.pg_atom)) + "])");
            DebugFile.decIdent();
        }
        return oReplaced;
    }
} </s>
<s>class temp {    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream inputStream = url.openStream();
        try {
            return getAudioInputStream(inputStream);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
    }
} </s>
<s>class temp {    public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error("File transfer failed", e);
                }
            }
        }
    }
} </s>
<s>class temp {    public static void copyTo(File inFile, File outFile) throws IOException {
        char[] cbuff = new char[32768];
        BufferedReader reader = new BufferedReader(new FileReader(inFile));
        BufferedWriter writer = new BufferedWriter(new FileWriter(outFile));
        int readedBytes = 0;
        long absWrittenBytes = 0;
        while ((readedBytes = reader.read(cbuff, 0, cbuff.length)) != -1) {
            writer.write(cbuff, 0, readedBytes);
            absWrittenBytes += readedBytes;
        }
        reader.close();
        writer.close();
    }
} </s>
<s>class temp {    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (100, 'Living Thing')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (300, 'Dog')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (400, 'Sheltie')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (500, 'Eskimo')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (600, 'Person')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (700, 'Collar')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (800, 'Ball')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (401, 'Fido')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (501, 'Samantha')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (801, 'A collar')");
            stmt.executeQuery("select setval('objects_objectid_seq', 1000)");
            stmt.executeUpdate("insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)");
            stmt.executeUpdate("insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)");
            stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('color')");
            stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('weight')");
            stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('length')");
            stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('green', 'color')");
            stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('blue', 'color')");
            stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('light', 'weight')");
            stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('heavy', 'weight')");
            stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('short', 'length')");
            stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('long', 'length')");
            stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')");
            stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')");
            stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)");
            stmt.executeUpdate("insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')");
            stmt.executeUpdate("insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)");
            stmt.executeUpdate("insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)");
            stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')");
            stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')");
            stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')");
            stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')");
            stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')");
            stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')");
            stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')");
            stmt.executeUpdate("insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')");
            stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)");
            stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)");
            stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)");
            stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)");
            stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)");
            stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)");
            stmt.executeUpdate("insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)");
            stmt.executeUpdate("insert into FrameSlots (SlotName) values ('actor')");
            stmt.executeUpdate("insert into FrameSlots (SlotName) values ('origin')");
            stmt.executeUpdate("insert into FrameSlots (SlotName) values ('destination')");
            stmt.executeUpdate("insert into FrameSlots (SlotName) values ('object')");
            stmt.executeUpdate("insert into FrameSlots (SlotName) values ('instrument')");
            stmt.executeUpdate("insert into FrameSlots (SlotName) values ('beneficiary')");
            stmt.executeUpdate("insert into FrameSlots (SlotName) values ('location')");
            stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')");
            stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')");
            stmt.executeUpdate("insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')");
            stmt.executeUpdate("insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')");
            stmt.executeUpdate("insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')");
            stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('the', 1)");
            stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('a', 2)");
            stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('an', 2)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('S', 1)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('D', 10)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)");
            stmt.executeQuery("select setval('instructions_instructionid_seq', 1)");
            int next = 2;
            stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'throw', null, 0, null, null, null)");
            stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'test', null, 0, null, null, null)");
            stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (2, null, 'actor', 1, 'hasa', '300', '')");
            stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (2, null, 'instrument', 3, null, null, 'blue')");
            stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (1, null, null, 0, null, null, null)");
            stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'get', null, 0, null, null, null)");
            stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, 'drop', null, 0, null, null, null)");
            stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 2) + ", 1, " + (next + 0) + ")");
            stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 2) + ", 2, " + (next + 1) + ")");
            stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 3) + ", 1, " + (next + 1) + ")");
            stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 3) + ", 2, " + (next + 0) + ")");
            stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 4) + ", 1, " + (next + 2) + ")");
            stmt.executeUpdate("insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (" + (next + 4) + ", 2, " + (next + 3) + ")");
            stmt.executeQuery("select setval('transactions_transactionid_seq', 1)");
            stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 4) + ", 'throw something')");
            stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 5) + ", 'get something')");
            stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (" + (next + 6) + ", 'drop something')");
            stmt.executeUpdate("insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) " + "values (2, 'actor', 1, 'hasa', 'object', '', 3)");
            stmt.executeUpdate("insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) " + "values (2, 'object', 4, '', '', 'heavy', 4)");
            stmt.executeUpdate("insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', " + (next + 6) + ")");
            stmt.executeUpdate("insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', " + (next + 5) + ")");
            stmt.executeQuery("select setval('verbtransactions_verbid_seq', 1)");
            stmt.executeUpdate("insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)");
            stmt.executeUpdate("insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)");
            stmt.executeUpdate("update SystemProperties set value = 'Play Data' where name = 'DB Data Version'");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
} </s>
<s>class temp {    public static String MD5(String input) throws Exception {
        MessageDigest m = MessageDigest.getInstance("MD5");
        m.update(input.getBytes(), 0, input.length());
        input = new BigInteger(1, m.digest()).toString(16);
        if (input.length() == 31) input = "0" + input;
        return input;
    }
} </s>
<s>class temp {    public int getDBVersion() throws MigrationException {
        int dbVersion;
        PreparedStatement ps;
        try {
            Connection conn = getConnection();
            ps = conn.prepareStatement("SELECT version FROM " + getTablename());
            try {
                ResultSet rs = ps.executeQuery();
                try {
                    if (rs.next()) {
                        dbVersion = rs.getInt(1);
                        if (rs.next()) {
                            throw new MigrationException("Too many version in table: " + getTablename());
                        }
                    } else {
                        ps.close();
                        ps = conn.prepareStatement("INSERT INTO " + getTablename() + " (version) VALUES (?)");
                        ps.setInt(1, 1);
                        try {
                            ps.executeUpdate();
                        } finally {
                            ps.close();
                        }
                        dbVersion = 1;
                    }
                } finally {
                    rs.close();
                }
            } finally {
                ps.close();
            }
        } catch (SQLException e) {
            logger.log(Level.WARNING, "Could not access " + tablename + ": " + e);
            dbVersion = 0;
            Connection conn = getConnection();
            try {
                if (!conn.getAutoCommit()) {
                    conn.rollback();
                }
                conn.setAutoCommit(false);
            } catch (SQLException e1) {
                throw new MigrationException("Could not reset transaction state", e1);
            }
        }
        return dbVersion;
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out, long maxCount) throws IOException {
        final FileChannel sourceChannel = new FileInputStream(in).getChannel();
        final FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        if (maxCount == 0) maxCount = sourceChannel.size();
        try {
            final long size = sourceChannel.size();
            long position = 0;
            while (position < size) {
                position += sourceChannel.transferTo(position, maxCount, destinationChannel);
            }
        } finally {
            sourceChannel.close();
            destinationChannel.close();
        }
    }
} </s>
<s>class temp {    public static final File getFile(final URL url) throws IOException {
        final File shortcutFile;
        final File currentFile = files.get(url);
        if (currentFile == null || !currentFile.exists()) {
            shortcutFile = File.createTempFile("windowsIsLame", ".vbs");
            shortcutFile.deleteOnExit();
            files.put(url, shortcutFile);
            final InputStream stream = url.openStream();
            final FileOutputStream out = new FileOutputStream(shortcutFile);
            try {
                StreamUtils.copy(stream, out);
            } finally {
                out.close();
                stream.close();
            }
        } else shortcutFile = currentFile;
        return shortcutFile;
    }
} </s>
<s>class temp {    public void run() {
        RandomAccessFile file = null;
        InputStream stream = null;
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty("Range", "bytes=" + downloaded + "-");
            connection.connect();
            if (connection.getResponseCode() / 100 != 2) {
                error();
            }
            int contentLength = connection.getContentLength();
            if (contentLength < 1) {
                error();
            }
            if (size == -1) {
                size = contentLength;
                stateChanged();
            }
            file = new RandomAccessFile(saveas, "rw");
            file.seek(downloaded);
            stream = connection.getInputStream();
            while (status == DOWNLOADING) {
                byte buffer[];
                if (size - downloaded > MAX_BUFFER_SIZE) {
                    buffer = new byte[MAX_BUFFER_SIZE];
                } else {
                    buffer = new byte[size - downloaded];
                }
                int read = stream.read(buffer);
                if (read == -1) break;
                file.write(buffer, 0, read);
                downloaded += read;
                stateChanged();
            }
            if (status == DOWNLOADING) {
                status = COMPLETE;
                stateChanged();
            }
        } catch (Exception e) {
            e.printStackTrace();
            error();
        } finally {
            if (file != null) {
                try {
                    file.close();
                } catch (Exception e) {
                }
            }
            if (stream != null) {
                try {
                    stream.close();
                } catch (Exception e) {
                }
            }
        }
    }
} </s>
<s>class temp {    public static String generateSHA1Digest(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance("SHA-1");
            byte[] sha1hash = new byte[40];
            md.update(text.getBytes("UTF-8"), 0, text.length());
            sha1hash = md.digest();
            return convertToHex(sha1hash);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public void testClickToCallOutDirection() throws Exception {
        init();
        SipCall[] receiverCalls = new SipCall[receiversCount];
        receiverCalls[0] = sipPhoneReceivers[0].createSipCall();
        receiverCalls[1] = sipPhoneReceivers[1].createSipCall();
        receiverCalls[0].listenForIncomingCall();
        receiverCalls[1].listenForIncomingCall();
        logger.info("Trying to reach url : " + CLICK2DIAL_URL + CLICK2DIAL_PARAMS);
        URL url = new URL(CLICK2DIAL_URL + CLICK2DIAL_PARAMS);
        InputStream in = url.openConnection().getInputStream();
        byte[] buffer = new byte[10000];
        int len = in.read(buffer);
        String httpResponse = "";
        for (int q = 0; q < len; q++) httpResponse += (char) buffer[q];
        logger.info("Received the follwing HTTP response: " + httpResponse);
        receiverCalls[0].waitForIncomingCall(timeout);
        assertTrue(receiverCalls[0].sendIncomingCallResponse(Response.RINGING, "Ringing", 0));
        assertTrue(receiverCalls[0].sendIncomingCallResponse(Response.OK, "OK", 0));
        receiverCalls[1].waitForIncomingCall(timeout);
        assertTrue(receiverCalls[1].sendIncomingCallResponse(Response.RINGING, "Ringing", 0));
        assertTrue(receiverCalls[1].sendIncomingCallResponse(Response.OK, "OK", 0));
        assertTrue(receiverCalls[1].waitForAck(timeout));
        assertTrue(receiverCalls[0].waitForAck(timeout));
        assertTrue(receiverCalls[0].disconnect());
        assertTrue(receiverCalls[1].waitForDisconnect(timeout));
        assertTrue(receiverCalls[1].respondToDisconnect());
    }
} </s>
<s>class temp {    private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException {
        int chunkLength;
        InputStream is = null;
        try {
            if (!urlIsFile) {
                URL urlObj = new URL(filePath);
                URLConnection uc = urlObj.openConnection();
                is = uc.getInputStream();
                chunkLength = uc.getContentLength();
                if (chunkLength <= 0) chunkLength = 1024;
                if (charCoding == null) {
                    String type = uc.getContentType();
                    if (type != null) {
                        charCoding = getCharCodingFromType(type);
                    }
                }
            } else {
                if (registeredStreams.containsKey(filePath)) {
                    is = registeredStreams.get(filePath);
                    chunkLength = 4096;
                } else {
                    File f = new File(filePath);
                    long length = f.length();
                    chunkLength = (int) length;
                    if (chunkLength != length) throw new IOException("Too big file size: " + length);
                    if (chunkLength == 0) {
                        return "";
                    }
                    is = new FileInputStream(f);
                }
            }
            Reader r;
            if (charCoding == null) {
                r = new InputStreamReader(is);
            } else {
                r = new InputStreamReader(is, charCoding);
            }
            return readReader(r, chunkLength);
        } finally {
            if (is != null) is.close();
        }
    }
} </s>
<s>class temp {    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String limitsSet = "";
        String synstatus = SystemFilesLoader.getInstance().getNewgenlibProperties().getProperty("SYNDETICS", "OFF");
        String synncode = SystemFilesLoader.getInstance().getNewgenlibProperties().getProperty("SYNDETICS_CLIENT_CODE", "");
        try {
            if (request.getSession().getAttribute("searchLimits") != null) {
                System.out.println("searchLimits set");
                limitsSet = "SET";
                java.util.Hashtable htLimits = new java.util.Hashtable();
                htLimits = (java.util.Hashtable) request.getSession().getAttribute("searchLimits");
            } else {
                limitsSet = "UNSET";
                System.out.println("searchLimits not set");
            }
            java.util.Properties prop = System.getProperties();
            prop.load(new FileInputStream(ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + "SystemFiles" + java.io.File.separator + "ENV_VAR.txt"));
            System.out.println("SEARCH MODE IS " + searchmode + " FILE PATH " + ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + "SystemFiles" + java.io.File.separator + "ENV_VAR.txt");
        } catch (Exception e) {
        }
        javax.servlet.http.HttpSession session = request.getSession();
        String forward = "searchView";
        int link = 0, singleLink = 0;
        java.util.Vector vecThisPage = new java.util.Vector();
        aportal.form.cataloguing.SearchViewForm svF = (aportal.form.cataloguing.SearchViewForm) form;
        svF.setSyndeticsStatus(synstatus);
        svF.setSyndeticsClientCode(synncode);
        opacHm = (ejb.bprocess.opac.xcql.OPACUtilitiesHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("OPACUtilities");
        ejb.bprocess.opac.xcql.OPACUtilities opacUt = opacHm.create();
        System.out.println("CLASS NO " + request.getParameter("ClassNo") + " ClassNoForwarded " + session.getAttribute("ClassNoForwarded"));
        if (svF.getExportRec() == null || !(svF.getExportRec().equals("export"))) {
            if (request.getParameter("CatId") != null && request.getParameter("OwnerId") != null && request.getParameter("relation") != null && !(session.getAttribute("HostItemDisplay") != null && session.getAttribute("HostItemDisplay").toString().equals("false"))) {
                home = (ejb.bprocess.opac.xcql.SearchSRUWCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("SearchSRUWCatalogue");
                ejb.bprocess.opac.xcql.SearchSRUWCatalogue searchCat = home.create();
                String catId1 = request.getParameter("CatId");
                String ownId1 = request.getParameter("OwnerId");
                System.out.println("*********************CatId1: " + catId1);
                svF.setCatalogueRecordId(catId1);
                svF.setOwnerLibraryId(ownId1);
                String rel = request.getParameter("relation");
                java.util.Vector vecL = searchCat.getRelatedCatalogueRecords(null, catId1, ownId1, rel);
                request.setAttribute("LuceneVector", vecL);
                session.setAttribute("searchVec", vecL);
                singleLink = 1;
                session.setAttribute("HostItemDisplay", "false");
                link = 1;
                forward = "searchRes";
                vecThisPage.addElement(catId1);
                vecThisPage.addElement(ownId1);
            } else if (link == 0 || singleLink == 1) {
                System.out.println("LINK AND SINGLE LINK " + link + " single " + singleLink);
                if ((request.getParameter("ClassNo") != null) && session.getAttribute("ClassNoForwarded") == null) {
                    System.out.println("action called for class no.");
                    String classificNo = request.getParameter("ClassNo");
                    System.out.println("TITLE WORDS ");
                    home = (ejb.bprocess.opac.xcql.SearchSRUWCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("SearchSRUWCatalogue");
                    ejb.bprocess.opac.xcql.SearchSRUWCatalogue searchCat = home.create();
                    String rawSearchText = (new beans.miscellaneous.RequestStringProcessor()).processString("*" + classificNo + "*");
                    System.out.println("raw search Text" + rawSearchText);
                    String searchText = "classificationNumber=" + rawSearchText;
                    System.out.println("search text is " + searchText);
                    String xmlRes = (new org.z3950.zing.cql.CQLParser()).parse(searchText).toXCQL(0);
                    java.util.Hashtable hs = new java.util.Hashtable();
                    java.util.Vector v1 = new java.util.Vector();
                    if (session.getAttribute("searchLimits") != null) {
                        hs = (java.util.Hashtable) session.getAttribute("searchLimits");
                    }
                    Vector vec = new Vector();
                    String solrQuery = Utility.getInstance().simplifiedSolrQuery(classificNo, "classificationNumber");
                    if (limitsSet.equalsIgnoreCase("SET")) {
                        String limitsQuery = limitsSolrQuery(hs);
                        solrQuery += limitsQuery;
                    }
                    solrQuery += " & ";
                    Vector newRetvec = searchCat.processSolrQuery(1, 25, solrQuery, "245_Tag", "asc");
                    Hashtable ht = (Hashtable) newRetvec.get(0);
                    String totrec = (String) ht.get("HITS");
                    session.setAttribute("TOTALREC", Integer.parseInt(totrec));
                    v1 = (Vector) ht.get("RESULTS");
                    hs.put("Query", solrQuery);
                    if (v1.size() > 0) {
                        hs.put("searchText", rawSearchText);
                        hs.put("noOfRecords", 25);
                        hs.put("browseType", "Classification Number");
                        session.setAttribute("searchEntry", hs);
                        session.setAttribute("searchVec", v1);
                        forward = "searchRes";
                    } else {
                        forward = "home";
                    }
                } else {
                    System.out.println("ELSE CALLED ");
                    String record = request.getParameter("record");
                    String recNo = request.getParameter("recNo");
                    Integer catId = 0, ownerId = 0;
                    String title = "";
                    if (request.getParameter("CatId") != null && request.getParameter("OwnerId") != null) {
                        catId = new Integer(request.getParameter("CatId")).intValue();
                        ownerId = new Integer(request.getParameter("OwnerId")).intValue();
                        System.out.println("catId is +++=" + catId);
                        System.out.println("OwnerId is +++=" + ownerId);
                        title = request.getParameter("title");
                        svF.setCatalogueRecordId(request.getParameter("CatId"));
                        svF.setOwnerLibraryId(request.getParameter("OwnerId"));
                    }
                    System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%VVVVVVVVVVVVVVVVVVVVVV");
                    ArrayList alOtherBooks = ((ejb.bprocess.opac.SearchCatalogue) ejb.bprocess.util.HomeFactory.getInstance().getHome("SearchCatalogue")).getOtherBooksInTheRack(null, catId.toString(), ownerId.toString(), ownerId.toString());
                    System.out.println("alOtherBooks size is  " + alOtherBooks.size());
                    Vector vOtherBooks = new Vector();
                    Session catrecsession = DBConnector.getInstance().getSession();
                    utility = ejb.bprocess.util.Utility.getInstance(catrecsession);
                    for (int i = 0; i < alOtherBooks.size(); i++) {
                        String[] scData = (String[]) (alOtherBooks.get(i));
                        String catalogueId = scData[0];
                        String ownerLibId = scData[1];
                        System.out.println("catId is +++=" + catalogueId);
                        System.out.println("OwnerId is +++=" + ownerLibId);
                        String xmlWholeRecord = "";
                        String titleD = "";
                        String titleV = "";
                        String authorV = "";
                        String isbnNumber = "";
                        if (catalogueId != null && ownerLibId != null) {
                            try {
                                System.out.println("***************************** 0");
                                Hashtable htDetails = utility.getCatalogueRecord(new Integer(catalogueId), new Integer(ownerLibId));
                                System.out.println("***************************** 1");
                                if (htDetails != null && !htDetails.isEmpty()) {
                                    System.out.println("htDetails" + htDetails.toString());
                                    titleV = utility.getTestedString(htDetails.get("Title"));
                                    authorV = utility.getTestedString(htDetails.get("Author"));
                                    isbnNumber = utility.getTestedString(htDetails.get("ISBN"));
                                    String[] str1 = titleV.split("/");
                                    if (str1.length > 0) {
                                        titleD = str1[0];
                                        if (titleD.length() > 45) {
                                            titleD = titleD.substring(0, 45) + "...";
                                        }
                                    }
                                    String[] str = new String[5];
                                    str[0] = titleD;
                                    str[1] = authorV;
                                    str[2] = isbnNumber;
                                    str[3] = catalogueId;
                                    str[4] = ownerLibId;
                                    vOtherBooks.add(str);
                                    System.out.println("Other Books size is " + vOtherBooks.size());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    System.out.println("Other Books vector is *************************** \n ");
                    for (int i = 0; i < vOtherBooks.size(); i++) {
                        String[] str = (String[]) vOtherBooks.get(i);
                        System.out.println("title   :" + str[0].toString());
                        System.out.println("author  :" + str[1].toString());
                        System.out.println("isbn  :" + str[2].toString());
                        System.out.println("catID  :" + str[3].toString());
                        System.out.println("ownerLibId  :" + str[4].toString());
                    }
                    System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
                    request.setAttribute("fisheyedata", vOtherBooks);
                    catrecsession.close();
                    session.setAttribute("SingleViewExport", vecThisPage);
                    if (session.getAttribute("OnlySingleRec") != null && session.getAttribute("OnlySingleRec").toString().equals("true")) {
                        java.util.Vector v1 = new java.util.Vector();
                        System.out.println("SEARCH MODE " + searchmode);
                        if (searchmode.equalsIgnoreCase("a")) {
                            System.out.println("SEARCHMODE IN SEARCH VIEW ACTION (IF) " + searchmode);
                            v1 = (java.util.Vector) request.getAttribute("LuceneVector");
                            System.out.println("VECTOR V1 " + v1);
                        } else {
                            System.out.println("SEARCHMODE IN SEARCH VIEW ACTION (ELSE)" + searchmode);
                            v1 = (java.util.Vector) session.getAttribute("searchVec");
                        }
                        Object[] obj = (Object[]) v1.elementAt(0);
                        String str[] = (String[]) obj[0];
                        java.util.Hashtable h = new java.util.Hashtable();
                        String tit = "";
                        h = (java.util.Hashtable) obj[1];
                        System.out.println("HASH TABLE in view action " + h);
                        catId = new Integer(str[0]).intValue();
                        ownerId = new Integer(str[1]).intValue();
                        title = h.get("TITLE").toString();
                        svF.setAttachmentsAndUrl("");
                        if ((h.get("ATTACHMENTS") != null && h.get("ATTACHMENTS").equals("AVAILABLE"))) {
                            svF.setAttachmentsAndUrl("available");
                        }
                        record = "full";
                        recNo = "1";
                        session.removeAttribute("OnlySingleRec");
                    }
                    if (session.getAttribute("HostItemDisplay") != null && session.getAttribute("HostItemDisplay").equals("false")) {
                        session.removeAttribute("HostItemDisplay");
                    }
                    session.setAttribute("Title", title);
                    java.util.Hashtable hash1 = opacUt.getDetailsForSingleCatalogueRecord(catId, ownerId);
                    vecThisPage.addElement(String.valueOf(catId));
                    vecThisPage.addElement(String.valueOf(ownerId));
                    svF.setAttachmentsAndUrl("");
                    if (hash1.get("ATTACHMENTS") != null && hash1.get("ATTACHMENTS").toString().equals("AVAILABLE")) {
                        svF.setAttachmentsAndUrl("available");
                    }
                    svF.setRecordNo(recNo);
                    session.setAttribute("record", record);
                    java.util.Vector vecCO = (java.util.Vector) session.getAttribute("CatAndOwner");
                    svF.setCatCur(catId);
                    svF.setOwnerCur(ownerId);
                    svF.setPrevExists("no");
                    svF.setNextExists("no");
                    if (vecCO != null) {
                        for (int j = 0; j < vecCO.size(); j = j + 4) {
                            int c = new Integer(vecCO.elementAt(j).toString()).intValue();
                            int o = new Integer(vecCO.elementAt(j + 1).toString()).intValue();
                            if (c == catId && o == ownerId) {
                                if (j != 0) {
                                    int catPrev = new Integer(vecCO.elementAt(j - 4).toString()).intValue();
                                    int ownerPrev = new Integer(vecCO.elementAt(j - 3).toString()).intValue();
                                    svF.setCatPrev(catPrev);
                                    svF.setOwnerPrev(ownerPrev);
                                    svF.setTitlePrev(vecCO.elementAt(j - 2).toString());
                                    svF.setRecPrev(vecCO.elementAt(j - 1).toString());
                                    svF.setPrevExists("yes");
                                }
                                if (j < vecCO.size() - 4) {
                                    int catNext = new Integer(vecCO.elementAt(j + 4).toString()).intValue();
                                    int ownerNext = new Integer(vecCO.elementAt(j + 5).toString()).intValue();
                                    svF.setCatNext(catNext);
                                    svF.setOwnerNext(ownerNext);
                                    svF.setTitleNext(vecCO.elementAt(j + 6).toString());
                                    svF.setRecNext(vecCO.elementAt(j + 7).toString());
                                    svF.setNextExists("yes");
                                }
                            }
                        }
                    }
                    String str[] = (String[]) hash1.get("Biblo_Mat");
                    int bib_id = new Integer(str[0]).intValue();
                    int mat_id = new Integer(str[1]).intValue();
                    aportal.view.RecordView rv = new aportal.view.DesignFactory().getCorView(bib_id, mat_id, record);
                    String type = "";
                    if (bib_id == 3 && mat_id == 1) {
                        type = "Book";
                    } else if (bib_id == 4 && mat_id == 1) {
                        type = "Serial";
                    } else if (bib_id == 1 && mat_id == 1) {
                        type = "Book Chapter";
                    } else if (bib_id == 2 && mat_id == 1) {
                        type = "Serial Article";
                    } else {
                        type = ejb.bprocess.util.TypeDefinition.getInstance().getTypeDefinition(String.valueOf(bib_id), String.valueOf(mat_id));
                    }
                    java.util.Hashtable hMono = (java.util.Hashtable) hash1.get("MonoGraphRecords");
                    java.util.Hashtable h4 = rv.getView(hash1);
                    h4.put("Type", type);
                    Hashtable ht = (Hashtable) h4.get("NoLink");
                    if (ht != null && ht.get("URLS_856") != null) {
                        Vector urls856 = (Vector) ht.get("URLS_856");
                        if (urls856.size() > 0) {
                            Hashtable linksAndText = new Hashtable();
                            Hashtable url856 = new Hashtable();
                            for (int i = 0; i < urls856.size(); i += 2) {
                                url856.put(urls856.elementAt(i), urls856.elementAt(i + 1));
                            }
                            linksAndText.put("URL", url856);
                            h4.put("URLS_856", linksAndText);
                        }
                    }
                    try {
                        String sessionid = request.getSession().getId();
                        ejb.bprocess.holdings.HoldingsStatement holdingsStatement = ((ejb.bprocess.holdings.HoldingsStatementHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("HoldingsStatement")).create();
                        java.util.Vector vecLib = new java.util.Vector();
                        vecLib.addElement("1");
                        if (session.getAttribute("Libraries") != null) {
                            vecLib = (java.util.Vector) session.getAttribute("Libraries");
                        }
                        String libIds = "";
                        for (int p = 0; p < vecLib.size(); p++) {
                            if (p != 0) {
                                libIds += ",";
                            }
                            String libName = vecLib.elementAt(p).toString();
                            Session session1 = DBConnector.getInstance().getSession();
                            libIds += ejb.bprocess.util.Utility.getInstance(session1).getLibraryId(libName);
                            session1.close();
                        }
                        request.setAttribute("catRecId", String.valueOf(catId));
                        request.setAttribute("ownLibId", String.valueOf(ownerId));
                        request.setAttribute("libIds", String.valueOf(libIds));
                        Hashtable onerecordattach = new Hashtable();
                        JSONObject jsonCatOwnId = new JSONObject().put("Id", catId).put("LibId", ownerId);
                        ejb.bprocess.opac.SearchCatalogue searchCatAttach = ((ejb.bprocess.opac.SearchCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("SearchCatalogue")).create();
                        String strAttach = searchCatAttach.getAttachmentDetails(jsonCatOwnId.toString());
                        if (!strAttach.equals("")) {
                            JSONObject jsonAttach = new JSONObject(strAttach);
                            if (jsonAttach != null) {
                                if (!jsonAttach.isNull("BookCover")) {
                                    ArrayList albookcover = new ArrayList();
                                    JSONArray jsonarr = (JSONArray) jsonAttach.get("BookCover");
                                    if (jsonarr != null) {
                                        for (int j = 0; j < jsonarr.length(); j++) {
                                            albookcover.add(jsonarr.getString(j));
                                        }
                                        onerecordattach.put("BookCover", albookcover);
                                    }
                                }
                                if (!jsonAttach.isNull("TOC")) {
                                    ArrayList alTOC = new ArrayList();
                                    JSONArray jsonarr = (JSONArray) jsonAttach.get("TOC");
                                    if (jsonarr != null) {
                                        for (int j = 0; j < jsonarr.length(); j++) {
                                            alTOC.add(jsonarr.getString(j));
                                        }
                                        onerecordattach.put("TOC", alTOC);
                                    }
                                }
                                if (!jsonAttach.isNull("Preview")) {
                                    ArrayList alPreview = new ArrayList();
                                    JSONArray jsonarr = (JSONArray) jsonAttach.get("Preview");
                                    if (jsonarr != null) {
                                        for (int j = 0; j < jsonarr.length(); j++) {
                                            alPreview.add(jsonarr.getString(j));
                                        }
                                        onerecordattach.put("Preview", alPreview);
                                    }
                                }
                                if (!jsonAttach.isNull("FullView")) {
                                    ArrayList alFullView = new ArrayList();
                                    JSONArray jsonarr = (JSONArray) jsonAttach.get("FullView");
                                    if (jsonarr != null) {
                                        for (int j = 0; j < jsonarr.length(); j++) {
                                            alFullView.add(jsonarr.getString(j));
                                        }
                                        onerecordattach.put("FullView", alFullView);
                                    }
                                }
                                if (!jsonAttach.isNull("Attachment")) {
                                    ArrayList alAttachment = new ArrayList();
                                    JSONArray jsonarr = (JSONArray) jsonAttach.get("Attachment");
                                    if (jsonarr != null) {
                                        for (int j = 0; j < jsonarr.length(); j++) {
                                            alAttachment.add(jsonarr.getString(j));
                                        }
                                        onerecordattach.put("Attachment", alAttachment);
                                    }
                                }
                                if (onerecordattach != null && !onerecordattach.isEmpty()) {
                                    h4.put("dAttachment", onerecordattach);
                                }
                            }
                        }
                        svF.setHashSing(h4);
                        System.out.println("hash tabel values*************************");
                        Enumeration enumx = h4.keys();
                        while (enumx.hasMoreElements()) {
                            String key = enumx.nextElement().toString();
                            System.out.println("Key: " + key + "-----value: " + h4.get(key));
                        }
                        System.out.println("********************************************");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        } else if (svF.getExportRec() != null && svF.getExportRec().equals("export")) {
            svF.setExportRec(null);
            vecThisPage = (java.util.Vector) session.getAttribute("SingleViewExport");
            String format = svF.getSf();
            if (format.equals("marc")) {
                String marc = opacUt.getDetailsForMultiRecordViewMARC(vecThisPage);
                svF.setDisplayFormat(marc);
                session.setAttribute("RecordDisplay", marc);
                forward = "RecordFormat";
            } else if (format.equals("marcXml")) {
                String marcXML = opacUt.getDetailsForMultiRecordViewMARCXML(vecThisPage);
                svF.setDisplayFormat(marcXML);
                response.setContentType("text/xml");
                session.setAttribute("RecordDisplay", marcXML);
                forward = "RecordFormat";
            } else if (format.equals("mods")) {
                String mods = opacUt.getDetailsForMultiRecordViewMODS(vecThisPage);
                svF.setDisplayFormat(mods);
                session.setAttribute("RecordDisplay", mods);
                forward = "RecordFormat";
            } else if (format.equals("dc")) {
                String dc = opacUt.getDetailsForMultiRecordViewDublinCore(vecThisPage);
                svF.setDisplayFormat(dc);
                session.setAttribute("RecordDisplay", dc);
                forward = "RecordFormat";
            } else if (format.equals("agris")) {
                String agr = opacUt.getDetailsForMultiRecordViewAgris(vecThisPage);
                svF.setDisplayFormat(agr);
                session.setAttribute("RecordDisplay", agr);
                forward = "RecordFormat";
            } else if (format.equals("text")) {
                java.util.Vector vecTextDis = new java.util.Vector();
                for (int i2 = 0; i2 < vecThisPage.size(); i2 = i2 + 2) {
                    java.util.Hashtable hash1 = opacUt.getDetailsForSingleCatalogueRecord(new Integer(vecThisPage.elementAt(i2).toString()).intValue(), new Integer(vecThisPage.elementAt(i2 + 1).toString()).intValue());
                    aportal.view.ISBDView fullView = new aportal.view.ISBDView();
                    java.util.Hashtable hashCit = fullView.getView(hash1);
                    vecTextDis.addElement(hashCit);
                    forward = "RecordFormatText";
                }
                session.setAttribute("RecordTextDisplay", vecTextDis);
                if (svF.getPs() != null && svF.getPs().equals("email")) {
                    boolean flag = false;
                    if (svF.getEmail() != null && !(svF.getEmail().equals(""))) {
                        String emailId = svF.getEmail();
                        try {
                            String sessionid = request.getSession().getId();
                            java.net.URL url = new java.net.URL("http://localhost:" + request.getServerPort() + "/newgenlibctxt/jsp/aportal/cataloguing/RecordDisplayText.jsp;jsessionid=" + sessionid);
                            java.net.URLConnection urlCon = url.openConnection();
                            java.io.InputStream is = urlCon.getInputStream();
                            String htmlContent = "";
                            java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(is));
                            String line = "";
                            while ((line = br.readLine()) != null) {
                                htmlContent = htmlContent + line;
                            }
                            String[] emailids = { emailId };
                            int status = SendEmail.getInstance().sendMail(emailids, "OPAC results", htmlContent, "html");
                            if (status == 0) flag = true; else flag = false;
                        } catch (Exception exp) {
                            exp.printStackTrace();
                        }
                    }
                    String mailMessage = "The selected records have been successfully mailed to " + svF.getEmail();
                    if (flag == false) {
                        mailMessage = "<h4><p>The selected records could not be mailed to " + svF.getEmail() + "&nbsp; These might be the possible reasons.</p></h4>" + "<h5><ol> <li>The email id entered is not a valid one</font></li>" + "<li>The email id domain might not be in the list of allowed  recipient&nbsp; hosts</li>" + "<li>There might a error in connectivity to the mail server</li></ol></h5>" + "<h4><p>Please contact the  Network Administrator </p></h4>";
                    }
                    session.setAttribute("MailStatus", mailMessage);
                    forward = "SendEmail";
                }
            }
        }
        String version = ejb.bprocess.util.StaticValues.getInstance().getVersion();
        if (version != null && !version.equals("")) {
            svF.setVersion(version);
        }
        if (session.getAttribute("ClassNoForwarded") != null) {
            session.removeAttribute("ClassNoForwarded");
        }
        return mapping.findForward(forward);
    }
} </s>
<s>class temp {    @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info("download: " + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
} </s>
<s>class temp {    public static void sendData(final HashMap<String, String> data) {
        YProgressWindowRepeat y = new YProgressWindowRepeat(I18N.t("Send Data to yaams.de"));
        try {
            final StringBuffer send = new StringBuffer("1=1");
            for (final String key : data.keySet()) {
                send.append("&");
                send.append(key);
                send.append("=");
                send.append(URLEncoder.encode(data.get(key), "UTF-8"));
            }
            final URL url = new URL("http://www.rpg-studio.de/libraries/abttools/yaamsFeedback.php");
            final URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            final OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(send.toString());
            wr.flush();
            final BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            final StringBuffer erg = new StringBuffer("");
            while ((line = rd.readLine()) != null) {
                erg.append(line);
            }
            JOptionPane.showMessageDialog(null, erg.toString(), I18N.t("Feedback"), JOptionPane.INFORMATION_MESSAGE);
            wr.close();
            rd.close();
        } catch (final Throwable t) {
            YException.error("Can not send feedback to http://www.rpg-studio.de/libraries/abttools/yaamsFeedback.php", t);
        }
        y.close();
    }
} </s>
<s>class temp {    public static String ftpPing(String root, String host, int port, String username, String pw) {
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(host));
            ftpClient.setControlPort(port);
            ftpClient.setTimeout(4000);
            ftpClient.connect();
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login(username, (pw));
            ftpClient.chdir(root);
            JobHandler.releaseFTPLock();
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (FTPException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            return e.getMessage();
        }
        try {
            ftpClient.quit();
        } catch (IOException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (FTPException e) {
            e.printStackTrace();
            return e.getMessage();
        }
        return null;
    }
} </s>
<s>class temp {    public static void putWithUserSettings(String from, String to, String renameTo, boolean binary, IProgressMonitor monitor) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, binary);
        synchedSet.add(ftpHolder);
        int ftpqueuesize = PrefPageOne.getIntValue(CONSTANTS.PREF_FTPQUEUE);
        if (synchedSet.size() >= ftpqueuesize) {
            JobHandler.aquireFTPLock();
            try {
                ftpClient = new FTPClient();
                ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
                ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
                ftpClient.connect();
                try {
                    Thread.sleep(1500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                synchronized (synchedSet) {
                    for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                        if (monitor != null && monitor.isCanceled()) {
                            JobHandler.releaseFTPLock();
                            ftpClient.quit();
                            return;
                        }
                        Thread.yield();
                        FTPHolder element = (FTPHolder) iter.next();
                        if (element.binary) {
                            ftpClient.setType(FTPTransferType.BINARY);
                        } else {
                            ftpClient.setType(FTPTransferType.ASCII);
                        }
                        ftpClient.put(element.from, element.to);
                        if (element.renameTo != null) {
                            try {
                                ftpClient.delete(element.renameTo);
                            } catch (Exception e) {
                            }
                            ftpClient.rename(element.to, element.renameTo);
                            log.info("RENAME: " + element.to + "To: " + element.renameTo);
                        }
                    }
                    synchedSet.clear();
                }
                JobHandler.releaseFTPLock();
                ftpClient.quit();
            } catch (UnknownHostException e) {
                e.printStackTrace();
            } catch (FTPException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder element = (FTPHolder) iter.next();
                ftpClient.setType(FTPTransferType.ASCII);
                ftpClient.put(element.from, element.to);
                if (element.renameTo != null) {
                    try {
                        ftpClient.delete(element.renameTo);
                    } catch (Exception e) {
                    }
                    ftpClient.rename(element.to, element.renameTo);
                    log.info("RENAME: " + element.to + "To: " + element.renameTo);
                }
            }
            JobHandler.releaseFTPLock();
            ftpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
} </s>
<s>class temp {    protected void generateDiffResults(File outFile) throws IOException {
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream, outputCharset));
        intlWrite(out, HTML_STRICT_DOCTYPE + "<html><head><title>${Report.Title}</title>\n" + "<meta http-equiv=\"Content-Type\"" + " content=\"text/html; charset=" + outputCharset + "\">\n" + "<style type=\"text/css\">\n");
        out.write(LOCDiff.getCssText());
        writeCustomStyleInfo(out);
        out.write("</style></head>\n" + "<body>\n" + "<div>\n");
        if (addedTable.length() > 0) {
            out.write("<table border>");
            intlWrite(out, getAddedTableHeader());
            out.write(addedTable.toString());
            out.write("</table><br><br>");
        }
        if (modifiedTable.length() > 0) {
            out.write("<table border>");
            intlWrite(out, getModifiedTableHeader());
            out.write(modifiedTable.toString());
            out.write("</table><br><br>");
        }
        if (deletedTable.length() > 0) {
            out.write("<table border>");
            intlWrite(out, getDeletedTableHeader());
            out.write(deletedTable.toString());
            out.write("</table><br><br>");
        }
        if (unchangedTable.length() > 0) {
            out.write("<table border>");
            intlWrite(out, getUnchangedTableHeader());
            out.write(unchangedTable.toString());
            out.write("</table><br><br>");
        }
        writeSummaryTable(out);
        out.write("</div>");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write("</BODY></HTML>".getBytes());
        outStream.close();
    }
} </s>
<s>class temp {    public String openFileAsText(String resource) throws IOException {
        StringWriter wtr = new StringWriter();
        InputStreamReader rdr = new InputStreamReader(openFile(resource));
        try {
            IOUtils.copy(rdr, wtr);
        } finally {
            IOUtils.closeQuietly(rdr);
        }
        return wtr.toString();
    }
} </s>
<s>class temp {    public void writeFile(String resource, InputStream is) throws IOException {
        File f = prepareFsReferenceAsFile(resource);
        FileOutputStream fos = new FileOutputStream(f);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        try {
            IOUtils.copy(is, bos);
        } finally {
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(bos);
        }
    }
} </s>
<s>class temp {    public String postEvent(EventDocument eventDoc, Map attachments) {
        if (eventDoc == null || eventDoc.getEvent() == null) return null;
        if (queue == null) {
            sendEvent(eventDoc, attachments);
            return eventDoc.getEvent().getEventId();
        }
        if (attachments != null) {
            Iterator iter = attachments.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                if (entry.getValue() instanceof DataHandler) {
                    File file = new File(attachmentStorge + "/" + GuidUtil.generate() + entry.getKey());
                    try {
                        IOUtils.copy(((DataHandler) entry.getValue()).getInputStream(), new FileOutputStream(file));
                        entry.setValue(file);
                    } catch (IOException err) {
                        err.printStackTrace();
                    }
                }
            }
        }
        InternalEventObject eventObj = new InternalEventObject();
        eventObj.setEventDocument(eventDoc);
        eventObj.setAttachments(attachments);
        eventObj.setSessionContext(SessionContextUtil.getCurrentContext());
        eventDoc.getEvent().setEventId(GuidUtil.generate());
        getQueue().post(eventObj);
        return eventDoc.getEvent().getEventId();
    }
} </s>
<s>class temp {    public ActionResponse executeAction(ActionRequest request) throws Exception {
        ActionResponse resp = new ActionResponse();
        BufferedReader in = null;
        try {
            URL url = new URL(URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int status = conn.getResponseCode();
            if (status == 200) {
                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                while (true) {
                    String line = in.readLine();
                    if (line == null) break;
                    resp.addResult("REMOTEVERSION", line);
                }
            } else {
                resp.setErrorCode(ActionResponse.GENERAL_ERROR);
                resp.setErrorMessage("HTTP Error [" + status + "]");
            }
        } catch (Exception e) {
            resp.setErrorCode(ActionResponse.GENERAL_ERROR);
            resp.setErrorMessage(e.getMessage());
        } finally {
            if (in != null) {
                in.close();
            }
        }
        return resp;
    }
} </s>
<s>class temp {    static boolean writeProperties(Map<String, String> customProps, File destination) throws IOException {
        synchronized (PropertiesIO.class) {
            L.info(Msg.msg("PropertiesIO.writeProperties.start"));
            File tempFile = null;
            BufferedInputStream existingCfgInStream = null;
            FileInputStream in = null;
            FileOutputStream out = null;
            PrintStream ps = null;
            FileChannel fromChannel = null, toChannel = null;
            String line = null;
            try {
                existingCfgInStream = new BufferedInputStream(destination.exists() ? new FileInputStream(destination) : defaultPropertiesStream());
                tempFile = File.createTempFile("properties-", ".tmp", null);
                ps = new PrintStream(tempFile);
                while ((line = Utils.readLine(existingCfgInStream)) != null) {
                    String lineReady2write = setupLine(line, customProps);
                    ps.println(lineReady2write);
                }
                destination.getParentFile().mkdirs();
                in = new FileInputStream(tempFile);
                out = new FileOutputStream(destination, false);
                fromChannel = in.getChannel();
                toChannel = out.getChannel();
                fromChannel.transferTo(0, fromChannel.size(), toChannel);
                L.info(Msg.msg("PropertiesIO.writeProperties.done").replace("#file#", destination.getAbsolutePath()));
                return true;
            } finally {
                if (existingCfgInStream != null) existingCfgInStream.close();
                if (ps != null) ps.close();
                if (fromChannel != null) fromChannel.close();
                if (toChannel != null) toChannel.close();
                if (out != null) out.close();
                if (in != null) in.close();
                if (tempFile != null && tempFile.exists()) tempFile.delete();
            }
        }
    }
} </s>
<s>class temp {    private void writeGif(String filename, String outputFile) throws IOException {
        File file = new File(filename);
        InputStream in = new FileInputStream(file);
        FileOutputStream fout = new FileOutputStream(outputFile);
        int totalRead = 0;
        int readBytes = 0;
        int blockSize = 65000;
        long fileLen = file.length();
        byte b[] = new byte[blockSize];
        while ((long) totalRead < fileLen) {
            readBytes = in.read(b, 0, blockSize);
            totalRead += readBytes;
            fout.write(b, 0, readBytes);
        }
        in.close();
        fout.close();
    }
} </s>
<s>class temp {    @Override
    public void alterar(Disciplina t) throws Exception {
        PreparedStatement stmt = null;
        String sql = "UPDATE disciplina SET nm_disciplina = ?, cod_disciplina = ? WHERE id_disciplina = ?";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setString(1, t.getNomeDisciplina());
            stmt.setString(2, t.getCodDisciplina());
            stmt.setInt(3, t.getIdDisciplina());
            stmt.executeUpdate();
            conexao.commit();
            int id_disciplina = t.getIdDisciplina();
            excluirTopico(t.getIdDisciplina());
            for (Topico item : t.getTopicos()) {
                criarTopico(item, id_disciplina);
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
} </s>
<s>class temp {    @Override
    public void excluir(Disciplina t) throws Exception {
        PreparedStatement stmt = null;
        String sql = "DELETE from disciplina where id_disciplina = ?";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setInt(1, t.getIdDisciplina());
            stmt.executeUpdate();
            conexao.commit();
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                conexao.close();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
} </s>
<s>class temp {    public void excluirTopico(Integer idDisciplina) throws Exception {
        String sql = "DELETE from topico WHERE id_disciplina = ?";
        PreparedStatement stmt = null;
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setInt(1, idDisciplina);
            stmt.executeUpdate();
            conexao.commit();
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
} </s>
<s>class temp {    private void removeSessionId(InputStream inputStream, Output output) throws IOException {
        String jsessionid = RewriteUtils.getSessionId(target);
        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(HttpHeaders.CONTENT_TYPE), target.getDriver().getConfiguration().getParsableContentTypes());
        if (jsessionid == null || !textContentType) {
            IOUtils.copy(inputStream, output.getOutputStream());
        } else {
            String charset = httpClientResponse.getContentCharset();
            if (charset == null) {
                charset = "ISO-8859-1";
            }
            String content = IOUtils.toString(inputStream, charset);
            content = removeSessionId(jsessionid, content);
            if (output.getHeader(HttpHeaders.CONTENT_LENGTH) != null) {
                output.setHeader(HttpHeaders.CONTENT_LENGTH, Integer.toString(content.length()));
            }
            OutputStream outputStream = output.getOutputStream();
            IOUtils.write(content, outputStream, charset);
        }
        inputStream.close();
    }
} </s>
<s>class temp {        public ViewProperties(String basePath, String baseFile) throws Exception {
            FileInputStream input = null;
            String file = basePath + "/" + baseFile + ".properties";
            properties = new Properties();
            try {
                URL url = MapViewer.class.getResource(file);
                properties.load(url.openStream());
                viewName = (String) properties.get("view.name");
                viewShape = (String) properties.get("view.shape");
                path = basePath + "/" + (String) properties.get("icon.path");
                iconHeight = getIntProperty("icon.height", 96);
                iconWidth = getIntProperty("icon.width", 96);
                fontSizeSmall = getIntProperty("font.small.size", 10);
                fontSizeMedium = getIntProperty("font.medium.size", 12);
                fontSizeLarge = getIntProperty("font.large.size", 16);
                fontSizeHuge = getIntProperty("font.huge.size", 20);
                if (viewShape.equals("Hexagonal")) {
                    tileHeight = (int) (Math.sqrt(3.0) / 2.0 * iconWidth);
                    tileWidth = (int) (iconWidth * 3.0 / 4.0);
                    tileOffset = (int) (tileHeight / 2.0);
                } else {
                    tileHeight = iconHeight;
                    tileWidth = iconWidth;
                    tileOffset = 0;
                }
            } catch (Exception e) {
                error("Cannot load properties from file [" + file + "]");
                throw e;
            }
        }
} </s>
<s>class temp {    private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException {
        if (src == null || !src.exists()) throw new IOException(Debug.getDebug("missing src", src));
        if (!src.getName().toLowerCase().endsWith(".mp3")) throw new IOException(Debug.getDebug("src not mp3", src));
        if (dst == null) throw new IOException(Debug.getDebug("missing dst", dst));
        if (dst.exists()) {
            dst.delete();
            if (dst.exists()) throw new IOException(Debug.getDebug("could not delete dst", dst));
        }
        boolean hasId3v1 = new MyID3v1().hasID3v1(src);
        long id3v1Length = hasId3v1 ? ID3_V1_TAG_LENGTH : 0;
        long id3v2HeadLength = new MyID3v2().findID3v2HeadLength(src);
        long id3v2TailLength = new MyID3v2().findID3v2TailLength(src, hasId3v1);
        OutputStream os = null;
        InputStream is = null;
        try {
            dst.getParentFile().mkdirs();
            os = new FileOutputStream(dst);
            os = new BufferedOutputStream(os);
            if (!skipId3v2Head && !skipId3v2 && id3v2HeadTag != null) os.write(id3v2HeadTag);
            is = new FileInputStream(src);
            is = new BufferedInputStream(is);
            is.skip(id3v2HeadLength);
            long total_to_read = src.length();
            total_to_read -= id3v1Length;
            total_to_read -= id3v2HeadLength;
            total_to_read -= id3v2TailLength;
            byte buffer[] = new byte[1024];
            long total_read = 0;
            while (total_read < total_to_read) {
                int remainder = (int) (total_to_read - total_read);
                int readSize = Math.min(buffer.length, remainder);
                int read = is.read(buffer, 0, readSize);
                if (read <= 0) throw new IOException("unexpected EOF");
                os.write(buffer, 0, read);
                total_read += read;
            }
            if (!skipId3v2Tail && !skipId3v2 && id3v2TailTag != null) os.write(id3v2TailTag);
            if (!skipId3v1 && id3v1Tag != null) os.write(id3v1Tag);
        } finally {
            try {
                if (is != null) is.close();
            } catch (Throwable e) {
                Debug.debug(e);
            }
            try {
                if (os != null) os.close();
            } catch (Throwable e) {
                Debug.debug(e);
            }
        }
    }
} </s>
<s>class temp {    public Program createNewProgram(int projectID, String name, String description) throws AdaptationException {
        Program program = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            connection = DriverManager.getConnection(CONN_STR);
            connection.setAutoCommit(false);
            statement = connection.createStatement();
            String query = "INSERT INTO Programs(projectID, name, " + "description, sourcePath) VALUES ( " + projectID + ", " + "'" + name + "', " + "'" + description + "', " + "'" + "[unknown]" + "')";
            log.debug("SQL Query:\n" + query);
            statement.executeUpdate(query);
            query = "SELECT * FROM Programs WHERE " + " projectID   =  " + projectID + "  AND " + " name        = '" + name + "' AND " + " description = '" + description + "'";
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = "Attempt to create program failed";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            program = getProgram(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = "SQLException in createNewProgram";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return program;
    }
} </s>
<s>class temp {    public Program updateProgramPath(int id, String sourcePath) throws AdaptationException {
        Program program = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = "UPDATE Programs SET " + "sourcePath = '" + sourcePath + "' " + "WHERE id = " + id;
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = "SELECT * from Programs WHERE id = " + id;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = "Attempt to update program failed.";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            program = getProgram(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = "SQLException in updateProgramPath";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return program;
    }
} </s>
<s>class temp {    public Program deleteProgram(int id) throws AdaptationException {
        Program program = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = "SELECT * FROM Programs WHERE id = " + id;
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = "Attempt to delete program failed.";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            program = getProgram(resultSet);
            query = "DELETE FROM Programs WHERE id = " + id;
            statement.executeUpdate(query);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = "SQLException in deleteProgram";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return program;
    }
} </s>
<s>class temp {    private static void copyImage(String srcImg, String destImg) {
        try {
            FileChannel srcChannel = new FileInputStream(srcImg).getChannel();
            FileChannel dstChannel = new FileOutputStream(destImg).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public HttpResponse executeWithoutRewriting(HttpUriRequest request, HttpContext context) throws IOException {
        int code = -1;
        long start = SystemClock.elapsedRealtime();
        try {
            HttpResponse response;
            mConnectionAllocated.set(null);
            if (NetworkStatsEntity.shouldLogNetworkStats()) {
                int uid = android.os.Process.myUid();
                long startTx = NetStat.getUidTxBytes(uid);
                long startRx = NetStat.getUidRxBytes(uid);
                response = mClient.execute(request, context);
                HttpEntity origEntity = response == null ? null : response.getEntity();
                if (origEntity != null) {
                    long now = SystemClock.elapsedRealtime();
                    long elapsed = now - start;
                    NetworkStatsEntity entity = new NetworkStatsEntity(origEntity, mAppName, uid, startTx, startRx, elapsed, now);
                    response.setEntity(entity);
                }
            } else {
                response = mClient.execute(request, context);
            }
            code = response.getStatusLine().getStatusCode();
            return response;
        } finally {
            try {
                long elapsed = SystemClock.elapsedRealtime() - start;
                ContentValues values = new ContentValues();
                values.put(Checkin.Stats.COUNT, 1);
                values.put(Checkin.Stats.SUM, elapsed / 1000.0);
                values.put(Checkin.Stats.TAG, Checkin.Stats.Tag.HTTP_REQUEST + ":" + mAppName);
                mResolver.insert(Checkin.Stats.CONTENT_URI, values);
                if (mConnectionAllocated.get() == null && code >= 0) {
                    values.put(Checkin.Stats.TAG, Checkin.Stats.Tag.HTTP_REUSED + ":" + mAppName);
                    mResolver.insert(Checkin.Stats.CONTENT_URI, values);
                }
                String status = code < 0 ? "IOException" : Integer.toString(code);
                values.put(Checkin.Stats.TAG, Checkin.Stats.Tag.HTTP_STATUS + ":" + mAppName + ":" + status);
                mResolver.insert(Checkin.Stats.CONTENT_URI, values);
            } catch (Exception e) {
                Log.e(TAG, "Error recording stats", e);
            }
        }
    }
} </s>
<s>class temp {    public HttpResponse execute(HttpUriRequest request, HttpContext context) throws IOException {
        URI uri = request.getURI();
        String original = uri.toString();
        UrlRules rules = UrlRules.getRules(mResolver);
        UrlRules.Rule rule = rules.matchRule(original);
        String rewritten = rule.apply(original);
        if (rewritten == null) {
            Log.w(TAG, "Blocked by " + rule.mName + ": " + original);
            throw new BlockedRequestException(rule);
        } else if (rewritten == original) {
            return executeWithoutRewriting(request, context);
        }
        try {
            uri = new URI(rewritten);
        } catch (URISyntaxException e) {
            throw new RuntimeException("Bad URL from rule: " + rule.mName, e);
        }
        RequestWrapper wrapper = wrapRequest(request);
        wrapper.setURI(uri);
        request = wrapper;
        if (LOCAL_LOGV) Log.v(TAG, "Rule " + rule.mName + ": " + original + " -> " + rewritten);
        return executeWithoutRewriting(request, context);
    }
} </s>
<s>class temp {    public synchronized void connect() throws FTPConnectionException {
        checkLocked();
        try {
            int reply;
            this.disconnect();
            if (isSecured()) {
                this.client = new FTPSClient(protocol, protection, impliciteSec, null, null);
            } else {
                this.client = new FTPClient();
            }
            if (this.controlEncoding != null) {
                this.client.setControlEncoding(this.controlEncoding);
                debug("control encoding : ", controlEncoding);
            }
            Logger.defaultLogger().info("Trying to connect to server : " + this.remoteServer + " ...");
            debug("connect : connect", remoteServer);
            client.connect(remoteServer, this.remotePort);
            Logger.defaultLogger().info("Received FTP server response : " + formatFTPReplyString(client.getReplyString()));
            this.connectionId = Util.getRndLong();
            reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                String msg = formatFTPReplyString(client.getReplyString());
                this.disconnect();
                throw new FTPConnectionException("Unable to communicate with remote FTP server. Got message : " + msg);
            } else {
                Logger.defaultLogger().info("Trying to log in with user : " + this.login + " ...");
                debug("connect : login", login + "/" + password);
                if (!client.login(this.login, this.password)) {
                    String msg = formatFTPReplyString(client.getReplyString());
                    this.disconnect();
                    throw new FTPConnectionException("Unable to login on FTP server (" + login + "/" + password + "). Received response : " + msg);
                } else {
                    Logger.defaultLogger().info("Logged in with user : " + this.login + ". Received response : " + formatFTPReplyString(client.getReplyString()));
                    if (this.passivMode) {
                        Logger.defaultLogger().info("Switching to passive mode ...");
                        debug("connect : pasv");
                        client.enterLocalPassiveMode();
                        reply = client.getReplyCode();
                        if (!FTPReply.isPositiveCompletion(reply)) {
                            String msg = formatFTPReplyString(client.getReplyString());
                            this.disconnect();
                            throw new FTPConnectionException("Unable to switch to passiv mode. Received response : " + msg);
                        } else {
                            this.updateOpTime();
                        }
                    } else {
                        this.updateOpTime();
                    }
                    debug("connect : bin");
                    client.setFileType(FTP.BINARY_FILE_TYPE);
                    Logger.defaultLogger().info("Connected to server : " + this.remoteServer);
                }
            }
        } catch (UnknownHostException e) {
            resetClient(e);
            throw new FTPConnectionException("Unknown FTP server : " + this.remoteServer);
        } catch (SocketException e) {
            resetClient(e);
            throw new FTPConnectionException("Error during FTP connection : " + e.getMessage());
        } catch (IOException e) {
            resetClient(e);
            throw new FTPConnectionException("Error during FTP connection : " + e.getMessage());
        } finally {
            clearCache();
        }
    }
} </s>
<s>class temp {    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }
} </s>
<s>class temp {    public void loginMD5() throws Exception {
        GetMethod get = new GetMethod("http://login.yahoo.com/config/login?.src=www&.done=http://www.yahoo.com");
        get.setRequestHeader("user-agent", "Mozilla/5.0 (Macintosh; U; PPC MacOS X; en-us) AppleWebKit/124 (KHTML, like Gecko) Safari/125.1");
        client.executeMethod(get);
        parseResponse(get.getResponseBodyAsStream());
        MessageDigest digest = MessageDigest.getInstance("MD5");
        digest.update(password.getBytes("US-ASCII"));
        String hash1 = new String(digest.digest(), "US-ASCII");
        String hash2 = hash1 + challenge;
        digest.update(hash2.getBytes("US-ASCII"));
        String hash = new String(digest.digest(), "US-ASCII");
        NameValuePair[] pairs = { new NameValuePair("login", login), new NameValuePair("password", hash), new NameValuePair(".save", "1"), new NameValuePair(".tries", "1"), new NameValuePair(".src", "www"), new NameValuePair(".md5", "1"), new NameValuePair(".hash", "1"), new NameValuePair(".js", "1"), new NameValuePair(".last", ""), new NameValuePair(".promo", ""), new NameValuePair(".intl", "us"), new NameValuePair(".bypass", ""), new NameValuePair(".u", u), new NameValuePair(".v", "0"), new NameValuePair(".challenge", challenge), new NameValuePair(".yplus", ""), new NameValuePair(".emailCode", ""), new NameValuePair("pkg", ""), new NameValuePair("stepid", ""), new NameValuePair(".ev", ""), new NameValuePair("hasMsgr", "0"), new NameValuePair(".chkP", "Y"), new NameValuePair(".done", "http://www.yahoo.com"), new NameValuePair(".persistent", "y") };
        get = new GetMethod("http://login.yahoo.com/config/login");
        get.setRequestHeader("user-agent", "Mozilla/5.0 (Macintosh; U; PPC MacOS X; en-us) AppleWebKit/124 (KHTML, like Gecko) Safari/125.1");
        get.addRequestHeader("Accept", "*/*");
        get.addRequestHeader("Accept-Language", "en-us, ja;q=0.21, de-de;q=0.86, de;q=0.79, fr-fr;q=0.71, fr;q=0.64, nl-nl;q=0.57, nl;q=0.50, it-it;q=0.43, it;q=0.36, ja-jp;q=0.29, en;q=0.93, es-es;q=0.14, es;q=0.07");
        get.setQueryString(pairs);
        client.executeMethod(get);
        get.getResponseBodyAsString();
    }
} </s>
<s>class temp {    private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException {
        monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));
        final Map<String, byte[]> files = readArchiveFile(sourceFileName);
        monitor.worked(10);
        IProject project = workspaceRoot.getProject(pluginName);
        if (project.exists()) {
            project.delete(true, true, new SubProgressMonitor(monitor, 5));
        } else {
            monitor.worked(5);
        }
        project.create(new SubProgressMonitor(monitor, 5));
        project.open(new SubProgressMonitor(monitor, 5));
        IProjectDescription description = project.getDescription();
        description.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });
        project.setDescription(description, new SubProgressMonitor(monitor, 5));
        IJavaProject javaProject = JavaCore.create(project);
        IFolder binDir = project.getFolder("bin");
        IPath binPath = binDir.getFullPath();
        javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));
        project.getFolder("jni").create(true, true, new SubProgressMonitor(monitor, 5));
        project.getFile("sapjco3.jar").create(new ByteArrayInputStream(files.get("sapjco3.jar")), true, new SubProgressMonitor(monitor, 10));
        IFolder metaInfFolder = project.getFolder("META-INF");
        metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));
        StringBuilder manifest = new StringBuilder();
        manifest.append("Manifest-Version: 1.0\n");
        manifest.append("Bundle-ManifestVersion: 2\n");
        manifest.append("Bundle-Name: SAP Java Connector v3\n");
        manifest.append(MessageFormat.format("Bundle-SymbolicName: {0}\n", pluginName));
        manifest.append("Bundle-Version: 7.11.0\n");
        manifest.append("Bundle-ClassPath: bin/,\n");
        manifest.append(" sapjco3.jar,\n");
        manifest.append(" jni/\n");
        manifest.append("Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\n");
        manifest.append("Bundle-RequiredExecutionEnvironment: J2SE-1.5\n");
        manifest.append("Export-Package: com.sap.conn.jco,\n");
        manifest.append(" com.sap.conn.jco.ext,\n");
        manifest.append(" com.sap.conn.jco.monitor,\n");
        manifest.append(" com.sap.conn.jco.rt,\n");
        manifest.append(" com.sap.conn.jco.server\n");
        manifest.append("Bundle-ActivationPolicy: lazy\n");
        writeTextFile(monitor, manifest, metaInfFolder.getFile("MANIFEST.MF"));
        final IPath jcoPath = new Path(MessageFormat.format("/{0}/sapjco3.jar", pluginName));
        IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);
        final IPath jniPath = new Path(MessageFormat.format("/{0}/jni", pluginName));
        IClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true);
        javaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry, jniEntry }, new SubProgressMonitor(monitor, 5));
        StringBuilder buildProperties = new StringBuilder();
        buildProperties.append("bin.includes = META-INF/,\\\n");
        buildProperties.append("               sapjco3.jar,\\\n");
        buildProperties.append("               jni/,\\\n");
        buildProperties.append("               .\n");
        writeTextFile(monitor, buildProperties, project.getFile("build.properties"));
        exportableBundles.add(modelManager.findModel(project));
    }
} </s>
<s>class temp {    private void createIDocPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName, String pluginNameJCo) throws CoreException, IOException {
        monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));
        final Map<String, byte[]> files = readArchiveFile(sourceFileName);
        monitor.worked(10);
        IProject project = workspaceRoot.getProject(pluginName);
        if (project.exists()) {
            project.delete(true, true, new SubProgressMonitor(monitor, 5));
        } else {
            monitor.worked(5);
        }
        project.create(new SubProgressMonitor(monitor, 5));
        project.open(new SubProgressMonitor(monitor, 5));
        IProjectDescription description = project.getDescription();
        description.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });
        project.setDescription(description, new SubProgressMonitor(monitor, 5));
        IJavaProject javaProject = JavaCore.create(project);
        IFolder binDir = project.getFolder("bin");
        IPath binPath = binDir.getFullPath();
        javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));
        project.getFile("sapidoc3.jar").create(new ByteArrayInputStream(files.get("sapidoc3.jar")), true, new SubProgressMonitor(monitor, 15));
        IFolder metaInfFolder = project.getFolder("META-INF");
        metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));
        StringBuilder manifest = new StringBuilder();
        manifest.append("Manifest-Version: 1.0\n");
        manifest.append("Bundle-ManifestVersion: 2\n");
        manifest.append("Bundle-Name: SAP IDoc Library v3\n");
        manifest.append(MessageFormat.format("Bundle-SymbolicName: {0}\n", pluginName));
        manifest.append("Bundle-Version: 7.11.0\n");
        manifest.append("Bundle-ClassPath: bin/,\n");
        manifest.append(" sapidoc3.jar\n");
        manifest.append("Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\n");
        manifest.append("Bundle-RequiredExecutionEnvironment: J2SE-1.5\n");
        manifest.append("Export-Package: com.sap.conn.idoc,\n");
        manifest.append(" com.sap.conn.idoc.jco,\n");
        manifest.append(" com.sap.conn.idoc.rt.cp,\n");
        manifest.append(" com.sap.conn.idoc.rt.record,\n");
        manifest.append(" com.sap.conn.idoc.rt.record.impl,\n");
        manifest.append(" com.sap.conn.idoc.rt.trace,\n");
        manifest.append(" com.sap.conn.idoc.rt.util,\n");
        manifest.append(" com.sap.conn.idoc.rt.xml\n");
        manifest.append("Bundle-ActivationPolicy: lazy\n");
        manifest.append(MessageFormat.format("Require-Bundle: {0}\n", pluginNameJCo));
        writeTextFile(monitor, manifest, metaInfFolder.getFile("MANIFEST.MF"));
        final IPath jcoPath = new Path(MessageFormat.format("/{0}/sapidoc3.jar", pluginName));
        IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);
        javaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry }, new SubProgressMonitor(monitor, 5));
        StringBuilder buildProperties = new StringBuilder();
        buildProperties.append("bin.includes = META-INF/,\\\n");
        buildProperties.append("               sapidoc3.jar,\\\n");
        buildProperties.append("               .\n");
        writeTextFile(monitor, buildProperties, project.getFile("build.properties"));
        exportableBundles.add(modelManager.findModel(project));
    }
} </s>
<s>class temp {    public static String hashPassword(String plaintext) {
        if (plaintext == null) {
            return "";
        }
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA1");
            md.update(plaintext.getBytes("UTF-8"));
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Problem hashing password.", e);
        }
        return new String(Base64.encodeBase64(md.digest()));
    }
} </s>
<s>class temp {    public void runTask(HashMap pjobParms) throws Exception {
        FTPClient lftpClient = null;
        FileOutputStream lfosTargetFile = null;
        JBJFPluginDefinition lpluginCipher = null;
        IJBJFPluginCipher theCipher = null;
        try {
            JBJFFTPDefinition lxmlFTP = null;
            if (getFTPDefinition() != null) {
                lxmlFTP = getFTPDefinition();
                this.mstrSourceDirectory = lxmlFTP.getSourceDirectory();
                this.mstrTargetDirectory = lxmlFTP.getTargetDirectory();
                this.mstrFilename = lxmlFTP.getFilename();
                this.mstrRemoteServer = lxmlFTP.getServer();
                if (getResources().containsKey("plugin-cipher")) {
                    lpluginCipher = (JBJFPluginDefinition) getResources().get("plugin-cipher");
                }
                if (lpluginCipher != null) {
                    theCipher = getTaskPlugins().getCipherPlugin(lpluginCipher.getPluginId());
                }
                if (theCipher != null) {
                    this.mstrServerUsr = theCipher.decryptString(lxmlFTP.getUser());
                    this.mstrServerPwd = theCipher.decryptString(lxmlFTP.getPass());
                } else {
                    this.mstrServerUsr = lxmlFTP.getUser();
                    this.mstrServerPwd = lxmlFTP.getPass();
                }
            } else {
                throw new Exception("Work unit [ " + SHORT_NAME + " ] is missing an FTP Definition.  Please check" + " your JBJF Batch Definition file an make sure" + " this work unit has a <resource> element added" + " within the <task> element.");
            }
            lfosTargetFile = new FileOutputStream(mstrTargetDirectory + File.separator + mstrFilename);
            lftpClient = new FTPClient();
            lftpClient.connect(mstrRemoteServer);
            lftpClient.setFileType(lxmlFTP.getFileTransferType());
            if (!FTPReply.isPositiveCompletion(lftpClient.getReplyCode())) {
                throw new Exception("FTP server [ " + mstrRemoteServer + " ] refused connection.");
            }
            if (!lftpClient.login(mstrServerUsr, mstrServerPwd)) {
                throw new Exception("Unable to login to server [ " + mstrTargetDirectory + " ].");
            }
            if (!lftpClient.changeWorkingDirectory(mstrSourceDirectory)) {
                throw new Exception("Unable to change to remote directory [ " + mstrSourceDirectory + "]");
            }
            lftpClient.enterLocalPassiveMode();
            if (!lftpClient.retrieveFile(mstrFilename, lfosTargetFile)) {
                throw new Exception("Unable to download [ " + mstrSourceDirectory + "/" + mstrFilename + " to " + mstrTargetDirectory + File.separator + mstrFilename + " ] from server [ " + mstrRemoteServer + " ]");
            }
            lfosTargetFile.close();
            lftpClient.logout();
        } catch (Exception e) {
            throw e;
        } finally {
            if (lftpClient != null && lftpClient.isConnected()) {
                try {
                    lftpClient.disconnect();
                } catch (IOException ioe) {
                }
            }
            if (lfosTargetFile != null) {
                try {
                    lfosTargetFile.close();
                } catch (Exception e) {
                }
            }
        }
    }
} </s>
<s>class temp {    public File copyLocalFileAsTempFileInExternallyAccessableDir(String localFileRef) throws IOException {
        log.debug("copyLocalFileAsTempFileInExternallyAccessableDir");
        File f = this.createTempFileInExternallyAccessableDir();
        FileChannel srcChannel = new FileInputStream(localFileRef).getChannel();
        FileChannel dstChannel = new FileOutputStream(f).getChannel();
        log.debug("before transferring via FileChannel from src-inputStream: " + localFileRef + " to dest-outputStream: " + f.getAbsolutePath());
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        log.debug("copyLocalFileAsTempFileInExternallyAccessableDir returning: " + f.getAbsolutePath());
        return f;
    }
} </s>
<s>class temp {    private InputStream fetch(String urlString) throws MalformedURLException, IOException {
        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpGet request = new HttpGet(urlString);
        HttpResponse response = httpClient.execute(request);
        return response.getEntity().getContent();
    }
} </s>
<s>class temp {    static String getMD5Hash(String str) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(str.getBytes());
        byte[] b = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < b.length; i++) {
            int v = (int) b[i];
            v = v < 0 ? 0x100 + v : v;
            String cc = Integer.toHexString(v);
            if (cc.length() == 1) sb.append('0');
            sb.append(cc);
        }
        return sb.toString();
    }
} </s>
<s>class temp {    @Override
    public void process(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String userAgentGroup = processUserAgent(request);
        final LiwenxRequest lRequest = new LiwenxRequestImpl(request, response, messageSource, userAgentGroup);
        Locator loc = router.route(lRequest);
        if (loc instanceof RedirectLocator) {
            response.sendRedirect(((RedirectLocator) loc).getPage());
        } else {
            ((AbstractLiwenxRequest) lRequest).setRequestedLocator(loc);
            try {
                LiwenxResponse resp = processPage(lRequest, lRequest.getRequestedLocator(), maxRedirections);
                processHeaders(resp, response);
                processCookies(resp, response);
                if (resp instanceof ExternalRedirectionResponse) {
                    response.sendRedirect(((ExternalRedirectionResponse) resp).getRedirectTo());
                } else if (resp instanceof BinaryResponse) {
                    BinaryResponse bResp = (BinaryResponse) resp;
                    response.setContentType(bResp.getMimeType().toString());
                    IOUtils.copy(bResp.getInputStream(), response.getOutputStream());
                } else if (resp instanceof XmlResponse) {
                    final Element root = ((XmlResponse) resp).getXml();
                    Document doc = root.getDocument();
                    if (doc == null) {
                        doc = new Document(root);
                    }
                    final Locator l = lRequest.getCurrentLocator();
                    final Device device = l.getDevice();
                    response.setContentType(calculateContentType(device));
                    response.setCharacterEncoding(encoding);
                    if (device == Device.HTML) {
                        view.processView(doc, l.getLocale(), userAgentGroup, response.getWriter());
                    } else {
                        Serializer s = new Serializer(response.getOutputStream(), encoding);
                        s.write(doc);
                    }
                }
            } catch (PageNotFoundException e) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
            } catch (TooManyRedirectionsException e) {
                throw e;
            } catch (Exception e) {
                throw e;
            }
        }
    }
} </s>
<s>class temp {    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
} </s>
<s>class temp {    public void render(ServiceContext serviceContext) throws Exception {
        if (serviceContext.getTemplateName() == null) throw new Exception("no Template defined for service: " + serviceContext.getServiceInfo().getRefName());
        File f = new File(serviceContext.getTemplateName());
        serviceContext.getResponse().setContentLength((int) f.length());
        InputStream in = new FileInputStream(f);
        IOUtils.copy(in, serviceContext.getResponse().getOutputStream(), 0, (int) f.length());
        in.close();
    }
} </s>
<s>class temp {    public DialogSongList(JFrame frame) {
        super(frame, "Menu_SongList", "songList");
        setMinimumSize(new Dimension(400, 200));
        JPanel panel, spanel;
        Container contentPane;
        (contentPane = getContentPane()).add(songSelector = new SongSelector(configKey, null, true));
        songSelector.setSelectionAction(new Runnable() {

            public void run() {
                final Item<URL, MidiFileInfo> item = songSelector.getSelectedInfo();
                if (item != null) {
                    try {
                        selection = new File(item.getKey().toURI());
                        author.setEnabled(true);
                        title.setEnabled(true);
                        difficulty.setEnabled(true);
                        save.setEnabled(true);
                        final MidiFileInfo info = item.getValue();
                        author.setText(info.getAuthor());
                        title.setText(info.getTitle());
                        Util.selectKey(difficulty, info.getDifficulty());
                        return;
                    } catch (Exception e) {
                    }
                }
                selection = null;
                author.setEnabled(false);
                title.setEnabled(false);
                difficulty.setEnabled(false);
                save.setEnabled(false);
            }
        });
        contentPane.add(panel = new JPanel(), BorderLayout.SOUTH);
        panel.setLayout(new BorderLayout());
        JScrollPane scrollPane;
        panel.add(scrollPane = new JScrollPane(spanel = new JPanel()), BorderLayout.NORTH);
        scrollPane.setPreferredSize(new Dimension(0, 60));
        Util.addLabeledComponent(spanel, "Lbl_Author", author = new JTextField(10));
        Util.addLabeledComponent(spanel, "Lbl_Title", title = new JTextField(14));
        Util.addLabeledComponent(spanel, "Lbl_Difficulty", difficulty = new JComboBox());
        difficulty.addItem(new Item<Byte, String>((byte) -1, ""));
        for (Map.Entry<Byte, String> entry : SongSelector.DIFFICULTIES.entrySet()) {
            final String value = entry.getValue();
            difficulty.addItem(new Item<Byte, String>(entry.getKey(), Util.getMsg(value, value), value));
        }
        spanel.add(save = new JButton());
        Util.updateButtonText(save, "Save");
        save.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                final File selected = MidiSong.setMidiFileInfo(selection, author.getText(), title.getText(), getAsByte(difficulty));
                SongSelector.refresh();
                try {
                    songSelector.setSelected(selected == null ? null : selected.toURI().toURL());
                } catch (MalformedURLException ex) {
                }
            }
        });
        author.setEnabled(false);
        title.setEnabled(false);
        difficulty.setEnabled(false);
        save.setEnabled(false);
        JButton button;
        panel.add(spanel = new JPanel(), BorderLayout.WEST);
        spanel.add(button = new JButton());
        Util.updateButtonText(button, "Import");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                final File inputFile = KeyboardHero.midiFile();
                try {
                    if (inputFile == null) return;
                    final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR));
                    if (dir.exists()) {
                        if (!dir.isDirectory()) {
                            Util.error(Util.getMsg("Err_MidiFilesDirNotDirectory"), dir.getParent());
                            return;
                        }
                    } else if (!dir.mkdirs()) {
                        Util.error(Util.getMsg("Err_CouldntMkDir"), dir.getParent());
                        return;
                    }
                    File outputFile = new File(dir.getPath() + File.separator + inputFile.getName());
                    if (!outputFile.exists() || KeyboardHero.confirm("Que_FileExistsOverwrite")) {
                        final FileChannel inChannel = new FileInputStream(inputFile).getChannel();
                        inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel());
                    }
                } catch (Exception ex) {
                    Util.getMsg(Util.getMsg("Err_CouldntImportSong"), ex.toString());
                }
                SongSelector.refresh();
            }
        });
        spanel.add(button = new JButton());
        Util.updateButtonText(button, "Delete");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (KeyboardHero.confirm(Util.getMsg("Que_SureToDelete"))) {
                    try {
                        new File(songSelector.getSelectedFile().toURI()).delete();
                    } catch (Exception ex) {
                        Util.error(Util.getMsg("Err_CouldntDeleteFile"), ex.toString());
                    }
                    SongSelector.refresh();
                }
            }
        });
        panel.add(spanel = new JPanel(), BorderLayout.CENTER);
        spanel.setLayout(new FlowLayout());
        spanel.add(button = new JButton());
        Util.updateButtonText(button, "Close");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                close();
            }
        });
        spanel.add(button = new JButton());
        Util.updateButtonText(button, "Play");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                Game.newGame(songSelector.getSelectedFile());
                close();
            }
        });
        panel.add(spanel = new JPanel(), BorderLayout.EAST);
        spanel.add(button = new JButton());
        Util.updateButtonText(button, "Refresh");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                SongSelector.refresh();
            }
        });
        getRootPane().setDefaultButton(button);
        instance = this;
    }
} </s>
<s>class temp {            public void actionPerformed(ActionEvent e) {
                final File inputFile = KeyboardHero.midiFile();
                try {
                    if (inputFile == null) return;
                    final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR));
                    if (dir.exists()) {
                        if (!dir.isDirectory()) {
                            Util.error(Util.getMsg("Err_MidiFilesDirNotDirectory"), dir.getParent());
                            return;
                        }
                    } else if (!dir.mkdirs()) {
                        Util.error(Util.getMsg("Err_CouldntMkDir"), dir.getParent());
                        return;
                    }
                    File outputFile = new File(dir.getPath() + File.separator + inputFile.getName());
                    if (!outputFile.exists() || KeyboardHero.confirm("Que_FileExistsOverwrite")) {
                        final FileChannel inChannel = new FileInputStream(inputFile).getChannel();
                        inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel());
                    }
                } catch (Exception ex) {
                    Util.getMsg(Util.getMsg("Err_CouldntImportSong"), ex.toString());
                }
                SongSelector.refresh();
            }
} </s>
<s>class temp {    public static void copyFile(File in, File outDir) throws IOException {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            File out = new File(outDir, in.getName());
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            try {
                if (sourceChannel != null) {
                    sourceChannel.close();
                }
            } finally {
                if (destinationChannel != null) {
                    destinationChannel.close();
                }
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        SocketConnector socketConnector = new SocketConnector();
        socketConnector.setPort(6080);
        SslSocketConnector sslSocketConnector = new SslSocketConnector();
        sslSocketConnector.setPort(6443);
        String serverKeystore = MockHttpListenerWithAuthentication.class.getClassLoader().getResource("cert/serverkeystore.jks").getPath();
        sslSocketConnector.setKeystore(serverKeystore);
        sslSocketConnector.setKeyPassword("serverpass");
        String serverTruststore = MockHttpListenerWithAuthentication.class.getClassLoader().getResource("cert/servertruststore.jks").getPath();
        sslSocketConnector.setTruststore(serverTruststore);
        sslSocketConnector.setTrustPassword("serverpass");
        server.addConnector(socketConnector);
        server.addConnector(sslSocketConnector);
        SecurityHandler securityHandler = createBasicAuthenticationSecurityHandler();
        HandlerList handlerList = new HandlerList();
        handlerList.addHandler(securityHandler);
        handlerList.addHandler(new AbstractHandler() {

            @Override
            public void handle(String s, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, int i) throws IOException, ServletException {
                System.out.println("uri: " + httpServletRequest.getRequestURI());
                System.out.println("queryString: " + httpServletRequest.getQueryString());
                System.out.println("method: " + httpServletRequest.getMethod());
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                IOUtils.copy(httpServletRequest.getInputStream(), baos);
                System.out.println("body: " + baos.toString());
                PrintWriter writer = httpServletResponse.getWriter();
                writer.append("testsvar");
                Random r = new Random();
                for (int j = 0; j < 10; j++) {
                    int value = r.nextInt(Integer.MAX_VALUE);
                    writer.append(value + "");
                }
                System.out.println();
                writer.close();
                httpServletResponse.setStatus(HttpServletResponse.SC_OK);
            }
        });
        server.addHandler(handlerList);
        server.start();
    }
} </s>
<s>class temp {            @Override
            public void handle(String s, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, int i) throws IOException, ServletException {
                System.out.println("uri: " + httpServletRequest.getRequestURI());
                System.out.println("queryString: " + httpServletRequest.getQueryString());
                System.out.println("method: " + httpServletRequest.getMethod());
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                IOUtils.copy(httpServletRequest.getInputStream(), baos);
                System.out.println("body: " + baos.toString());
                PrintWriter writer = httpServletResponse.getWriter();
                writer.append("testsvar");
                Random r = new Random();
                for (int j = 0; j < 10; j++) {
                    int value = r.nextInt(Integer.MAX_VALUE);
                    writer.append(value + "");
                }
                System.out.println();
                writer.close();
                httpServletResponse.setStatus(HttpServletResponse.SC_OK);
            }
} </s>
<s>class temp {    private int mergeFiles(Merge merge) throws MojoExecutionException {
        String encoding = DEFAULT_ENCODING;
        if (merge.getEncoding() != null && merge.getEncoding().length() > 0) {
            encoding = merge.getEncoding();
        }
        int numMergedFiles = 0;
        Writer ostream = null;
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(merge.getTargetFile(), true);
            ostream = new OutputStreamWriter(fos, encoding);
            BufferedWriter output = new BufferedWriter(ostream);
            for (String orderingName : this.orderingNames) {
                List<File> files = this.orderedFiles.get(orderingName);
                if (files != null) {
                    getLog().info("Appending: " + files.size() + " files that matched the name: " + orderingName + " to the target file: " + merge.getTargetFile().getAbsolutePath() + "...");
                    for (File file : files) {
                        String fileName = file.getName();
                        getLog().info("Appending file: " + fileName + " to the target file: " + merge.getTargetFile().getAbsolutePath() + "...");
                        InputStream input = null;
                        try {
                            input = new FileInputStream(file);
                            if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) {
                                String replaced = merge.getSeparator().trim();
                                replaced = replaced.replace("\n", "");
                                replaced = replaced.replace("\t", "");
                                replaced = replaced.replace("#{file.name}", fileName);
                                replaced = replaced.replace("#{parent.name}", file.getParentFile() != null ? file.getParentFile().getName() : "");
                                replaced = replaced.replace("\\n", "\n");
                                replaced = replaced.replace("\\t", "\t");
                                getLog().debug("Appending separator: " + replaced);
                                IOUtils.copy(new StringReader(replaced), output);
                            }
                            IOUtils.copy(input, output, encoding);
                        } catch (IOException ioe) {
                            throw new MojoExecutionException("Failed to append file: " + fileName + " to output file", ioe);
                        } finally {
                            IOUtils.closeQuietly(input);
                        }
                        numMergedFiles++;
                    }
                }
            }
            output.flush();
        } catch (IOException ioe) {
            throw new MojoExecutionException("Failed to open stream file to output file: " + merge.getTargetFile().getAbsolutePath(), ioe);
        } finally {
            if (fos != null) {
                IOUtils.closeQuietly(fos);
            }
            if (ostream != null) {
                IOUtils.closeQuietly(ostream);
            }
        }
        return numMergedFiles;
    }
} </s>
<s>class temp {    public Vector parse(String link) {
        addMessage("Parsing: " + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty("IgnoreCharsetDirective", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println("Malformed URL");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf("script") >= 0) continue;
                    String lnk = "";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith("http")) continue;
                    if (str.endsWith(".pdf")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals("application/pdf")) {
                            continue;
                        } else if (!contentType.equals("text/html")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
} </s>
<s>class temp {    public void jsFunction_extract(ScriptableFile outputFile) throws IOException, FileSystemException, ArchiveException {
        InputStream is = file.jsFunction_createInputStream();
        OutputStream output = outputFile.jsFunction_createOutputStream();
        BufferedInputStream buf = new BufferedInputStream(is);
        ArchiveInputStream input = ScriptableZipArchive.getFactory().createArchiveInputStream(buf);
        try {
            long count = 0;
            while (input.getNextEntry() != null) {
                if (count == offset) {
                    IOUtils.copy(input, output);
                    break;
                }
                count++;
            }
        } finally {
            input.close();
            output.close();
            is.close();
        }
    }
} </s>
<s>class temp {    public ServiceAdapterIfc deploy(String session, String name, byte jarBytes[], String jarName, String serviceClass, String serviceInterface) throws RemoteException, MalformedURLException, StartServiceException, SessionException {
        try {
            File jarFile = new File(jarName);
            jarName = jarFile.getName();
            String jarName2 = jarName;
            jarFile = new File(jarName2);
            int n = 0;
            while (jarFile.exists()) {
                jarName2 = jarName + n++;
                jarFile = new File(jarName2);
            }
            FileOutputStream fos = new FileOutputStream(jarName2);
            IOUtils.copy(new ByteArrayInputStream(jarBytes), fos);
            SCClassLoader cl = new SCClassLoader(new URL[] { new URL("file://" + jarFile.getAbsolutePath()) }, getMasterNode().getSCClassLoaderCounter());
            return startService(session, name, serviceClass, serviceInterface, cl);
        } catch (SessionException e) {
            throw e;
        } catch (Exception e) {
            throw new StartServiceException("Could not deploy service: " + e.getMessage(), e);
        }
    }
} </s>
<s>class temp {    public static Object deployNewService(String scNodeRmiName, String userName, String password, String name, String jarName, String serviceClass, String serviceInterface, Logger log) throws RemoteException, MalformedURLException, StartServiceException, NotBoundException, IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, SessionException {
        try {
            SCNodeInterface node = (SCNodeInterface) Naming.lookup(scNodeRmiName);
            String session = node.login(userName, password);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(new FileInputStream(jarName), baos);
            ServiceAdapterIfc adapter = node.deploy(session, name, baos.toByteArray(), jarName, serviceClass, serviceInterface);
            if (adapter != null) {
                return new ExternalDomain(node, adapter, adapter.getUri(), log).getProxy(Thread.currentThread().getContextClassLoader());
            }
        } catch (Exception e) {
            log.warn("Could not send deploy command: " + e.getMessage(), e);
        }
        return null;
    }
} </s>
