<s>class temp {    public static String digest(String pBase, String pCharSet) {
        String wdgs = null;
        try {
            MessageDigest wmd = MessageDigest.getInstance("MD5");
            wmd.reset();
            wmd.update(pBase.getBytes(pCharSet));
            byte[] wdg = wmd.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < wdg.length; i++) {
                String w_dup = Integer.toHexString(0xFF & wdg[i]);
                if (w_dup.length() < 2) {
                    w_dup = "0" + w_dup;
                }
                hexString.append(w_dup);
            }
            wdgs = hexString.toString();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } finally {
            return wdgs;
        }
    }
} </s>
<s>class temp {    public static String getPagina(String strurl) {
        String resp = "";
        Authenticator.setDefault(new Autenticador());
        try {
            URL url = new URL(strurl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                resp += str;
            }
            in.close();
        } catch (MalformedURLException e) {
            resp = e.toString();
        } catch (IOException e) {
            resp = e.toString();
        } catch (Exception e) {
            resp = e.toString();
        }
        return resp;
    }
} </s>
<s>class temp {    public void maj(String titre, String num_version) {
        int res = 2;
        String content_xml = "";
        try {
            URL url = new URL("http://code.google.com/feeds/p/tux-team/downloads/basic");
            InputStreamReader ipsr = new InputStreamReader(url.openStream());
            BufferedReader br = new BufferedReader(ipsr);
            String line = null;
            StringBuffer buffer = new StringBuffer();
            while ((line = br.readLine()) != null) {
                buffer.append(line).append('\n');
            }
            br.close();
            content_xml = buffer.toString();
            res = lecture_xml(titre, num_version, content_xml);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        switch(res) {
            case 0:
                ihm.jl_maj.setText("Pas de mises à jour disponible. (" + num_version + ")");
                ihm.jl_maj.setIcon(Resources.getImageIcon("images/valide.png", IHM_AProposDe.class));
                break;
            case 1:
                ihm.jl_maj.setText("Une mise à jour est diponible. (" + maj_file_version + ")");
                ihm.jl_maj.setIcon(Resources.getImageIcon("images/warning.png", IHM_AProposDe.class));
                ihm.jb_maj.setVisible(true);
                break;
            default:
                ihm.jl_maj.setText("Serveur de mise à jour non disponible.");
                ihm.jl_maj.setIcon(Resources.getImageIcon("images/erreur.png", IHM_AProposDe.class));
        }
    }
} </s>
<s>class temp {    public Writer createWriter(File outfile, String encoding) throws UnsupportedEncodingException, IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(outfile));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, "ISO-8859-1");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot;
        ZipInputStream zis = new ZipInputStream(new FileInputStream(infile));
        InputStreamReader isr = new InputStreamReader(zis, "ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals("content.xml")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry("content.xml"));
        bw.flush();
        return new OutputStreamWriter(zos, "UTF-8");
    }
} </s>
<s>class temp {    public void restoreDrivers() throws ExplorerException {
        try {
            drivers.clear();
            URL url = URLUtil.getResourceURL("default_drivers.xml");
            loadDefaultDrivers(url.openStream());
        } catch (IOException e) {
            throw new ExplorerException(e);
        }
    }
} </s>
<s>class temp {    public void performSearch(int searchStartIndex) {
        int index = 0;
        String searchString = keywords.getText();
        searchButton.setEnabled(false);
        if (!searchString.equals("")) {
            try {
                url = new URL(searchURL + "&num=" + maxReturns.getSelectedItem().toString() + "&start=" + searchStartIndex + "&q=" + searchString);
                System.out.println("Google search = " + url);
                InputStream input = url.openStream();
                int c;
                while ((c = input.read()) != -1) {
                    result = result + (char) c;
                }
                String googleResultsFile = VueUtil.getDefaultUserFolder().getAbsolutePath() + File.separatorChar + VueResources.getString("save.google.results");
                FileWriter fileWriter = new FileWriter(googleResultsFile);
                fileWriter.write(result);
                fileWriter.close();
                result = "";
                GSP gsp = loadGSP(googleResultsFile);
                Iterator i = gsp.getRES().getResultList().iterator();
                Vector resultVector = new Vector();
                while (i.hasNext()) {
                    Result r = (Result) i.next();
                    URLResource urlResource = new URLResource(r.getUrl());
                    if (r.getTitle() != null) urlResource.setTitle(r.getTitle().replaceAll("</*[a-zA-Z]>", "")); else urlResource.setTitle(r.getUrl().toString());
                    resultVector.add(urlResource);
                    System.out.println(r.getTitle() + " " + r.getUrl());
                }
                VueDragTree tree = new VueDragTree(resultVector.iterator(), "GoogleSearchResults");
                tree.setEditable(true);
                tree.setRootVisible(false);
                googleResultsPanel.remove(jsp);
                jsp = new JScrollPane(tree);
                JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 2, 0));
                bottomPanel.add(prevButton);
                bottomPanel.add(nextButton);
                googleResultsPanel.add(bottomPanel, BorderLayout.SOUTH);
                googleResultsPanel.add(jsp, BorderLayout.CENTER);
                googleResultsPanel.validate();
                googlePane.setSelectedComponent(googleResultsPanel);
            } catch (Exception ex) {
                System.out.println("cannot connect google");
                googleResultsPanel.remove(jsp);
                JPanel jp = new JPanel(new BorderLayout());
                jp.setBackground(Color.WHITE);
                JLabel jl = new JLabel("No Match Found");
                jp.add(jl, BorderLayout.NORTH);
                JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 2, 0));
                googleResultsPanel.add(jp, BorderLayout.CENTER);
                googleResultsPanel.validate();
                googlePane.setSelectedComponent(googleResultsPanel);
            }
        }
        searchButton.setEnabled(true);
    }
} </s>
<s>class temp {    private static GSP loadGSP(URL url) {
        try {
            InputStream input = url.openStream();
            int c;
            while ((c = input.read()) != -1) {
                result = result + (char) c;
            }
            Unmarshaller unmarshaller = getUnmarshaller();
            unmarshaller.setValidation(false);
            GSP gsp = (GSP) unmarshaller.unmarshal(new InputSource());
            return gsp;
        } catch (Exception e) {
            System.out.println("loadGSP " + e);
            e.printStackTrace();
            return null;
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        if (args.length < 3) {
            usage(System.out);
            System.exit(1);
        }
        final File tmpFile = File.createTempFile("sej", null);
        tmpFile.deleteOnExit();
        final FileOutputStream destination = new FileOutputStream(tmpFile);
        final String mainClass = args[1];
        final Collection jars = new LinkedList();
        for (int i = 2; i < args.length; i++) {
            String arg = args[i];
            jars.add(arg);
        }
        JarInterpretted interpretted = new JarInterpretted(destination);
        JarCat rowr = new JarCat(destination, createManifest(mainClass), jars);
        interpretted.write();
        rowr.write();
        destination.close();
        final File finalDestinationFile = new File(args[0]);
        final FileOutputStream finalDestination = new FileOutputStream(finalDestinationFile);
        IOUtils.copy(new FileInputStream(tmpFile), finalDestination);
        finalDestination.close();
        Chmod chmod = new Chmod("a+rx", new File[] { finalDestinationFile });
        chmod.invoke();
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dst) throws IOException {
        FileChannel sourceChannel = new FileInputStream(src).getChannel();
        FileChannel destinationChannel = new FileOutputStream(dst).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
} </s>
<s>class temp {    public int sftp_connect(HttpServletRequest request) {
        Map<String, Object> setting = (Map<String, Object>) request.getAttribute("globalSetting");
        int ftpssl = Common.intval(setting.get("ftpssl") + "");
        String ftphost = setting.get("ftphost") + "";
        int ftpport = Common.intval(setting.get("ftpport") + "");
        String ftpuser = setting.get("ftpuser") + "";
        String ftppassword = setting.get("ftppassword") + "";
        int ftppasv = Common.intval(setting.get("ftppasv") + "");
        String ftpdir = setting.get("ftpdir") + "";
        int ftptimeout = Common.intval(setting.get("ftptimeout") + "");
        if (ftpssl > 0) {
            try {
                fc = new FTPSClient();
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                return JC_FTPClientException;
            }
        } else {
            fc = new FTPClient();
        }
        try {
            fc.setConnectTimeout(20000);
            InetAddress inetAddress = InetAddress.getByName(ftphost);
            fc.connect(inetAddress, ftpport);
            if (fc.login(ftpuser, ftppassword)) {
                if (ftppasv > 0) {
                    fc.pasv();
                }
                if (ftptimeout > 0) {
                    fc.setDataTimeout(ftptimeout);
                }
                if (fc.changeWorkingDirectory(ftpdir)) {
                    return JC_FTPClientYES;
                } else {
                    FileHelper.writeLog(request, "FTP", "CHDIR " + ftpdir + " ERROR.");
                    try {
                        fc.disconnect();
                        fc = null;
                    } catch (Exception e1) {
                    }
                    return JC_FTPClientNO;
                }
            } else {
                FileHelper.writeLog(request, "FTP", "530 NOT LOGGED IN.");
                try {
                    fc.disconnect();
                    fc = null;
                } catch (Exception e1) {
                }
                return JC_FTPClientNO;
            }
        } catch (Exception e) {
            FileHelper.writeLog(request, "FTP", "COULDN'T CONNECT TO " + ftphost + ":" + ftpport + ".");
            e.printStackTrace();
            if (fc != null) {
                try {
                    fc.disconnect();
                    fc = null;
                } catch (Exception e1) {
                }
            }
            return JC_FTPClientException;
        }
    }
} </s>
<s>class temp {    private InputStream createInputStream(String url) throws MalformedURLException, IOException {
        if (url.startsWith("classpath://")) {
            InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));
            if (is == null) throw new IOException("Couldn't open stream to [" + url + "]");
            return is;
        } else {
            return new URL(url).openStream();
        }
    }
} </s>
<s>class temp {    public void store(String path, InputStream stream) throws IOException {
        toIgnore.add(normalizePath(path));
        ZipEntry entry = new ZipEntry(path);
        zipOutput.putNextEntry(entry);
        IOUtils.copy(stream, zipOutput);
        zipOutput.closeEntry();
    }
} </s>
<s>class temp {    private void copyEntries() {
        if (zipFile != null) {
            Enumeration<? extends ZipEntry> enumerator = zipFile.entries();
            while (enumerator.hasMoreElements()) {
                ZipEntry entry = enumerator.nextElement();
                if (!entry.isDirectory() && !toIgnore.contains(normalizePath(entry.getName()))) {
                    ZipEntry originalEntry = new ZipEntry(entry.getName());
                    try {
                        zipOutput.putNextEntry(originalEntry);
                        IOUtils.copy(getInputStream(entry.getName()), zipOutput);
                        zipOutput.closeEntry();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    public InputStream openInput(Fragment path) throws IOException {
        int len = path.words().size();
        String p = Util.combine("/", path.words().subList(1, len));
        URL url = new URL("http", path.words().get(0), p);
        InputStream result = url.openStream();
        return result;
    }
} </s>
<s>class temp {    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    private String storeProxy(String proxyPath, String userName) throws IOException {
        File inputFile = new File(proxyPath);
        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;
        File outputFile = new File(outfile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        Process p = Runtime.getRuntime().exec("/bin/chmod 600 " + outfile);
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return outfile;
    }
} </s>
<s>class temp {    protected String getPageText(final String url) {
        StringBuilder b = new StringBuilder();
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                b.append(line).append('\n');
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
        return b.toString();
    }
} </s>
<s>class temp {    public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException("Unable to create directoy: " + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
} </s>
<s>class temp {    public static byte[] readUrl(URL url) {
        BufferedInputStream in = null;
        try {
            class Part {

                byte[] partData;

                int len;
            }
            in = new BufferedInputStream(url.openStream());
            LinkedList<Part> parts = new LinkedList<Part>();
            int len = 1;
            while (len > 0) {
                byte[] data = new byte[1024];
                len = in.read(data);
                if (len > 0) {
                    Part part = new Part();
                    part.partData = data;
                    part.len = len;
                    parts.add(part);
                }
            }
            int length = 0;
            for (Part part : parts) length += part.len;
            byte[] result = new byte[length];
            int pos = 0;
            for (Part part : parts) {
                System.arraycopy(part.partData, 0, result, pos, part.len);
                pos += part.len;
            }
            return result;
        } catch (IOException e) {
            return null;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {    public static String base64HashedString(String v) {
        String base64HashedPassword = null;
        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(v.getBytes());
            String hashedPassword = new String(md.digest());
            sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
            base64HashedPassword = enc.encode(hashedPassword.getBytes());
        } catch (java.security.NoSuchAlgorithmException e) {
            throw new NSForwardException(e, "Couldn't find the SHA hash algorithm; perhaps you do not have the SunJCE security provider installed properly?");
        }
        return base64HashedPassword;
    }
} </s>
<s>class temp {    private String getMD5Hash(String password) {
        String plainText = password;
        MessageDigest mdAlgorithm;
        StringBuffer hexString = new StringBuffer();
        try {
            mdAlgorithm = MessageDigest.getInstance("MD5");
            mdAlgorithm.update(plainText.getBytes());
            byte[] digest = mdAlgorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                plainText = Integer.toHexString(0xFF & digest[i]);
                if (plainText.length() < 2) {
                    plainText = "0" + plainText;
                }
                hexString.append(plainText);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    public boolean backupLastAuditSchema(File lastAuditSchema) {
        boolean isBkupFileOK = false;
        String writeTimestamp = DateFormatUtils.format(new java.util.Date(), configFile.getTimestampPattern());
        File target = new File(configFile.getAuditSchemaFileDir() + File.separator + configFile.getAuditSchemaFileName() + ".bkup_" + writeTimestamp);
        FileChannel sourceChannel = null;
        FileChannel targetChannel = null;
        try {
            sourceChannel = new FileInputStream(lastAuditSchema).getChannel();
            targetChannel = new FileOutputStream(target).getChannel();
            targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (IOException e) {
            logger.log(Level.SEVERE, "IO exception occurred while copying file", e);
        } finally {
            if ((target != null) && (target.exists()) && (target.length() > 0)) {
                isBkupFileOK = true;
            }
            try {
                if (sourceChannel != null) {
                    sourceChannel.close();
                }
                if (targetChannel != null) {
                    targetChannel.close();
                }
            } catch (IOException e) {
                logger.info("closing channels failed");
            }
        }
        return isBkupFileOK;
    }
} </s>
<s>class temp {    private void native2ascii(LanguageInfo info) {
        if (!info.isUTF8()) throw new IllegalArgumentException("requires utf8 language.");
        InputStream in = null;
        OutputStream out = null;
        print("\tConverting to ASCII... ");
        try {
            in = new BufferedInputStream(new FileInputStream(info.getFileName()));
            in.mark(3);
            if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) in.reset();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in, "UTF8"));
            out = new BufferedOutputStream(new FileOutputStream(info.getAlternateFileName()));
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, "ISO-8859-1"));
            String read;
            while ((read = reader.readLine()) != null) {
                writer.write(ascii(read));
                writer.newLine();
            }
            writer.flush();
            out.flush();
            println("... done!");
        } catch (IOException ignored) {
            println("... error! (" + ignored.getMessage() + ")");
        } finally {
            if (in != null) try {
                in.close();
            } catch (IOException ignored) {
            }
            if (out != null) try {
                out.close();
            } catch (IOException ignored) {
            }
        }
    }
} </s>
<s>class temp {    private void writeMessage(ChannelBuffer buffer, File dst) throws IOException {
        ChannelBufferInputStream is = new ChannelBufferInputStream(buffer);
        OutputStream os = null;
        try {
            os = new FileOutputStream(dst);
            IOUtils.copyLarge(is, os);
        } finally {
            IOUtils.closeQuietly(os);
        }
    }
} </s>
<s>class temp {    public static String getMD5(final String data) {
        try {
            MessageDigest m = MessageDigest.getInstance("MD5");
            m.reset();
            m.update(data.getBytes());
            BigInteger bigInt = new BigInteger(1, m.digest());
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return e.getMessage();
        }
    }
} </s>
<s>class temp {    @Override
    public void connect() throws IOException {
        URL url = getLocator().getURL();
        if (url.getProtocol().equals("file")) {
            final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm());
            if (newUrlStr != null) {
                if (!newUrlStr.toString().equals(url.toExternalForm())) {
                    logger.warning("Changing file URL to absolute for URL.openConnection, from " + url.toExternalForm() + " to " + newUrlStr);
                    url = new URL(newUrlStr);
                }
            }
        }
        conn = url.openConnection();
        if (!url.getProtocol().equals("ftp") && conn.getURL().getProtocol().equals("ftp")) {
            logger.warning("URL.openConnection() morphed " + url + " to " + conn.getURL());
            throw new IOException("URL.openConnection() returned an FTP connection for a non-ftp url: " + url);
        }
        if (conn instanceof HttpURLConnection) {
            final HttpURLConnection huc = (HttpURLConnection) conn;
            huc.connect();
            final int code = huc.getResponseCode();
            if (!(code >= 200 && code < 300)) {
                huc.disconnect();
                throw new IOException("HTTP response code: " + code);
            }
            logger.finer("URL: " + url);
            logger.finer("Response code: " + code);
            logger.finer("Full content type: " + conn.getContentType());
            boolean contentTypeSet = false;
            if (stripTrailer(conn.getContentType()).equals("text/plain")) {
                final String ext = PathUtils.extractExtension(url.getPath());
                if (ext != null) {
                    final String result = MimeManager.getMimeType(ext);
                    if (result != null) {
                        contentTypeStr = ContentDescriptor.mimeTypeToPackageName(result);
                        contentTypeSet = true;
                        logger.fine("Received content type " + conn.getContentType() + "; overriding based on extension, to: " + result);
                    }
                }
            }
            if (!contentTypeSet) contentTypeStr = ContentDescriptor.mimeTypeToPackageName(stripTrailer(conn.getContentType()));
        } else {
            conn.connect();
            contentTypeStr = ContentDescriptor.mimeTypeToPackageName(conn.getContentType());
        }
        contentType = new ContentDescriptor(contentTypeStr);
        sources = new URLSourceStream[1];
        sources[0] = new URLSourceStream();
        connected = true;
    }
} </s>
<s>class temp {    public void insertQuotation(final String sText, final Source aSource) throws ConfigHandlerError, com.sun.star.uno.Exception {
        final XTextDocument xTextDocument = (XTextDocument) this.docController.getXInterface(XTextDocument.class, this.docController.getXFrame().getController().getModel());
        final XMultiServiceFactory xMultiServiceFactory = (XMultiServiceFactory) this.docController.getXInterface(XMultiServiceFactory.class, xTextDocument);
        final XText xText = xTextDocument.getText();
        final XTextViewCursor xTextViewCursor = ((XTextViewCursorSupplier) this.docController.getXInterface(XTextViewCursorSupplier.class, this.docController.getXFrame().getController())).getViewCursor();
        final XTextRange xTextRange = xTextViewCursor.getStart();
        if (aSource.getSourceType() == SourceType.QUOTE || aSource.getSourceType() == SourceType.WEBQUOTE || aSource.getSourceType() == SourceType.WEBQUOTE) {
            final XPropertySet xQuoteProps = (XPropertySet) this.docController.getXInterface(XPropertySet.class, xTextViewCursor);
            if (this.docController.getTemplateController().isIndentation()) {
                xText.insertControlCharacter(xTextViewCursor, ControlCharacter.PARAGRAPH_BREAK, false);
                xQuoteProps.setPropertyValue("ParaStyleName", new String("Quotations"));
            }
            xQuoteProps.setPropertyValue("CharStyleName", new String("Citation"));
            final Object aBookmark = xMultiServiceFactory.createInstance("com.sun.star.text.Bookmark");
            this.sourceUtils.setNameToObject(aBookmark, this.docController.getLanguageController().__("Quote: ") + aSource.getShortinfo());
            final XTextContent xTextContent = (XTextContent) this.docController.getXInterface(XTextContent.class, aBookmark);
            xText.insertTextContent(xTextRange, xTextContent, false);
            this.sourceUtils.insertBibliographyEntry(xMultiServiceFactory, xTextRange, aSource, sText);
            if (this.docController.getTemplateController().isIndentation()) {
                xText.insertControlCharacter(xTextViewCursor, ControlCharacter.PARAGRAPH_BREAK, false);
                xQuoteProps.setPropertyValue("ParaStyleName", new String(this.docController.getLanguageController().__("Default")));
            }
            xQuoteProps.setPropertyValue("CharStyleName", new String(this.docController.getLanguageController().__("Default")));
        } else if (aSource.getSourceType() == SourceType.IMAGE || aSource.getSourceType() == SourceType.TABLE) {
            xText.insertControlCharacter(xTextRange, ControlCharacter.PARAGRAPH_BREAK, false);
            final XTextFrame xFrame = this.sourceUtils.getTextFrame(aSource.getShortinfo(), xMultiServiceFactory);
            xText.insertTextContent(xTextRange, xFrame, false);
            final XText xFrameText = xFrame.getText();
            final XTextCursor xFrameCursor = xFrameText.createTextCursor();
            final Size aNewSize = new Size();
            XPropertySet xBaseFrameProps = null;
            final Size aPageTextAreaSize = this.sourceUtils.getPageTextAreaSize(xTextDocument, xTextViewCursor);
            if (aSource.getSourceType() == SourceType.IMAGE) {
                try {
                    this.sourceUtils.setNameToObject(xFrame, this.docController.getLanguageController().__("Caption illustration: ") + aSource.getShortinfo());
                    final XNameContainer xBitmapContainer = (XNameContainer) this.docController.getXInterface(XNameContainer.class, xMultiServiceFactory.createInstance("com.sun.star.drawing.BitmapTable"));
                    final XTextContent xImage = (XTextContent) this.docController.getXInterface(XTextContent.class, xMultiServiceFactory.createInstance("com.sun.star.text.TextGraphicObject"));
                    this.sourceUtils.setNameToObject(xImage, this.docController.getLanguageController().__("Illustration: ") + aSource.getShortinfo());
                    final String graphicURL = this.docController.getPathUtils().getFileURLFromSystemPath(((Image) aSource).getFile().getPath(), ((Image) aSource).getFile().getPath());
                    xBaseFrameProps = (XPropertySet) this.docController.getXInterface(XPropertySet.class, xImage);
                    xBaseFrameProps.setPropertyValue("AnchorType", com.sun.star.text.TextContentAnchorType.AT_PARAGRAPH);
                    xBaseFrameProps.setPropertyValue("GraphicURL", graphicURL);
                    final MessageDigest md = MessageDigest.getInstance("MD5");
                    md.update(graphicURL.getBytes(), 0, graphicURL.length());
                    final String internalName = new BigInteger(1, md.digest()).toString(16);
                    xBitmapContainer.insertByName(internalName, graphicURL);
                    final String internalURL = (String) (xBitmapContainer.getByName(internalName));
                    xBaseFrameProps.setPropertyValue("GraphicURL", internalURL);
                    float imageRatio = (float) this.sourceUtils.getImageSize(((Image) aSource).getFile()).Height / (float) this.sourceUtils.getImageSize(((Image) aSource).getFile()).Width;
                    final Size aUsedAreaSize = new Size(this.sourceUtils.getImageSize(((Image) aSource).getFile()).Width * 26, this.sourceUtils.getImageSize(((Image) aSource).getFile()).Height * 26);
                    if (aUsedAreaSize.Width >= aPageTextAreaSize.Width) {
                        aNewSize.Width = aPageTextAreaSize.Width;
                        aNewSize.Height = (int) (aPageTextAreaSize.Width * imageRatio);
                    } else {
                        aNewSize.Width = aUsedAreaSize.Width;
                        aNewSize.Height = aUsedAreaSize.Height;
                    }
                    xFrameText.insertTextContent(xFrameCursor, xImage, false);
                    xBitmapContainer.removeByName(internalName);
                } catch (final NoSuchAlgorithmException e) {
                    new ASTError(e).severe();
                }
                this.sourceUtils.insertCaption(xFrame, aSource, this.docController.getLanguageController().__("Illustration"), xMultiServiceFactory);
            } else if (aSource.getSourceType() == SourceType.TABLE) {
                this.sourceUtils.setNameToObject(xFrame, this.docController.getLanguageController().__("Caption table: ") + aSource.getShortinfo());
                xBaseFrameProps = this.sourceUtils.createTextEmbeddedObjectCalc(xMultiServiceFactory);
                this.sourceUtils.setNameToObject(xBaseFrameProps, this.docController.getLanguageController().__("Table: ") + aSource.getShortinfo());
                xFrameText.insertTextContent(xFrameCursor, (XTextContent) this.docController.getXInterface(XTextContent.class, xBaseFrameProps), false);
                final XEmbeddedObjectSupplier2 xEmbeddedObjectSupplier = (XEmbeddedObjectSupplier2) this.docController.getXInterface(XEmbeddedObjectSupplier2.class, xBaseFrameProps);
                final XEmbeddedObject xEmbeddedObject = xEmbeddedObjectSupplier.getExtendedControlOverEmbeddedObject();
                long nAspect = xEmbeddedObjectSupplier.getAspect();
                final Size aVisualAreaSize = xEmbeddedObject.getVisualAreaSize(nAspect);
                final XComponent xComponent = xEmbeddedObjectSupplier.getEmbeddedObject();
                XSpreadsheets xSpreadsheets = ((XSpreadsheetDocument) this.docController.getXInterface(XSpreadsheetDocument.class, xComponent)).getSheets();
                final XIndexAccess xIndexAccess = (XIndexAccess) this.docController.getXInterface(XIndexAccess.class, xSpreadsheets);
                final XSpreadsheet xSpreadsheet = (XSpreadsheet) this.docController.getXInterface(XSpreadsheet.class, xIndexAccess.getByIndex(0));
                final XSheetLinkable xSheetLinkable = (XSheetLinkable) this.docController.getXInterface(XSheetLinkable.class, xSpreadsheet);
                xSheetLinkable.link(this.docController.getPathUtils().getFileURLFromSystemPath(((Table) aSource).getFile().getPath(), ((Table) aSource).getFile().getPath()), "", "", "", com.sun.star.sheet.SheetLinkMode.NORMAL);
                final CellRangeAddress aUsedArea = this.sourceUtils.getUsedArea(xSpreadsheet);
                final Size aUsedAreaSize = this.sourceUtils.calcCellRangeSize(xSpreadsheets, aUsedArea);
                if ((aUsedAreaSize.Width != aVisualAreaSize.Width) || (aUsedAreaSize.Height != aVisualAreaSize.Height)) {
                    aNewSize.Height = (aUsedAreaSize.Height > aPageTextAreaSize.Height) ? aPageTextAreaSize.Height : aUsedAreaSize.Height;
                    aNewSize.Width = (aUsedAreaSize.Width > aPageTextAreaSize.Width) ? aPageTextAreaSize.Width : aUsedAreaSize.Width;
                    xEmbeddedObject.setVisualAreaSize(nAspect, aNewSize);
                }
                this.sourceUtils.insertCaption(xFrame, aSource, this.docController.getLanguageController().__("Table"), xMultiServiceFactory);
            }
            xBaseFrameProps.setPropertyValue("Width", aNewSize.Width);
            xBaseFrameProps.setPropertyValue("Height", aNewSize.Height);
            final XShape xShape = (XShape) this.docController.getXInterface(XShape.class, xFrame);
            xShape.setSize(aNewSize);
        }
        final XTextFieldsSupplier xTextFieldsSupplier = (XTextFieldsSupplier) this.docController.getXInterface(XTextFieldsSupplier.class, xMultiServiceFactory);
        final XRefreshable xRefreshable = (XRefreshable) this.docController.getXInterface(XRefreshable.class, xTextFieldsSupplier.getTextFields());
        xRefreshable.refresh();
    }
} </s>
<s>class temp {    public static String getHash(String password) {
        if (password == null || password.length() == 0) {
            return null;
        }
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA");
            password = saltPassword(password);
            digest.update(password.getBytes());
            String result = getHexString(digest.digest());
            return result;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
} </s>
<s>class temp {    private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        IOUtils.copy(inputStream, outputStream);
        outputStream.close();
        inputStream.close();
    }
} </s>
<s>class temp {    void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    public static Collection<Class<? extends Page>> loadPages() throws IOException {
        ClassLoader ldr = Thread.currentThread().getContextClassLoader();
        Collection<Class<? extends Page>> pages = new ArrayList<Class<? extends Page>>();
        Enumeration<URL> e = ldr.getResources("META-INF/services/" + Page.class.getName());
        while (e.hasMoreElements()) {
            URL url = e.nextElement();
            InputStream is = url.openStream();
            ;
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(is, "UTF-8"));
                while (true) {
                    String line = r.readLine();
                    if (line == null) break;
                    int comment = line.indexOf('#');
                    if (comment >= 0) line = line.substring(0, comment);
                    String name = line.trim();
                    if (name.length() == 0) continue;
                    Class<?> clz = Class.forName(name, true, ldr);
                    Class<? extends Page> impl = clz.asSubclass(Page.class);
                    pages.add(impl);
                }
            } catch (Exception ex) {
                System.out.println(ex);
            } finally {
                try {
                    is.close();
                } catch (Exception ex) {
                }
            }
        }
        return pages;
    }
} </s>
<s>class temp {    @Override
    public void parse() throws IOException {
        URL url = new URL(getDataUrl());
        URLConnection con = url.openConnection();
        BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String str;
        while ((str = bStream.readLine()) != null) {
            String[] tokens = str.split(",");
            CurrencyUnit unit = new CurrencyUnit(tokens[1], Float.valueOf(tokens[3]), Integer.valueOf(tokens[2]));
            this.set.add(unit);
        }
    }
} </s>
<s>class temp {    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String realUrl = "http:/" + request.getPathInfo();
        if (request.getQueryString() != null) {
            realUrl += "?" + request.getQueryString();
        }
        URL url = new URL(realUrl);
        URLConnection connection = url.openConnection();
        HttpURLConnection http = null;
        if (connection instanceof HttpURLConnection) {
            http = (HttpURLConnection) connection;
            http.setRequestMethod(request.getMethod());
        }
        boolean hasContent = false;
        Enumeration headers = request.getHeaderNames();
        while (headers.hasMoreElements()) {
            String header = (String) headers.nextElement();
            if ("content-type".equals(header.toLowerCase())) hasContent = true;
            Enumeration values = request.getHeaders(header);
            while (values.hasMoreElements()) {
                String value = (String) values.nextElement();
                if (value != null) {
                    connection.addRequestProperty(header, value);
                }
            }
        }
        try {
            connection.setDoInput(true);
            if (hasContent) {
                InputStream proxyRequest = request.getInputStream();
                connection.setDoOutput(true);
                IO.copy(proxyRequest, connection.getOutputStream());
            }
            connection.connect();
        } catch (Exception e) {
            context.log("proxy", e);
        }
        InputStream proxyResponse = null;
        int code = 500;
        if (http != null) {
            proxyResponse = http.getErrorStream();
            code = http.getResponseCode();
            response.setStatus(code);
        }
        if (proxyResponse == null) {
            try {
                proxyResponse = connection.getInputStream();
            } catch (Exception e) {
                if (http != null) proxyResponse = http.getErrorStream();
                context.log("stream", e);
            }
        }
        int i = 0;
        String header = connection.getHeaderFieldKey(i);
        String value = connection.getHeaderField(i);
        while (header != null || value != null) {
            if (header != null && value != null) {
                response.addHeader(header, value);
            }
            ++i;
            header = connection.getHeaderFieldKey(i);
            value = connection.getHeaderField(i);
        }
        if (proxyResponse != null) {
            IO.copy(proxyResponse, response.getOutputStream());
        }
    }
} </s>
<s>class temp {    public void postProcess() throws StopWriterVisitorException {
        dbfWriter.postProcess();
        try {
            short originalEncoding = dbf.getDbaseHeader().getLanguageID();
            File dbfFile = fTemp;
            FileChannel fcinDbf = new FileInputStream(dbfFile).getChannel();
            FileChannel fcoutDbf = new FileOutputStream(file).getChannel();
            DriverUtilities.copy(fcinDbf, fcoutDbf);
            fTemp.delete();
            close();
            RandomAccessFile fo = new RandomAccessFile(file, "rw");
            fo.seek(29);
            fo.writeByte(originalEncoding);
            fo.close();
            open(file);
        } catch (FileNotFoundException e) {
            throw new StopWriterVisitorException(getName(), e);
        } catch (IOException e) {
            throw new StopWriterVisitorException(getName(), e);
        } catch (CloseDriverException e) {
            throw new StopWriterVisitorException(getName(), e);
        } catch (OpenDriverException e) {
            throw new StopWriterVisitorException(getName(), e);
        }
    }
} </s>
<s>class temp {    protected void refreshMods(String modsUrl) {
        while (true) {
            JMenuItem mi = mnMods.getItem(mnMods.getItemCount() - 1);
            if (mi == null) break;
            mnMods.remove(mnMods.getItemCount() - 1);
        }
        try {
            log.info("Loading mods from " + modsUrl);
            URL url = new URL(modsUrl);
            URLConnection conn = url.openConnection();
            conn.setUseCaches(false);
            SAXReader reader = new SAXReader();
            Document document = reader.read(conn.getInputStream());
            Element root = document.getRootElement();
            for (Iterator i = root.elementIterator("mod"); i.hasNext(); ) {
                final Element mod = (Element) i.next();
                JMenuItem mi = new JMenuItem(mod.element("name").getTextTrim());
                mi.setIcon(Application.icon("applications-other"));
                mi.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        Application.getInstance().openUrl(mod.element("siteUrl").getTextTrim());
                    }
                });
                mnMods.add(mi);
            }
        } catch (Throwable t) {
            t.printStackTrace();
            log.warn("Failed to dynamically add mod links");
        }
    }
} </s>
<s>class temp {    public static void copyFile(String source, String destination, TimeSlotTracker timeSlotTracker) {
        LOG.info("copying [" + source + "] to [" + destination + "]");
        BufferedInputStream sourceStream = null;
        BufferedOutputStream destStream = null;
        try {
            File destinationFile = new File(destination);
            if (destinationFile.exists()) {
                destinationFile.delete();
            }
            sourceStream = new BufferedInputStream(new FileInputStream(source));
            destStream = new BufferedOutputStream(new FileOutputStream(destinationFile));
            int readByte;
            while ((readByte = sourceStream.read()) > 0) {
                destStream.write(readByte);
            }
            Object[] arg = { destinationFile.getName() };
            String msg = timeSlotTracker.getString("datasource.xml.copyFile.copied", arg);
            LOG.fine(msg);
        } catch (Exception e) {
            Object[] expArgs = { e.getMessage() };
            String expMsg = timeSlotTracker.getString("datasource.xml.copyFile.exception", expArgs);
            timeSlotTracker.errorLog(expMsg);
            timeSlotTracker.errorLog(e);
        } finally {
            try {
                if (destStream != null) {
                    destStream.close();
                }
                if (sourceStream != null) {
                    sourceStream.close();
                }
            } catch (Exception e) {
                Object[] expArgs = { e.getMessage() };
                String expMsg = timeSlotTracker.getString("datasource.xml.copyFile.exception", expArgs);
                timeSlotTracker.errorLog(expMsg);
                timeSlotTracker.errorLog(e);
            }
        }
    }
} </s>
<s>class temp {    public static String filtraDoc(HttpServletRequest request, String resource, Repository rep, String template) throws IOException {
        StringBuilder sb = new StringBuilder();
        BufferedReader br = null;
        int sec = 0;
        try {
            URL url = rep.getResource(request, resource);
            if (url == null) {
                return "Documento " + rep.dir + "/" + resource + " no encontrado";
            }
            br = new BufferedReader(new InputStreamReader(url.openStream(), rep.encoding));
            String line = br.readLine();
            while (line != null) {
                int pos = line.indexOf("KAttach(");
                if (pos > -1) {
                    sb.append(attach(request, ++sec, line, pos, template));
                } else {
                    line = line.replaceAll("%20", "-");
                    sb.append(new String(line.getBytes(rep.encoding), Config.getMng().getEncoding())).append("\n");
                }
                line = br.readLine();
            }
        } finally {
            if (br != null) br.close();
        }
        return sb.toString();
    }
} </s>
<s>class temp {    public static boolean update(Orgao orgao) {
        int result = 0;
        Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            String sql = "update orgao set nome = (?) where id_orgao= ?";
            pst = c.prepareStatement(sql);
            pst.setString(1, orgao.getNome());
            pst.setInt(2, orgao.getCodigo());
            result = pst.executeUpdate();
            c.commit();
        } catch (SQLException e) {
            try {
                c.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            System.out.println("[OrgaoDAO.update] Erro ao atualizar -> " + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }
} </s>
<s>class temp {    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.main);
        try {
            URL url = new URL("http://placekitten.com/g/500/250");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoInput(true);
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            Bitmap kitten = BitmapFactory.decodeStream(conn.getInputStream());
            conn.disconnect();
            Bitmap frame = BitmapFactory.decodeResource(getResources(), R.drawable.frame500);
            Bitmap output = Bitmap.createBitmap(frame.getWidth(), frame.getHeight(), Bitmap.Config.ARGB_8888);
            output.eraseColor(Color.BLACK);
            Canvas canvas = new Canvas(output);
            canvas.drawBitmap(kitten, 125, 125, new Paint());
            canvas.drawBitmap(frame, 0, 0, new Paint());
            Paint textPaint = new Paint();
            textPaint.setColor(Color.WHITE);
            textPaint.setTypeface(Typeface.create(Typeface.SERIF, Typeface.BOLD));
            textPaint.setTextAlign(Align.CENTER);
            textPaint.setAntiAlias(true);
            textPaint.setTextSize(36);
            canvas.drawText("Cute", output.getWidth() / 2, (output.getHeight() / 2) + 140, textPaint);
            textPaint.setTextSize(24);
            canvas.drawText("Some of us just haz it.", output.getWidth() / 2, (output.getHeight() / 2) + 180, textPaint);
            ImageView imageView = (ImageView) this.findViewById(R.id.imageView);
            imageView.setImageBitmap(output);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public String accessURL_Post(String url, Map<String, String> keyValue, String encoding) throws Throwable {
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        for (String key : keyValue.keySet()) {
            formparams.add(new BasicNameValuePair(key, keyValue.get(key)));
        }
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, encoding);
        HttpPost httpPost = new HttpPost(url);
        httpPost.setEntity(entity);
        HttpResponse response = client.execute(httpPost);
        String entuity = EntityUtils.toString(response.getEntity());
        handleHeaders(response.getAllHeaders());
        return entuity;
    }
} </s>
<s>class temp {    public String accessURL_Post(String url, String postStr, String encoding) throws Throwable {
        StringEntity entity = new StringEntity(postStr, encoding);
        HttpPost httpPost = new HttpPost(url);
        httpPost.setEntity(entity);
        HttpResponse response = client.execute(httpPost);
        String entuity = EntityUtils.toString(response.getEntity());
        handleHeaders(response.getAllHeaders());
        return entuity;
    }
} </s>
<s>class temp {    public static void openFile(PublicHubList hublist, String url) {
        BufferedReader fichAl;
        String linha;
        try {
            if (url.startsWith("http://")) fichAl = new BufferedReader(new InputStreamReader((new java.net.URL(url)).openStream())); else fichAl = new BufferedReader(new FileReader(url));
            while ((linha = fichAl.readLine()) != null) {
                try {
                    hublist.addDCHub(new DCHub(linha, DCHub.hublistFormater));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    protected void initConnection() {
        connection = null;
        try {
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty("Range", "bytes=" + downloadedSize + "-");
            prepareConnectionBeforeConnect();
            connection.connect();
        } catch (IOException e) {
            status = STATUS_ERROR;
            Logger.getRootLogger().error("problem in connection", e);
        }
    }
} </s>
<s>class temp {    public static void copyFile(String f_in, String f_out, boolean remove) throws FileNotFoundException, IOException {
        if (remove) {
            PogoString readcode = new PogoString(PogoUtil.readFile(f_in));
            readcode = PogoUtil.removeLogMessages(readcode);
            PogoUtil.writeFile(f_out, readcode.str);
        } else {
            FileInputStream fid = new FileInputStream(f_in);
            FileOutputStream fidout = new FileOutputStream(f_out);
            int nb = fid.available();
            byte[] inStr = new byte[nb];
            if (fid.read(inStr) > 0) fidout.write(inStr);
            fid.close();
            fidout.close();
        }
    }
} </s>
<s>class temp {    private void handleUpload(CommonsMultipartFile file, String newFileName, String uploadDir) throws IOException, FileNotFoundException {
        File dirPath = new File(uploadDir);
        if (!dirPath.exists()) {
            dirPath.mkdirs();
        }
        InputStream stream = file.getInputStream();
        OutputStream bos = new FileOutputStream(uploadDir + newFileName);
        IOUtils.copy(stream, bos);
    }
} </s>
<s>class temp {    @Override
    public String addUser(UserInfoItem user) throws DatabaseException {
        if (user == null) throw new NullPointerException("user");
        if (user.getSurname() == null || "".equals(user.getSurname())) throw new NullPointerException("user.getSurname()");
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException e) {
            LOGGER.warn("Unable to set autocommit off", e);
        }
        String retID = "exist";
        PreparedStatement insSt = null, updSt = null, seqSt = null;
        try {
            int modified = 0;
            if (user.getId() != null) {
                long id = Long.parseLong(user.getId());
                updSt = getConnection().prepareStatement(UPDATE_USER_STATEMENT);
                updSt.setString(1, user.getName());
                updSt.setString(2, user.getSurname());
                updSt.setLong(3, id);
                modified = updSt.executeUpdate();
            } else {
                insSt = getConnection().prepareStatement(INSERT_USER_STATEMENT);
                insSt.setString(1, user.getName());
                insSt.setString(2, user.getSurname());
                insSt.setBoolean(3, "m".equalsIgnoreCase(user.getSex()));
                modified = insSt.executeUpdate();
                seqSt = getConnection().prepareStatement(USER_CURR_VALUE);
                ResultSet rs = seqSt.executeQuery();
                while (rs.next()) {
                    retID = rs.getString(1);
                }
            }
            if (modified == 1) {
                getConnection().commit();
                LOGGER.debug("DB has been updated. Queries: \"" + seqSt + "\" and \"" + (user.getId() != null ? updSt : insSt) + "\"");
            } else {
                getConnection().rollback();
                LOGGER.debug("DB has not been updated. -> rollback! Queries: \"" + seqSt + "\" and \"" + (user.getId() != null ? updSt : insSt) + "\"");
                retID = "error";
            }
        } catch (SQLException e) {
            LOGGER.error(e);
            retID = "error";
        } finally {
            closeConnection();
        }
        return retID;
    }
} </s>
<s>class temp {    @Override
    public String addUserIdentity(OpenIDItem identity, long userId) throws DatabaseException {
        if (identity == null) throw new NullPointerException("identity");
        if (identity.getIdentity() == null || "".equals(identity.getIdentity())) throw new NullPointerException("identity.getIdentity()");
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException e) {
            LOGGER.warn("Unable to set autocommit off", e);
        }
        String retID = "exist";
        PreparedStatement insSt = null, seqSt = null;
        try {
            int modified = 0;
            insSt = getConnection().prepareStatement(INSERT_IDENTITY_STATEMENT);
            insSt.setLong(1, userId);
            insSt.setString(2, identity.getIdentity());
            modified = insSt.executeUpdate();
            seqSt = getConnection().prepareStatement(USER_IDENTITY_VALUE);
            ResultSet rs = seqSt.executeQuery();
            while (rs.next()) {
                retID = rs.getString(1);
            }
            if (modified == 1) {
                getConnection().commit();
                LOGGER.debug("DB has been updated. Queries: \"" + seqSt + "\" and \"" + insSt + "\"");
            } else {
                getConnection().rollback();
                LOGGER.debug("DB has not been updated -> rollback! Queries: \"" + seqSt + "\" and \"" + insSt + "\"");
                retID = "error";
            }
        } catch (SQLException e) {
            LOGGER.error(e);
            retID = "error";
        } finally {
            closeConnection();
        }
        return retID;
    }
} </s>
<s>class temp {    @Override
    public RoleItem addUserRole(RoleItem role, long userId) throws DatabaseException {
        if (role == null) throw new NullPointerException("role");
        if (role.getName() == null || "".equals(role.getName())) throw new NullPointerException("role.getName()");
        if (hasRole(role.getName(), userId)) {
            return new RoleItem(role.getName(), "", "exist");
        }
        RoleItem defaultRole = new RoleItem(role.getName(), "", "exist");
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException e) {
            LOGGER.warn("Unable to set autocommit off", e);
        }
        String retID = "exist";
        String roleDesc = "";
        PreparedStatement seqSt = null, roleDescSt = null;
        try {
            int modified = 0;
            PreparedStatement insSt = getConnection().prepareStatement(INSERT_USER_IN_ROLE_STATEMENT);
            insSt.setLong(1, userId);
            insSt.setString(2, role.getName());
            modified = insSt.executeUpdate();
            seqSt = getConnection().prepareStatement(USER_ROLE_VALUE);
            ResultSet rs = seqSt.executeQuery();
            while (rs.next()) {
                retID = rs.getString(1);
            }
            roleDescSt = getConnection().prepareStatement(SELECT_ROLE_DESCRIPTION);
            roleDescSt.setString(1, role.getName());
            ResultSet rs2 = roleDescSt.executeQuery();
            while (rs2.next()) {
                roleDesc = rs2.getString(1);
            }
            if (modified == 1) {
                getConnection().commit();
                LOGGER.debug("DB has been updated. Queries: \"" + seqSt + "\" and \"" + roleDescSt + "\"");
            } else {
                getConnection().rollback();
                LOGGER.error("DB has not been updated -> rollback! Queries: \"" + seqSt + "\" and \"" + roleDescSt + "\"");
                retID = "error";
            }
        } catch (SQLException e) {
            LOGGER.error(e);
            retID = "error";
        } finally {
            closeConnection();
        }
        defaultRole.setId(retID);
        defaultRole.setDescription(roleDesc);
        return defaultRole;
    }
} </s>
<s>class temp {    protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException {
        Assert.notNull(callback, "callback cant be null");
        URL url = new URL(path);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setDefaultUseCaches(false);
        connection.setRequestMethod("POST");
        connection.connect();
        try {
            ObjectOutputStream output = new ObjectOutputStream(connection.getOutputStream());
            try {
                output.writeObject(request);
                output.flush();
            } finally {
                output.close();
            }
            ObjectInputStream input = new ObjectInputStream(connection.getInputStream());
            try {
                for (; ; ) {
                    Object result = input.readObject();
                    if (result == null) {
                        break;
                    }
                    callback.onSuccess(result);
                }
            } finally {
                input.close();
            }
        } finally {
            connection.disconnect();
        }
    }
} </s>
<s>class temp {    public void putFullDirectory(final String ftpURL, final String remoteDir, final String userId, final String pwd, final String localDir) throws Exception {
        if (!Strings.isPopulated(ftpURL)) {
            Util.dspmsg("Need an FTP url.");
            return;
        }
        if (!Strings.isPopulated(remoteDir)) {
            Util.dspmsg("Need a remote directory.");
            return;
        }
        if (!Strings.isPopulated(userId)) {
            Util.dspmsg("Need a user ID.");
            return;
        }
        if (!Strings.isPopulated(pwd)) {
            Util.dspmsg("Need a password.");
            return;
        }
        if (!Strings.isPopulated(localDir)) {
            Util.dspmsg("Need a local directory.");
            return;
        }
        FTPClient c = new FTPClient();
        c.connect(ftpURL);
        int replyCode = c.getReplyCode();
        if (!FTPReply.isPositiveCompletion(replyCode)) {
            Util.dspmsg("Could not connect, code: " + replyCode);
            c.disconnect();
            return;
        }
        if (!c.login(userId, pwd)) {
            Util.dspmsg("Could not log on, userId: " + userId + " pwd: " + pwd);
            return;
        }
        StringTokenizer st = new StringTokenizer(remoteDir, "/");
        while (st.hasMoreElements()) {
            if (!chgDir(c, st.nextToken())) {
                return;
            }
        }
        c.setFileType(FTP.BINARY_FILE_TYPE);
        File file = new File(localDir);
        if (file.isDirectory()) {
            FOR: for (File f : file.listFiles()) {
                if (!put(c, f)) {
                    break FOR;
                }
            }
        } else {
            put(c, file);
        }
        c.logout();
        c.disconnect();
    }
} </s>
<s>class temp {    public static String encryptPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            int hashLength = hash.length;
            StringBuffer hashStringBuf = new StringBuffer();
            String byteString;
            int byteLength;
            for (int index = 0; index < hashLength; index++) {
                byteString = String.valueOf(hash[index] + 128);
                byteLength = byteString.length();
                switch(byteLength) {
                    case 1:
                        byteString = "00" + byteString;
                        break;
                    case 2:
                        byteString = "0" + byteString;
                        break;
                }
                hashStringBuf.append(byteString);
            }
            return hashStringBuf.toString();
        } catch (NoSuchAlgorithmException nsae) {
            log.error("Error getting password hash: " + nsae.getMessage());
            return null;
        }
    }
} </s>
<s>class temp {    public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {
        String path = req.getParameter("path");
        path = URLDecoder.decode(path, "UTF-8");
        String name = req.getParameter("name");
        name = new String(name.getBytes(), "UTF-8");
        String contentType = req.getParameter("contentType");
        if (path == null) {
            NullPointerException e = new NullPointerException("The path attribute cannot be retrieved.");
            LOG.error(e);
            throw e;
        }
        URL url = new URL(path);
        InputStream inStream = null;
        try {
            inStream = URLUtils.getFileContent(url, req.getSession().getId());
            res.setContentType(contentType);
            res.addHeader("Content-Disposition", "attachment;filename=\"" + name + "\"");
            ServletOutputStream out = res.getOutputStream();
            IOUtils.copy(inStream, out);
            res.flushBuffer();
        } finally {
            if (inStream != null) {
                inStream.close();
            }
        }
    }
} </s>
<s>class temp {    public MpegPresentation(URL url) throws IOException {
        File file = new File(url.getPath());
        InputStream input = url.openStream();
        DataInputStream ds = new DataInputStream(input);
        try {
            parseFile(ds);
            prepareTracks();
            if (audioTrackBox != null && audioHintTrackBox != null) {
                audioTrack = new AudioTrack(audioTrackBox, audioHintTrackBox, file);
            }
            if (videoTrackBox != null && videoHintTrackBox != null) {
                videoTrack = new VideoTrack(videoTrackBox, videoHintTrackBox, file);
            }
        } finally {
            ds.close();
            input.close();
        }
    }
} </s>
<s>class temp {    public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        sha1hash = md.digest();
        return SHA1.convertToHex(sha1hash);
    }
} </s>
<s>class temp {    public static byte[] readUrl(URL url) throws IOException {
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        InputStream is = url.openStream();
        try {
            IOUtils.copy(is, os);
            return os.toByteArray();
        } finally {
            is.close();
        }
    }
} </s>
<s>class temp {    private int[] sortRows(int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] > rows[j + 1]) {
                    int temp = rows[j];
                    rows[j] = rows[j + 1];
                    rows[j + 1] = temp;
                }
            }
        }
        return rows;
    }
} </s>
<s>class temp {    @Override
    public String encryptString(String passphrase, String message) throws Exception {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        md.update(passphrase.getBytes("UTF-8"));
        byte digest[] = md.digest();
        String digestString = base64encode(digest);
        System.out.println(digestString);
        SecureRandom sr = new SecureRandom(digestString.getBytes());
        KeyGenerator kGen = KeyGenerator.getInstance("AES");
        kGen.init(128, sr);
        Key key = kGen.generateKey();
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] bIn = cipher.doFinal(message.getBytes("UTF-8"));
        String base64Encoded = base64encode(bIn);
        return base64Encoded;
    }
} </s>
<s>class temp {    @Override
    public String decryptString(String passphrase, String crypted) throws Exception {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        md.update(passphrase.getBytes("UTF-8"));
        byte digest[] = md.digest();
        String digestString = base64encode(digest);
        System.out.println(digestString);
        SecureRandom sr = new SecureRandom(digestString.getBytes());
        KeyGenerator kGen = KeyGenerator.getInstance("AES");
        kGen.init(128, sr);
        Key key = kGen.generateKey();
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] cryptString = base64decode(crypted);
        byte[] bOut = cipher.doFinal(cryptString);
        String outString = new String(bOut, "UTF-8");
        return outString;
    }
} </s>
<s>class temp {    private static String getRegistrationClasses() {
        CentralRegistrationClass c = new CentralRegistrationClass();
        String name = c.getClass().getCanonicalName().replace('.', '/').concat(".class");
        try {
            Enumeration<URL> urlEnum = c.getClass().getClassLoader().getResources("META-INF/MANIFEST.MF");
            while (urlEnum.hasMoreElements()) {
                URL url = urlEnum.nextElement();
                String file = url.getFile();
                JarURLConnection jarConnection = (JarURLConnection) url.openConnection();
                Manifest mf = jarConnection.getManifest();
                Attributes attrs = (Attributes) mf.getAttributes(name);
                if (attrs != null) {
                    String classes = attrs.getValue("RegistrationClasses");
                    return classes;
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return "";
    }
} </s>
<s>class temp {    public String getLastReleaseVersion() throws TransferException {
        try {
            URL url = new URL("http://jtbdivelogbook.sourceforge.net/version.properties");
            URLConnection urlConn = url.openConnection();
            urlConn.setDoInput(true);
            urlConn.setUseCaches(false);
            urlConn.setReadTimeout(20000);
            urlConn.setConnectTimeout(10000);
            Properties props = new Properties();
            InputStream is = urlConn.getInputStream();
            props.load(is);
            is.close();
            String lastVersion = props.getProperty(PROPERTY_LAST_RELEASE);
            if (lastVersion == null) {
                LOGGER.warn("Couldn't find property " + PROPERTY_LAST_RELEASE);
            }
            return lastVersion;
        } catch (MalformedURLException e) {
            LOGGER.error(e);
            throw new TransferException(e);
        } catch (IOException e) {
            LOGGER.error(e);
            throw new TransferException(e);
        }
    }
} </s>
<s>class temp {    public String output(final ComponentParameter compParameter) {
        InputStream inputStream;
        try {
            final URL url = new URL("http://xml.weather.yahoo.com/forecastrss?p=" + getPagelet().getOptionProperty("_weather_code") + "&u=c");
            inputStream = url.openStream();
        } catch (final IOException e) {
            return e.getMessage();
        }
        final StringBuilder sb = new StringBuilder();
        new AbstractXmlDocument(inputStream) {

            @Override
            protected void init() throws Exception {
                final Element root = getRoot();
                final Namespace ns = root.getNamespaceForPrefix("yweather");
                final Element channel = root.element("channel");
                final String link = channel.elementText("link");
                final Element item = channel.element("item");
                Element ele = item.element(QName.get("condition", ns));
                if (ele == null) {
                    sb.append("ERROR");
                    return;
                }
                final String imgPath = getPagelet().getColumnBean().getPortalBean().getCssResourceHomePath(compParameter) + "/images/yahoo/";
                String text, image;
                Date date = new SimpleDateFormat(YahooWeatherUtils.RFC822_MASKS[1], Locale.US).parse(ele.attributeValue("date"));
                final int temp = Integer.parseInt(ele.attributeValue("temp"));
                int code = Integer.valueOf(ele.attributeValue("code")).intValue();
                if (code == 3200) {
                    text = YahooWeatherUtils.yahooTexts[YahooWeatherUtils.yahooTexts.length - 1];
                    image = imgPath + "3200.gif";
                } else {
                    text = YahooWeatherUtils.yahooTexts[code];
                    image = imgPath + code + ".gif";
                }
                sb.append("<div style=\"line-height: normal;\"><a target=\"_blank\" href=\"").append(link).append("\"><img src=\"");
                sb.append(image).append("\" /></a>");
                sb.append(YahooWeatherUtils.formatHour(date)).append(" - ");
                sb.append(text).append(" - ").append(temp).append("℃").append("<br>");
                final Iterator<?> it = item.elementIterator(QName.get("forecast", ns));
                while (it.hasNext()) {
                    ele = (Element) it.next();
                    date = new SimpleDateFormat("dd MMM yyyy", Locale.US).parse(ele.attributeValue("date"));
                    final int low = Integer.parseInt(ele.attributeValue("low"));
                    final int high = Integer.parseInt(ele.attributeValue("high"));
                    code = Integer.valueOf(ele.attributeValue("code")).intValue();
                    if (code == 3200) {
                        text = YahooWeatherUtils.yahooTexts[YahooWeatherUtils.yahooTexts.length - 1];
                        image = imgPath + "3200.gif";
                    } else {
                        text = YahooWeatherUtils.yahooTexts[code];
                        image = imgPath + code + ".gif";
                    }
                    sb.append(YahooWeatherUtils.formatWeek(date)).append(" ( ");
                    sb.append(text).append(". ");
                    sb.append(low).append("℃~").append(high).append("℃");
                    sb.append(" )<br>");
                }
                sb.append("</div>");
            }
        };
        return sb.toString();
    }
} </s>
<s>class temp {    public void checkVersion(boolean showOnlyDiff) {
        try {
            DataInputStream di = null;
            byte[] b = new byte[1];
            URL url = new URL("http://lanslim.sourceforge.net/version.txt");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            di = new DataInputStream(con.getInputStream());
            StringBuffer lBuffer = new StringBuffer();
            while (-1 != di.read(b, 0, 1)) {
                lBuffer.append(new String(b));
            }
            String lLastStr = lBuffer.toString().trim();
            boolean equals = VERSION.equals(lLastStr);
            String lMessage = Externalizer.getString("LANSLIM.199", VERSION, lLastStr);
            if (!equals) {
                lMessage = lMessage + StringConstants.NEW_LINE + Externalizer.getString("LANSLIM.131") + StringConstants.NEW_LINE;
            }
            if (!equals || !showOnlyDiff) {
                JOptionPane.showMessageDialog(getRootPane().getParent(), lMessage, Externalizer.getString("LANSLIM.118"), JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(getRootPane().getParent(), Externalizer.getString("LANSLIM.200", SlimLogger.shortFormatException(e)), Externalizer.getString("LANSLIM.118"), JOptionPane.WARNING_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(getRootPane().getParent(), Externalizer.getString("LANSLIM.200", SlimLogger.shortFormatException(e)), Externalizer.getString("LANSLIM.118"), JOptionPane.WARNING_MESSAGE);
        }
    }
} </s>
<s>class temp {    private static void stampaFoglioRisposte(HttpSession httpSess, Appelli appello, Elaborati el, StringBuffer retVal, boolean primaVolta, String url, boolean anonimo) {
        InputStream is = null;
        String html = null;
        final int MAX_RIGHE_PER_PAGINA = 25;
        long totaleDomande = EsamiDAO.trovaQuanteDomandeElaborato(el.getID());
        long numPagine = 0, totalePagine = (long) Math.ceil(totaleDomande / 50.0);
        String urlBarcode = null;
        while (numPagine < totalePagine) {
            try {
                urlBarcode = URLEncoder.encode(HtmlCodeForPrint.creaBarcode("" + appello.getID() + "-" + el.getID() + "-" + (numPagine + 1), url), "UTF-8");
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(GestioneStampaAppello.class.getName()).log(Level.SEVERE, null, ex);
            }
            String jsp = url + "jsp/StampaRisposte.jsp?base=" + (numPagine * MAX_RIGHE_PER_PAGINA) + "&urlbarcode=" + urlBarcode;
            try {
                URL urlJSP = new URL(jsp);
                is = urlJSP.openStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                int letto = is.read();
                while (letto != -1) {
                    baos.write(letto);
                    letto = is.read();
                }
                html = baos.toString();
            } catch (IOException ex) {
                Logger.getLogger(GestioneStampaAppello.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            } finally {
                try {
                    is.close();
                } catch (IOException ex) {
                    Logger.getLogger(GestioneStampaAppello.class.getName()).log(Level.SEVERE, null, ex);
                }
                numPagine++;
            }
        }
        retVal.append(html);
    }
} </s>
<s>class temp {    @Test
    public void test01_ok_failed_500_no_logo() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(xlsURL);
            HttpResponse response = client.execute(post);
            assertEquals("failed code for ", 500, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
} </s>
<s>class temp {    @Test
    public void test02_ok_200_logo() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(xlsURL);
            HttpResponse response = client.execute(post);
            assertEquals("failed code for ", 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
} </s>
<s>class temp {    public Object read(InputStream inputStream, Map metadata) throws IOException, ClassNotFoundException {
        if (log.isTraceEnabled()) log.trace("Read input stream with metadata=" + metadata);
        Integer resCode = (Integer) metadata.get(HTTPMetadataConstants.RESPONSE_CODE);
        String resMessage = (String) metadata.get(HTTPMetadataConstants.RESPONSE_CODE_MESSAGE);
        if (resCode != null && validResponseCodes.contains(resCode) == false) throw new RuntimeException("Invalid HTTP server response [" + resCode + "] - " + resMessage);
        ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);
        IOUtils.copyStream(baos, inputStream);
        String soapMessage = new String(baos.toByteArray(), charsetEncoding);
        if (isTraceEnabled) {
            String prettySoapMessage = DOMWriter.printNode(DOMUtils.parse(soapMessage), true);
            log.trace("Incoming Response SOAPMessage\n" + prettySoapMessage);
        }
        return soapMessage;
    }
} </s>
<s>class temp {    public static void main(String[] argArray) {
        if (argArray.length == 0) {
            System.out.println("Usage: java  -jar doc-analyzer.jar  url | file");
        }
        List<URL> urlList = new LinkedList<URL>();
        for (String urlStr : argArray) {
            if (!(urlStr.startsWith("http") || urlStr.startsWith("file"))) {
                if (urlStr.indexOf("*") > -1) {
                    if (urlStr.indexOf("**") > -1) {
                    }
                    continue;
                } else {
                    if (!urlStr.startsWith("/")) {
                        File workDir = new File(System.getProperty("user.dir"));
                        urlStr = workDir.getPath() + "/" + urlStr;
                    }
                    urlStr = "file:" + urlStr;
                }
            }
            try {
                URL url = new URL(urlStr);
                urlList.add(url);
            } catch (MalformedURLException murle) {
                System.err.println(murle);
            }
        }
        for (URL url : urlList) {
            try {
                Document doc = builder.build(url.openStream());
                Element element = doc.getRootElement();
                Map<String, Long> numberOfElementMap = countElement(element);
                System.out.println("Overview of tags in '" + url + "':");
                for (String elementName : new TreeSet<String>(numberOfElementMap.keySet())) {
                    System.out.println("  " + elementName + ": " + numberOfElementMap.get(elementName));
                }
            } catch (JDOMException jdome) {
                System.err.println(jdome.getMessage());
            } catch (IOException ioe) {
                System.err.println(ioe.getMessage());
            }
        }
    }
} </s>
<s>class temp {    public void copyFile(final File sourceFile, final File destinationFile) throws FileIOException {
        final FileChannel sourceChannel;
        try {
            sourceChannel = new FileInputStream(sourceFile).getChannel();
        } catch (FileNotFoundException exception) {
            final String message = COPY_FILE_FAILED + sourceFile + " -> " + destinationFile;
            LOGGER.fatal(message);
            throw fileIOException(message, sourceFile, exception);
        }
        final FileChannel destinationChannel;
        try {
            destinationChannel = new FileOutputStream(destinationFile).getChannel();
        } catch (FileNotFoundException exception) {
            final String message = COPY_FILE_FAILED + sourceFile + " -> " + destinationFile;
            LOGGER.fatal(message);
            throw fileIOException(message, destinationFile, exception);
        }
        try {
            destinationChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (Exception exception) {
            final String message = COPY_FILE_FAILED + sourceFile + " -> " + destinationFile;
            LOGGER.fatal(message);
            throw fileIOException(message, null, exception);
        } finally {
            if (sourceChannel != null) {
                try {
                    sourceChannel.close();
                } catch (IOException exception) {
                    LOGGER.error("closing source", exception);
                }
            }
            if (destinationChannel != null) {
                try {
                    destinationChannel.close();
                } catch (IOException exception) {
                    LOGGER.error("closing destination", exception);
                }
            }
        }
    }
} </s>
<s>class temp {    private static final String hash(String input, String algorithm) {
        try {
            MessageDigest dig = MessageDigest.getInstance(algorithm);
            dig.update(input.getBytes());
            StringBuffer result = new StringBuffer();
            byte[] digest = dig.digest();
            String[] hex = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" };
            for (int i = 0; i < digest.length; i++) {
                int u = digest[i];
                u &= 0x000000FF;
                int highCount = u / 16;
                int lowCount = u - (highCount * 16);
                result.append(hex[highCount]);
                result.append(hex[lowCount]);
            }
            return result.toString();
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
} </s>
<s>class temp {    public java.io.File gzip(java.io.File file) throws Exception {
        java.io.File tmp = null;
        InputStream is = null;
        OutputStream os = null;
        try {
            tmp = java.io.File.createTempFile(file.getName(), ".gz");
            tmp.deleteOnExit();
            is = new BufferedInputStream(new FileInputStream(file));
            os = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(tmp)));
            byte[] buf = new byte[4096];
            int nread = -1;
            while ((nread = is.read(buf)) != -1) {
                os.write(buf, 0, nread);
            }
            os.flush();
        } finally {
            os.close();
            is.close();
        }
        return tmp;
    }
} </s>
<s>class temp {    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException("Could not load configuration from " + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
} </s>
<s>class temp {    public RTUser getUserInfo(final String username) {
        getSession();
        Map<String, String> attributes = Collections.emptyMap();
        final HttpGet get = new HttpGet(m_baseURL + "/REST/1.0/user/" + username);
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException("Received a non-200 response code from the server: " + responseCode);
            } else {
                if (response.getEntity() != null) {
                    attributes = parseResponseStream(response.getEntity().getContent());
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, "An exception occurred while getting user info for " + username);
            return null;
        }
        final String id = attributes.get("id");
        final String realname = attributes.get("realname");
        final String email = attributes.get("emailaddress");
        if (id == null || "".equals(id)) {
            LogUtils.errorf(this, "Unable to retrieve ID from user info.");
            return null;
        }
        return new RTUser(Long.parseLong(id.replace("user/", "")), username, realname, email);
    }
} </s>
<s>class temp {    public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {
        getSession();
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair("query", "Queue='" + queueName + "' AND Status='open'"));
        params.add(new BasicNameValuePair("format", "i"));
        params.add(new BasicNameValuePair("orderby", "-id"));
        final HttpGet get = new HttpGet(m_baseURL + "/REST/1.0/search/ticket?" + URLEncodedUtils.format(params, "UTF-8"));
        final List<RTTicket> tickets = new ArrayList<RTTicket>();
        final List<Long> ticketIds = new ArrayList<Long>();
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException("Received a non-200 response code from the server: " + responseCode);
            } else {
                InputStreamReader isr = null;
                BufferedReader br = null;
                try {
                    if (response.getEntity() == null) return null;
                    isr = new InputStreamReader(response.getEntity().getContent());
                    br = new BufferedReader(isr);
                    String line = null;
                    do {
                        line = br.readLine();
                        if (line != null) {
                            if (line.contains("does not exist.")) {
                                return null;
                            }
                            if (line.startsWith("ticket/")) {
                                ticketIds.add(Long.parseLong(line.replace("ticket/", "")));
                            }
                        }
                    } while (line != null);
                } catch (final Exception e) {
                    throw new RequestTrackerException("Unable to read ticket IDs from query.", e);
                } finally {
                    IOUtils.closeQuietly(br);
                    IOUtils.closeQuietly(isr);
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, "An exception occurred while getting tickets for queue " + queueName);
            return null;
        }
        for (final Long id : ticketIds) {
            try {
                tickets.add(getTicket(id, false));
            } catch (final RequestTrackerException e) {
                LogUtils.warnf(this, e, "Unable to retrieve ticket.");
            }
        }
        return tickets;
    }
} </s>
<s>class temp {    public static boolean copy(String from, String to) {
        boolean result;
        String newLine;
        FileInputStream input;
        FileOutputStream output;
        File source;
        int fileLength;
        byte byteBuff[];
        result = false;
        input = null;
        output = null;
        source = null;
        try {
            input = new FileInputStream(from);
            output = new FileOutputStream(to);
            source = new File(from);
            fileLength = (int) source.length();
            byteBuff = new byte[fileLength];
            while (input.read(byteBuff, 0, fileLength) != -1) output.write(byteBuff, 0, fileLength);
            result = true;
        } catch (FileNotFoundException e) {
            System.out.println(from + " does not exist!");
        } catch (IOException e) {
            System.out.println("Error reading/writing files!");
        } finally {
            try {
                if (input != null) input.close();
                if (output != null) output.close();
            } catch (IOException e) {
            }
        }
        return result;
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        String in = "/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp";
        String out = "/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp";
        ShapeFileReader reader = new ShapeFileReader();
        reader.readFileAndInitialize(in);
        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());
        for (Feature ft : reader.getFeatureSet()) {
            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();
            for (int i = 0; i < ml.getNumGeometries(); i++) {
                LineString ls = (LineString) ml.getGeometryN(i);
                Point start = ls.getStartPoint();
                checkIt(start, quad);
                Point end = ls.getEndPoint();
                checkIt(end, quad);
            }
        }
        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);
    }
} </s>
<s>class temp {    public void mkdirs(String path) throws IOException {
        GridFTP ftp = new GridFTP();
        ftp.setDefaultPort(port);
        System.out.println(this + ".mkdirs " + path);
        try {
            ftp.connect(host);
            ftp.login(username, password);
            int reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException("FTP server refused connection.");
            }
            ftp.mkdirs(path);
            ftp.logout();
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    public boolean storeFile(String local, String remote) throws IOException {
        boolean stored = false;
        GridFTP ftp = new GridFTP();
        ftp.setDefaultPort(port);
        System.out.println(this + ".storeFile " + remote);
        try {
            ftp.connect(host);
            ftp.login(username, password);
            int reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                System.err.println("FTP server refused connection.");
                return false;
            }
            ftp.put(local, remote);
            ftp.logout();
            stored = true;
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return stored;
    }
} </s>
<s>class temp {    public boolean getFile(String local, String remote) throws IOException {
        boolean result = false;
        GridFTP ftp = new GridFTP();
        ftp.setDefaultPort(port);
        System.out.println(this + ".getFile " + remote);
        try {
            ftp.connect(host);
            ftp.login(username, password);
            int reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                System.err.println("FTP server refused connection.");
                return false;
            }
            ftp.get(local, remote);
            ftp.logout();
            result = true;
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println(this + ".getFile return " + result);
        return result;
    }
} </s>
<s>class temp {    public String md5(String string) throws GeneralSecurityException {
        MessageDigest algorithm = MessageDigest.getInstance("MD5");
        algorithm.reset();
        algorithm.update(string.getBytes());
        byte messageDigest[] = algorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < messageDigest.length; i++) {
            hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult result = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    result = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (result == null) return null;
                if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus());
                reactToHandshakeStatus(result.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
} </s>
<s>class temp {    public static File downloadURL(URL url, File dir, String sfilename) {
        MerlotDebug.msg("Downloading URL: " + url);
        String filename = url.getFile();
        if (filename.indexOf('/') >= 0) {
            filename = filename.substring(filename.lastIndexOf('/') + 1);
        }
        File cache = new File(dir, sfilename);
        try {
            if (!dir.exists()) {
                dir.mkdirs();
            }
            URLConnection connection = url.openConnection();
            if (cache.exists() && cache.canRead()) {
                connection.connect();
                long remoteTimestamp = connection.getLastModified();
                if (remoteTimestamp == 0 || remoteTimestamp > cache.lastModified()) {
                    cache = downloadContent(connection, cache);
                } else {
                    MerlotDebug.msg("Using cached version for URL: " + url);
                }
            } else {
                cache = downloadContent(connection, cache);
            }
        } catch (IOException ex) {
            MerlotDebug.exception(ex);
        }
        if (cache != null && cache.exists()) {
            return cache;
        } else {
            return null;
        }
    }
} </s>
<s>class temp {    public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException {
        Connection con = null;
        Statement stmt = null;
        String table = (descr != null) ? descr.getTable() : null;
        Vector dsList = new Vector();
        try {
            String wsflag = Settings.get(table + ".useWebService");
            if ("yes".equals(wsflag) || "true".equals(wsflag)) {
                String serviceUrl = Settings.get(table + ".dataServiceUrl");
                String serviceUser = Settings.get(table + ".dataServiceUser");
                String servicePassword = Settings.get(table + ".dataServicePassword");
                Call call = (Call) (new Service()).createCall();
                call.setTargetEndpointAddress(serviceUrl);
                call.setOperationName("getData");
                if (serviceUser != null) {
                    call.setUsername(serviceUser);
                    if (servicePassword != null) {
                        call.setPassword(servicePassword);
                    }
                }
                if (log.isDebugEnabled()) {
                    log.debug("Service " + serviceUrl + " authentication user=" + serviceUser + " passwd=" + servicePassword + " call method getData" + " for table " + table + " station " + ((station != null) ? station.getStn() : "") + " element " + ((descr != null && descr.getElement() != null) ? descr.getElement() : "") + " dateFrom " + dateInterval.getDateFrom().getDayId() + " dateTo " + dateInterval.getDateTo().getDayId() + " sampling " + sampling);
                }
                String dssUrl = (String) call.invoke(new Object[] { table, ((station != null) ? station.getStn() : ""), ((descr != null && descr.getElement() != null) ? descr.getElement() : ""), "" + dateInterval.getDateFrom().getDayId(), "" + dateInterval.getDateTo().getDayId(), "", "" + sampling });
                if (log.isDebugEnabled()) {
                    log.debug("Service return url '" + dssUrl + "'");
                }
                if (dssUrl != null && !"".equals(dssUrl)) {
                    URL dataurl = new URL(dssUrl);
                    DataSequenceSet dsstmp = readDataSet(dataurl.openStream());
                    if (dsstmp != null && dsstmp.size() > 0) {
                        dsList.addAll(dsstmp);
                        if (log.isDebugEnabled()) {
                            log.debug("Data set list size is " + dsstmp.size());
                        }
                    } else {
                        if (log.isDebugEnabled()) {
                            log.debug("Data set list is empty");
                        }
                    }
                }
            } else {
                con = ConnectionPool.getConnection(table);
                stmt = con.createStatement();
                String className = Settings.get(table + ".classGetter");
                if (className == null) {
                    throw new ApiException("Undefined classGetter field for table '" + table + "'");
                }
                dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling);
            }
            return dsList;
        } catch (Exception e) {
            e.printStackTrace();
            throw new ApiException("Data are not available: " + e.toString());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            ConnectionPool.releaseConnection(con);
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        String u = "http://portal.acm.org/results.cfm?query=%28Author%3A%22" + "Boehm%2C+Barry" + "%22%29&srt=score%20dsc&short=0&source_disp=&since_month=&since_year=&before_month=&before_year=&coll=ACM&dl=ACM&termshow=matchboolean&range_query=&CFID=22704101&CFTOKEN=37827144&start=1";
        URL url = null;
        AcmSearchresultPageParser_2008Apr cb = new AcmSearchresultPageParser_2008Apr();
        try {
            url = new URL(u);
            HttpURLConnection uc = (HttpURLConnection) url.openConnection();
            uc.setUseCaches(false);
            InputStream is = uc.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            ParserDelegator pd = new ParserDelegator();
            pd.parse(br, cb, true);
            br.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("all doc num= " + cb.getAllDocNum());
        for (int i = 0; i < cb.getEachResultStartposisions().size(); i++) {
            HashMap<String, Integer> m = cb.getEachResultStartposisions().get(i);
            System.out.println(i + "pos= " + m);
        }
    }
} </s>
<s>class temp {    @Override
    public String fetchURL(String urlString) throws ServiceException {
        try {
            URL url = new URL(urlString);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String content = "";
            String line;
            while ((line = reader.readLine()) != null) {
                content += line + "\n";
            }
            reader.close();
            return content;
        } catch (MalformedURLException e) {
            throw new ServiceException(e.getMessage());
        } catch (IOException e) {
            throw new ServiceException(e.getMessage());
        }
    }
} </s>
<s>class temp {    private InputStream sendRequest(SequenceI seq) throws UnsupportedEncodingException, IOException {
        StringBuilder putBuf = new StringBuilder();
        processOptions(putBuf);
        putBuf.append("INPUT_SEQUENCE=");
        putBuf.append(URLEncoder.encode(">" + seq.getName() + "\n", ENCODING));
        putBuf.append(URLEncoder.encode(seq.getResidues(), ENCODING));
        URL url = new URL(PRIMER_BLAST_URL);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(putBuf.toString());
        wr.flush();
        wr.close();
        apollo.util.IOUtil.informationDialog("Primer-BLAST request sent");
        return conn.getInputStream();
    }
} </s>
<s>class temp {    public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) {
        if (target_length == 0) return null;
        if (todir == null) {
            todir = new File(System.getProperty("java.io.tmpdir"));
        }
        if (prefix == null || prefix.equals("")) {
            prefix = source.getName();
        }
        Vector result = new Vector();
        FileOutputStream fos = null;
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(source);
            byte[] bytes = new byte[CACHE_SIZE];
            long current_target_size = 0;
            int current_target_nb = 1;
            int nbread = -1;
            try {
                File f = new File(todir, prefix + i18n.getString("targetname_suffix") + current_target_nb);
                if (!validator.verifyFile(f)) return null;
                result.add(f);
                fos = new FileOutputStream(f);
                while ((nbread = fis.read(bytes)) > -1) {
                    if ((current_target_size + nbread) > target_length) {
                        int limit = (int) (target_length - current_target_size);
                        fos.write(bytes, 0, limit);
                        fos.close();
                        current_target_nb++;
                        current_target_size = 0;
                        f = new File(todir, prefix + "_" + current_target_nb);
                        if (!validator.verifyFile(f)) return null;
                        result.add(f);
                        fos = new FileOutputStream(f);
                        fos.write(bytes, limit, nbread - limit);
                        current_target_size += nbread - limit;
                    } else {
                        fos.write(bytes, 0, nbread);
                        current_target_size += nbread;
                    }
                }
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(null, ioe, i18n.getString("Failure"), JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    if (fos != null) fos.close();
                } catch (IOException e) {
                }
                try {
                    if (fis != null) fis.close();
                } catch (IOException e) {
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, i18n.getString("Failure"), JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (fos != null) fos.close();
            } catch (IOException e) {
            }
        }
        File[] fresult = null;
        if (result.size() > 0) {
            fresult = new File[result.size()];
            fresult = (File[]) result.toArray(fresult);
        }
        return fresult;
    }
} </s>
<s>class temp {    public static void joinFiles(FileValidator validator, File target, File[] sources) {
        FileOutputStream fos = null;
        try {
            if (!validator.verifyFile(target)) return;
            fos = new FileOutputStream(target);
            FileInputStream fis = null;
            byte[] bytes = new byte[512];
            for (int i = 0; i < sources.length; i++) {
                fis = new FileInputStream(sources[i]);
                int nbread = 0;
                try {
                    while ((nbread = fis.read(bytes)) > -1) {
                        fos.write(bytes, 0, nbread);
                    }
                } catch (IOException ioe) {
                    JOptionPane.showMessageDialog(null, ioe, i18n.getString("Failure"), JOptionPane.ERROR_MESSAGE);
                } finally {
                    fis.close();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, i18n.getString("Failure"), JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (fos != null) fos.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    public static void nioJoinFiles(FileLib.FileValidator validator, File target, File[] sources) {
        boolean big_files = false;
        for (int i = 0; i < sources.length; i++) {
            if (sources[i].length() > Integer.MAX_VALUE) {
                big_files = true;
                break;
            }
        }
        if (big_files) {
            joinFiles(validator, target, sources);
        } else {
            System.out.println(i18n.getString("jdk14_comment"));
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream(target);
                FileChannel fco = fos.getChannel();
                FileInputStream fis = null;
                for (int i = 0; i < sources.length; i++) {
                    fis = new FileInputStream(sources[i]);
                    FileChannel fci = fis.getChannel();
                    java.nio.MappedByteBuffer map;
                    try {
                        map = fci.map(FileChannel.MapMode.READ_ONLY, 0, (int) sources[i].length());
                        fco.write(map);
                        fci.close();
                    } catch (IOException ioe) {
                        JOptionPane.showMessageDialog(null, ioe, i18n.getString("Failure"), JOptionPane.ERROR_MESSAGE);
                        try {
                            fis.close();
                            fos.close();
                        } catch (IOException e) {
                        }
                    } finally {
                        fis.close();
                    }
                }
                fco.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e, i18n.getString("Failure"), JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    if (fos != null) fos.close();
                } catch (IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {    @Test
    public void requestWebapp() throws Exception {
        final HttpClient client = new DefaultHttpClient();
        final String echoValue = "ShrinkWrap>Tomcat Integration";
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair("to", PATH_ECHO_SERVLET));
        params.add(new BasicNameValuePair("echo", echoValue));
        final URI uri = URIUtils.createURI("http", BIND_HOST, HTTP_BIND_PORT, NAME_SIPAPP + SEPARATOR + servletClass.getSimpleName(), URLEncodedUtils.format(params, "UTF-8"), null);
        final HttpGet request = new HttpGet(uri);
        log.info("Executing request to: " + request.getURI());
        final HttpResponse response = client.execute(request);
        System.out.println(response.getStatusLine());
        final HttpEntity entity = response.getEntity();
        if (entity == null) {
            Assert.fail("Request returned no entity");
        }
        final BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent()));
        final String line = reader.readLine();
        Assert.assertEquals("Unexpected response from Servlet", echoValue + NAME_SIPAPP, line);
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println("arguments: sourcefile destfile");
            System.exit(1);
        }
        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);
        while (in.read(buffer) != -1) {
            buffer.flip();
            out.write(buffer);
            buffer.clear();
        }
    }
} </s>
<s>class temp {    private byte[] getBytesFromUrl(URL url) {
        ByteArrayOutputStream bais = new ByteArrayOutputStream();
        InputStream is = null;
        try {
            is = url.openStream();
            byte[] byteChunk = new byte[4096];
            int n;
            while ((n = is.read(byteChunk)) > 0) {
                bais.write(byteChunk, 0, n);
            }
        } catch (IOException e) {
            System.err.printf("Failed while reading bytes from %s: %s", url.toExternalForm(), e.getMessage());
            e.printStackTrace();
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                }
            }
        }
        return bais.toByteArray();
    }
} </s>
<s>class temp {    private void initJarURL() {
        try {
            URL url = getKwantuJarURLInMavenRepo(artifactId, version);
            File tempJarFile = File.createTempFile(artifactId + "-" + version, ".jar");
            OutputStream out = new FileOutputStream(tempJarFile);
            InputStream in = url.openStream();
            int length = 0;
            byte[] bytes = new byte[2048];
            while ((length = in.read(bytes)) > 0) {
                out.write(bytes, 0, length);
            }
            in.close();
            out.close();
            jarURL = tempJarFile.toURI().toURL();
        } catch (IOException ex) {
            throw new KwantuFaultException(ex);
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException {
        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream("temp/index/files.txt")));
        String[] files = new File(Constants.INDEX_PATH).list();
        for (int i = 0; i < files.length; i++) {
            String f = files[i];
            if (f.equals("deletable") || f.startsWith(".")) continue;
            FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));
            FileOutputStream out = new FileOutputStream(new File(targetDir, f + ".t"));
            byte[] buf = new byte[16384];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
            in.close();
            out.close();
            filesTxt.println(f);
        }
        filesTxt.close();
    }
} </s>
<s>class temp {    private void checkSettings() throws ConfigurationException {
        List serverList = getConfiguration().getServerList();
        for (Object aServerList : serverList) {
            JiraServerDetails jiraServerDetails = (JiraServerDetails) aServerList;
            URL url = null;
            try {
                if (jiraServerDetails.getBaseurl() == null || "".equals(jiraServerDetails.getBaseurl())) {
                    throw new ConfigurationException("BaseURL is empty.");
                }
                url = new URL(jiraServerDetails.getBaseurl());
                String content = getURLContent(url.openConnection().getInputStream());
                if (content.indexOf("Atlassian JIRA") == -1) {
                    throw new ConfigurationException("URL (" + url.toString() + ") Doesn't put to an installation of Atlassian JIRA");
                }
                try {
                    jiraServerDetails.getRpcClient(true).login();
                } catch (JiraException e) {
                    throw new ConfigurationException("Jira Server ( " + url.toString() + " ) is earlier than 2.6 or has RPC disabled.");
                }
            } catch (MalformedURLException e) {
                throw new ConfigurationException("Malformed URL: " + url);
            } catch (IOException e) {
                throw new ConfigurationException("Unable to contact server: " + url);
            }
            try {
                MyIssuesFeedBuilder feed = new MyIssuesFeedBuilder(new JiraServerDetails[] { jiraServerDetails });
                feed.buildFeedData();
            } catch (FeedException feedException) {
                throw new ConfigurationException(feedException.getMessage());
            }
        }
    }
} </s>
<s>class temp {    public static void setFinishedFlag(String ip, String port, String user, String dbname, String password, int flag) throws Exception {
        String sql = "update flag set flag = " + flag;
        Connection conn = CubridDBCenter.getConnection(ip, port, dbname, user, password);
        System.out.println("====:::===" + ip);
        Statement stmt = null;
        try {
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);
            conn.commit();
        } catch (Exception ex) {
            ex.printStackTrace();
            conn.rollback();
            throw ex;
        } finally {
            stmt.close();
            conn.close();
        }
    }
} </s>
<s>class temp {    public String getHash(String str) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(str.getBytes());
            byte[] toChapter1Digest = md.digest();
            return Keystore.hexEncode(toChapter1Digest);
        } catch (Exception e) {
            logger.error("Error in creating DN hash: " + e.getMessage());
            return null;
        }
    }
} </s>
<s>class temp {    public static AudioInputStream getWavFromURL(String urlstr) {
        URL url;
        AudioInputStream ais = null;
        try {
            url = new URL(urlstr);
            URLConnection c = url.openConnection();
            c.connect();
            InputStream stream = c.getInputStream();
            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug("[getWavFromURL]Getting audio from URL: {0}");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ais;
    }
} </s>
<s>class temp {    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException {
        PrintWriter writer = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            writer = response.getWriter();
        } catch (IOException ex) {
            log(OctetStreamReader.class.getName() + "has thrown an exception: " + ex.getMessage());
        }
        String filename = request.getHeader("X-File-Name");
        try {
            is = request.getInputStream();
            fos = new FileOutputStream(new File(realPath + filename));
            IOUtils.copy(is, fos);
            response.setStatus(response.SC_OK);
            writer.print("{success: true}");
        } catch (FileNotFoundException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print("{success: false}");
            log(OctetStreamReader.class.getName() + "has thrown an exception: " + ex.getMessage());
        } catch (IOException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print("{success: false}");
            log(OctetStreamReader.class.getName() + "has thrown an exception: " + ex.getMessage());
        } finally {
            try {
                fos.close();
                is.close();
            } catch (IOException ignored) {
            }
        }
        writer.flush();
        writer.close();
    }
} </s>
<s>class temp {    public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException {
        final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(file.getCanonicalFile())));
        ZipEntry ze;
        try {
            while (null != (ze = zis.getNextEntry())) {
                final File f = new File(folder.getCanonicalPath(), ze.getName());
                if (f.exists()) f.delete();
                if (ze.isDirectory()) {
                    f.mkdirs();
                    continue;
                }
                f.getParentFile().mkdirs();
                final OutputStream fos = new BufferedOutputStream(new FileOutputStream(f));
                try {
                    try {
                        final byte[] buf = new byte[8192];
                        int bytesRead;
                        while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead);
                    } finally {
                        fos.close();
                    }
                } catch (final IOException ioe) {
                    f.delete();
                    throw ioe;
                }
            }
        } finally {
            zis.close();
        }
        if (deleteZipAfter) file.delete();
    }
} </s>
