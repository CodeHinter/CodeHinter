<s>class temp {    public static String post(String actionUrl, Map<String, String> params, FormFile[] files) {
        try {
            String BOUNDARY = "---------7d4a6d158c9";
            String MULTIPART_FORM_DATA = "multipart/form-data";
            URL url = new URL(actionUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setConnectTimeout(6 * 1000);
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Connection", "Keep-Alive");
            conn.setRequestProperty("Charset", "UTF-8");
            conn.setRequestProperty("Content-Type", MULTIPART_FORM_DATA + "; boundary=" + BOUNDARY);
            StringBuilder sb = new StringBuilder();
            for (Map.Entry<String, String> entry : params.entrySet()) {
                sb.append("--");
                sb.append(BOUNDARY);
                sb.append("\r\n");
                sb.append("Content-Disposition: form-data; name=\"" + entry.getKey() + "\"\r\n\r\n");
                sb.append(entry.getValue());
                sb.append("\r\n");
            }
            DataOutputStream outStream = new DataOutputStream(conn.getOutputStream());
            outStream.write(sb.toString().getBytes());
            for (FormFile file : files) {
                StringBuilder split = new StringBuilder();
                split.append("--");
                split.append(BOUNDARY);
                split.append("\r\n");
                split.append("Content-Disposition: form-data;name=\"" + file.getFileName() + "\";filename=\"" + file.getFileName() + "\"\r\n");
                split.append("Content-Type: " + file.getContentType() + "\r\n\r\n");
                outStream.write(split.toString().getBytes());
                outStream.write(file.getFileData(), 0, file.getFileData().length);
                outStream.write("\r\n".getBytes());
            }
            byte[] end_data = ("--" + BOUNDARY + "--\r\n").getBytes();
            outStream.write(end_data);
            outStream.flush();
            int cah = conn.getResponseCode();
            if (cah != 200) throw new RuntimeException("request URL failed");
            InputStream is = conn.getInputStream();
            int ch;
            StringBuilder b = new StringBuilder();
            while ((ch = is.read()) != -1) {
                b.append((char) ch);
            }
            Log.i("ItcastHttpPost", b.toString());
            outStream.close();
            conn.disconnect();
            return b.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static String post(String actionUrl, Map<String, String> params) {
        HttpPost httpPost = new HttpPost(actionUrl);
        List<NameValuePair> list = new ArrayList<NameValuePair>();
        for (Map.Entry<String, String> entry : params.entrySet()) {
            list.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
        }
        try {
            httpPost.setEntity(new UrlEncodedFormEntity(list, HTTP.UTF_8));
            HttpResponse httpResponse = new DefaultHttpClient().execute(httpPost);
            if (httpResponse.getStatusLine().getStatusCode() == 200) {
                return EntityUtils.toString(httpResponse.getEntity());
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return null;
    }
} </s>
<s>class temp {    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate("insert into AttributeCategories (CategoryName) values ('color')");
            stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('blue', 'color')");
            stmt.executeUpdate("insert into Attributes (AttributeName, Category) values ('red', 'color')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (100, 'ball')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (101, 'blue ball')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (102, 'red ball')");
            stmt.executeQuery("select setval('objects_objectid_seq', 1000)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (101, 'instance', 100)");
            stmt.executeUpdate("insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (102, 'instance', 100)");
            stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (101, 'blue')");
            stmt.executeUpdate("insert into ObjectAttributes (ObjectId, AttributeName) values (102, 'red')");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | ADJ+', 1)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('red', '1', 'ADJ- | ADJ+', 1)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('blue', '1', 'ADJ- | ADJ+', 1)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('ball', '1', '[@ADJ-] & [D-] & DO-', 100)");
            stmt.executeUpdate("insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('throw', '1', 'AV- & DO+', 1)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('D', 10)");
            stmt.executeUpdate("insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)");
            stmt.executeUpdate("insert into Articles (ArticleName, Dereference) values ('the', 1)");
            stmt.executeUpdate("insert into FrameSlots (SlotName) values ('object')");
            stmt.executeUpdate("insert into QuestionWords (QuestionWord, Type) values ('which', 7)");
            stmt.executeUpdate("insert into Verbs (VerbName, Type, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 1, '', '', 'object')");
            stmt.executeQuery("select setval('instructions_instructionid_seq', 1)");
            stmt.executeUpdate("insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) " + "values (3, '', null, 0, null, null, null)");
            stmt.executeQuery("select setval('transactions_transactionid_seq', 1)");
            stmt.executeUpdate("insert into Transactions (InstructionId, Description) values (2, 'throw')");
            stmt.executeQuery("select setval('verbtransactions_verbid_seq', 1)");
            stmt.executeUpdate("insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 1, 2)");
            stmt.executeUpdate("insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 1)");
            stmt.executeUpdate("update SystemProperties set value = 'Tutorial 3 Data' where name = 'DB Data Version'");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
} </s>
<s>class temp {    public void sendShape(String s) {
        try {
            URLConnection uc = new URL(url + "&add=" + s).openConnection();
            InputStream in = uc.getInputStream();
            int b;
            while ((b = in.read()) != -1) {
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
} </s>
<s>class temp {        public void runInternal() {
            connection = null;
            boolean itemsLoadedPartially = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(url.toString(), -1);
                    visited.add(url.toString());
                    long startTimeStamp = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = url.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError("HTTPs is not supported yet");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError("Only HTTP supported");
                        return;
                    }
                    connection = (HttpURLConnection) conn;
                    connection.setRequestProperty("User-Agent", "CoolReader/3(Android)");
                    if (referer != null) connection.setRequestProperty("Referer", referer);
                    connection.setInstanceFollowRedirects(true);
                    connection.setAllowUserInteraction(false);
                    connection.setConnectTimeout(CONNECT_TIMEOUT);
                    connection.setReadTimeout(READ_TIMEOUT);
                    connection.setDoInput(true);
                    String fileName = null;
                    String disp = connection.getHeaderField("Content-Disposition");
                    if (disp != null) {
                        int p = disp.indexOf("filename=");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = connection.getResponseCode();
                    L.d("Response: " + response);
                    if (response != 200) {
                        onError("Error " + response);
                        return;
                    }
                    String contentType = connection.getContentType();
                    String contentEncoding = connection.getContentEncoding();
                    int contentLen = connection.getContentLength();
                    L.d("Entity content length: " + contentLen);
                    L.d("Entity content type: " + contentType);
                    L.d("Entity content encoding: " + contentEncoding);
                    setProgressMessage(url.toString(), contentLen);
                    InputStream is = connection.getInputStream();
                    delayedProgress.cancel();
                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = contentType != null && contentType.equals("application/zip");
                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (is.read(buf) != contentLen) {
                            onError("Wrong content length");
                            return;
                        }
                        is.close();
                        is = null;
                        is = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) contentType = "application/atom+xml";
                    }
                    if (contentType.startsWith("application/atom+xml")) {
                        L.d("Parsing feed");
                        parseFeed(is);
                        itemsLoadedPartially = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;profile=opds-catalog")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                url = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(url.toString());
                                L.d("continue with next part: " + url);
                            } else {
                                L.d("max item count reached: " + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d("Downloading book: " + contentEncoding);
                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedPartially = false;
                    }
                } catch (Exception e) {
                    L.e("Exception while trying to open URI " + url.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError("Error occured while reading OPDS catalog");
                    break;
                } finally {
                    if (connection != null) try {
                        connection.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d("Parsing is finished successfully. " + handler.entries.size() + " entries found");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
} </s>
<s>class temp {    byte[] toByteArray() throws IOException {
        DataElement element = new DataElement(DataElement.DATSEQ);
        final boolean sort = true;
        if (sort) {
            int[] sortIDs = new int[attributes.size()];
            int k = 0;
            for (Enumeration e = attributes.keys(); e.hasMoreElements(); ) {
                Integer key = (Integer) e.nextElement();
                sortIDs[k] = key.intValue();
                k++;
            }
            for (int i = 0; i < sortIDs.length; i++) {
                for (int j = 0; j < sortIDs.length - i - 1; j++) {
                    if (sortIDs[j] > sortIDs[j + 1]) {
                        int temp = sortIDs[j];
                        sortIDs[j] = sortIDs[j + 1];
                        sortIDs[j + 1] = temp;
                    }
                }
            }
            for (int i = 0; i < sortIDs.length; i++) {
                element.addElement(new DataElement(DataElement.U_INT_2, sortIDs[i]));
                element.addElement(getAttributeValue(sortIDs[i]));
            }
        } else {
            for (Enumeration e = attributes.keys(); e.hasMoreElements(); ) {
                Integer key = (Integer) e.nextElement();
                element.addElement(new DataElement(DataElement.U_INT_2, key.intValue()));
                element.addElement((DataElement) attributes.get(key));
            }
        }
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        (new SDPOutputStream(out)).writeElement(element);
        return out.toByteArray();
    }
} </s>
<s>class temp {    public boolean populateRecord(int[] attrIDs) throws IOException {
        if (device == null) {
            throw new RuntimeException("This is local device service record");
        }
        if (attrIDs == null) {
            throw new NullPointerException("attrIDs is null");
        }
        if (attrIDs.length == 0) {
            throw new IllegalArgumentException();
        }
        for (int i = 0; i < attrIDs.length; i++) {
            if (attrIDs[i] < 0x0000 || attrIDs[i] > 0xffff) {
                throw new IllegalArgumentException();
            }
        }
        int[] sortIDs = new int[attrIDs.length];
        System.arraycopy(attrIDs, 0, sortIDs, 0, attrIDs.length);
        for (int i = 0; i < sortIDs.length; i++) {
            for (int j = 0; j < sortIDs.length - i - 1; j++) {
                if (sortIDs[j] > sortIDs[j + 1]) {
                    int temp = sortIDs[j];
                    sortIDs[j] = sortIDs[j + 1];
                    sortIDs[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < sortIDs.length - 1; i++) {
            if (sortIDs[i] == sortIDs[i + 1]) {
                throw new IllegalArgumentException();
            }
            DebugLog.debug0x("query for ", sortIDs[i]);
        }
        DebugLog.debug0x("query for ", sortIDs[sortIDs.length - 1]);
        return this.bluetoothStack.populateServicesRecordAttributeValues(this, sortIDs);
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
            out.setLastModified(in.lastModified());
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    private File sendQuery(String query) throws MusicBrainzException {
        File xmlServerResponse = null;
        try {
            xmlServerResponse = new File(SERVER_RESPONSE_FILE);
            long start = Calendar.getInstance().getTimeInMillis();
            System.out.println("\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++");
            System.out.println("    consulta de busqueda -> " + query);
            URL url = new URL(query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String response = "";
            String line = "";
            System.out.println("    Respuesta del servidor: \n");
            while ((line = in.readLine()) != null) {
                response += line;
            }
            xmlServerResponse = new File(SERVER_RESPONSE_FILE);
            System.out.println("    Ruta del archivo XML -> " + xmlServerResponse.getAbsolutePath());
            BufferedWriter out = new BufferedWriter(new FileWriter(xmlServerResponse));
            out.write(response);
            out.close();
            System.out.println("Tamanho del xmlFile -> " + xmlServerResponse.length());
            long ahora = (Calendar.getInstance().getTimeInMillis() - start);
            System.out.println(" Tiempo transcurrido en la consulta (en milesimas) -> " + ahora);
            System.out.println("++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n");
        } catch (IOException e) {
            e.printStackTrace();
            String msg = e.getMessage();
            if (e instanceof FileNotFoundException) {
                msg = "ERROR: MusicBrainz URL used is not found:\n" + msg;
            } else {
            }
            throw new MusicBrainzException(msg);
        }
        return xmlServerResponse;
    }
} </s>
<s>class temp {    protected N save(String sql, Object[] args) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = JdbcUtils.getConnection();
            conn.setAutoCommit(false);
            pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            this.setParameters(pstmt, args);
            pstmt.executeUpdate();
            conn.commit();
            conn.setAutoCommit(true);
            rs = pstmt.getGeneratedKeys();
            return (N) rs.getObject(1);
        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            throw new JdbcDaoException(e.getMessage(), e);
        } finally {
            JdbcUtils.free(rs, pstmt, conn);
        }
    }
} </s>
<s>class temp {    protected void update(String sql, Object[] args) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        try {
            conn = JdbcUtils.getConnection();
            conn.setAutoCommit(false);
            pstmt = conn.prepareStatement(sql);
            this.setParameters(pstmt, args);
            pstmt.executeUpdate();
            conn.commit();
            conn.setAutoCommit(true);
        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            throw new JdbcDaoException(e.getMessage(), e);
        } finally {
            JdbcUtils.free(pstmt, conn);
        }
    }
} </s>
<s>class temp {    public static void main(String[] s) throws Exception {
        System.setProperty("http.proxyHost", "ser");
        System.setProperty("http.proxyPort", "3128");
        URL url = new URL("http", "me", 80, "/");
        HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
        Authenticator.setDefault(new TestAuthenticator());
        System.out.println("usingproxy status - " + urlConn.usingProxy());
        System.out.println("Class name - " + urlConn.getClass().getName());
        InputStream in = url.openStream();
        BufferedReader theReader = new BufferedReader(new InputStreamReader(url.openStream()));
        final int kMaxSizeHTML = 100000;
        char readBuffer[] = new char[kMaxSizeHTML];
        int countRead = theReader.read(readBuffer, 0, kMaxSizeHTML);
        String contentStr = "";
        String tmpStr;
        BufferedWriter wr = new BufferedWriter(new FileWriter("c:\\opt1\\auth-proxy.txt"));
        while ((countRead != -1) && (countRead != 0) && (contentStr.length() < kMaxSizeHTML)) {
            wr.write(readBuffer, 0, countRead);
            tmpStr = new String(readBuffer, 0, countRead);
            contentStr += tmpStr;
            countRead = theReader.read(readBuffer, 0, kMaxSizeHTML);
        }
        wr.flush();
        wr.close();
        wr = null;
    }
} </s>
<s>class temp {    private boolean initConnection() {
        try {
            if (ftp == null) {
                ftp = new FTPClient();
                serverIP = getServer();
                userName = getUserName();
                password = getPassword();
            }
            ftp.connect(serverIP);
            ftp.login(userName, password);
            return true;
        } catch (SocketException a_excp) {
            throw new RuntimeException(a_excp);
        } catch (IOException a_excp) {
            throw new RuntimeException(a_excp);
        } catch (Throwable a_th) {
            throw new RuntimeException(a_th);
        }
    }
} </s>
<s>class temp {    private boolean copyFiles(File sourceDir, File destinationDir) {
        boolean result = false;
        try {
            if (sourceDir != null && destinationDir != null && sourceDir.exists() && destinationDir.exists() && sourceDir.isDirectory() && destinationDir.isDirectory()) {
                File sourceFiles[] = sourceDir.listFiles();
                if (sourceFiles != null && sourceFiles.length > 0) {
                    File destFiles[] = destinationDir.listFiles();
                    if (destFiles != null && destFiles.length > 0) {
                        for (int i = 0; i < destFiles.length; i++) {
                            if (destFiles[i] != null) {
                                destFiles[i].delete();
                            }
                        }
                    }
                    for (int i = 0; i < sourceFiles.length; i++) {
                        if (sourceFiles[i] != null && sourceFiles[i].exists() && sourceFiles[i].isFile()) {
                            String fileName = destFiles[i].getName();
                            File destFile = new File(destinationDir.getAbsolutePath() + "/" + fileName);
                            if (!destFile.exists()) destFile.createNewFile();
                            FileInputStream in = new FileInputStream(sourceFiles[i]);
                            FileOutputStream out = new FileOutputStream(destFile);
                            FileChannel fcIn = in.getChannel();
                            FileChannel fcOut = out.getChannel();
                            fcIn.transferTo(0, fcIn.size(), fcOut);
                        }
                    }
                }
            }
            result = true;
        } catch (Exception e) {
            System.out.println("Exception in copyFiles Method : " + e);
        }
        return result;
    }
} </s>
<s>class temp {    @Deprecated
    public boolean backupLuceneIndex(int indexLocation, int backupLocation) {
        boolean result = false;
        try {
            System.out.println("lucene backup started");
            String indexPath = this.getIndexFolderPath(indexLocation);
            String backupPath = this.getIndexFolderPath(backupLocation);
            File inDir = new File(indexPath);
            boolean flag = true;
            if (inDir.exists() && inDir.isDirectory()) {
                File filesList[] = inDir.listFiles();
                if (filesList != null) {
                    File parDirBackup = new File(backupPath);
                    if (!parDirBackup.exists()) parDirBackup.mkdir();
                    String date = this.getDate();
                    backupPath += "/" + date;
                    File dirBackup = new File(backupPath);
                    if (!dirBackup.exists()) dirBackup.mkdir(); else {
                        File files[] = dirBackup.listFiles();
                        if (files != null) {
                            for (int i = 0; i < files.length; i++) {
                                if (files[i] != null) {
                                    files[i].delete();
                                }
                            }
                        }
                        dirBackup.delete();
                        dirBackup.mkdir();
                    }
                    for (int i = 0; i < filesList.length; i++) {
                        if (filesList[i].isFile()) {
                            try {
                                File destFile = new File(backupPath + "/" + filesList[i].getName());
                                if (!destFile.exists()) destFile.createNewFile();
                                FileInputStream in = new FileInputStream(filesList[i]);
                                FileOutputStream out = new FileOutputStream(destFile);
                                FileChannel fcIn = in.getChannel();
                                FileChannel fcOut = out.getChannel();
                                fcIn.transferTo(0, fcIn.size(), fcOut);
                            } catch (FileNotFoundException ex) {
                                System.out.println("FileNotFoundException ---->" + ex);
                                flag = false;
                            } catch (IOException excIO) {
                                System.out.println("IOException ---->" + excIO);
                                flag = false;
                            }
                        }
                    }
                }
            }
            System.out.println("lucene backup finished");
            System.out.println("flag ========= " + flag);
            if (flag) {
                result = true;
            }
        } catch (Exception e) {
            System.out.println("Exception in backupLuceneIndex Method : " + e);
            e.printStackTrace();
        }
        return result;
    }
} </s>
<s>class temp {    public static int deleteOrder(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append(" DELETE FROM JHF_ALIVE_ORDER ").append(" WHERE   ORDER_ID LIKE  ? ");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, "%" + likePatten + "%");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println(" error when roll back !");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println(" error  when psmt close or conn close .");
            }
        }
        return deleted;
    }
} </s>
<s>class temp {    public static int deleteExecution(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append(" DELETE FROM JHF_EXCEPTION ").append(" WHERE   ORDER_ID LIKE  ? ");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, "%" + likePatten + "%");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println(" error when roll back !");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println(" error  when psmt close or conn close .");
            }
        }
        return deleted;
    }
} </s>
<s>class temp {    public static int deleteContract(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append(" DELETE FROM JHF_ALIVE_CONTRACT ").append(" WHERE   ORDER_ID LIKE  ? ");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, "%" + likePatten + "%");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println(" error when roll back !");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println(" error  when psmt close or conn close .");
            }
        }
        return deleted;
    }
} </s>
<s>class temp {    public static int deleteSysPosInsert() {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append(" DELETE FROM JHF_SYS_POSITION_INSERT ");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println(" error when roll back !");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println(" error  when psmt close or conn close .");
            }
        }
        return deleted;
    }
} </s>
<s>class temp {    public static int deleteOrderStatusHis(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append(" DELETE FROM JHF_ORDER_STATUS_HISTORY ").append(" WHERE   ORDER_ID LIKE  ? ");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, "%" + likePatten + "%");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println(" error when roll back !");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println(" error  when psmt close or conn close .");
            }
        }
        return deleted;
    }
} </s>
<s>class temp {    public static int deleteHedgeCustTrade() {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append(" DELETE FROM JHF_HEDGE_CUSTTRADE ");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println(" error when roll back !");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println(" error  when psmt close or conn close .");
            }
        }
        return deleted;
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        FileInputStream in;
        DeflaterOutputStream out;
        FileOutputStream fos;
        FileDialog fd;
        fd = new FileDialog(new Frame(), "Find a file to deflate", FileDialog.LOAD);
        fd.show();
        if (fd.getFile() != null) {
            try {
                in = new FileInputStream(new File(fd.getDirectory(), fd.getFile()));
                fos = new FileOutputStream(new File("Deflated.out"));
                out = new DeflaterOutputStream(fos, new Deflater(Deflater.DEFLATED, true));
                int bytes_read = 0;
                byte[] buffer = new byte[1024];
                while ((bytes_read = in.read(buffer)) != -1) {
                    out.write(buffer, 0, bytes_read);
                }
                fos.flush();
                fos.close();
                out.flush();
                out.close();
                in.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Done");
        }
    }
} </s>
<s>class temp {    public void go() throws FBConnectionException, FBErrorException, IOException {
        clearError();
        if (rg == null) {
            error = true;
            errorcode = -102;
            errortext = "No RootGalleryTree was defined";
            return;
        }
        URL url = new URL(getHost() + getPath());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestProperty("X-FB-User", getUser());
        conn.setRequestProperty("X-FB-Auth", makeResponse());
        conn.setRequestProperty("X-FB-Mode", "GetGals");
        conn.connect();
        Element fbresponse;
        try {
            fbresponse = readXML(conn);
        } catch (FBConnectionException fbce) {
            throw fbce;
        } catch (FBErrorException fbee) {
            throw fbee;
        } catch (Exception e) {
            FBConnectionException fbce = new FBConnectionException("XML parsing failed");
            fbce.attachSubException(e);
            throw fbce;
        }
        NodeList gals = fbresponse.getElementsByTagName("Gal");
        for (int i = 0; i < gals.getLength(); i++) {
            Gallery g;
            Element curelement = (Element) gals.item(i);
            try {
                if (DOMUtil.getSimpleElementText(curelement, "Name").startsWith("Tag: ")) {
                    g = new Tag(rg, DOMUtil.getSimpleElementText(curelement, "Name").substring(5), Integer.parseInt(DOMUtil.getSimpleAttributeText(curelement, "id")));
                } else {
                    g = rg.createGallery(Integer.parseInt(DOMUtil.getSimpleAttributeText(curelement, "id")), DOMUtil.getSimpleElementText(curelement, "Name"));
                }
            } catch (Exception e) {
                complain("HEY!  Gallery " + DOMUtil.getSimpleAttributeText(curelement, "id") + " failed to parse!");
                continue;
            }
            try {
                g.setURL(DOMUtil.getSimpleElementText(curelement, "URL"));
                g.setSecurity(Integer.parseInt(DOMUtil.getSimpleElementText(curelement, "Sec")));
            } catch (Exception e) {
                complain("HEY!  Metadata failed on " + (g instanceof Tag ? "tag" : "gallery") + " " + DOMUtil.getSimpleAttributeText(curelement, "id") + "!");
                complain(e.toString());
            }
            try {
                g.setDate(DOMUtil.getSimpleElementText(curelement, "Date"));
            } catch (Exception e) {
            }
        }
        for (int i = 0; i < gals.getLength(); i++) {
            int current;
            Element curelement = (Element) gals.item(i);
            try {
                current = Integer.parseInt(DOMUtil.getSimpleAttributeText(curelement, "id"));
            } catch (Exception e) {
                complain("HEY!  Gallery " + DOMUtil.getSimpleAttributeText(curelement, "id") + " failed to parse!");
                continue;
            }
            Gallery g = rg.getNode(current);
            NodeList parents;
            try {
                parents = DOMUtil.getFirstElement(curelement, "ParentGals").getElementsByTagName("ParentGal");
            } catch (Exception e) {
                complain("HEY!  Parsing failed on gallery " + current + ", so I'm assuming it's unparented!");
                continue;
            }
            for (int j = 0; j < parents.getLength(); j++) {
                try {
                    g.addParent(rg.getNode(Integer.parseInt(DOMUtil.getSimpleAttributeText((Element) parents.item(j), "id"))));
                } catch (Exception e) {
                    complain("HEY!  Adding parent to gallery " + current + " failed!");
                    continue;
                }
            }
        }
        return;
    }
} </s>
<s>class temp {    public BufferedImage processUsingTemp(InputStream input, DjatokaDecodeParam params) throws DjatokaException {
        File in;
        try {
            in = File.createTempFile("tmp", ".jp2");
            FileOutputStream fos = new FileOutputStream(in);
            in.deleteOnExit();
            IOUtils.copyStream(input, fos);
        } catch (IOException e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        }
        BufferedImage bi = process(in.getAbsolutePath(), params);
        if (in != null) in.delete();
        return bi;
    }
} </s>
<s>class temp {    public BufferedImage process(final InputStream is, DjatokaDecodeParam params) throws DjatokaException {
        if (isWindows) return processUsingTemp(is, params);
        ArrayList<Double> dims = null;
        if (params.getRegion() != null) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copyStream(is, baos);
            dims = getRegionMetadata(new ByteArrayInputStream(baos.toByteArray()), params);
            return process(new ByteArrayInputStream(baos.toByteArray()), dims, params);
        } else return process(is, dims, params);
    }
} </s>
<s>class temp {    public Document getContentAsDocument() {
        synchronized (this.url) {
            URLConnection connection = this.url.openConnection();
            if (doReload(connection)) {
                InputSource inputSource = new InputSource(connection.getInputStream());
                DocumentBuilderFactory factory = new DocumentBuilderFactoryImpl();
                this.document = factory.newDocumentBuilder().parse(inputSource);
            }
            return this.document;
        }
    }
} </s>
<s>class temp {    public static int[] sortAscending(int input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    int mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
} </s>
<s>class temp {    public static int[] sortAscending(float input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    float mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
} </s>
<s>class temp {    public static int[] sortDescending(int input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    int mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
} </s>
<s>class temp {    public static int[] sortDescending(float input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    float mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
} </s>
<s>class temp {    public static int[] sortAscending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
} </s>
<s>class temp {    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
} </s>
<s>class temp {    private void openConnection() throws IOException {
        connection = (HttpURLConnection) url.openConnection(Global.getProxy());
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "text/xml; charset=" + XmlRpcMessages.getString("XmlRpcClient.Encoding"));
        if (requestProperties != null) {
            for (Iterator propertyNames = requestProperties.keySet().iterator(); propertyNames.hasNext(); ) {
                String propertyName = (String) propertyNames.next();
                connection.setRequestProperty(propertyName, (String) requestProperties.get(propertyName));
            }
        }
    }
} </s>
<s>class temp {    public static void verifierSiDerniereVersionDesPluginsMenus(ControleurDeMenu i) {
        if (i.getURLFichierInfoDerniereVersion() == null || i.getURLFichierInfoDerniereVersion() == "") {
            System.err.println("Evenements.java:verifierSiDerniereVersionDesPluginsMenus impossible:\n" + "pour le plugin chargeur de menu :" + i.getNomPlugin());
        }
        if (i.getVersionPlugin() == 0) {
            System.err.println("version non renseignee pour :" + i.getNomPlugin() + " on continue sur le plugin suivant");
            return;
        }
        URL url;
        try {
            url = new URL(i.getURLFichierInfoDerniereVersion());
        } catch (MalformedURLException e1) {
            System.err.println("impossible d'ouvrir l'URL (url mal formee)" + i.getURLFichierInfoDerniereVersion() + "\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        InputStream is;
        try {
            is = url.openStream();
        } catch (IOException e1) {
            System.err.println("impossible d'ouvrir l'URL (destination inaccessible)" + i.getURLFichierInfoDerniereVersion() + "\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        File destination;
        try {
            destination = File.createTempFile("SimplexeReseau" + compteurDeFichiersTemporaires, ".buf");
        } catch (IOException e1) {
            System.err.println("impossible de creer le fichier temporaire\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        compteurDeFichiersTemporaires++;
        destination.deleteOnExit();
        java.io.InputStream sourceFile = null;
        java.io.FileOutputStream destinationFile = null;
        try {
            destination.createNewFile();
        } catch (IOException e) {
            System.err.println("impossible de creer un fichier temporaire\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        sourceFile = is;
        try {
            destinationFile = new FileOutputStream(destination);
        } catch (FileNotFoundException e) {
            System.err.println("impossible d'ouvrir le flux reseau\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        byte buffer[] = new byte[512 * 1024];
        int nbLecture;
        try {
            while ((nbLecture = sourceFile.read(buffer)) != -1) {
                destinationFile.write(buffer, 0, nbLecture);
            }
        } catch (IOException e) {
            System.err.println("impossible d'ecrire dans le fichier temporaire\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        try {
            sourceFile.close();
            destinationFile.close();
        } catch (IOException e) {
            System.err.println("impossible de fermer le fichier temporaire ou le flux reseau\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        BufferedReader lecteurAvecBuffer = null;
        String ligne;
        try {
            lecteurAvecBuffer = new BufferedReader(new FileReader(destination));
        } catch (FileNotFoundException e) {
            System.err.println("impossible d'ouvrir le fichier temporaire apres sa creation (contacter un developpeur)\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        try {
            boolean estLaDerniereVersion = true;
            String URLRecupererDerniereVersion = null;
            while ((ligne = lecteurAvecBuffer.readLine()) != null) {
                if (ligne.startsWith("version:")) {
                    if (ligne.equals("version:" + i.getVersionPlugin())) {
                    } else {
                        System.err.println("la version pour " + i.getNomPlugin() + " est depassee (" + i.getVersionPlugin() + " alors que la " + ligne + "est disponible)");
                        estLaDerniereVersion = false;
                    }
                }
                if (ligne.startsWith("url:")) {
                    URLRecupererDerniereVersion = ligne.substring(4, ligne.length());
                }
            }
            if (!estLaDerniereVersion && URLRecupererDerniereVersion != null) {
                TelechargerPluginEtCharger(i, URLRecupererDerniereVersion);
            } else {
                System.out.println("on est a la derniere version du plugin " + i.getNomPlugin());
            }
        } catch (IOException e) {
            System.err.println("impossible de lire le fichier temporaire apres sa creation\n lors de la recuperation des informations de version sur " + i.getNomPlugin());
            return;
        }
        try {
            lecteurAvecBuffer.close();
        } catch (IOException e) {
            return;
        }
    }
} </s>
<s>class temp {    private static void copy(File source, File dest) throws FileNotFoundException, IOException {
        FileInputStream input = new FileInputStream(source);
        FileOutputStream output = new FileOutputStream(dest);
        System.out.println("Copying " + source + " to " + dest);
        IOUtils.copy(input, output);
        output.close();
        input.close();
        dest.setLastModified(source.lastModified());
    }
} </s>
<s>class temp {    public static void copyFile(final File sourceFile, final File destFile) throws IOException {
        if (!destFile.exists()) destFile.createNewFile();
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) source.close();
            if (destination != null) destination.close();
        }
    }
} </s>
<s>class temp {    public static String hash(final String s) {
        if (s == null || s.length() == 0) return null;
        try {
            final MessageDigest hashEngine = MessageDigest.getInstance("SHA-1");
            hashEngine.update(s.getBytes("iso-8859-1"), 0, s.length());
            return convertToHex(hashEngine.digest());
        } catch (final Exception e) {
            return null;
        }
    }
} </s>
<s>class temp {    public InputStream getDaoConfig(String connectionType) throws IOException {
        URL url = null;
        InputStream inStream = null;
        if (connectionType.equals(SQL.ORACLE)) {
            url = com.apelon.selext.db.config.MatchLoadConfig.class.getResource("oracle.xml");
        } else if (connectionType.equals(SQL.SQL2K)) {
            url = com.apelon.selext.db.config.MatchLoadConfig.class.getResource("sql2k.xml");
        } else if (connectionType.equals(SQL.CACHE)) {
            url = com.apelon.selext.db.config.MatchLoadConfig.class.getResource("cache.xml");
        } else if (connectionType.equals(SQL.DB2)) {
            url = com.apelon.selext.db.config.MatchLoadConfig.class.getResource("db2.xml");
        } else {
            Categories.dataXml().error("* Problem: Unknown connection type: " + connectionType);
        }
        try {
            inStream = url.openStream();
        } catch (NullPointerException npe) {
            Categories.dataXml().error("* Problem: Undefined resource URL: " + npe.getMessage());
            throw npe;
        }
        return inStream;
    }
} </s>
<s>class temp {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String uid = request.getParameter("id");
        String pwd = request.getParameter("pwd");
        String email = request.getParameter("email");
        String sid = request.getParameter("sid");
        System.out.println(uid);
        System.out.println(pwd);
        System.out.println(email);
        System.out.println(sid);
        DBconn dbc = new DBconn();
        Connection conn;
        PreparedStatement pst;
        Statement st;
        conn = dbc.getConnection();
        PasswordService ps = PasswordService.getInstance();
        String hash = "";
        try {
            hash = ps.encrypt(pwd);
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        String sql = "insert into HP_ADMINISTRATOR.STAFF_REGISTRATION values (?,?,?,?)";
        try {
            pst = conn.prepareStatement(sql);
            pst.setString(1, uid);
            pst.setString(2, hash);
            pst.setString(3, email);
            pst.setString(4, sid);
            System.out.println(pst.toString());
            pst.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                conn.rollback();
                conn.setAutoCommit(true);
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
        response.sendRedirect("AdminControlStaff.jsp");
    }
} </s>
<s>class temp {    public static InputStream openStream(URL url) {
        try {
            URLConnection connection = url.openConnection();
            connection.setUseCaches(false);
            return connection.getInputStream();
        } catch (IOException e) {
            throw new IORuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static void main(String[] argz) {
        int X, Y, Z;
        X = 256;
        Y = 256;
        Z = 256;
        try {
            String work_folder = "C:\\Documents and Settings\\Entheogen\\My Documents\\school\\jung\\vol_data\\CT_HEAD3";
            FileOutputStream out_stream = new FileOutputStream(new File(work_folder + "\\converted.dat"));
            FileChannel out = out_stream.getChannel();
            String f_name = "head256.raw";
            File file = new File(work_folder + "\\" + f_name);
            FileChannel in = new FileInputStream(file).getChannel();
            ByteBuffer buffa = BufferUtil.newByteBuffer((int) file.length());
            in.read(buffa);
            in.close();
            int N = 256;
            FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N);
            float min = Float.MAX_VALUE;
            for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) {
                byte c = buffa.get(i);
                min = Math.min(min, (float) (c));
                output_data.put((float) (c));
            }
            for (int i = 0; i < Y - X; ++i) {
                for (int j = 0; j < Y; ++j) {
                    for (int k = 0; k < Z; ++k) {
                        output_data.put(min);
                    }
                }
            }
            output_data.rewind();
            System.out.println("size of output_data = " + Integer.toString(output_data.capacity()));
            out.write(BufferUtil.copyFloatBufferAsByteBuffer(output_data));
            ByteBuffer buffa2 = BufferUtil.newByteBuffer(2);
            buffa2.put((byte) '.');
            out.close();
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }
} </s>
<s>class temp {    public XlsBook(String path) throws IOException {
        boolean isHttp = path.startsWith("http://");
        InputStream is = null;
        if (isHttp) {
            URL url = new URL(path);
            is = url.openStream();
        } else {
            File file = new File(path);
            is = new FileInputStream(file);
        }
        workbook = XlsBook.createWorkbook(is);
        is.close();
    }
} </s>
<s>class temp {    public static String getHighlightBaseLib() throws Exception {
        StringBuffer highlightKey = new StringBuffer();
        highlightKey.append("<c color=\"" + COLOR_BASELIB + "\">\n\t");
        URL url = AbstractRunner.class.getResource("baselib.js");
        if (url != null) {
            InputStream is = url.openStream();
            InputStreamReader reader = new InputStreamReader(is, "UTF-8");
            BufferedReader bfReader = new BufferedReader(reader);
            String tmp = null;
            do {
                tmp = bfReader.readLine();
                if (tmp != null) {
                    if (tmp.indexOf("function") > -1) {
                        highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t");
                    }
                }
            } while (tmp != null);
            bfReader.close();
            reader.close();
            is.close();
        }
        highlightKey.append("</c>");
        return highlightKey.toString();
    }
} </s>
<s>class temp {    public void update() {
        Authenticator.setDefault(new MyAuthenticator());
        URL url = null;
        try {
            url = new URL("http://trade.gigabass.de/update/update.php");
        } catch (MalformedURLException e) {
            handleException(e);
            return;
        }
        URLConnection conn;
        try {
            conn = url.openConnection();
        } catch (IOException e) {
            handleException(e);
            return;
        }
        conn.setDoOutput(true);
        OutputStreamWriter wr = null;
        try {
            wr = new OutputStreamWriter(conn.getOutputStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            wr.write("sql=" + URLEncoder.encode(sql, "UTF-8") + "\n");
            wr.flush();
        } catch (IOException e) {
            handleException(e);
        }
        BufferedReader rd = null;
        try {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
            }
        } catch (IOException e) {
            handleException(e);
        }
        try {
            wr.close();
        } catch (IOException e) {
            handleException(e);
        }
        try {
            rd.close();
        } catch (IOException e) {
            handleException(e);
        }
    }
} </s>
<s>class temp {    public void createNewFile(String filePath, InputStream in) throws IOException {
        FileOutputStream out = null;
        try {
            File file = newFileRef(filePath);
            FileHelper.createNewFile(file, true);
            out = new FileOutputStream(file);
            IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
} </s>
<s>class temp {    public void unzip(String zipFileName, String outputDirectory) throws Exception {
        ZipInputStream in = new ZipInputStream(new FileInputStream(zipFileName));
        ZipEntry z;
        while ((z = in.getNextEntry()) != null) {
            System.out.println("unziping " + z.getName());
            if (z.isDirectory()) {
                String name = z.getName();
                name = name.substring(0, name.length() - 1);
                File f = new File(outputDirectory + File.separator + name);
                f.mkdir();
                System.out.println("mkdir " + outputDirectory + File.separator + name);
            } else {
                File f = new File(outputDirectory + File.separator + z.getName());
                f.createNewFile();
                FileOutputStream out = new FileOutputStream(f);
                int b;
                while ((b = in.read()) != -1) out.write(b);
                out.close();
            }
        }
        in.close();
    }
} </s>
<s>class temp {    public String get(String question) {
        try {
            System.out.println(url + question);
            URL urlonlineserver = new URL(url + question);
            BufferedReader in = new BufferedReader(new InputStreamReader(urlonlineserver.openStream()));
            String inputLine;
            String returnstring = "";
            while ((inputLine = in.readLine()) != null) returnstring += inputLine;
            in.close();
            return returnstring;
        } catch (IOException e) {
            return "";
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        Dialog dialog = new Dialog();
        try {
            if (args.length != 5) {
                throw new InvalidParameterException("\n\nInvalid nunmber of parameters.\n\nCall must be \"java  -jar  Updater.jar  PATH_TO_MANAGER.JAR  CURRENT_MANAGER_VERSION  VERIONS.TXT_CONTROL_FILE  ROOT_WEBSERVER_FOLDER  LOCAL_TEMPORARY_FOLDER\"");
            }
            File managerJar = new File(args[0]);
            if (!managerJar.exists()) {
                throw new FileNotFoundException(args[0]);
            }
            dialog.updateLabel("Calculating files");
            URL verionsFile = new URL(args[2]);
            URLConnection connection = verionsFile.openConnection();
            connection.setConnectTimeout(10000);
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            ArrayList<String> versions = new ArrayList<String>();
            while (br.ready()) {
                versions.add(br.readLine());
            }
            br.close();
            int index = versions.indexOf(args[1]);
            String root = args[3];
            if (!root.endsWith("/")) {
                root += "/";
            }
            if (index != -1) {
                ArrayList<File> filesDownloaded = new ArrayList<File>();
                int k = 0;
                for (int i = index - 1; i >= 0; i--) {
                    dialog.updateLabel("Connecting " + ++k + "/" + index + " files");
                    URL url = new URL(root + versions.get(i).replaceAll(" ", "%20") + ".jar");
                    URLConnection con = url.openConnection();
                    con.setConnectTimeout(10000);
                    dialog.progressBar.setValue(0);
                    dialog.progressBar.setMaximum(con.getContentLength());
                    File f = new File(args[4] + File.separator + versions.get(i) + ".jar");
                    InputStream in = con.getInputStream();
                    FileOutputStream out = new FileOutputStream(f, false);
                    dialog.updateLabel("Downloading " + i + "/" + index + " files");
                    copyInputStream(in, out, dialog.progressBar);
                    in.close();
                    out.close();
                    filesDownloaded.add(f);
                }
                Iterator<File> it = filesDownloaded.iterator();
                k = 0;
                while (it.hasNext()) {
                    dialog.updateLabel("Applying " + ++k + "/" + filesDownloaded.size() + " files");
                    File file = it.next();
                    dialog.progressBar.setValue(0);
                    FileInputStream fis = new FileInputStream(file);
                    dialog.progressBar.setMaximum(fis.available());
                    fis.close();
                    putDifsInJar(managerJar, file, dialog.progressBar);
                }
            } else {
                dialog.updateLabel("Connecting");
                URL url = new URL(root + "Manager.jar");
                URLConnection con = url.openConnection();
                con.setConnectTimeout(10000);
                dialog.progressBar.setValue(0);
                dialog.progressBar.setMaximum(con.getContentLength());
                File f = new File(args[4] + File.separator + "Manager.jar");
                InputStream in = con.getInputStream();
                OutputStream out = new FileOutputStream(f);
                dialog.updateLabel("Downloading ");
                copyInputStream(in, out, dialog.progressBar);
                in.close();
                out.close();
                FileInputStream fis = new FileInputStream(f);
                FileOutputStream fos = new FileOutputStream(managerJar);
                copyInputStream(in, out, null);
                in.close();
                out.close();
            }
            dialog.updateLabel("Finishing");
            Process runManager = Runtime.getRuntime().exec("java -jar " + managerJar.getAbsolutePath());
            System.exit(0);
        } catch (Exception e) {
            dialog.updateLabel("Closing...");
            JOptionPane.showMessageDialog(null, "Failed to update manager\n\n" + e.toString(), "Update failed", JOptionPane.ERROR_MESSAGE);
            long t0, t1;
            t0 = System.currentTimeMillis();
            do {
                t1 = System.currentTimeMillis();
            } while ((t1 - t0) < (1 * 1500));
            System.exit(0);
        }
    }
} </s>
<s>class temp {    public Reader transform(Reader reader, Map<String, Object> parameterMap) {
        try {
            File file = File.createTempFile("srx2", ".srx");
            file.deleteOnExit();
            Writer writer = getWriter(getFileOutputStream(file.getAbsolutePath()));
            transform(reader, writer, parameterMap);
            writer.close();
            Reader resultReader = getReader(getFileInputStream(file.getAbsolutePath()));
            return resultReader;
        } catch (IOException e) {
            throw new IORuntimeException(e);
        }
    }
} </s>
<s>class temp {    HttpRepository(Path path) throws IOException {
        super(path);
        this.url = new URL(path.toURLString());
        HttpURLConnection.setFollowRedirects(true);
        this.connection = (HttpURLConnection) url.openConnection();
        this.ns = Names.getNamespace(path);
    }
} </s>
<s>class temp {    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        try {
            StringBuilder sb = new StringBuilder();
            URL url = new URL("https://ajax.googleapis.com/ajax/services/search/news?v=1.0&q=google");
            URLConnection connection = url.openConnection();
            String line;
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) sb.append(line);
            JSONObject json = new JSONObject(sb.toString());
            sb.setLength(0);
            JSONObject responseData = (JSONObject) json.get("responseData");
            JSONArray results = (JSONArray) responseData.get("results");
            for (int i = 0; i < results.length(); i++) {
                JSONObject result = (JSONObject) results.get(i);
                sb.append(result.get("title")).append("\n\n");
            }
            TextView tv = (TextView) findViewById(R.id.textView);
            tv.setText(sb.toString());
        } catch (Exception e) {
        }
    }
} </s>
<s>class temp {    public static int getFilesize(String theURL) {
        URL url;
        URLConnection conn;
        int size = -1;
        try {
            url = new URL(theURL);
            conn = url.openConnection();
            conn.setRequestProperty("User-Agent", Main.USER_AGENT);
            conn.setConnectTimeout(Main.CONNECT_TIMEOUT * 2);
            conn.setReadTimeout(Main.READ_TIMEOUT * 2);
            size = conn.getContentLength();
            conn.getInputStream().close();
        } catch (FileNotFoundException fnfe) {
            return -2;
        } catch (ConnectException ce) {
            return -3;
        } catch (ProtocolException fpe) {
            return -2;
        } catch (IOException ioe) {
            return -2;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return size;
    }
} </s>
<s>class temp {    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println("Usage: HexStrToBin enc/dec <infileName> <outfilename>");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals("dec")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public static String buildUserPassword(String password) {
        String result = "";
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes("UTF8"));
            byte[] hash = md.digest();
            for (int i = 0; i < hash.length; i++) {
                int hexValue = hash[i] & 0xFF;
                if (hexValue < 16) {
                    result = result + "0";
                }
                result = result + Integer.toString(hexValue, 16);
            }
            logger.debug("Users'password MD5 Digest: " + result);
        } catch (NoSuchAlgorithmException ex) {
            logger.error(ex.getMessage());
            ex.printStackTrace();
        } catch (UnsupportedEncodingException ex) {
            logger.error(ex.getMessage());
            ex.printStackTrace();
        }
        return result;
    }
} </s>
<s>class temp {    public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md5result = new StringBuilder();
        try {
            md = MessageDigest.getInstance("MD5");
            md.reset();
            md.update(input.getBytes());
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md5result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, "de.searchworkorange.lib.misc.hash.MD5Hash", Level.FATAL, ex);
        }
        return (md5result.toString());
    }
} </s>
<s>class temp {    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == cancel) {
            email.setText("");
            name.setText("");
            category.setSelectedIndex(0);
            subject.setText("");
            message.setText("");
            setVisible(false);
        } else {
            StringBuffer errors = new StringBuffer();
            if (email.getText().trim().equals("")) errors.append("El campo 'Email' es obligatorio<br/>");
            if (name.getText().trim().equals("")) errors.append("El campo 'Nombre' es obligatorio<br/>");
            if (subject.getText().trim().equals("")) errors.append("El campo 'T tulo' es obligatorio<br/>");
            if (message.getText().trim().equals("")) errors.append("No hay conrtenido en el mensaje<br/>");
            if (errors.length() > 0) {
                JOptionPane.showMessageDialog(this, "<html><b>Error</b><br/>" + errors.toString() + "</html>", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    StringBuffer params = new StringBuffer();
                    params.append("name=").append(URLEncoder.encode(name.getText(), "UTF-8")).append("&category=").append(URLEncoder.encode((String) category.getSelectedItem(), "UTF-8")).append("&title=").append(URLEncoder.encode(subject.getText(), "UTF-8")).append("&email=").append(URLEncoder.encode(email.getText(), "UTF-8")).append("&id=").append(URLEncoder.encode(MainWindow.getUserPreferences().getUniqueId() + "", "UTF-8")).append("&body=").append(URLEncoder.encode(message.getText(), "UTF-8"));
                    URL url = new URL("http://www.cronopista.com/diccionario2/sendMessage.php");
                    URLConnection connection = url.openConnection();
                    Utils.setupProxy(connection);
                    connection.setDoOutput(true);
                    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());
                    out.write(params.toString());
                    out.close();
                    BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    String decodedString;
                    while ((decodedString = in.readLine()) != null) {
                        System.out.println(decodedString);
                    }
                    in.close();
                    email.setText("");
                    name.setText("");
                    category.setSelectedIndex(0);
                    subject.setText("");
                    message.setText("");
                    setVisible(false);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "<html><b>Error</b><br/>Ha ocurrido un error enviando tu mensaje.<br/>" + "Por favor, int ntalo m s tarde o ponte en contacto conmigo a trav s de www.cronopista.com</html>", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
} </s>
<s>class temp {    public static String loadResource(String resource) {
        URL url = ClassLoader.getSystemResource("resources/" + resource);
        StringBuffer buffer = new StringBuffer();
        if (url == null) {
            ErrorMessage.handle(new NullPointerException("URL for resources/" + resource + " not found"));
        } else {
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    buffer.append(line + "\n");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return buffer.toString();
    }
} </s>
<s>class temp {    private void redownloadResource(SchemaResource resource) {
        if (_redownloadSet != null) {
            if (_redownloadSet.contains(resource)) return;
            _redownloadSet.add(resource);
        }
        String filename = resource.getFilename();
        String schemaLocation = resource.getSchemaLocation();
        String digest = null;
        if (schemaLocation == null || filename == null) return;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        try {
            URL url = new URL(schemaLocation);
            URLConnection conn = url.openConnection();
            conn.addRequestProperty("User-Agent", USER_AGENT);
            conn.addRequestProperty("Accept", "application/xml, text/xml, */*");
            DigestInputStream input = digestInputStream(conn.getInputStream());
            IOUtil.copyCompletely(input, buffer);
            digest = HexBin.bytesToString(input.getMessageDigest().digest());
        } catch (Exception e) {
            warning("Could not copy remote resource " + schemaLocation + ":" + e.getMessage());
            return;
        }
        if (digest.equals(resource.getSha1()) && fileExists(filename)) {
            warning("Resource " + filename + " is unchanged from " + schemaLocation + ".");
            return;
        }
        try {
            InputStream source = new ByteArrayInputStream(buffer.toByteArray());
            writeInputStreamToFile(source, filename);
        } catch (IOException e) {
            warning("Could not write to file " + filename + " for " + schemaLocation + ":" + e.getMessage());
            return;
        }
        warning("Refreshed " + filename + " from " + schemaLocation);
    }
} </s>
<s>class temp {    public byte[] getDigest(OMProcessingInstruction pi, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 7);
            md.update(pi.getTarget().getBytes("UnicodeBigUnmarked"));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(pi.getValue().getBytes("UnicodeBigUnmarked"));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
} </s>
<s>class temp {    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        if (!(attribute.getLocalName().equals("xmlns") || attribute.getLocalName().startsWith("xmlns:"))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(attribute).getBytes("UnicodeBigUnmarked"));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(attribute.getAttributeValue().getBytes("UnicodeBigUnmarked"));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
} </s>
<s>class temp {    public byte[] getDigest(OMText text, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 3);
            md.update(text.getText().getBytes("UnicodeBigUnmarked"));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
} </s>
<s>class temp {    private String getRandomGUID(final boolean secure) {
        MessageDigest md5 = null;
        final StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        try {
            final long time = System.currentTimeMillis();
            final long rand;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(id);
            sbValueBeforeMD5.append(SEMI_COLON);
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(SEMI_COLON);
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            final byte[] array = md5.digest();
            final StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                final int bufferIndex = array[j] & SHIFT_SPACE;
                if (ZERO_TEST > bufferIndex) sb.append(CHAR_ZERO);
                sb.append(Integer.toHexString(bufferIndex));
            }
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
} </s>
<s>class temp {    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    public boolean clonarFichero(String rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("");
        System.out.println("*********** DENTRO DE 'clonarFichero' ***********");
        boolean estado = false;
        try {
            FileInputStream entrada = new FileInputStream(rutaFicheroOrigen);
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = entrada.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            entrada.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println("No se encontro el archivo");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
} </s>
<s>class temp {    public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println("No se encontro el archivo");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
} </s>
<s>class temp {    private HttpURLConnection getRecognizedUrl(SpantusAudioCtx ctx) throws URISyntaxException {
        try {
            URL url = ctx.getRecognizedUrl();
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setRequestMethod("PUT");
            return conn;
        } catch (MalformedURLException e) {
            LOG.error(e);
        } catch (IOException e) {
            LOG.error(e);
        }
        return null;
    }
} </s>
<s>class temp {    public SukuData updatePerson(String usertext, SukuData req) {
        String insPers;
        String userid = Utils.toUsAscii(usertext);
        if (userid != null && userid.length() > 16) {
            userid = userid.substring(0, 16);
        }
        StringBuilder sb = new StringBuilder();
        sb.append("insert into unit (pid,tag,privacy,groupid,sex,sourcetext,privatetext,userrefn");
        if (userid != null) {
            sb.append(",createdby");
        }
        sb.append(") values (?,?,?,?,?,?,?,? ");
        if (userid != null) {
            sb.append(",'" + userid + "'");
        }
        sb.append(")");
        insPers = sb.toString();
        String updPers;
        sb = new StringBuilder();
        sb.append("update unit set privacy=?,groupid=?,sex=?,sourcetext=?," + "privatetext=?,userrefn=?,Modified=now()");
        if (userid != null) {
            sb.append(",modifiedby = '" + userid + "' where pid = ?");
        } else {
            sb.append(" where pid = ?");
        }
        updPers = sb.toString();
        sb = new StringBuilder();
        String updSql;
        sb.append("update unitnotice set ");
        sb.append("surety=?,Privacy=?,NoticeType=?,Description=?,");
        sb.append("DatePrefix=?,FromDate=?,ToDate=?,Place=?,");
        sb.append("Village=?,Farm=?,Croft=?,Address=?,");
        sb.append("PostalCode=?,PostOffice=?,State=?,Country=?,Email=?,");
        sb.append("NoteText=?,MediaFilename=?,MediaTitle=?,Prefix=?,");
        sb.append("Surname=?,Givenname=?,Patronym=?,PostFix=?,");
        sb.append("SourceText=?,PrivateText=?,RefNames=?,RefPlaces=?,Modified=now()");
        if (userid != null) {
            sb.append(",modifiedby = '" + userid + "'");
        }
        sb.append(" where pnid = ?");
        updSql = sb.toString();
        sb = new StringBuilder();
        String insSql;
        sb.append("insert into unitnotice  (");
        sb.append("surety,Privacy,NoticeType,Description,");
        sb.append("DatePrefix,FromDate,ToDate,Place,");
        sb.append("Village,Farm,Croft,Address,");
        sb.append("PostalCode,PostOffice,State,Country,Email,");
        sb.append("NoteText,MediaFilename,MediaTitle,Prefix,");
        sb.append("Surname,Givenname,Patronym,PostFix,");
        sb.append("SourceText,PrivateText,RefNames,Refplaces,pnid,pid,tag");
        if (userid != null) {
            sb.append(",createdby");
        }
        sb.append(") values (");
        sb.append("?,?,?,?,?,?,?,?," + "?,?,?,?,?,?,?,?," + "?,?,?,?,?,?,?,?,");
        sb.append("?,?,?,?,?,?,?,?");
        if (userid != null) {
            sb.append(",'" + userid + "'");
        }
        sb.append(")");
        insSql = sb.toString();
        sb = new StringBuilder();
        String updLangSql;
        sb.append("update unitlanguage set ");
        sb.append("NoticeType=?,Description=?," + "Place=?,");
        sb.append("NoteText=?,MediaTitle=?,Modified=now() ");
        if (userid != null) {
            sb.append(",modifiedby = '" + userid + "'");
        }
        sb.append("where pnid=? and langCode = ?");
        updLangSql = sb.toString();
        sb = new StringBuilder();
        String insLangSql;
        sb.append("insert into unitlanguage (pnid,pid,tag,langcode,");
        sb.append("NoticeType,Description,Place,");
        sb.append("NoteText,MediaTitle");
        if (userid != null) {
            sb.append(",createdby");
        }
        sb.append(") values (?,?,?,?,?,?,?,?,?");
        if (userid != null) {
            sb.append(",'" + userid + "'");
        }
        sb.append(")");
        insLangSql = sb.toString();
        String delOneLangSql = "delete from unitlanguage where pnid = ? and langcode = ? ";
        String updRowSql = "update unitnotice set noticerow = ? where pnid = ? ";
        String delSql = "delete from unitnotice where pnid = ? ";
        String delAllLangSql = "delete from Unitlanguage where pnid = ? ";
        SukuData res = new SukuData();
        UnitNotice[] nn = req.persLong.getNotices();
        if (nn != null) {
            String prevName = "";
            String prevOccu = "";
            for (int i = 0; i < nn.length; i++) {
                if (nn[i].getTag().equals("NAME")) {
                    String thisName = Utils.nv(nn[i].getGivenname()) + "/" + Utils.nv(nn[i].getPatronym()) + "/" + Utils.nv(nn[i].getPrefix()) + "/" + Utils.nv(nn[i].getSurname()) + "/" + Utils.nv(nn[i].getPostfix());
                    if (thisName.equals(prevName) && !prevName.equals("")) {
                        if (nn[i].isToBeDeleted() == false) {
                            String e = Resurses.getString("IDENTICAL_NAMES_ERROR") + " [" + req.persLong.getPid() + "] idx [" + i + "] = " + thisName;
                            logger.warning(e);
                            if (req.persLong.getPid() > 0) {
                                res.resu = e;
                                return res;
                            }
                        }
                    }
                    prevName = thisName;
                } else if (nn[i].getTag().equals("OCCU")) {
                    String thisOccu = Utils.nv(nn[i].getDescription());
                    if (thisOccu.equals(prevOccu) && !prevOccu.equals("")) {
                        if (nn[i].isToBeDeleted() == false) {
                            String e = Resurses.getString("IDENTICAL_OCCU_ERROR") + " [" + req.persLong.getPid() + "] idx [" + i + "] = '" + thisOccu + "'";
                            logger.warning(e);
                            if (req.persLong.getPid() > 0) {
                                res.resu = e;
                                return res;
                            }
                        }
                    }
                    prevOccu = thisOccu;
                }
            }
        }
        int pid = 0;
        try {
            con.setAutoCommit(false);
            Statement stm;
            PreparedStatement pst;
            if (req.persLong.getPid() > 0) {
                res.resultPid = req.persLong.getPid();
                pid = req.persLong.getPid();
                if (req.persLong.isMainModified()) {
                    if (req.persLong.getModified() == null) {
                        pst = con.prepareStatement(updPers + " and modified is null ");
                    } else {
                        pst = con.prepareStatement(updPers + " and modified = ?");
                    }
                    pst.setString(1, req.persLong.getPrivacy());
                    pst.setString(2, req.persLong.getGroupId());
                    pst.setString(3, req.persLong.getSex());
                    pst.setString(4, req.persLong.getSource());
                    pst.setString(5, req.persLong.getPrivateText());
                    pst.setString(6, req.persLong.getRefn());
                    pst.setInt(7, req.persLong.getPid());
                    if (req.persLong.getModified() != null) {
                        pst.setTimestamp(8, req.persLong.getModified());
                    }
                    int lukuri = pst.executeUpdate();
                    if (lukuri != 1) {
                        logger.warning("Person update for pid " + pid + " failed [" + lukuri + "] (Should be 1)");
                        throw new SQLException("TRANSACTION_ERROR_1");
                    }
                    String apara = null;
                    String bpara = null;
                    String cpara = null;
                    String dpara = null;
                    if (req.persLong.getSex().equals("M")) {
                        apara = "FATH";
                        bpara = "MOTH";
                        cpara = "HUSB";
                        dpara = "WIFE";
                    } else if (req.persLong.getSex().equals("F")) {
                        bpara = "FATH";
                        apara = "MOTH";
                        dpara = "HUSB";
                        cpara = "WIFE";
                    }
                    if (apara != null) {
                        String sqlParent = "update relation as b set tag=? " + "where b.rid in (select a.rid from relation as a " + "where a.pid = ? and a.pid <> b.rid and a.tag='CHIL')	" + "and tag=?";
                        PreparedStatement ppare = con.prepareStatement(sqlParent);
                        ppare.setString(1, apara);
                        ppare.setInt(2, req.persLong.getPid());
                        ppare.setString(3, bpara);
                        int resup = ppare.executeUpdate();
                        logger.fine("updated count for person parent= " + resup);
                        String sqlSpouse = "update relation as b set tag=? " + "where b.rid in (select a.rid " + "from relation as a where a.pid = ? and a.pid <> b.pid " + "and a.tag in ('HUSB','WIFE')) and tag=?";
                        ppare = con.prepareStatement(sqlSpouse);
                        ppare.setString(1, cpara);
                        ppare.setInt(2, req.persLong.getPid());
                        ppare.setString(3, dpara);
                        resup = ppare.executeUpdate();
                        logger.fine("updated count for person spouse= " + resup);
                    }
                }
            } else {
                stm = con.createStatement();
                ResultSet rs = stm.executeQuery("select nextval('unitseq')");
                if (rs.next()) {
                    pid = rs.getInt(1);
                    res.resultPid = pid;
                } else {
                    throw new SQLException("Sequence unitseq error");
                }
                rs.close();
                pst = con.prepareStatement(insPers);
                pst.setInt(1, pid);
                pst.setString(2, req.persLong.getTag());
                pst.setString(3, req.persLong.getPrivacy());
                pst.setString(4, req.persLong.getGroupId());
                pst.setString(5, req.persLong.getSex());
                pst.setString(6, req.persLong.getSource());
                pst.setString(7, req.persLong.getPrivateText());
                pst.setString(8, req.persLong.getRefn());
                int lukuri = pst.executeUpdate();
                if (lukuri != 1) {
                    logger.warning("Person created for pid " + pid + "  gave result " + lukuri);
                }
            }
            PreparedStatement pstDel = con.prepareStatement(delSql);
            PreparedStatement pstDelLang = con.prepareStatement(delAllLangSql);
            PreparedStatement pstUpdRow = con.prepareStatement(updRowSql);
            if (nn != null) {
                for (int i = 0; i < nn.length; i++) {
                    UnitNotice n = nn[i];
                    int pnid = 0;
                    if (n.isToBeDeleted()) {
                        pstDelLang.setInt(1, n.getPnid());
                        int landelcnt = pstDelLang.executeUpdate();
                        pstDel.setInt(1, n.getPnid());
                        int delcnt = pstDel.executeUpdate();
                        if (delcnt != 1) {
                            logger.warning("Person notice [" + n.getTag() + "]delete for pid " + pid + " failed [" + delcnt + "] (Should be 1)");
                            throw new SQLException("TRANSACTION_ERROR_2");
                        }
                        String text = "Poistettiin " + delcnt + " riviä [" + landelcnt + "] kieliversiota pid = " + n.getPid() + " tag=" + n.getTag();
                        logger.fine(text);
                    } else if (n.getPnid() == 0 || n.isToBeUpdated()) {
                        if (n.getPnid() == 0) {
                            stm = con.createStatement();
                            ResultSet rs = stm.executeQuery("select nextval('unitnoticeseq')");
                            if (rs.next()) {
                                pnid = rs.getInt(1);
                            } else {
                                throw new SQLException("Sequence unitnoticeseq error");
                            }
                            rs.close();
                            pst = con.prepareStatement(insSql);
                        } else {
                            if (n.getModified() == null) {
                                pst = con.prepareStatement(updSql + " and modified is null ");
                            } else {
                                pst = con.prepareStatement(updSql + " and modified = ?");
                            }
                            pnid = n.getPnid();
                        }
                        if (n.isToBeUpdated() || n.getPnid() == 0) {
                            pst.setInt(1, n.getSurety());
                            pst.setString(2, n.getPrivacy());
                            pst.setString(3, n.getNoticeType());
                            pst.setString(4, n.getDescription());
                            pst.setString(5, n.getDatePrefix());
                            pst.setString(6, n.getFromDate());
                            pst.setString(7, n.getToDate());
                            pst.setString(8, n.getPlace());
                            pst.setString(9, n.getVillage());
                            pst.setString(10, n.getFarm());
                            pst.setString(11, n.getCroft());
                            pst.setString(12, n.getAddress());
                            pst.setString(13, n.getPostalCode());
                            pst.setString(14, n.getPostOffice());
                            pst.setString(15, n.getState());
                            pst.setString(16, n.getCountry());
                            pst.setString(17, n.getEmail());
                            pst.setString(18, n.getNoteText());
                            pst.setString(19, n.getMediaFilename());
                            pst.setString(20, n.getMediaTitle());
                            pst.setString(21, n.getPrefix());
                            pst.setString(22, n.getSurname());
                            pst.setString(23, n.getGivenname());
                            pst.setString(24, n.getPatronym());
                            pst.setString(25, n.getPostfix());
                            pst.setString(26, n.getSource());
                            pst.setString(27, n.getPrivateText());
                            if (n.getRefNames() == null) {
                                pst.setNull(28, Types.ARRAY);
                            } else {
                                Array xx = con.createArrayOf("varchar", n.getRefNames());
                                pst.setArray(28, xx);
                            }
                            if (n.getRefPlaces() == null) {
                                pst.setNull(29, Types.ARRAY);
                            } else {
                                Array xx = con.createArrayOf("varchar", n.getRefPlaces());
                                pst.setArray(29, xx);
                            }
                        }
                        if (n.getPnid() > 0) {
                            pst.setInt(30, n.getPnid());
                            if (n.getModified() != null) {
                                pst.setTimestamp(31, n.getModified());
                            }
                            int luku = pst.executeUpdate();
                            if (luku != 1) {
                                logger.warning("Person notice [" + n.getTag() + "] update for pid " + pid + " failed [" + luku + "] (Should be 1)");
                                throw new SQLException("TRANSACTION_ERROR_3");
                            }
                            logger.fine("Päivitettiin " + luku + " tietuetta pnid=[" + n.getPnid() + "]");
                        } else {
                            pst.setInt(30, pnid);
                            pst.setInt(31, pid);
                            pst.setString(32, n.getTag());
                            int luku = pst.executeUpdate();
                            logger.fine("Luotiin " + luku + " tietue pnid=[" + pnid + "]");
                        }
                        if (n.getMediaData() == null) {
                            String sql = "update unitnotice set mediadata = null where pnid = ?";
                            pst = con.prepareStatement(sql);
                            pst.setInt(1, pnid);
                            int lukuri = pst.executeUpdate();
                            if (lukuri != 1) {
                                logger.warning("media deleted for pnid " + n.getPnid() + " gave result " + lukuri);
                            }
                        } else {
                            String UPDATE_IMAGE_DATA = "update UnitNotice set MediaData = ?," + "mediaWidth = ?,mediaheight = ? where PNID = ? ";
                            PreparedStatement ps = this.con.prepareStatement(UPDATE_IMAGE_DATA);
                            ps.setBytes(1, n.getMediaData());
                            Dimension d = n.getMediaSize();
                            ps.setInt(2, d.width);
                            ps.setInt(3, d.height);
                            ps.setInt(4, pnid);
                            ps.executeUpdate();
                        }
                    }
                    if (n.getLanguages() != null) {
                        for (int l = 0; l < n.getLanguages().length; l++) {
                            UnitLanguage ll = n.getLanguages()[l];
                            if (ll.isToBeDeleted()) {
                                if (ll.getPnid() > 0) {
                                    pst = con.prepareStatement(delOneLangSql);
                                    pst.setInt(1, ll.getPnid());
                                    pst.setString(2, ll.getLangCode());
                                    int lukuri = pst.executeUpdate();
                                    if (lukuri != 1) {
                                        logger.warning("language deleted for pnid " + n.getPnid() + " [" + ll.getLangCode() + "] gave result " + lukuri);
                                    }
                                }
                            }
                            if (ll.isToBeUpdated()) {
                                if (ll.getPnid() == 0) {
                                    pst = con.prepareStatement(insLangSql);
                                    pst.setInt(1, n.getPnid());
                                    pst.setInt(2, pid);
                                    pst.setString(3, n.getTag());
                                    pst.setString(4, ll.getLangCode());
                                    pst.setString(5, ll.getNoticeType());
                                    pst.setString(6, ll.getDescription());
                                    pst.setString(7, ll.getPlace());
                                    pst.setString(8, ll.getNoteText());
                                    pst.setString(9, ll.getMediaTitle());
                                    int lukuri = pst.executeUpdate();
                                    if (lukuri != 1) {
                                        logger.warning("language added for pnid " + n.getPnid() + " [" + ll.getLangCode() + "] gave result " + lukuri);
                                    }
                                } else {
                                    pst = con.prepareStatement(updLangSql);
                                    pst.setString(1, ll.getNoticeType());
                                    pst.setString(2, ll.getDescription());
                                    pst.setString(3, ll.getPlace());
                                    pst.setString(4, ll.getNoteText());
                                    pst.setString(5, ll.getMediaTitle());
                                    pst.setInt(6, ll.getPnid());
                                    pst.setString(7, ll.getLangCode());
                                    int lukuri = pst.executeUpdate();
                                    if (lukuri != 1) {
                                        logger.warning("language for pnid " + ll.getPnid() + " [" + ll.getLangCode() + "] gave result " + lukuri);
                                    }
                                    pst.close();
                                }
                            }
                        }
                    }
                    if (n.getPnid() > 0) {
                        pnid = n.getPnid();
                    }
                    pstUpdRow.setInt(1, i + 1);
                    pstUpdRow.setInt(2, pnid);
                    pstUpdRow.executeUpdate();
                }
            }
            if (req.relations != null) {
                if (req.persLong.getPid() == 0) {
                    req.persLong.setPid(pid);
                    for (int i = 0; i < req.relations.length; i++) {
                        Relation r = req.relations[i];
                        if (r.getPid() == 0) {
                            r.setPid(pid);
                        }
                    }
                }
                updateRelations(userid, req);
            }
            con.commit();
        } catch (Exception e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                logger.log(Level.WARNING, "Person update rollback failed", e1);
            }
            logger.log(Level.WARNING, "person update rolled back for [" + pid + "]", e);
            res.resu = e.getMessage();
            return res;
        } finally {
            try {
                con.setAutoCommit(true);
            } catch (SQLException e) {
                logger.log(Level.WARNING, "set autocommit failed", e);
            }
        }
        return res;
    }
} </s>
<s>class temp {    public synchronized DASMetaData fillInDASMetaData(URL url) throws DASException {
        try {
            con = (HttpURLConnection) url.openConnection();
            dasRespVersion = con.getHeaderField("X-DAS-Version");
            dasSchema = con.getHeaderField("X-DAS-SchemaName");
            dasSchemaVersion = con.getHeaderField("X-DAS-SchemaVersion");
            String dasStatusString = con.getHeaderField("X-DAS-Status");
            if (dasStatusString == null) {
                throw new DASException("Temporary DAS Error");
            }
            if (dasStatusString.indexOf(" ") != -1) {
                dasStatusString = dasStatusString.substring(0, dasStatusString.indexOf(" "));
            }
            dasStatus = Integer.parseInt(dasStatusString);
            if (dasStatus != 200) {
                throw new DASException("Command cannot be executed: Error was " + Integer.toString(dasStatus));
            }
        } catch (IOException e) {
            throw new DASException("Cannot connect to data source");
        }
        if (dasSchema != null && dasSchemaVersion != null) {
            headers.put("X-DAS-Version", dasRespVersion);
            headers.put("X-DAS-SchemaName", dasSchema);
            headers.put("X-DAS-SchemaVersion", dasSchemaVersion);
            dasVersion = Float.parseFloat(dasRespVersion.substring(dasRespVersion.indexOf("/") + 1, dasRespVersion.length()));
            theMetaData = new DASMetaDataImpl(dasVersion, Float.parseFloat(dasSchemaVersion), dasSchema);
        } else {
            dasVersion = Float.parseFloat(dasRespVersion.substring(dasRespVersion.indexOf("/") + 1, dasRespVersion.length()));
            headers.put("X-DAS-Version", dasRespVersion);
            theMetaData = new DASMetaDataImpl(dasVersion);
        }
        String lengthStr = con.getHeaderField("content-length");
        if (lengthStr != null) headers.put("content-length", lengthStr);
        theMetaData.setDASHeaders(headers);
        return theMetaData;
    }
} </s>
<s>class temp {    public synchronized void readModels(URL url, XmiExtensionParser xmiExtensionParser) throws OpenException {
        LOG.info("=======================================");
        LOG.info("== READING MODEL " + url);
        try {
            InputSource source = new InputSource(new XmiInputStream(url.openStream(), xmiExtensionParser, 100000, null));
            source.setSystemId(url.toString());
            readModels(source);
        } catch (IOException ex) {
            throw new OpenException(ex);
        }
    }
} </s>
<s>class temp {    @Override
    public void run() {
        HttpGet httpGet = null;
        try {
            DefaultHttpClient httpClient = new DefaultHttpClient();
            DataModel model = DataModel.getInstance();
            for (City city : citiesToBeUpdated) {
                String preferredUnitType = PreferenceManager.getDefaultSharedPreferences(context).getString(context.getString(R.string.settings_units_key), context.getString(R.string.settings_units_default_value));
                String codePrefix = city.getCountryName().startsWith("United States") ? GET_PARAM_ZIP_PREFIX : GET_PARAM_CITY_CODE_PREFIX;
                String requestUri = new String(GET_URL + "?" + GET_PARAM_ACODE_PREFIX + "=" + GET_PARAM_ACODE + "&" + codePrefix + "=" + city.getId() + "&" + GET_PARAM_UNIT_PREFIX + "=" + preferredUnitType);
                httpGet = new HttpGet(requestUri);
                HttpResponse response = httpClient.execute(httpGet);
                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    processXML(response.getEntity().getContent());
                    for (ForecastedDay day : forecast) {
                        int pos = day.getImageURL().lastIndexOf('/');
                        if (pos < 0 || pos + 1 == day.getImageURL().length()) throw new Exception("Invalid image URL");
                        final String imageFilename = day.getImageURL().substring(pos + 1);
                        File downloadDir = context.getDir(ForecastedDay.DOWNLOAD_DIR, Context.MODE_PRIVATE);
                        File[] imagesFilteredByName = downloadDir.listFiles(new FilenameFilter() {

                            @Override
                            public boolean accept(File dir, String filename) {
                                if (filename.equals(imageFilename)) return true; else return false;
                            }
                        });
                        if (imagesFilteredByName.length == 0) {
                            httpGet = new HttpGet(day.getImageURL());
                            response = httpClient.execute(httpGet);
                            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                                BufferedOutputStream bus = null;
                                try {
                                    bus = new BufferedOutputStream(new FileOutputStream(downloadDir.getAbsolutePath() + "/" + imageFilename));
                                    response.getEntity().writeTo(bus);
                                } finally {
                                    bus.close();
                                }
                            }
                        }
                    }
                    city.setDays(forecast);
                    city.setLastUpdated(Calendar.getInstance().getTime());
                    model.saveCity(city);
                }
            }
        } catch (Exception e) {
            httpGet.abort();
            e.printStackTrace();
        } finally {
            handler.sendEmptyMessage(1);
        }
    }
} </s>
<s>class temp {    private void sendActionPerformed(java.awt.event.ActionEvent evt) {
        if (name.getText().length() < 3) {
            JOptionPane.showMessageDialog(comment, "Too short name (at least 3)");
            return;
        }
        if (comment.getText().length() < 10) {
            JOptionPane.showMessageDialog(comment, "Too short comment (at least 10)");
            return;
        }
        Thread t = new Thread(new Runnable() {

            public void run() {
                try {
                    String data = URLEncoder.encode("send_id", "UTF-8") + "=" + URLEncoder.encode("1", "UTF-8");
                    data += "&" + URLEncoder.encode("author", "UTF-8") + "=" + URLEncoder.encode(name.getText(), "UTF-8");
                    data += "&" + URLEncoder.encode("location", "UTF-8") + "=" + URLEncoder.encode(System.getProperty("user.language"), "UTF-8");
                    data += "&" + URLEncoder.encode("contact", "UTF-8") + "=" + URLEncoder.encode(email.getText(), "UTF-8");
                    data += "&" + URLEncoder.encode("content", "UTF-8") + "=" + URLEncoder.encode(comment.getText(), "UTF-8");
                    data += "&" + URLEncoder.encode("rate", "UTF-8") + "=" + URLEncoder.encode(rate.getSelectedItem().toString(), "UTF-8");
                    System.out.println(data);
                    URL url = new URL("http://javablock.sourceforge.net/book/index.php");
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    wr.write(data);
                    wr.flush();
                    BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                    String address = rd.readLine();
                    JPanel panel = new JPanel();
                    panel.add(new JLabel("Comment added"));
                    panel.add(new JTextArea("visit: http://javablock.sourceforge.net/"));
                    JOptionPane.showMessageDialog(null, new JLabel("Comment sended correctly!"));
                    wr.close();
                    rd.close();
                    hide();
                } catch (IOException ex) {
                    Logger.getLogger(guestBook.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        t.start();
    }
} </s>
<s>class temp {            public void run() {
                try {
                    String data = URLEncoder.encode("send_id", "UTF-8") + "=" + URLEncoder.encode("1", "UTF-8");
                    data += "&" + URLEncoder.encode("author", "UTF-8") + "=" + URLEncoder.encode(name.getText(), "UTF-8");
                    data += "&" + URLEncoder.encode("location", "UTF-8") + "=" + URLEncoder.encode(System.getProperty("user.language"), "UTF-8");
                    data += "&" + URLEncoder.encode("contact", "UTF-8") + "=" + URLEncoder.encode(email.getText(), "UTF-8");
                    data += "&" + URLEncoder.encode("content", "UTF-8") + "=" + URLEncoder.encode(comment.getText(), "UTF-8");
                    data += "&" + URLEncoder.encode("rate", "UTF-8") + "=" + URLEncoder.encode(rate.getSelectedItem().toString(), "UTF-8");
                    System.out.println(data);
                    URL url = new URL("http://javablock.sourceforge.net/book/index.php");
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    wr.write(data);
                    wr.flush();
                    BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                    String address = rd.readLine();
                    JPanel panel = new JPanel();
                    panel.add(new JLabel("Comment added"));
                    panel.add(new JTextArea("visit: http://javablock.sourceforge.net/"));
                    JOptionPane.showMessageDialog(null, new JLabel("Comment sended correctly!"));
                    wr.close();
                    rd.close();
                    hide();
                } catch (IOException ex) {
                    Logger.getLogger(guestBook.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
} </s>
<s>class temp {    public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd");
        DateFormat hhmmss = new SimpleDateFormat("HHmmss");
        DateFormat sss = new SimpleDateFormat("S");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = "UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?" + ((hayVisadoExtracto) ? ", FZJIEXTR=?" : "") + ((hayVisadoRemitente) ? ", FZJIREMI=?" : "") + " WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, "X");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, "X");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = "";
                String com = "";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup("es.caib.regweb.ValoresHome");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup("es.caib.regweb.ValoresHome");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName("es.caib.regweb.module.PluginHook");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { "V", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod("salida", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = "00" + Stringsss;
                    break;
                case (2):
                    Stringsss = "0" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF("UPDATE", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println("ERROR: No es pot fer rollback sense connexió!");
            } catch (Exception ex) {
                System.out.println("Error: " + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
} </s>
<s>class temp {    public void validateClassPath() {
        try {
            URL[] urls = ((URLClassLoader) classLoader).getURLs();
            for (int i = 0; i < urls.length; i++) {
                try {
                    urls[i].openStream();
                    new DebugWriter().writeMessage(urls[i].getFile() + "\n");
                } catch (IllegalArgumentException iae) {
                    throw new LinkageError("malformed class path url:\n " + urls[i]);
                } catch (IOException ioe) {
                    throw new LinkageError("invalid class path url:\n " + urls[i]);
                }
            }
        } catch (ClassCastException e) {
            throw new IllegalArgumentException("The current VM's System classloader is not a " + "subclass of java.net.URLClassLoader");
        }
    }
} </s>
<s>class temp {    private static BufferedInputStream getHTTPConnection(String sUrl) {
        URL url = null;
        BufferedInputStream bis = null;
        try {
            url = new URL(sUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setDoOutput(true);
            connection.setConnectTimeout(30000);
            connection.setReadTimeout(60000);
            connection.setRequestProperty("Accept-Encoding", "gzip, deflate");
            connection.connect();
            String encoding = connection.getContentEncoding();
            if (!Utilities.isEmpty(encoding) && "gzip".equalsIgnoreCase(encoding)) {
                bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE);
            } else if (!Utilities.isEmpty(encoding) && "deflate".equalsIgnoreCase(encoding)) {
                bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE);
            } else {
                bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE);
            }
        } catch (Exception e) {
            LogUtil.e(Constants.TAG, e.getMessage());
        }
        return bis;
    }
} </s>
<s>class temp {    public void handler(List<GoldenBoot> gbs, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            String include = "Top Scorers";
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(include) != -1) {
                    buildGildenBoot(line, gbs);
                    break;
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
} </s>
<s>class temp {        private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {
            HttpClient client = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(downloadUrl);
            final File outputFile = new File(destinationFile);
            createParentDirectories(outputFile);
            FileOutputStream outputStream;
            outputStream = new FileOutputStream(outputFile);
            final HttpResponse response = client.execute(httpGet);
            if (isInterrupted()) {
                outputStream.close();
                return;
            }
            final HttpEntity entity = response.getEntity();
            InputStream inputStream = null;
            try {
                if (entity != null) {
                    inputStream = entity.getContent();
                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copiedLength) {
                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, percentage);
                        }
                    };
                    copyStreams(inputStream, outputStream, callback);
                }
            } finally {
                try {
                    outputStream.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, "Exception while closing stream: " + e);
                }
            }
        }
} </s>
<s>class temp {    public static synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance("MD5");
            } catch (NoSuchAlgorithmException nsae) {
            }
        }
        try {
            digest.update(data.getBytes("utf-8"));
        } catch (UnsupportedEncodingException e) {
        }
        return encodeHex(digest.digest());
    }
} </s>
<s>class temp {    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            logger.debug("Random GUID error: " + e.getMessage());
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
} </s>
<s>class temp {    private static synchronized boolean doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            destFile = new File(destFile + FILE_SEPARATOR + srcFile.getName());
        }
        FileInputStream input = new FileInputStream(srcFile);
        try {
            FileOutputStream output = new FileOutputStream(destFile);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.closeQuietly(output);
            }
        } finally {
            IOUtils.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
        return destFile.exists();
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    private void createButtonCopyToClipboard() {
        buttonCopyToClipboard = new Button(shell, SWT.PUSH);
        buttonCopyToClipboard.setText("Co&py to Clipboard");
        buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));
        buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {

            @Override
            public void widgetSelected(final SelectionEvent event) {
                IOUtils.copyToClipboard(Version.getEnvironmentReport());
            }
        });
    }
} </s>
<s>class temp {        public SequenceIterator call(SequenceIterator[] arguments, XPathContext context) throws XPathException {
            try {
                String encodedString = ((StringValue) arguments[0].next()).getStringValue();
                byte[] decodedBytes = Base64.decode(encodedString);
                if (arguments.length > 1 && ((BooleanValue) arguments[1].next()).getBooleanValue()) {
                    ByteArrayInputStream bis = new ByteArrayInputStream(decodedBytes);
                    GZIPInputStream zis = new GZIPInputStream(bis);
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(zis, baos);
                    decodedBytes = baos.toByteArray();
                }
                Document doc = XmlUtils.stringToDocument(new String(decodedBytes, "UTF-8"));
                Source source = new DOMSource(doc.getDocumentElement());
                XPathEvaluator evaluator = new XPathEvaluator(context.getConfiguration());
                NodeInfo[] infos = new NodeInfo[] { evaluator.setSource(source) };
                return new ArrayIterator(infos);
            } catch (Exception e) {
                throw new XPathException("Could not base64 decode string", e);
            }
        }
} </s>
<s>class temp {    public void refreshStatus() {
        if (!enabledDisplay) return;
        try {
            String url = getServerFortURL();
            BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String data = null;
            int counter = 0;
            while ((data = reader.readLine()) != null && counter < 9) {
                status[counter] = UNKNOWN;
                if (data.matches(".*_alsius.gif.*")) {
                    status[counter] = ALSIUS;
                    counter++;
                }
                if (data.matches(".*_syrtis.gif.*")) {
                    status[counter] = SYRTIS;
                    counter++;
                }
                if (data.matches(".*_ignis.gif.*")) {
                    status[counter] = IGNIS;
                    counter++;
                }
            }
        } catch (Exception exc) {
            for (int i = 0; i < status.length; i++) status[i] = UNKNOWN;
        }
    }
} </s>
<s>class temp {    public static final String getUniqueId() {
        String digest = "";
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            String timeVal = "" + (System.currentTimeMillis() + 1);
            String localHost = "";
            ;
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                log.error("Error trying to get localhost" + e.getMessage());
            }
            String randVal = "" + new Random().nextInt();
            String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error("Error trying to generate unique Id" + e.getMessage());
        }
        return digest;
    }
} </s>
<s>class temp {    public void run(IAction action) {
        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new ProjectEditPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }
} </s>
<s>class temp {    public static String getHashCode(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes("UTF-8"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    static String doHttp(String postURL, String text) {
        String returnValue = null;
        StringBuffer sb = new StringBuffer();
        sb.append("bsh.client=Remote");
        sb.append("&bsh.script=");
        sb.append(URLEncoder.encode(text));
        String formData = sb.toString();
        try {
            URL url = new URL(postURL);
            HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
            urlcon.setRequestMethod("POST");
            urlcon.setRequestProperty("Content-type", "application/x-www-form-urlencoded");
            urlcon.setDoOutput(true);
            urlcon.setDoInput(true);
            PrintWriter pout = new PrintWriter(new OutputStreamWriter(urlcon.getOutputStream(), "8859_1"), true);
            pout.print(formData);
            pout.flush();
            int rc = urlcon.getResponseCode();
            if (rc != HttpURLConnection.HTTP_OK) System.out.println("Error, HTTP response: " + rc);
            returnValue = urlcon.getHeaderField("Bsh-Return");
            BufferedReader bin = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
            String line;
            while ((line = bin.readLine()) != null) System.out.println(line);
            System.out.println("Return Value: " + returnValue);
        } catch (MalformedURLException e) {
            System.out.println(e);
        } catch (IOException e2) {
            System.out.println(e2);
        }
        return returnValue;
    }
} </s>
<s>class temp {    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes("UTF-8"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    public Reader getGETReader_bak(URL url) {
        Reader reader = null;
        if (Navigator.isVerbose()) System.out.println("Web3DService.getGETReader caching " + url);
        int contentLength = -1;
        URLConnection urlc;
        try {
            urlc = url.openConnection();
            urlc.setReadTimeout(Navigator.TIME_OUT);
            if (getEncoding() != null) {
                urlc.setRequestProperty("Authorization", "Basic " + getEncoding());
            }
            urlc.connect();
            String content_type = urlc.getContentType();
            if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) {
                InputStream is = urlc.getInputStream();
                DataInputStream d = new DataInputStream(is);
                contentLength = urlc.getContentLength();
                byte[] content = new byte[contentLength];
                if (d != null) {
                    d.readFully(content, 0, contentLength);
                }
                is.close();
                d.close();
                ByteArrayInputStream bais = new ByteArrayInputStream(content);
                reader = new InputStreamReader(bais);
            } else if (content_type.equalsIgnoreCase("model/vrml.gzip")) {
                InputStream is = urlc.getInputStream();
                BufferedInputStream bis = new BufferedInputStream(is);
                GZIPInputStream gis = new GZIPInputStream(bis);
                StringBuffer sb = new StringBuffer();
                BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis));
                char chars[] = new char[10240];
                int len = 0;
                contentLength = 0;
                while ((len = zipReader.read(chars, 0, chars.length)) >= 0) {
                    sb.append(chars, 0, len);
                    contentLength += len;
                }
                chars = null;
                gis.close();
                zipReader.close();
                bis.close();
                is.close();
                reader = new StringReader(sb.toString());
            } else if (content_type.equalsIgnoreCase("model/vrml.encrypted")) {
                InputStream is = urlc.getInputStream();
                StringBuffer sb = new StringBuffer();
                Cipher pbeCipher = createCipher();
                if (pbeCipher != null) {
                    CipherInputStream cis = new CipherInputStream(is, pbeCipher);
                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis));
                    char chars[] = new char[1024];
                    int len = 0;
                    contentLength = 0;
                    while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {
                        sb.append(chars, 0, len);
                        contentLength += len;
                    }
                    chars = null;
                    cis.close();
                    bufReader.close();
                    reader = new StringReader(sb.toString());
                }
            } else if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) {
                InputStream is = urlc.getInputStream();
                StringBuffer sb = new StringBuffer();
                Cipher pbeCipher = createCipher();
                if (pbeCipher != null) {
                    CipherInputStream cis = new CipherInputStream(is, pbeCipher);
                    GZIPInputStream gis = new GZIPInputStream(cis);
                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(gis));
                    char chars[] = new char[1024];
                    int len = 0;
                    contentLength = 0;
                    while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {
                        sb.append(chars, 0, len);
                        contentLength += len;
                    }
                    chars = null;
                    bufReader.close();
                    gis.close();
                    cis.close();
                    reader = new StringReader(sb.toString());
                }
            } else if (content_type.equalsIgnoreCase("text/html;charset=utf-8")) {
                System.out.println("text/html;charset=utf-8");
            } else {
                System.err.println("ContentNegotiator.startLoading unsupported MIME type: " + content_type);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return reader;
    }
} </s>
<s>class temp {    public String getFeatureInfoHTML(Point3d GKposition, String[] layerIds, int featureCount) {
        String html = "";
        try {
            String request = null;
            if (version == VERSION_030) {
                org.gdi3d.xnavi.services.w3ds.x030.GetFeatureInfo getFeatureInfo = new org.gdi3d.xnavi.services.w3ds.x030.GetFeatureInfo(this.serviceEndPoint);
                request = getFeatureInfo.createRequest(GKposition, layerIds, featureCount);
            } else if (version == VERSION_040) {
                org.gdi3d.xnavi.services.w3ds.x040.GetFeatureInfo getFeatureInfo = new org.gdi3d.xnavi.services.w3ds.x040.GetFeatureInfo(this.serviceEndPoint);
                request = getFeatureInfo.createRequest(GKposition, layerIds, featureCount);
            } else if (version == VERSION_041) {
                org.gdi3d.xnavi.services.w3ds.x041.GetFeatureInfo getFeatureInfo = new org.gdi3d.xnavi.services.w3ds.x041.GetFeatureInfo(this.serviceEndPoint);
                request = getFeatureInfo.createRequest(GKposition, layerIds, featureCount);
            }
            if (Navigator.isVerbose()) System.out.println(request);
            URL url = new URL(request);
            int contentLength = -1;
            URLConnection urlc;
            urlc = url.openConnection();
            urlc.setReadTimeout(Navigator.TIME_OUT);
            if (getEncoding() != null) {
                urlc.setRequestProperty("Authorization", "Basic " + getEncoding());
            }
            urlc.connect();
            String content_type = urlc.getContentType();
            if (content_type.equalsIgnoreCase("text/html") || content_type.equalsIgnoreCase("text/html;charset=UTF-8")) {
                InputStream is = urlc.getInputStream();
                BufferedInputStream bis = new BufferedInputStream(is);
                StringBuffer sb = new StringBuffer();
                InputStreamReader isr = new InputStreamReader(bis);
                char chars[] = new char[10240];
                int len = 0;
                contentLength = 0;
                while ((len = isr.read(chars, 0, chars.length)) >= 0) {
                    sb.append(chars, 0, len);
                    contentLength += len;
                }
                chars = null;
                isr.close();
                bis.close();
                is.close();
                html = sb.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return html;
    }
} </s>
<s>class temp {    private String httpGet(String urlString, boolean postStatus) throws Exception {
        URL url;
        URLConnection conn;
        String answer = "";
        try {
            if (username.equals("") || password.equals("")) throw new AuthNotProvidedException();
            url = new URL(urlString);
            conn = url.openConnection();
            conn.setRequestProperty("Authorization", "Basic " + getAuthentificationString());
            if (postStatus) {
                conn.setDoOutput(true);
                conn.setUseCaches(false);
                conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
                DataOutputStream das = new DataOutputStream(conn.getOutputStream());
                String content = "status=" + URLEncoder.encode(statusMessage, "UTF-8") + "&source=" + URLEncoder.encode("sametimetwitterclient", "UTF-8");
                das.writeBytes(content);
                das.flush();
                das.close();
            }
            InputStream is = (InputStream) conn.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String line;
            while ((line = br.readLine()) != null) {
                answer += line + "\n";
            }
            br.close();
        } catch (FileNotFoundException ex) {
            System.out.println(ex.toString());
            throw new RuntimeException("Page not Found. Maybe Twitter-API has changed.");
        } catch (UnknownHostException ex) {
            System.out.println(ex.toString());
            throw new RuntimeException("Network connection problems. Could not find twitter.com");
        } catch (IOException ex) {
            System.out.println("IO-Exception");
            if (ex.getMessage().indexOf("401") > -1) {
                authenthicated = AUTH_BAD;
                throw new AuthNotAcceptedException();
            }
            System.out.println(ex.toString());
        }
        if (checkForError(answer) != null) {
            throw new RuntimeException(checkForError(answer));
        }
        authenthicated = AUTH_OK;
        return answer;
    }
} </s>
<s>class temp {    public void updateDb(int scriptNumber) throws SQLException, IOException {
        String pathName = updatesPackage.replace(".", "/");
        InputStream in = getClass().getClassLoader().getResourceAsStream(pathName + "/" + scriptNumber + ".sql");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        String script = out.toString("UTF-8");
        String[] statements = script.split(";");
        for (String statement : statements) {
            getJdbcTemplate().execute(statement);
        }
    }
} </s>
<s>class temp {    private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance("MD5").clone();
        md.update(pwd.getBytes("UTF-8"));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? "0" + s2 : s2);
        }
        return app.toString();
    }
} </s>
<s>class temp {        @Override
        public void run() {
            File dir = new File(loggingDir);
            if (!dir.isDirectory()) {
                logger.error("Logging directory \"" + dir.getAbsolutePath() + "\" does not exist.");
                return;
            }
            File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt");
            FileWriter writer;
            try {
                writer = new FileWriter(file);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
            int counter = 0;
            while (!isInterrupted() && counter < numProbes) {
                try {
                    writer.write(System.currentTimeMillis() + "," + currentPending + "," + currentThreads + "," + droppedTasks + "," + executionExceptions + "," + currentWeight + "," + averageWaitTime + "," + averageExecutionTime + "#");
                    writer.flush();
                } catch (IOException e) {
                    e.printStackTrace();
                    break;
                }
                counter++;
                try {
                    sleep(probeTime);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                    break;
                }
            }
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
            FileReader reader;
            try {
                reader = new FileReader(file);
            } catch (FileNotFoundException e2) {
                e2.printStackTrace();
                return;
            }
            Vector<StatStorage> dataV = new Vector<StatStorage>();
            int c;
            try {
                c = reader.read();
            } catch (IOException e1) {
                e1.printStackTrace();
                c = -1;
            }
            String entry = "";
            Date startTime = null;
            Date stopTime = null;
            while (c != -1) {
                if (c == 35) {
                    String parts[] = entry.split(",");
                    if (startTime == null) startTime = new Date(Long.parseLong(parts[0]));
                    if (parts.length > 0) dataV.add(parse(parts));
                    stopTime = new Date(Long.parseLong(parts[0]));
                    entry = "";
                } else {
                    entry += (char) c;
                }
                try {
                    c = reader.read();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            try {
                reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (dataV.size() > 0) {
                int[] dataPending = new int[dataV.size()];
                int[] dataOccupied = new int[dataV.size()];
                long[] dataDropped = new long[dataV.size()];
                long[] dataException = new long[dataV.size()];
                int[] dataWeight = new int[dataV.size()];
                long[] dataExecution = new long[dataV.size()];
                long[] dataWait = new long[dataV.size()];
                for (int i = 0; i < dataV.size(); i++) {
                    dataPending[i] = dataV.get(i).pending;
                    dataOccupied[i] = dataV.get(i).occupied;
                    dataDropped[i] = dataV.get(i).dropped;
                    dataException[i] = dataV.get(i).exceptions;
                    dataWeight[i] = dataV.get(i).currentWeight;
                    dataExecution[i] = (long) dataV.get(i).executionTime;
                    dataWait[i] = (long) dataV.get(i).waitTime;
                }
                String startName = startTime.toString();
                startName = startName.replaceAll("[ ,:]", "");
                file = new File(dir, startName + "pending.gif");
                SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + "occupied.gif");
                SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + "dropped.gif");
                SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + "exceptions.gif");
                SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + "weight.gif");
                SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + "execution.gif");
                SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + "wait.gif");
                SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0));
            }
            recordedExecutionThreads = 0;
            recordedWaitingThreads = 0;
            averageExecutionTime = 0;
            averageWaitTime = 0;
            if (!isLocked) {
                debugThread = new DebugThread();
                debugThread.start();
            }
        }
} </s>
<s>class temp {    public static void copyFile(File source, File destination) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel destChannel = new FileOutputStream(destination).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = srcChannel.size();
            long position = 0;
            while (position < size) {
                position += srcChannel.transferTo(position, maxCount, destChannel);
            }
        } finally {
            if (srcChannel != null) srcChannel.close();
            if (destChannel != null) destChannel.close();
        }
    }
} </s>
<s>class temp {    public static String generateHash(String msg) throws NoSuchAlgorithmException {
        if (msg == null) {
            throw new IllegalArgumentException("Input string can not be null");
        }
        MessageDigest m = MessageDigest.getInstance("MD5");
        m.reset();
        m.update(msg.getBytes());
        byte[] digest = m.digest();
        BigInteger bigInt = new BigInteger(1, digest);
        String hashText = bigInt.toString(16);
        while (hashText.length() < 32) {
            hashText = "0" + hashText;
        }
        return hashText;
    }
} </s>
<s>class temp {    public void run() {
        Pair p = null;
        try {
            while ((p = queue.pop()) != null) {
                GetMethod get = new GetMethod(p.getRemoteUri());
                try {
                    get.setFollowRedirects(true);
                    get.setRequestHeader("Mariner-Application", "prerenderer");
                    get.setRequestHeader("Mariner-DeviceName", deviceName);
                    int iGetResultCode = httpClient.executeMethod(get);
                    if (iGetResultCode != 200) {
                        throw new IOException("Got response code " + iGetResultCode + " for a request for " + p.getRemoteUri());
                    }
                    InputStream is = get.getResponseBodyAsStream();
                    File localFile = new File(deviceFile, p.getLocalUri());
                    localFile.getParentFile().mkdirs();
                    OutputStream os = new FileOutputStream(localFile);
                    IOUtils.copy(is, os);
                    os.close();
                } finally {
                    get.releaseConnection();
                }
            }
        } catch (Exception ex) {
            result = ex;
        }
    }
} </s>
