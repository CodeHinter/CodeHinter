<s>class temp {    public ViewedCandidatesIndex getAllViewedCandidates() throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + "/cand/viewed");
                req.setHeader("Accept-Encoding", "gzip");
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        InputStream in = resp.getEntity().getContent();
                        Header hdr = resp.getFirstHeader("Content-Encoding");
                        String enc = "";
                        if (hdr != null) {
                            enc = resp.getFirstHeader("Content-Encoding").getValue();
                        }
                        if (enc.equals("gzip")) {
                            in = new GZIPInputStream(in);
                        }
                        XMLAble xmlable = XMLReader.read(in);
                        in.close();
                        if (xmlable instanceof ViewedCandidatesIndex) {
                            ViewedCandidatesIndex p = (ViewedCandidatesIndex) xmlable;
                            return p;
                        } else {
                            resp.getEntity().consumeContent();
                            throw new BookKeeprCommunicationException("BookKeepr returned the wrong thing for ViewedCandidatesIndex");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, "Got a malformed message from the bookkeepr", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    throw new BookKeeprCommunicationException("Got a " + resp.getStatusLine().getStatusCode() + " from the BookKeepr");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
} </s>
<s>class temp {    public ViewedCandidates postViewedCandidates(ViewedCandidates viewedCandidates) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpPost req = new HttpPost(remoteHost.getUrl() + "/cand/viewed");
                req.setHeader("Accept-Encoding", "gzip");
                ByteArrayOutputStream out = new ByteArrayOutputStream(1024);
                XMLWriter.write(out, viewedCandidates);
                ByteArrayInputStream in2 = new ByteArrayInputStream(out.toByteArray());
                req.setEntity(new InputStreamEntity(in2, -1));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        InputStream in = resp.getEntity().getContent();
                        Header hdr = resp.getFirstHeader("Content-Encoding");
                        String enc = "";
                        if (hdr != null) {
                            enc = resp.getFirstHeader("Content-Encoding").getValue();
                        }
                        if (enc.equals("gzip")) {
                            in = new GZIPInputStream(in);
                        }
                        XMLAble xmlable = XMLReader.read(in);
                        in.close();
                        if (xmlable instanceof ViewedCandidates) {
                            ViewedCandidates p = (ViewedCandidates) xmlable;
                            return p;
                        } else {
                            resp.getEntity().consumeContent();
                            throw new BookKeeprCommunicationException("BookKeepr returned the wrong thing for ViewedCandidates");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, "Got a malformed message from the bookkeepr", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    throw new BookKeeprCommunicationException("Got a " + resp.getStatusLine().getStatusCode() + " from the BookKeepr");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
} </s>
<s>class temp {    public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + "/id/" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException("BookKeepr returned the wrong thing for pointingID");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, "Got a malformed message from the bookkeepr", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException("Got a " + resp.getStatusLine().getStatusCode() + " from the BookKeepr");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
} </s>
<s>class temp {    public RawCandidate getRawCandidate(long candId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + "/cand/" + Long.toHexString(candId));
                req.setHeader("Accept-Encoding", "gzip");
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        InputStream in = resp.getEntity().getContent();
                        Header hdr = resp.getFirstHeader("Content-Encoding");
                        String enc = "";
                        if (hdr != null) {
                            enc = resp.getFirstHeader("Content-Encoding").getValue();
                        }
                        if (enc.equals("gzip")) {
                            in = new GZIPInputStream(in);
                        }
                        XMLAble xmlable = XMLReader.read(in);
                        in.close();
                        if (xmlable instanceof RawCandidate) {
                            RawCandidate p = (RawCandidate) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException("BookKeepr returned the wrong thing for candId");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, "Got a malformed message from the bookkeepr", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException("Got a " + resp.getStatusLine().getStatusCode() + " from the BookKeepr");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
} </s>
<s>class temp {    public List<CandidateListStub> getAllCandLists() throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + "/cand/lists");
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        InputStream in = resp.getEntity().getContent();
                        XMLAble xmlable = XMLReader.read(in);
                        in.close();
                        if (xmlable instanceof CandidateListIndex) {
                            CandidateListIndex idx = (CandidateListIndex) xmlable;
                            return idx.getCandidateListStubList();
                        } else {
                            throw new BookKeeprCommunicationException("BookKeepr returned the wrong thing for /cand/lists");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, "Got a malformed message from the bookkeepr", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException("Got a " + resp.getStatusLine().getStatusCode() + " from the BookKeepr");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
} </s>
<s>class temp {    public Psrxml getPsrxmlForCandidateList(CandidateList clist) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                long psrxmlid = clist.getPsrxmlId();
                HttpGet req = new HttpGet(remoteHost.getUrl() + "/id/" + StringConvertable.ID.toString(psrxmlid));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        InputStream in = resp.getEntity().getContent();
                        XMLAble xmlable = XMLReader.read(in);
                        in.close();
                        if (xmlable instanceof Psrxml) {
                            Psrxml psrxml = (Psrxml) xmlable;
                            return psrxml;
                        } else {
                            throw new BookKeeprCommunicationException("BookKeepr returned the wrong thing for psrxml id " + psrxmlid);
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, "Got a malformed message from the bookkeepr", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException("Got a " + resp.getStatusLine().getStatusCode() + " from the BookKeepr  (" + remoteHost.getUrl() + "/id/" + StringConvertable.ID + ")");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
} </s>
<s>class temp {    public int process(ProcessorContext context) throws InterruptedException, ProcessorException {
        logger.info("JAISaveTask:process");
        final RenderedOp im = (RenderedOp) context.get("RenderedOp");
        final String path = "s3://s3.amazonaws.com/rssfetch/" + (new Guid());
        final PNGEncodeParam.RGB encPar = new PNGEncodeParam.RGB();
        encPar.setTransparentRGB(new int[] { 0, 0, 0 });
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile("thmb", ".png");
            OutputStream out = new FileOutputStream(tmpFile);
            final ParameterBlock pb = (new ParameterBlock()).addSource(im).add(out).add("png").add(encPar);
            JAI.create("encode", pb, null);
            out.flush();
            out.close();
            FileInputStream in = new FileInputStream(tmpFile);
            final XFile xfile = new XFile(path);
            final XFileOutputStream xout = new XFileOutputStream(xfile);
            final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfile.getExtensionAccessor());
            if (xfa != null) {
                xfa.setMimeType("image/png");
                xfa.setContentLength(tmpFile.length());
            }
            IOUtils.copy(in, xout);
            xout.flush();
            xout.close();
            in.close();
            context.put("outputPath", path);
        } catch (IOException e) {
            logger.error(e);
            throw new ProcessorException(e);
        } catch (Throwable e) {
            logger.error(e);
            throw new ProcessorException(e);
        } finally {
            if (tmpFile != null && tmpFile.exists()) {
                tmpFile.delete();
            }
        }
        return TaskState.STATE_MO_START + TaskState.STATE_ENCODE;
    }
} </s>
<s>class temp {    protected boolean process(final TranscodeJobImpl job) {
        TranscodePipe pipe = null;
        current_job = job;
        DeviceImpl device = job.getDevice();
        device.setTranscoding(true);
        try {
            job.starts();
            TranscodeProvider provider = job.getProfile().getProvider();
            final TranscodeException[] error = { null };
            TranscodeProfile profile = job.getProfile();
            final TranscodeFileImpl transcode_file = job.getTranscodeFile();
            TranscodeProviderAnalysis provider_analysis;
            boolean xcode_required;
            if (provider == null) {
                xcode_required = false;
                provider_analysis = null;
            } else {
                provider_analysis = analyse(job);
                xcode_required = provider_analysis.getBooleanProperty(TranscodeProviderAnalysis.PT_TRANSCODE_REQUIRED);
                int tt_req;
                if (job.isStream()) {
                    tt_req = TranscodeTarget.TRANSCODE_ALWAYS;
                } else {
                    tt_req = job.getTranscodeRequirement();
                    if (device instanceof TranscodeTarget) {
                        if (provider_analysis.getLongProperty(TranscodeProviderAnalysis.PT_VIDEO_HEIGHT) == 0) {
                            if (((TranscodeTarget) device).isAudioCompatible(transcode_file)) {
                                tt_req = TranscodeTarget.TRANSCODE_NEVER;
                            }
                        }
                    }
                }
                if (tt_req == TranscodeTarget.TRANSCODE_NEVER) {
                    xcode_required = false;
                } else if (tt_req == TranscodeTarget.TRANSCODE_ALWAYS) {
                    xcode_required = true;
                    provider_analysis.setBooleanProperty(TranscodeProviderAnalysis.PT_FORCE_TRANSCODE, true);
                }
            }
            if (xcode_required) {
                final AESemaphore xcode_sem = new AESemaphore("xcode:proc");
                final TranscodeProviderJob[] provider_job = { null };
                TranscodeProviderAdapter xcode_adapter = new TranscodeProviderAdapter() {

                    private boolean resolution_updated;

                    private final int ETA_AVERAGE_SIZE = 10;

                    private int last_eta;

                    private int eta_samples;

                    private Average eta_average = AverageFactory.MovingAverage(ETA_AVERAGE_SIZE);

                    private int last_percent;

                    public void updateProgress(int percent, int eta_secs, int new_width, int new_height) {
                        last_eta = eta_secs;
                        last_percent = percent;
                        TranscodeProviderJob prov_job = provider_job[0];
                        if (prov_job == null) {
                            return;
                        }
                        int job_state = job.getState();
                        if (job_state == TranscodeJob.ST_CANCELLED || job_state == TranscodeJob.ST_REMOVED) {
                            prov_job.cancel();
                        } else if (paused || job_state == TranscodeJob.ST_PAUSED) {
                            prov_job.pause();
                        } else {
                            if (job_state == TranscodeJob.ST_RUNNING) {
                                prov_job.resume();
                            }
                            job.updateProgress(percent, eta_secs);
                            prov_job.setMaxBytesPerSecond(max_bytes_per_sec);
                            if (!resolution_updated) {
                                if (new_width > 0 && new_height > 0) {
                                    transcode_file.setResolution(new_width, new_height);
                                    resolution_updated = true;
                                }
                            }
                        }
                    }

                    public void streamStats(long connect_rate, long write_speed) {
                        if (Constants.isOSX && job.getEnableAutoRetry() && job.canUseDirectInput() && job.getAutoRetryCount() == 0) {
                            if (connect_rate > 5 && last_percent < 100) {
                                long eta = (long) eta_average.update(last_eta);
                                eta_samples++;
                                if (eta_samples >= ETA_AVERAGE_SIZE) {
                                    long total_time = (eta * 100) / (100 - last_percent);
                                    long total_write = total_time * write_speed;
                                    DiskManagerFileInfo file = job.getFile();
                                    long length = file.getLength();
                                    if (length > 0) {
                                        double over_write = ((double) total_write) / length;
                                        if (over_write > 5.0) {
                                            failed(new TranscodeException("Overwrite limit exceeded, abandoning transcode"));
                                            provider_job[0].cancel();
                                        }
                                    }
                                }
                            } else {
                                eta_samples = 0;
                            }
                        }
                    }

                    public void failed(TranscodeException e) {
                        if (error[0] == null) {
                            error[0] = e;
                        }
                        xcode_sem.release();
                    }

                    public void complete() {
                        xcode_sem.release();
                    }
                };
                boolean direct_input = job.useDirectInput();
                if (job.isStream()) {
                    pipe = new TranscodePipeStreamSource2(new TranscodePipeStreamSource2.streamListener() {

                        public void gotStream(InputStream is) {
                            job.setStream(is);
                        }
                    });
                    provider_job[0] = provider.transcode(xcode_adapter, provider_analysis, direct_input, job.getFile(), profile, new URL("tcp://127.0.0.1:" + pipe.getPort()));
                } else {
                    File output_file = transcode_file.getCacheFile();
                    provider_job[0] = provider.transcode(xcode_adapter, provider_analysis, direct_input, job.getFile(), profile, output_file.toURI().toURL());
                }
                provider_job[0].setMaxBytesPerSecond(max_bytes_per_sec);
                TranscodeQueueListener listener = new TranscodeQueueListener() {

                    public void jobAdded(TranscodeJob job) {
                    }

                    public void jobChanged(TranscodeJob changed_job) {
                        if (changed_job == job) {
                            int state = job.getState();
                            if (state == TranscodeJob.ST_PAUSED) {
                                provider_job[0].pause();
                            } else if (state == TranscodeJob.ST_RUNNING) {
                                provider_job[0].resume();
                            } else if (state == TranscodeJob.ST_CANCELLED || state == TranscodeJob.ST_STOPPED) {
                                provider_job[0].cancel();
                            }
                        }
                    }

                    public void jobRemoved(TranscodeJob removed_job) {
                        if (removed_job == job) {
                            provider_job[0].cancel();
                        }
                    }
                };
                try {
                    addListener(listener);
                    xcode_sem.reserve();
                } finally {
                    removeListener(listener);
                }
                if (error[0] != null) {
                    throw (error[0]);
                }
            } else {
                DiskManagerFileInfo source = job.getFile();
                transcode_file.setTranscodeRequired(false);
                if (job.isStream()) {
                    PluginInterface av_pi = PluginInitializer.getDefaultInterface().getPluginManager().getPluginInterfaceByID("azupnpav");
                    if (av_pi == null) {
                        throw (new TranscodeException("Media Server plugin not found"));
                    }
                    IPCInterface av_ipc = av_pi.getIPC();
                    String url_str = (String) av_ipc.invoke("getContentURL", new Object[] { source });
                    if (url_str == null || url_str.length() == 0) {
                        File source_file = source.getFile();
                        if (source_file.exists()) {
                            job.setStream(new BufferedInputStream(new FileInputStream(source_file)));
                        } else {
                            throw (new TranscodeException("No UPnPAV URL and file doesn't exist"));
                        }
                    } else {
                        URL source_url = new URL(url_str);
                        job.setStream(source_url.openConnection().getInputStream());
                    }
                } else {
                    if (device.getAlwaysCacheFiles()) {
                        PluginInterface av_pi = PluginInitializer.getDefaultInterface().getPluginManager().getPluginInterfaceByID("azupnpav");
                        if (av_pi == null) {
                            throw (new TranscodeException("Media Server plugin not found"));
                        }
                        IPCInterface av_ipc = av_pi.getIPC();
                        String url_str = (String) av_ipc.invoke("getContentURL", new Object[] { source });
                        InputStream is;
                        long length;
                        if (url_str == null || url_str.length() == 0) {
                            File source_file = source.getFile();
                            if (source_file.exists()) {
                                is = new BufferedInputStream(new FileInputStream(source_file));
                                length = source_file.length();
                            } else {
                                throw (new TranscodeException("No UPnPAV URL and file doesn't exist"));
                            }
                        } else {
                            URL source_url = new URL(url_str);
                            URLConnection connection = source_url.openConnection();
                            is = source_url.openConnection().getInputStream();
                            String s = connection.getHeaderField("content-length");
                            if (s != null) {
                                length = Long.parseLong(s);
                            } else {
                                length = -1;
                            }
                        }
                        OutputStream os = null;
                        final boolean[] cancel_copy = { false };
                        TranscodeQueueListener copy_listener = new TranscodeQueueListener() {

                            public void jobAdded(TranscodeJob job) {
                            }

                            public void jobChanged(TranscodeJob changed_job) {
                                if (changed_job == job) {
                                    int state = job.getState();
                                    if (state == TranscodeJob.ST_PAUSED) {
                                    } else if (state == TranscodeJob.ST_RUNNING) {
                                    } else if (state == TranscodeJob.ST_CANCELLED || state == TranscodeJob.ST_STOPPED) {
                                        cancel_copy[0] = true;
                                    }
                                }
                            }

                            public void jobRemoved(TranscodeJob removed_job) {
                                if (removed_job == job) {
                                    cancel_copy[0] = true;
                                }
                            }
                        };
                        try {
                            addListener(copy_listener);
                            os = new FileOutputStream(transcode_file.getCacheFile());
                            long total_copied = 0;
                            byte[] buffer = new byte[128 * 1024];
                            while (true) {
                                if (cancel_copy[0]) {
                                    throw (new TranscodeException("Copy cancelled"));
                                }
                                int len = is.read(buffer);
                                if (len <= 0) {
                                    break;
                                }
                                os.write(buffer, 0, len);
                                total_copied += len;
                                if (length > 0) {
                                    job.updateProgress((int) (total_copied * 100 / length), -1);
                                }
                                total_copied += len;
                            }
                        } finally {
                            try {
                                is.close();
                            } catch (Throwable e) {
                                Debug.out(e);
                            }
                            try {
                                if (os != null) {
                                    os.close();
                                }
                            } catch (Throwable e) {
                                Debug.out(e);
                            }
                            removeListener(copy_listener);
                        }
                    }
                }
            }
            job.complete();
            return (true);
        } catch (Throwable e) {
            job.failed(e);
            e.printStackTrace();
            if (!job.isStream() && job.getEnableAutoRetry() && job.getAutoRetryCount() == 0 && job.canUseDirectInput() && !job.useDirectInput()) {
                log("Auto-retrying transcode with direct input");
                job.setUseDirectInput();
                job.setAutoRetry(true);
                queue_sem.release();
            }
            return (false);
        } finally {
            if (pipe != null) {
                pipe.destroy();
            }
            device.setTranscoding(false);
            current_job = null;
        }
    }
} </s>
<s>class temp {    public void updateCoordinates(Address address) {
        String mapURL = "http://maps.google.com/maps/geo?output=csv";
        String mapKey = "ABQIAAAAi__aT6y6l86JjbootR-p9xQd1nlEHNeAVGWQhS84yIVN5yGO2RQQPg9QLzy82PFlCzXtMNe6ofKjnA";
        String location = address.getStreet() + " " + address.getZip() + " " + address.getCity();
        if (logger.isDebugEnabled()) {
            logger.debug(location);
        }
        double[] coordinates = { 0.0, 0.0 };
        String content = "";
        try {
            location = URLEncoder.encode(location, "UTF-8");
            String request = mapURL + "&q=" + location + "&key=" + mapKey;
            URL url = new URL(request);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            reader.close();
        } catch (Exception e) {
            if (logger.isDebugEnabled()) {
                logger.debug("Error from google: " + e.getMessage());
            }
        }
        if (logger.isDebugEnabled()) {
            logger.debug(content);
        }
        StringTokenizer tokenizer = new StringTokenizer(content, ",");
        int i = 0;
        while (tokenizer.hasMoreTokens()) {
            i++;
            String token = tokenizer.nextToken();
            if (i == 3) {
                coordinates[0] = Double.parseDouble(token);
            }
            if (i == 4) {
                coordinates[1] = Double.parseDouble(token);
            }
        }
        if ((coordinates[0] != 0) || (coordinates[1] != 0)) {
            address.setLatitude(coordinates[0]);
            address.setLongitude(coordinates[1]);
        } else {
            if (logger.isDebugEnabled()) {
                logger.debug("Invalid coordinates for address " + address.getId());
            }
        }
    }
} </s>
<s>class temp {    public static boolean copyFile(File outFile, File inFile) {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            if (outFile.createNewFile()) {
                inStream = new FileInputStream(inFile);
                outStream = new FileOutputStream(outFile);
                byte[] buffer = new byte[1024];
                int length;
                while ((length = inStream.read(buffer)) > 0) outStream.write(buffer, 0, length);
                inStream.close();
                outStream.close();
            } else return false;
        } catch (IOException iox) {
            iox.printStackTrace();
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    public IContentExtension[] getContentExtensions(String locale) {
        if (RemoteHelp.isEnabled()) {
            List contributions = new ArrayList();
            PreferenceFileHandler handler = new PreferenceFileHandler();
            String isEnabled[] = handler.isEnabled();
            for (int ic = 0; ic < handler.getTotalRemoteInfocenters(); ic++) {
                if (isEnabled[ic].equalsIgnoreCase("true")) {
                    InputStream in = null;
                    try {
                        URL url = RemoteHelp.getURL(ic, PATH_EXTENSIONS);
                        in = url.openStream();
                        if (reader == null) {
                            reader = new DocumentReader();
                        }
                        UAElement element = reader.read(in);
                        IContentExtension[] children = (IContentExtension[]) element.getChildren(IContentExtension.class);
                        for (int contrib = 0; contrib < children.length; contrib++) {
                            contributions.add(children[contrib]);
                        }
                    } catch (IOException e) {
                        String msg = "I/O error while trying to contact the remote help server";
                        HelpBasePlugin.logError(msg, e);
                    } catch (Throwable t) {
                        String msg = "Internal error while reading topic extensions from remote server";
                        HelpBasePlugin.logError(msg, t);
                    } finally {
                        if (in != null) {
                            try {
                                in.close();
                            } catch (IOException e) {
                            }
                        }
                    }
                }
            }
            return (IContentExtension[]) contributions.toArray(new IContentExtension[contributions.size()]);
        }
        return new IContentExtension[0];
    }
} </s>
<s>class temp {    public void putChunk(String chunk) throws JacsonException {
        try {
            URL url = new URL(chunk);
            InputStream is = url.openStream();
            if (inverse) drain.putChunk(chunk);
            is.close();
        } catch (IOException broken) {
            if (!inverse) drain.putChunk(chunk);
        }
    }
} </s>
<s>class temp {    private static void copy(File source, File target) throws IOException {
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(source);
            to = new FileOutputStream(target);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    public static synchronized MetaDataBean getMetaDataByUrl(URL url) {
        if (url == null) throw new IllegalArgumentException("Properties url for meta data is null");
        MetaDataBean mdb = metaDataByUrl.get(url);
        if (mdb != null) return mdb;
        log.info("Loading metadata " + url);
        Properties properties = new Properties();
        try {
            properties.load(url.openStream());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        mdb = new MetaDataBean((Map) properties);
        metaDataByUrl.put(url, mdb);
        mdb.instanceValue = url.toString();
        return mdb;
    }
} </s>
<s>class temp {    private Face(String font) throws IOException {
        characterWidths = new double[256];
        StringBuffer sb = new StringBuffer();
        sb.append('/');
        sb.append(Constants.FONTS_DIR);
        sb.append('/');
        sb.append(font);
        sb.append(Constants.CHAR_WIDTHS_SUFFIX);
        String path = sb.toString();
        URL url = getClass().getResource(path);
        InputStream is = url.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        int pos = 0;
        String width = br.readLine();
        while (width != null && pos < 256) {
            characterWidths[pos] = Double.parseDouble(width);
            pos++;
            width = br.readLine();
        }
    }
} </s>
<s>class temp {    public static String hash(String plainTextPwd) {
        MessageDigest hashAlgo;
        try {
            hashAlgo = java.security.MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new QwickException(e);
        }
        hashAlgo.update(plainTextPwd.getBytes());
        return new String(hashAlgo.digest());
    }
} </s>
<s>class temp {    private void copyFile(String fileName, String messageID, boolean isError) {
        try {
            File inputFile = new File(fileName);
            File outputFile = null;
            if (isError) {
                outputFile = new File(provider.getErrorDataLocation(folderName) + messageID + ".xml");
            } else {
                outputFile = new File(provider.getDataProcessedLocation(folderName) + messageID + ".xml");
            }
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (Exception e) {
        }
    }
} </s>
<s>class temp {    public static void copyFile(File input, File output) throws Exception {
        FileReader in = new FileReader(input);
        FileWriter out = new FileWriter(output);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
} </s>
<s>class temp {        private void compileJarFile() {
            String javaFileName = jarFileName + ".java";
            try {
                File pluginWorkDirectory = new File(CastadivaModel.PLUGIN_WORKFOLDER);
                pluginWorkDirectory.mkdirs();
                File pluginsDir = new File(pluginWorkDirectory.getPath() + "/castadiva/Plugins");
                pluginsDir.mkdirs();
                BufferedWriter bout = new BufferedWriter(new FileWriter(pluginWorkDirectory.getPath() + "/castadiva/Plugins/" + javaFileName));
                bout.write("package castadiva.Plugins;\n");
                bout.write("import java.io.*;\n");
                bout.write("import java.util.zip.ZipEntry;\n");
                bout.write("import java.util.jar.JarFile;\n");
                bout.write("import lib.IPluginCastadiva;\n");
                bout.write("public class " + jarFileName + " implements IPluginCastadiva {\n");
                bout.write("    public String getBin() {\n");
                bout.write("        return \"" + binaryFilePath + "\"; \n    }\n");
                bout.write("    public String getFlags() {\n");
                bout.write("        return \"" + protocolFlags + "\"; \n    }\n");
                bout.write("    public String getPathConf() {\n");
                bout.write("        return \"" + configurationFilePath + "\"; \n    }\n");
                bout.write("    public String getConfContent(){\n");
                bout.write("        BufferedReader confFileReader;\n");
                bout.write("        try {\n");
                bout.write("            JarFile jar = new JarFile(\"" + CastadivaModel.PLUGIN_JAR_FOLDER + "/" + jarFileName + ".jar\");\n");
                bout.write("            ZipEntry entry = jar.getEntry(\"" + configurationFilename[configurationFilename.length - 1] + "\");\n");
                bout.write("            confFileReader = new BufferedReader(new InputStreamReader(jar.getInputStream(entry)));\n");
                bout.write("            String confFile = \"\";\n");
                bout.write("            String confFileLine;\n");
                bout.write("            while((confFileLine = confFileReader.readLine()) != null){\n");
                bout.write("                 confFile+=\"\\n\"+confFileLine;\n");
                bout.write("            }\n");
                bout.write("            return(confFile);\n");
                bout.write("        } catch (Exception ex) {\n");
                bout.write("            System.out.println(ex);\n");
                bout.write("        }\n");
                bout.write("        return(null);\n");
                bout.write("    }\n");
                bout.write("    public String getConf(){\n");
                bout.write("        return(\"" + configurationFilename[configurationFilename.length - 1] + "\");\n");
                bout.write("    }\n");
                bout.write("    public String getKillInstruction() {\n");
                bout.write("        return  \"killall " + binFileName[binFileName.length - 1] + " 2>/dev/null\"" + ";\n    }\n}");
                bout.close();
                BufferedWriter confFileWriter = new BufferedWriter(new FileWriter(CastadivaModel.PLUGIN_WORKFOLDER + "/" + configurationFilename[configurationFilename.length - 1]));
                confFileWriter.write(protocolConfiguration);
                confFileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(ProtocolsGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
} </s>
<s>class temp {    private static void downloadFile(URL url, File destFile) throws Exception {
        try {
            URLConnection urlConnection = url.openConnection();
            File tmpFile = null;
            try {
                tmpFile = File.createTempFile("remoteLib_", null);
                InputStream in = null;
                FileOutputStream out = null;
                try {
                    in = urlConnection.getInputStream();
                    out = new FileOutputStream(tmpFile);
                    IOUtils.copy(in, out);
                } finally {
                    if (out != null) {
                        out.close();
                    }
                    if (in != null) {
                        in.close();
                    }
                }
                FileUtils.copyFile(tmpFile, destFile);
            } finally {
                if (tmpFile != null) {
                    tmpFile.delete();
                }
            }
        } catch (Exception ex) {
            throw new RuntimeException("Could not download URL: " + url, ex);
        }
    }
} </s>
<s>class temp {    public void readPersistentProperties() {
        try {
            String file = System.getProperty("user.home") + System.getProperty("file.separator") + ".das2rc";
            File f = new File(file);
            if (f.canRead()) {
                try {
                    InputStream in = new FileInputStream(f);
                    load(in);
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    org.das2.util.DasExceptionHandler.handle(e);
                }
            } else {
                if (!f.exists() && f.canWrite()) {
                    try {
                        OutputStream out = new FileOutputStream(f);
                        store(out, "");
                        out.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                        org.das2.util.DasExceptionHandler.handle(e);
                    }
                } else {
                    System.err.println("Unable to read or write " + file + ".  Using defaults.");
                }
            }
        } catch (SecurityException ex) {
            ex.printStackTrace();
        }
    }
} </s>
<s>class temp {    private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    public static String read(URL url) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        StringWriter res = new StringWriter();
        PrintWriter writer = new PrintWriter(new BufferedWriter(res));
        String line;
        while ((line = reader.readLine()) != null) {
            writer.println(line);
        }
        reader.close();
        writer.close();
        return res.toString();
    }
} </s>
<s>class temp {    protected InputStream getAudioStream() {
        InputStream in = null;
        try {
            URL url = getAudioURL();
            if (url != null) in = url.openStream();
        } catch (IOException ex) {
            System.err.println(ex);
        }
        return in;
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static String fetch(String reference) throws IOException {
        URL url = new URL(reference);
        HttpURLConnection c = (HttpURLConnection) url.openConnection();
        c.setRequestMethod("GET");
        c.setDoOutput(true);
        c.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
        return parseISToString(c.getInputStream());
    }
} </s>
<s>class temp {    public static String generateDigest(String message, String DigestAlgorithm) {
        try {
            MessageDigest md = MessageDigest.getInstance(DigestAlgorithm);
            md.update(message.getBytes(), 0, message.length());
            return new BigInteger(1, md.digest()).toString(16);
        } catch (NoSuchAlgorithmException nsae) {
            return null;
        }
    }
} </s>
<s>class temp {    private InputStream getSearchInputStream(String name) {
        URL url = null;
        try {
            url = new URL(TheMovieDBXmlPullFeedParser.SEARCH_FEED_URL + URLEncoder.encode(name));
            Log.d(Constants.LOG_TAG, "Movie search URL: " + url);
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
        try {
            return url.openConnection().getInputStream();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    private InputStream getInfoInputStream(String tmdbId) {
        URL url = null;
        try {
            url = new URL(TheMovieDBXmlPullFeedParser.INFO_FEED_URL + URLEncoder.encode(tmdbId));
            Log.d(Constants.LOG_TAG, "Movie info URL: " + url);
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
        try {
            return url.openConnection().getInputStream();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static synchronized String getMD5_Base64(String input) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException("System doesn't support MD5 algorithm.");
        }
        try {
            msgDigest.update(input.getBytes("UTF-8"));
        } catch (java.io.UnsupportedEncodingException ex) {
            throw new IllegalStateException("System doesn't support your  EncodingException.");
        }
        byte[] rawData = msgDigest.digest();
        byte[] encoded = Base64.encode(rawData);
        String retValue = new String(encoded);
        return retValue;
    }
} </s>
<s>class temp {    public static final void copyFile(File source, File target) {
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(target).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (java.io.IOException e) {
        }
    }
} </s>
<s>class temp {    public static String readRss(String feed, int num) {
        InputStream stream = null;
        try {
            feed = appendParam(feed, "num", "" + num);
            System.out.println("feed=" + feed);
            URL url = new URL(feed);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty("User-Agent", RSS_USER_AGENT);
            stream = connection.getInputStream();
            return CFileHelper.readInputStream(stream);
        } catch (Exception e) {
            throw new CException(e);
        } finally {
            CFileHelper.closeStream(stream);
        }
    }
} </s>
<s>class temp {    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning("Failed get of replay char sequence " + curi.toString() + " " + e.getMessage() + " " + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll(" ");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString("Failed close of ReplayCharSequence.", ioe));
                }
            }
        }
    }
} </s>
<s>class temp {    private void sortWhats(String[] labels, int[] whats, String simplifyString) {
        int n = whats.length;
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < n - 1; i++) {
                int i0_pos = simplifyString.indexOf(labels[whats[i]]);
                int i1_pos = simplifyString.indexOf(labels[whats[i + 1]]);
                if (i0_pos > i1_pos) {
                    int temp = whats[i];
                    whats[i] = whats[i + 1];
                    whats[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
} </s>
<s>class temp {    public void GetList() throws Exception {
        Authenticator.setDefault(new MyAuth(this._user, this._pwd));
        URL url = new URL(MyFanfou.PublicTimeLine);
        InputStream ins = url.openConnection().getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(ins));
        String json = "";
        String line;
        while ((line = reader.readLine()) != null) json += line;
        JSONArray array = new JSONArray(json);
        for (int i = 0; i < array.length(); i++) {
            JSONObject object = array.getJSONObject(i);
            String users = object.getString("user");
            JSONObject user = new JSONObject(users);
            System.out.println(object.getString("id") + ":" + user.getString("birthday"));
        }
    }
} </s>
<s>class temp {    public static void copyFile(File file, File destination) throws Exception {
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            in = new BufferedInputStream(new FileInputStream(file));
            out = new BufferedOutputStream(new FileOutputStream(destination));
            int c;
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            try {
                if (out != null) out.close();
            } catch (Exception e) {
            }
            try {
                if (in != null) in.close();
            } catch (Exception e) {
            }
        }
    }
} </s>
<s>class temp {    void bubbleSort(int[] a) {
        int i = 0;
        int j = a.length - 1;
        int aux = 0;
        int stop = 0;
        while (stop == 0) {
            stop = 1;
            i = 0;
            while (i < j) {
                if (a[i] > a[i + 1]) {
                    aux = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = aux;
                    stop = 0;
                }
                i = i + 1;
            }
            j = j - 1;
        }
    }
} </s>
<s>class temp {    public void visit(AuthenticationMD5Password message) {
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(((String) properties.get("password") + (String) properties.get("user")).getBytes("iso8859-1"));
            String newValue = toHexString(md5.digest()) + new String(message.getSalt(), "iso8859-1");
            md5.reset();
            md5.update(newValue.getBytes("iso8859-1"));
            newValue = toHexString(md5.digest());
            PasswordMessage mes = new PasswordMessage("md5" + newValue);
            byte[] data = encoder.encode(mes);
            out.write(data);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception {
        ObjectFactory factory = new ObjectFactory();
        SubmitDocumentRequest sdr = factory.createSubmitDocumentRequest();
        IdType pid = factory.createIdType();
        pid.setRoot("1.3.6.1.4.1.21367.2005.3.7.6fa11e467880478");
        sdr.setPatientId(pid);
        ClassLoader classLoader = JUnitHelper.class.getClassLoader();
        DocumentsType documents = factory.createDocumentsType();
        for (int i = 0; i < count; ++i) {
            DocumentType document = factory.createDocumentType();
            if ((documentIds != null) && (documentIds.length > i)) {
                document.setId(documentIds[i]);
            }
            CodeType type = factory.createCodeType();
            type.setCode("51855-5");
            type.setCodeSystem("2.16.840.1.113883.6.1");
            document.setType(type);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            InputStream is = classLoader.getResourceAsStream(file);
            assertNotNull(is);
            IOUtils.copy(is, bos);
            document.setContent(bos.toByteArray());
            documents.getDocument().add(document);
        }
        sdr.setDocuments(documents);
        QName qname = new QName(URIConstants.XDSBRIDGE_URI, "SubmitDocumentRequest");
        JAXBContext jc = JAXBContext.newInstance(SubmitDocumentRequest.class);
        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        JAXBElement element = new JAXBElement(qname, sdr.getClass(), sdr);
        StringWriter sw = new StringWriter();
        marshaller.marshal(element, sw);
        String xml = sw.toString();
        logger.debug(xml);
        OMElement result = AXIOMUtil.stringToOM(OMAbstractFactory.getOMFactory(), xml);
        List<OMElement> list = XPathHelper.selectNodes(result, "./ns:Documents/ns:Document/ns:Content", URIConstants.XDSBRIDGE_URI);
        for (OMElement contentNode : list) {
            OMText binaryNode = (OMText) contentNode.getFirstOMChild();
            if (binaryNode != null) {
                binaryNode.setOptimize(true);
            }
        }
        return result;
    }
} </s>
<s>class temp {    @Override
    public void start() {
        try {
            ftp = new FTPClient();
            ftp.connect(this.url.getHost(), this.url.getPort() == -1 ? this.url.getDefaultPort() : this.url.getPort());
            String username = "anonymous";
            String password = "";
            if (this.url.getUserInfo() != null) {
                username = this.url.getUserInfo().split(":")[0];
                password = this.url.getUserInfo().split(":")[1];
            }
            ftp.login(username, password);
            long startPos = 0;
            if (getFile().exists()) startPos = getFile().length(); else getFile().createNewFile();
            ftp.download(this.url.getPath(), getFile(), startPos, new FTPDTImpl());
            ftp.disconnect(true);
        } catch (Exception ex) {
            ex.printStackTrace();
            speedTimer.cancel();
        }
    }
} </s>
<s>class temp {    public void actionPerformed(ActionEvent e) {
        if (path.compareTo("") != 0) {
            imageName = (path.substring(path.lastIndexOf(imageFile.separator) + 1, path.length()));
            File imageFile = new File(path);
            directoryPath = "Images" + imageFile.separator + imageName.substring(0, 1).toUpperCase();
            File directory = new File(directoryPath);
            directory.mkdirs();
            imagePath = "." + imageFile.separator + "Images" + imageFile.separator + imageName.substring(0, 1).toUpperCase() + imageFile.separator + imageName;
            File newFile = new File(imagePath);
            int i = 1;
            while (newFile.exists()) {
                imagePath = "." + imageFile.separator + "Images" + imageFile.separator + imageName.substring(0, imageName.lastIndexOf('.')) + "_" + i + imageName.substring(imageName.lastIndexOf('.'), imageName.length());
                newFile = new File(imagePath);
                i++;
            }
            imagePathThumb = (imagePath.substring(0, imagePath.lastIndexOf("."))).concat("_th.jpg");
            dataBase.insertDB(theConcepts, imageName, imageName.substring(0, imageName.lastIndexOf('.')));
            try {
                FileChannel srcChannel = new FileInputStream(path).getChannel();
                FileChannel dstChannel = new FileOutputStream(imagePath).getChannel();
                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                srcChannel.close();
                dstChannel.close();
            } catch (IOException exc) {
                System.out.println(exc.getMessage());
                System.out.println(exc.toString());
            }
            image = null;
            if (imageFile != null) {
                if (TFileUtils.isJAIRequired(imageFile)) {
                    RenderedOp src = JAI.create("fileload", imageFile.getAbsolutePath());
                    BufferedImage bufferedImage = src.getAsBufferedImage();
                    image = new ImageIcon(bufferedImage);
                } else {
                    image = new ImageIcon(imageFile.getAbsolutePath());
                }
                if (image.getImageLoadStatus() == MediaTracker.ERRORED) {
                    int choosenOption = JOptionPane.NO_OPTION;
                    choosenOption = JOptionPane.showConfirmDialog(null, TLanguage.getString("TIGInsertImageAction.MESSAGE"), TLanguage.getString("TIGInsertImageAction.NAME"), JOptionPane.CLOSED_OPTION, JOptionPane.ERROR_MESSAGE);
                } else {
                    try {
                        int thumbWidth = PREVIEW_WIDTH;
                        int thumbHeight = PREVIEW_HEIGHT;
                        double thumbRatio = (double) thumbWidth / (double) thumbHeight;
                        int imageWidth = image.getIconWidth();
                        int imageHeight = image.getIconHeight();
                        double imageRatio = (double) imageWidth / (double) imageHeight;
                        if (thumbRatio < imageRatio) {
                            thumbHeight = (int) (thumbWidth / imageRatio);
                        } else {
                            thumbWidth = (int) (thumbHeight * imageRatio);
                        }
                        BufferedImage thumbImage = new BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);
                        Graphics2D graphics2D = thumbImage.createGraphics();
                        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                        graphics2D.drawImage(image.getImage(), 0, 0, thumbWidth, thumbHeight, null);
                        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(imagePathThumb));
                        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
                        JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(thumbImage);
                        int quality = 100;
                        quality = Math.max(0, Math.min(quality, 100));
                        param.setQuality((float) quality / 100.0f, false);
                        encoder.setJPEGEncodeParam(param);
                        encoder.encode(thumbImage);
                        out.close();
                    } catch (Exception ex) {
                        System.out.println(ex.getMessage());
                        System.out.println(ex.toString());
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    public void executeRequest(OperationContext context) throws Throwable {
        long t1 = System.currentTimeMillis();
        GetPortrayMapCapabilitiesParams params = context.getRequestOptions().getGetPortrayMapCapabilitiesOptions();
        String srvCfg = context.getRequestContext().getApplicationConfiguration().getCatalogConfiguration().getParameters().getValue("openls.portrayMap");
        String sUrl = srvCfg + "?f=json&pretty=true";
        URL url = new URL(sUrl);
        URLConnection conn = url.openConnection();
        String line = "";
        String sResponse = "";
        InputStream is = conn.getInputStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader rd = new BufferedReader(isr);
        while ((line = rd.readLine()) != null) {
            sResponse += line;
        }
        rd.close();
        parseResponse(params, sResponse);
        long t2 = System.currentTimeMillis();
        LOGGER.info("PERFORMANCE: " + (t2 - t1) + " ms spent performing service");
    }
} </s>
<s>class temp {    public String digestPassword(String password) {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance("MD5");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte[] messageDigest = algorithm.digest();
            for (byte b : messageDigest) {
                hexString.append(Integer.toHexString(0xFF & b));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException {
        final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(file.getCanonicalFile())));
        ZipEntry ze;
        try {
            while (null != (ze = zis.getNextEntry())) {
                final File f = new File(folder.getCanonicalPath(), ze.getName());
                if (f.exists()) f.delete();
                if (ze.isDirectory()) {
                    f.mkdirs();
                    continue;
                }
                f.getParentFile().mkdirs();
                final OutputStream fos = new BufferedOutputStream(new FileOutputStream(f));
                try {
                    try {
                        final byte[] buf = new byte[8192];
                        int bytesRead;
                        while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead);
                    } finally {
                        fos.close();
                    }
                } catch (final IOException ioe) {
                    f.delete();
                    throw ioe;
                }
            }
        } finally {
            zis.close();
        }
        if (deleteZipAfter) file.delete();
    }
} </s>
<s>class temp {    private void post(String title, Document content, Set<String> tags) throws HttpException, IOException, TransformerException {
        PostMethod method = null;
        try {
            method = new PostMethod("http://www.blogger.com/feeds/" + this.blogId + "/posts/default");
            method.addRequestHeader("GData-Version", String.valueOf(GDataVersion));
            method.addRequestHeader("Authorization", "GoogleLogin auth=" + this.AuthToken);
            Document dom = this.domBuilder.newDocument();
            Element entry = dom.createElementNS(Atom.NS, "entry");
            dom.appendChild(entry);
            entry.setAttribute("xmlns", Atom.NS);
            Element titleNode = dom.createElementNS(Atom.NS, "title");
            entry.appendChild(titleNode);
            titleNode.setAttribute("type", "text");
            titleNode.appendChild(dom.createTextNode(title));
            Element contentNode = dom.createElementNS(Atom.NS, "content");
            entry.appendChild(contentNode);
            contentNode.setAttribute("type", "xhtml");
            contentNode.appendChild(dom.importNode(content.getDocumentElement(), true));
            for (String tag : tags) {
                Element category = dom.createElementNS(Atom.NS, "category");
                category.setAttribute("scheme", "http://www.blogger.com/atom/ns#");
                category.setAttribute("term", tag);
                entry.appendChild(category);
            }
            StringWriter out = new StringWriter();
            this.xml2ascii.transform(new DOMSource(dom), new StreamResult(out));
            method.setRequestEntity(new StringRequestEntity(out.toString(), "application/atom+xml", "UTF-8"));
            int status = getHttpClient().executeMethod(method);
            if (status == 201) {
                IOUtils.copyTo(method.getResponseBodyAsStream(), System.out);
            } else {
                throw new HttpException("post returned http-code=" + status + " expected 201 (CREATE)");
            }
        } catch (TransformerException err) {
            throw err;
        } catch (HttpException err) {
            throw err;
        } catch (IOException err) {
            throw err;
        } finally {
            if (method != null) method.releaseConnection();
        }
    }
} </s>
<s>class temp {    public static void copyFromOffset(long offset, File exe, File cab) throws IOException {
        DataInputStream in = new DataInputStream(new FileInputStream(exe));
        FileOutputStream out = new FileOutputStream(cab);
        byte[] buffer = new byte[4096];
        int bytes_read;
        in.skipBytes((int) offset);
        while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
        in.close();
        out.close();
        in = null;
        out = null;
    }
} </s>
<s>class temp {    private void loadMascotLibrary() {
        if (isMascotLibraryLoaded) return;
        try {
            boolean isLinux = false;
            boolean isAMD64 = false;
            String mascotLibraryFile;
            if (Configurator.getOSName().toLowerCase().contains("linux")) {
                isLinux = true;
            }
            if (Configurator.getOSArch().toLowerCase().contains("amd64")) {
                isAMD64 = true;
            }
            if (isLinux) {
                if (isAMD64) {
                    mascotLibraryFile = "libmsparserj-64.so";
                } else {
                    mascotLibraryFile = "libmsparserj-32.so";
                }
            } else {
                if (isAMD64) {
                    mascotLibraryFile = "msparserj-64.dll";
                } else {
                    mascotLibraryFile = "msparserj-32.dll";
                }
            }
            logger.warn("Using: " + mascotLibraryFile);
            URL mascot_lib = MascotDAO.class.getClassLoader().getResource(mascotLibraryFile);
            if (mascot_lib != null) {
                logger.debug("Mascot library URL: " + mascot_lib);
                tmpMascotLibraryFile = File.createTempFile("libmascot.so.", ".tmp", new File(System.getProperty("java.io.tmpdir")));
                InputStream in = mascot_lib.openStream();
                OutputStream out = new FileOutputStream(tmpMascotLibraryFile);
                IOUtils.copy(in, out);
                in.close();
                out.close();
                System.load(tmpMascotLibraryFile.getAbsolutePath());
                isMascotLibraryLoaded = true;
            } else {
                throw new ConverterException("Could not load Mascot Library for system: " + Configurator.getOSName() + Configurator.getOSArch());
            }
        } catch (IOException e) {
            throw new ConverterException("Error loading Mascot library: " + e.getMessage(), e);
        }
    }
} </s>
<s>class temp {    public static String analyze(List<String> stackLines) {
        final MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        final Iterator<String> iterator = stackLines.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        try {
            final String messageLine = iterator.next();
            final String exceptionClass = getExceptionClass(messageLine);
            messageDigest.update(exceptionClass.getBytes("UTF-8"));
            analyze(exceptionClass, iterator, messageDigest);
            final byte[] bytes = messageDigest.digest();
            final BigInteger bigInt = new BigInteger(1, bytes);
            final String ret = bigInt.toString(36);
            return ret;
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e.getMessage(), e);
        }
    }
} </s>
<s>class temp {    public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { "DynusT.exe", "DLL_ramp.dll", "Ramp_Meter_Fixed_CDLL.dll", "Ramp_Meter_Feedback_CDLL.dll", "Ramp_Meter_Feedback_FDLL.dll", "libifcoremd.dll", "libmmd.dll", "Ramp_Meter_Fixed_FDLL.dll", "libiomp5md.dll" };
        final String[] modelFiles = new String[] { "network.dat", "scenario.dat", "control.dat", "ramp.dat", "incident.dat", "movement.dat", "vms.dat", "origin.dat", "destination.dat", "StopCap4Way.dat", "StopCap2Way.dat", "YieldCap.dat", "WorkZone.dat", "GradeLengthPCE.dat", "leftcap.dat", "system.dat", "output_option.dat", "bg_demand_adjust.dat", "xy.dat", "TrafficFlowModel.dat", "parameter.dat" };
        log.info("Creating iteration-directory...");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info("Copying application files to iteration-directory...");
        for (String filename : exeFiles) {
            log.info("  Copying " + filename);
            IOUtils.copyFile(new File(this.dynusTDir + "/" + filename), new File(this.tmpDir + "/" + filename));
        }
        log.info("Copying model files to iteration-directory...");
        for (String filename : modelFiles) {
            log.info("  Copying " + filename);
            IOUtils.copyFile(new File(this.modelDir + "/" + filename), new File(this.tmpDir + "/" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith(".dws")) {
                log.info("  Copying " + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + "/" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + "/dynus-t.log";
        String cmd = this.tmpDir + "/DynusT.exe";
        log.info("running command: " + cmd + " in directory " + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException("There was a problem running Dynus-T. exit code: " + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info("  Deleting " + filename);
                new File(this.tmpDir + "/" + filename).delete();
            }
        }
    }
} </s>
<s>class temp {    public static synchronized String encrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(text.getBytes("UTF-8"));
        byte raw[] = md.digest();
        return new Base64(-1).encodeToString(raw);
    }
} </s>
<s>class temp {        public InputSource resolveEntity(String pPublicId, String pSystemId) throws SAXException, IOException {
            try {
                URL url = new URL(pSystemId);
                String fileName = (String) urlMap.get(url);
                if (fileName != null) {
                    FileInputStream istream = new FileInputStream(new File(schemaDir, fileName));
                    InputSource isource = new InputSource(istream);
                    isource.setSystemId(url.toString());
                    return isource;
                }
                String file = url.getFile();
                if (file == null) {
                    file = "";
                } else {
                    int offset = file.lastIndexOf('/');
                    if (offset >= 0) {
                        file = file.substring(offset + 1);
                    }
                }
                if ("".equals(file)) {
                    file = "schema.xsd";
                }
                int offset = file.lastIndexOf('.');
                String prefix;
                String suffix;
                String numAsStr = "";
                if (offset > 0 && offset < file.length()) {
                    prefix = file.substring(0, offset);
                    suffix = file.substring(offset);
                } else {
                    prefix = file;
                    suffix = ".xsd";
                }
                File f;
                for (int num = 1; ; ++num) {
                    f = new File(schemaDir, prefix + numAsStr + suffix);
                    if (f.exists()) {
                        numAsStr = "_" + num;
                    } else {
                        break;
                    }
                }
                InputStream istream = url.openStream();
                schemaDir.mkdirs();
                FileOutputStream fos = new FileOutputStream(f);
                try {
                    byte[] buffer = new byte[1024];
                    for (; ; ) {
                        int res = istream.read(buffer);
                        if (res == -1) {
                            break;
                        } else if (res > 0) {
                            fos.write(buffer, 0, res);
                        }
                    }
                    istream.close();
                    fos.close();
                    fos = null;
                } finally {
                    if (fos != null) {
                        try {
                            f.delete();
                        } catch (Throwable ignore) {
                        }
                    }
                }
                urlMap.put(url, f.getName());
                InputSource isource = new InputSource(new FileInputStream(f));
                isource.setSystemId(url.toString());
                return isource;
            } catch (Exception e) {
                JaxMeServlet.this.log("Failed to resolve URL " + pSystemId, e);
            }
            return null;
        }
} </s>
<s>class temp {    public Converter(String input, String output) {
        try {
            FileInputStream fis = new FileInputStream(new File(input));
            BufferedReader in = new BufferedReader(new InputStreamReader(fis, "SJIS"));
            FileOutputStream fos = new FileOutputStream(new File(output));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, "UTF8"));
            int len = 80;
            char buf[] = new char[len];
            int numRead;
            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);
            out.close();
            in.close();
        } catch (IOException e) {
            System.out.println("An I/O Exception Occurred: " + e);
        }
    }
} </s>
<s>class temp {    public static void loadMessages(String filename, Map<String, String> map) throws FileNotFoundException, IOException {
        String line;
        URL url = CurrentLocale.class.getResource("MessagesBundle_" + filename + ".properties");
        InputStreamReader isr = new InputStreamReader(url.openStream());
        BufferedReader br = new BufferedReader(isr);
        while ((line = br.readLine()) != null) {
            String[] l = line.split("=", 2);
            map.put(l[0].trim(), l[1].trim());
        }
        br.close();
        isr.close();
    }
} </s>
<s>class temp {    public APIResponse create(User user) throws Exception {
        APIResponse response = new APIResponse();
        connection = (HttpURLConnection) new URL(url + "/api/user/create").openConnection();
        connection.setDoOutput(true);
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/json; charset=utf-8");
        connection.setUseCaches(false);
        connection.setConnectTimeout(TIMEOUT);
        connection.connect();
        marshaller.marshal(user, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(connection.getOutputStream(), "utf-8")));
        connection.getOutputStream().flush();
        connection.getOutputStream().close();
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            JSONObject obj = new JSONObject(new String(new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8")).readLine()));
            response.setDone(true);
            response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));
            connection.getInputStream().close();
        } else {
            response.setDone(false);
            response.setMessage("Create User Error Code: Http (" + connection.getResponseCode() + ")");
        }
        connection.disconnect();
        return response;
    }
} </s>
<s>class temp {    public APIResponse delete(String id) throws Exception {
        APIResponse response = new APIResponse();
        connection = (HttpURLConnection) new URL(url + "/api/user/delete/" + id).openConnection();
        connection.setRequestMethod("DELETE");
        connection.setConnectTimeout(TIMEOUT);
        connection.connect();
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            response.setDone(true);
            response.setMessage("User Deleted!");
        } else {
            response.setDone(false);
            response.setMessage("Delete User Error Code: Http (" + connection.getResponseCode() + ")");
        }
        connection.disconnect();
        return response;
    }
} </s>
<s>class temp {    public APIResponse update(User user) throws Exception {
        APIResponse response = new APIResponse();
        connection = (HttpURLConnection) new URL(url + "/api/user/update").openConnection();
        connection.setDoOutput(true);
        connection.setRequestMethod("PUT");
        connection.setRequestProperty("Content-Type", "application/json; charset=utf-8");
        connection.setUseCaches(false);
        connection.setConnectTimeout(TIMEOUT);
        connection.connect();
        marshaller.marshal(user, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(connection.getOutputStream(), "utf-8")));
        connection.getOutputStream().flush();
        connection.getOutputStream().close();
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            JSONObject obj = new JSONObject(new String(new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8")).readLine()));
            response.setDone(true);
            response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));
            connection.getInputStream().close();
        } else {
            response.setDone(false);
            response.setMessage("Update User Error Code: Http (" + connection.getResponseCode() + ")");
        }
        connection.disconnect();
        return response;
    }
} </s>
<s>class temp {    private void checkChartsyRegistration(String username, String password) {
        HttpPost post = new HttpPost(NbBundle.getMessage(RegisterPanel.class, "RegisterPanel.chartsyRegisterURL"));
        String message = "";
        try {
            List<NameValuePair> nvps = new ArrayList<NameValuePair>();
            nvps.add(new BasicNameValuePair("username", username));
            nvps.add(new BasicNameValuePair("password", password));
            post.setEntity(new UrlEncodedFormEntity(nvps));
            HttpResponse response = ProxyManager.httpClient.execute(post);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                String[] lines = EntityUtils.toString(entity).split("\n");
                if (lines[0].equals("OK")) {
                    RegisterAction.preferences.putBoolean("registred", true);
                    RegisterAction.preferences.put("name", lines[1]);
                    RegisterAction.preferences.put("email", lines[2]);
                    RegisterAction.preferences.put("date", String.valueOf(Calendar.getInstance().getTimeInMillis()));
                    RegisterAction.preferences.put("username", username);
                    RegisterAction.preferences.put("password", new String(passwordTxt.getPassword()));
                    if (lines[1] != null && !lines[1].isEmpty()) {
                        message = NbBundle.getMessage(RegisterPanel.class, "RegisterPanel.registerDone.withUsername.message", lines[1]);
                    } else {
                        message = NbBundle.getMessage(RegisterPanel.class, "RegisterPanel.registerDone.noUsername.message");
                    }
                } else {
                    message = NbBundle.getMessage(RegisterPanel.class, "RegisterPanel.registerAuthError.message");
                }
                EntityUtils.consume(entity);
            }
        } catch (Exception ex) {
            message = NbBundle.getMessage(RegisterPanel.class, "RegisterPanel.registerConnectionError.message");
        } finally {
            post.abort();
        }
        messageLbl.setText(message);
        messageLbl.setVisible(true);
    }
} </s>
<s>class temp {    public String uploadVideo(String ticketId, String filePath) {
        TreeMap<String, String> uploadParams = new TreeMap<String, String>();
        String url = "http://www.vimeo.com/services/upload/";
        uploadParams.put("api_key", apiKey);
        uploadParams.put("auth_token", this.TEMP_AUTH_TOKEN);
        uploadParams.put("ticket_id", ticketId);
        uploadParams.put("format", "json");
        String signature = this.generateAppSignature(uploadParams);
        uploadParams.put("api_sig", signature);
        ClientHttpRequest request = null;
        try {
            request = new ClientHttpRequest(new URL(url).openConnection());
        } catch (IOException e) {
            e.printStackTrace();
        }
        for (Entry<String, String> param : uploadParams.entrySet()) {
            try {
                request.setParameter(param.getKey(), param.getValue());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        InputStream videoInput = null;
        try {
            videoInput = new FileInputStream(filePath);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        try {
            request.setParameter("video", filePath, videoInput);
        } catch (IOException e) {
            e.printStackTrace();
        }
        InputStream response = null;
        try {
            response = request.post();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            InputStreamReader inR = new InputStreamReader(response);
            BufferedReader buf = new BufferedReader(inR);
            String line;
            try {
                while ((line = buf.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } finally {
            try {
                response.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return "hey";
    }
} </s>
<s>class temp {    public String performRequest(TreeMap<String, String> params, boolean isAuthenticated) {
        params.put("format", "json");
        try {
            URL url = new URL(getApiUrl(params, isAuthenticated));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();
            Reader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = "";
            while (reader.ready()) {
                response += (char) reader.read();
            }
            response = response.replaceFirst("jsonVimeoApi\\(", "");
            response = response.substring(0, response.length() - 2);
            return response;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public String gerarHash(String frase) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(frase.getBytes());
            byte[] bytes = md.digest();
            StringBuilder s = new StringBuilder(0);
            for (int i = 0; i < bytes.length; i++) {
                int parteAlta = ((bytes[i] >> 4) & 0xf) << 4;
                int parteBaixa = bytes[i] & 0xf;
                if (parteAlta == 0) {
                    s.append('0');
                }
                s.append(Integer.toHexString(parteAlta | parteBaixa));
            }
            return s.toString();
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
} </s>
<s>class temp {    public boolean write(Node node, LSOutput output) throws LSException {
        OutputStream out = output.getByteStream();
        try {
            if (out == null) {
                String systemId = output.getSystemId();
                try {
                    URL url = new URL(systemId);
                    URLConnection connection = url.openConnection();
                    connection.setDoOutput(true);
                    if (connection instanceof HttpURLConnection) {
                        ((HttpURLConnection) connection).setRequestMethod("PUT");
                    }
                    out = connection.getOutputStream();
                } catch (MalformedURLException e) {
                    File file = new File(systemId);
                    out = new FileOutputStream(file);
                }
            }
            serialize(node, out);
            out.flush();
            return true;
        } catch (IOException e) {
            throw new DomLSException(LSException.SERIALIZE_ERR, e);
        }
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static SpeciesTree create(String url) throws IOException {
        SpeciesTree tree = new SpeciesTree();
        tree.setUrl(url);
        System.out.println("Fetching URL:  " + url);
        BufferedReader in = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
        String toParse = null;
        Properties properties = new Properties();
        properties.load(in);
        String line = properties.getProperty("TREE");
        if (line == null) return null;
        int end = line.indexOf(';');
        if (end < 0) end = line.length();
        toParse = line.substring(0, end).trim();
        System.out.print("Parsing... ");
        parse(tree, toParse, properties);
        return tree;
    }
} </s>
<s>class temp {    public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn("Write data failed!", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
} </s>
<s>class temp {    public static Map<String, File> extractFiles(String input, File tempDirectory) throws IOException {
        byte data[] = new byte[BUFFER];
        BufferedOutputStream out = null;
        FileInputStream src = new FileInputStream(input);
        BufferedInputStream in = new BufferedInputStream(src);
        ZipInputStream zipin = new ZipInputStream(in);
        Map<String, File> files = new HashMap<String, File>();
        ZipEntry entry;
        while ((entry = zipin.getNextEntry()) != null) {
            logger.info(TAG + ": entr e " + entry.getName() + " r pertoire ? " + entry.isDirectory());
            if (entry.isDirectory()) {
                logger.info(TAG + ": Ajout de l'entr e pour le r pertoire: " + entry.getName());
                files.put(entry.getName(), extractDirectory(entry.getName(), zipin, tempDirectory));
                File f = files.get(entry.getName());
                if (f == null) logger.info(TAG + ": NULLL: ");
                continue;
            }
            File tempFile = new File(tempDirectory, entry.getName());
            if (tempFile.exists()) tempFile.delete();
            tempFile.createNewFile();
            FileOutputStream dest = new FileOutputStream(tempFile);
            out = new BufferedOutputStream(dest, BUFFER);
            int count;
            for (int c = zipin.read(); c != -1; c = zipin.read()) dest.write(c);
            logger.info(TAG + ": Ajout de l'entr e: " + entry.getName() + " du fichier: " + tempFile.getAbsolutePath());
            files.put(entry.getName(), tempFile);
            out.close();
            dest.close();
        }
        zipin.close();
        in.close();
        src.close();
        return files;
    }
} </s>
<s>class temp {    public void load() {
        try {
            isSourceWorking = true;
            URLConnection urlConnection = url.openConnection();
            ontologyServiceMetaData.setName("Ontology for " + url.getFile());
            parseDocument(urlConnection.getInputStream());
            buildTree();
            isSourceWorking = true;
            String statusOKMessage = PedroResources.getMessage("ontology.statusOK", url.getFile());
            status = new StringBuffer();
            status.append(statusOKMessage);
        } catch (Exception err) {
            err.printStackTrace(System.out);
            String statusErrorMessage = PedroResources.getMessage("ontology.statusError", err.toString());
            status.append(statusErrorMessage);
            isSourceWorking = false;
        }
    }
} </s>
<s>class temp {    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
} </s>
<s>class temp {    protected void cboTemplateIndexSelectionChanged() {
        int idx = WizardPage1.this.cboTemplateIndex.getSelectionIndex();
        IPreferenceStore store = Activator.getDefault().getPreferenceStore();
        String prefnamePrefix = PreferenceConstants.TEMPLATE_PREFIX + idx;
        String baseUrl = store.getString(prefnamePrefix + PreferenceConstants.BASEURL_POSTFIX);
        String descfile = store.getString(prefnamePrefix + PreferenceConstants.DESCFILE_POSTFIX);
        try {
            URL url = new URL(baseUrl + descfile);
            URLConnection con = url.openConnection();
            WizardPage1.this.setTemplContainer(new TemplateContainer(con.getInputStream(), baseUrl));
            fillListboxFromTemplateContainer();
        } catch (MalformedURLException e1) {
            getTxaTemplateDescription().setText(e1.getMessage());
            e1.printStackTrace();
        } catch (IOException e2) {
            getTxaTemplateDescription().setText(e2.getMessage());
            e2.printStackTrace();
        } catch (XPathExpressionException e3) {
            getTxaTemplateDescription().setText(e3.getMessage());
            e3.printStackTrace();
        } catch (ParserConfigurationException e4) {
            getTxaTemplateDescription().setText(e4.getMessage());
            e4.printStackTrace();
        } catch (SAXException e5) {
            getTxaTemplateDescription().setText(e5.getMessage());
            e5.printStackTrace();
        }
    }
} </s>
<s>class temp {    private void read(String url) {
        session.beginTransaction();
        try {
            Document doc = reader.read(new URL(url).openStream());
            Element root = doc.getRootElement();
            Dict dic = new Dict();
            Vector<Cent> v = new Vector<Cent>();
            for (Object o : root.elements()) {
                Element e = (Element) o;
                if (e.getName().equals("key")) {
                    dic.setName(e.getTextTrim());
                } else if (e.getName().equals("audio")) {
                    dic.setAudio(e.getTextTrim());
                } else if (e.getName().equals("pron")) {
                    dic.setPron(e.getTextTrim());
                } else if (e.getName().equals("def")) {
                    dic.setDef(e.getTextTrim());
                } else if (e.getName().equals("sent")) {
                    Cent cent = new Cent();
                    for (Object subo : e.elements()) {
                        Element sube = (Element) subo;
                        if (sube.getName().equals("orig")) {
                            cent.setOrig(sube.getTextTrim());
                        } else if (sube.getName().equals("trans")) {
                            cent.setTrans(sube.getTextTrim());
                        }
                    }
                    v.add(cent);
                }
            }
            if (dic.getName() == null || "".equals(dic.getName())) {
                session.getTransaction().commit();
                return;
            }
            session.save(dic);
            dic.setCent(new HashSet<Cent>());
            for (Cent c : v) {
                c.setDict(dic);
                dic.getCent().add(c);
            }
            session.getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
            session.getTransaction().rollback();
        }
    }
} </s>
<s>class temp {    public String doAction(Action commandAction) throws Exception {
        Map<String, String> args = commandAction.getArgs();
        EnumCommandActionType actionType = commandAction.getType();
        String actionResult = "";
        switch(actionType) {
            case SEND:
                String method = getMethod();
                String contentType = getContentType();
                String url = "http://" + getHost() + ":" + getPort() + "/";
                String pathUrl = "";
                String data = "";
                if (args.containsKey("method")) {
                    method = args.get("method").toUpperCase();
                } else if (args.containsKey("contenttype")) {
                    contentType = args.get("contenttype").toLowerCase();
                } else if (args.containsKey("postdata")) {
                    contentType = args.get("postdata").toLowerCase();
                }
                if (!allowedHttpMethods.contains(method.toUpperCase())) {
                    throw new GatewayException("Invalid HTTP method specified for command Action.");
                }
                String commandStr = Pattern.compile("^/").matcher(args.get("command")).replaceAll("");
                if ("GET".equals(method)) {
                    pathUrl = commandStr;
                } else {
                    String[] argStr = args.get("command").split("\\?");
                    pathUrl = argStr[0];
                    data = argStr[1];
                }
                url += pathUrl;
                URL urlObj = new URL(url);
                HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection();
                conn.setUseCaches(false);
                conn.setRequestMethod(method);
                conn.setConnectTimeout(getConnectTimeout());
                if ("POST".equals(method)) {
                    conn.setDoOutput(true);
                    conn.setDoInput(true);
                    conn.setRequestProperty("Content-Type", contentType);
                    conn.setRequestProperty("Content-Length", Integer.toString(data.length()));
                    OutputStream outputStream = conn.getOutputStream();
                    outputStream.write(data.getBytes());
                    outputStream.flush();
                }
                InputStream inputStream = conn.getInputStream();
                if (conn.getResponseCode() != 200) {
                    Integer responseCode = conn.getResponseCode();
                    conn.disconnect();
                    throw new GatewayException("Invalid response from server, expecting status code 200 but received " + responseCode.toString());
                }
                Calendar endTime = Calendar.getInstance();
                endTime.add(Calendar.MILLISECOND, getReadTimeout());
                while (Calendar.getInstance().before(endTime) && inputStream.available() == 0) {
                    try {
                        Thread.sleep(50);
                    } catch (Exception e) {
                    }
                }
                while (inputStream.available() > 0) {
                    actionResult += (char) inputStream.read();
                }
                if (actionResult.length() > 0) {
                    responseBuffer = actionResult;
                    actionResult = "";
                    break;
                }
                conn.disconnect();
                break;
            case READ:
                actionResult = responseBuffer;
                responseBuffer = "";
                break;
        }
        return actionResult;
    }
} </s>
<s>class temp {    public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    private static String appletLoad(String file, Output OUT) {
        if (!urlpath.endsWith("/")) {
            urlpath += '/';
        }
        if (!urlpath.startsWith("http://")) {
            urlpath = "http://" + urlpath;
        }
        String url = "";
        if (file.equals("languages.txt")) {
            url = urlpath + file;
        } else {
            url = urlpath + "users/" + file;
        }
        try {
            StringBuffer sb = new StringBuffer(2000);
            BufferedReader br = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String a;
            while ((a = br.readLine()) != null) {
                sb.append(a).append('\n');
            }
            return sb.toString();
        } catch (Exception e) {
            OUT.println("load failed for file->" + file);
        }
        return "";
    }
} </s>
<s>class temp {    public static String getSHADigest(String input) {
        if (input == null) return null;
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance("SHA-1");
        } catch (java.security.NoSuchAlgorithmException nsae) {
            throw new RuntimeException(nsae);
        }
        if (sha == null) throw new RuntimeException("No message digest");
        sha.update(input.getBytes());
        byte[] data = sha.digest();
        StringBuffer buf = new StringBuffer(data.length * 2);
        for (int i = 0; i < data.length; i++) {
            int value = data[i] & 0xff;
            buf.append(hexDigit(value >> 4));
            buf.append(hexDigit(value));
        }
        return buf.toString();
    }
} </s>
<s>class temp {    protected String saveJar2TmpFile(String jarUrl, boolean reportError) {
        InputStream is = null;
        try {
            URL url = new URL(jad.getJarURL());
            URLConnection conn = url.openConnection();
            if (url.getUserInfo() != null) {
                String userInfo = new String(Base64Coder.encode(url.getUserInfo().getBytes("UTF-8")));
                conn.setRequestProperty("Authorization", "Basic " + userInfo);
            }
            is = conn.getInputStream();
            File tmpDir = null;
            String systemTmpDir = MIDletSystemProperties.getSystemProperty("java.io.tmpdir");
            if (systemTmpDir != null) {
                tmpDir = new File(systemTmpDir, "microemulator-apps");
                if ((!tmpDir.exists()) && (!tmpDir.mkdirs())) {
                    tmpDir = null;
                }
            }
            File tmp = File.createTempFile("me2-app-", ".jar", tmpDir);
            tmp.deleteOnExit();
            IOUtils.copyToFile(is, tmp);
            return IOUtils.getCanonicalFileClassLoaderURL(tmp);
        } catch (IOException e) {
            if (reportError) {
                Message.error("Unable to open jar " + jarUrl, e);
            }
            return null;
        } finally {
            IOUtils.closeQuietly(is);
        }
    }
} </s>
<s>class temp {    private FileInputStream getPackageStream(String archivePath) throws IOException, PackageManagerException {
        final int lastSlashInName = filename.lastIndexOf("/");
        final String newFileName = filename.substring(lastSlashInName);
        File packageFile = new File((new StringBuilder()).append(archivePath).append(newFileName).toString());
        if (null != packageFile) return new FileInputStream(packageFile);
        if (null != packageURL) {
            final InputStream urlStream = new ConnectToServer(null).getInputStream(packageURL);
            packageFile = new File((new StringBuilder()).append(getName()).append(".deb").toString());
            final OutputStream fileStream = new FileOutputStream(packageFile);
            final byte buffer[] = new byte[10240];
            for (int read = 0; (read = urlStream.read(buffer)) > 0; ) fileStream.write(buffer, 0, read);
            urlStream.close();
            fileStream.close();
            return new FileInputStream(packageFile);
        } else {
            final String errorMessage = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("package.getPackageStream.packageURLIsNull", "No entry found for package.getPackageStream.packageURLIsNull");
            if (pm != null) {
                pm.addWarning(errorMessage);
                logger.error(errorMessage);
            } else logger.error(errorMessage);
            throw new FileNotFoundException();
        }
    }
} </s>
<s>class temp {    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length != 2) throw new IllegalArgumentException();
        String inFileName = args[0];
        String outFileName = args[1];
        File fInput = new File(inFileName);
        Scanner in = null;
        try {
            in = new Scanner(fInput);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        PrintWriter out = null;
        try {
            out = new PrintWriter(outFileName);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        while (in.hasNextLine()) {
            out.println(in.nextLine());
        }
        in.close();
        out.close();
    }
} </s>
<s>class temp {    @Override
    public void render(IContentNode contentNode, Request req, Response resp, Application app, ServerInfo serverInfo) {
        Node fileNode = contentNode.getNode();
        try {
            Node res = fileNode.getNode("jcr:content");
            if (checkLastModified(res, req.getServletRequset(), resp.getServletResponse())) {
                return;
            }
            Property data = res.getProperty("jcr:data");
            InputStream is = data.getBinary().getStream();
            int contentLength = (int) data.getBinary().getSize();
            String mime;
            if (res.hasProperty("jcr:mimeType")) {
                mime = res.getProperty("jcr:mimeType").getString();
            } else {
                mime = serverInfo.getSerlvetContext().getMimeType(fileNode.getName());
            }
            if (mime != null && mime.startsWith("image")) {
                int w = req.getInt("w", 0);
                int h = req.getInt("h", 0);
                String fmt = req.get("fmt");
                if (w != 0 || h != 0 || fmt != null) {
                    Resource imgRes = ImageResource.create(is, mime.substring(6), w, h, req.getInt("cut", 0), fmt);
                    imgRes.process(serverInfo);
                    return;
                }
            }
            resp.getServletResponse().setContentType(mime);
            resp.getServletResponse().setContentLength(contentLength);
            OutputStream os = resp.getServletResponse().getOutputStream();
            IOUtils.copy(is, os);
            os.flush();
            os.close();
        } catch (PathNotFoundException e) {
            e.printStackTrace();
        } catch (RepositoryException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public void init() {
        File[] configsDirectories = { XPontusConstantsIF.XPONTUS_PLUGINS_DATA_DIR, XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, XPontusConstantsIF.XPONTUS_DATABASE_CONFIG_DIR, XPontusConstantsIF.XPONTUS_PLUGINS_DIR, XPontusConstantsIF.XPONTUS_CACHE_DIR };
        for (int i = 0; i < configsDirectories.length; i++) {
            if (!configsDirectories[i].exists()) {
                configsDirectories[i].mkdirs();
            }
        }
        String[] locations = { "/net/sf/xpontus/configuration/editorPanel.properties", "/net/sf/xpontus/configuration/general.properties", "/net/sf/xpontus/configuration/mimetypes.properties" };
        try {
            for (String loc : locations) {
                String outName = FilenameUtils.getName(loc);
                File output = new File(XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, outName);
                if (!output.exists()) {
                    if (loc.equals(locations[0])) {
                        Properties hackProps = new Properties();
                        InputStream is = getClass().getResourceAsStream(loc);
                        hackProps.load(is);
                        Font hackFont = UIManager.getFont("EditorPane.font");
                        StrBuilder strFont = new StrBuilder();
                        strFont.append(hackFont.getFamily() + "," + hackFont.getStyle() + "," + hackFont.getSize());
                        hackProps.put("EditorPane.Font", strFont.toString());
                        OutputStream out = new FileOutputStream(output);
                        hackProps.store(out, null);
                        out.close();
                        is.close();
                    } else {
                        InputStream is = getClass().getResourceAsStream(loc);
                        OutputStream out = new FileOutputStream(output);
                        IOUtils.copy(is, out);
                        out.close();
                        is.close();
                    }
                }
                if (!outName.equals("mimetypes.properties")) {
                    Properties m_properties = PropertiesConfigurationLoader.load(output);
                    Iterator it = m_properties.keySet().iterator();
                    while (it.hasNext()) {
                        Object m_key = it.next();
                        Object m_value = m_properties.get(m_key);
                        XPontusConfig.put(m_key, m_value);
                    }
                }
            }
        } catch (Exception err) {
            err.printStackTrace();
        }
        Properties m_props = PropertiesConfigurationLoader.load(XPontusConfigurationConstantsIF.EDITOR_PREFERENCES_FILE);
        String[] f = m_props.get("EditorPane.Font").toString().split(",");
        String family = f[0].trim();
        String style1 = f[1].trim();
        int style = Integer.parseInt(style1);
        int size = Integer.parseInt(f[2].trim());
        Font m_font = new Font(family, style, size);
        XPontusConfig.put("EditorPane.Font", m_font);
        Map map = new HashMap();
        map.put(ROLE, this);
        PropertiesHolder.registerProperty(XPontusSettings.KEY, map);
        DockableContainerFactory.setFactory(new XPontusDockableContainerFactory());
        FileHistoryList.init();
        initDefaultSettings();
    }
} </s>
<s>class temp {    @Override
    public void configure() {
        initResouce();
        if (this.locale == null) {
            this.locale = Locale.getDefault();
        }
        InputStream[] ins = new InputStream[getResourceList().size()];
        try {
            int i = 0;
            for (URL url : getResourceList()) {
                ins[i++] = url.openStream();
            }
            this.resources = new ValidatorResources(ins);
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (SAXException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    private HashSet<String> href(String urlstr) throws IOException {
        HashSet<String> hrefs = new HashSet<String>();
        URL url = new URL(urlstr);
        URLConnection con = url.openConnection();
        con.setRequestProperty("Cookie", "_session_id=" + _session_id);
        InputStreamReader r = new InputStreamReader(con.getInputStream());
        StringWriter b = new StringWriter();
        IOUtils.copyTo(r, b);
        r.close();
        try {
            Thread.sleep(WAIT_SECONDS * 1000);
        } catch (Exception err) {
        }
        String tokens[] = b.toString().replace("\n", " ").replaceAll("[\\<\\>]", "\n").split("[\n]");
        for (String s1 : tokens) {
            if (!(s1.startsWith("a") && s1.contains("href"))) continue;
            String tokens2[] = s1.split("[\\\"\\\']");
            for (String s2 : tokens2) {
                if (!(s2.startsWith("mailto:") || s2.matches("/profile/index/[0-9]+"))) continue;
                hrefs.add(s2);
            }
        }
        return hrefs;
    }
} </s>
<s>class temp {    private void createGraphicalViewer(Composite parent) {
        viewer = new ScrollingGraphicalViewer();
        viewer.createControl(parent);
        viewer.getControl().setBackground(parent.getBackground());
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));
        registerEditPartViewer(viewer);
        configureEditPartViewer(viewer);
        viewer.setEditPartFactory(new GraphicalEditPartsFactory(getSite().getShell()));
        viewer.setContents(getContractEditor().getContract());
        ContextMenuProvider provider = new ContractContextMenuProvider(getGraphicalViewer(), getContractEditor().getActionRegistry());
        getGraphicalViewer().setContextMenu(provider);
        getSite().registerContextMenu(provider, getGraphicalViewer());
    }
} </s>
<s>class temp {    public void saveFile(MainWindow window) {
        FileOutputStream stream = null;
        try {
            Document outputDoc = new Document();
            DocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);
            Element uiElement = new Element(UI);
            outputDoc.setDocType(dtd);
            outputDoc.addContent(uiElement);
            outputDoc.setRootElement(uiElement);
            uiElement.setAttribute(USE_DEFAULT, "false");
            uiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));
            uiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));
            String currentLFClassName = UIManager.getLookAndFeel().getClass().getName();
            String systemLFClassName = UIManager.getSystemLookAndFeelClassName();
            if (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, "native"); else uiElement.setAttribute(LOOK_AND_FEEL, "default");
            Element mainWindowElement = new Element(MAIN_WINDOW);
            uiElement.addContent(mainWindowElement);
            mainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));
            mainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));
            mainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));
            mainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));
            Element volumeElement = new Element(VOLUME);
            uiElement.addContent(volumeElement);
            AudioPlayer player = window.getDesktop().getSoundPlayer();
            volumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));
            volumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));
            Element internalWindowsElement = new Element(INTERNAL_WINDOWS);
            uiElement.addContent(internalWindowsElement);
            MainDesktopPane desktop = window.getDesktop();
            JInternalFrame[] windows = desktop.getAllFrames();
            for (JInternalFrame window1 : windows) {
                Element windowElement = new Element(WINDOW);
                internalWindowsElement.addContent(windowElement);
                windowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));
                windowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));
                windowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));
                windowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));
                windowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));
                windowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));
                if (window1 instanceof ToolWindow) {
                    windowElement.setAttribute(TYPE, TOOL);
                    windowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());
                } else if (window1 instanceof UnitWindow) {
                    windowElement.setAttribute(TYPE, UNIT);
                    windowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());
                } else {
                    windowElement.setAttribute(TYPE, "other");
                    windowElement.setAttribute(NAME, "other");
                }
            }
            Unit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();
            for (Unit toolBarUnit : toolBarUnits) {
                UnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);
                if ((unitWindow == null) || unitWindow.isIcon()) {
                    Element windowElement = new Element(WINDOW);
                    internalWindowsElement.addContent(windowElement);
                    windowElement.setAttribute(TYPE, UNIT);
                    windowElement.setAttribute(NAME, toolBarUnit.getName());
                    windowElement.setAttribute(DISPLAY, "false");
                }
            }
            File configFile = new File(DIRECTORY, FILE_NAME);
            if (!configFile.getParentFile().exists()) {
                configFile.getParentFile().mkdirs();
            }
            InputStream in = getClass().getResourceAsStream("/dtd/ui_settings.dtd");
            IOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, "ui_settings.dtd")));
            XMLOutputter fmt = new XMLOutputter();
            fmt.setFormat(Format.getPrettyFormat());
            stream = new FileOutputStream(configFile);
            OutputStreamWriter writer = new OutputStreamWriter(stream, "UTF-8");
            fmt.output(outputDoc, writer);
        } catch (Exception e) {
            logger.log(Level.SEVERE, e.getMessage());
        } finally {
            IOUtils.closeQuietly(stream);
        }
    }
} </s>
<s>class temp {    public static void downloadFromUrl(String url1, String fileName) {
        try {
            URL url = new URL(url1);
            File file = new File(fileName);
            URLConnection ucon = url.openConnection();
            InputStream is = ucon.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            ByteArrayBuffer baf = new ByteArrayBuffer(50);
            int current = 0;
            while ((current = bis.read()) != -1) {
                baf.append((byte) current);
            }
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(baf.toByteArray());
            fos.close();
        } catch (IOException e) {
        }
    }
} </s>
<s>class temp {    public static NotaFiscal insert(NotaFiscal objNF) {
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        int result;
        if (c == null) {
            return null;
        }
        if (objNF == null) {
            return null;
        }
        try {
            c.setAutoCommit(false);
            String sql = "";
            int idNotaFiscal;
            idNotaFiscal = NotaFiscalDAO.getLastCodigo();
            if (idNotaFiscal < 1) {
                return null;
            }
            sql = "INSERT INTO nota_fiscal " + "(id_nota_fiscal, id_fornecedor, total, data_emissao, data_cadastro, numero) " + "VALUES(?, ?, TRUNCATE(?,2), STR_TO_DATE(?,'%d/%m/%Y'), now(), ?) ";
            pst = c.prepareStatement(sql);
            pst.setInt(1, idNotaFiscal);
            pst.setLong(2, objNF.getFornecedor().getCodigo());
            pst.setString(3, new DecimalFormat("#0.00").format(objNF.getValor()));
            pst.setString(4, objNF.getDataEmissaoFormatada());
            pst.setString(5, objNF.getNumero());
            result = pst.executeUpdate();
            pst = null;
            if (result > 0) {
                Iterator<ItemNotaFiscal> itINF = (objNF.getItemNotaFiscal()).iterator();
                while ((itINF != null) && (itINF.hasNext())) {
                    ItemNotaFiscal objINF = (ItemNotaFiscal) itINF.next();
                    sql = "";
                    sql = "INSERT INTO item_nota_fiscal " + "(id_nota_fiscal, id_produto, quantidade, subtotal) " + "VALUES(?, ?, ?, TRUNCATE(?,2))";
                    pst = c.prepareStatement(sql);
                    pst.setInt(1, idNotaFiscal);
                    pst.setInt(2, objINF.getProduto().getCodigo());
                    pst.setInt(3, objINF.getQuantidade());
                    pst.setString(4, new DecimalFormat("#0.00").format(objINF.getSubtotal()));
                    result = pst.executeUpdate();
                }
            }
            c.commit();
            objNF.setCodigo(idNotaFiscal);
        } catch (final Exception e) {
            try {
                c.rollback();
            } catch (final Exception e1) {
                System.out.println("[NotaFiscalDAO.insert.rollback] Erro ao inserir -> " + e1.getMessage());
            }
            System.out.println("[NotaFiscalDAO.insert] Erro ao inserir -> " + e.getMessage());
            objNF = null;
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        return objNF;
    }
} </s>
<s>class temp {    public void testAddingEntries() throws Exception {
        DiskCache c = new DiskCache();
        {
            c.setRoot(rootFolder.getAbsolutePath());
            c.setHtmlExtension("htm");
            c.setPropertiesExtension("txt");
            assertEquals("htm", c.getHtmlExtension());
            assertEquals("txt", c.getPropertiesExtension());
            assertEquals(rootFolder.getAbsolutePath(), c.getRoot());
        }
        String key1 = "cat1/key1";
        String key2 = "cat1/key2";
        try {
            try {
                {
                    c.removeCacheEntry(key1, null);
                    CacheItem i = c.getOrCreateCacheEntry(key1);
                    assertNull(i.getEncoding());
                    assertEquals(-1L, i.getLastModified());
                    assertEquals(-1, i.getTranslationCount());
                    assertFalse(i.isCached());
                    assertNull(i.getHeaders());
                    i.setLastModified(300005L);
                    i.setTranslationCount(10);
                    i.setEncoding("ISO-8859-7");
                    i.setHeader(new ResponseHeaderImpl("Test2", new String[] { "Value3", "Value4" }));
                    i.setHeader(new ResponseHeaderImpl("Test1", new String[] { "Value1", "Value2" }));
                    byte[] greekTextBytes = new byte[] { -57, -20, -27, -15, -34, -13, -23, -31, 32, -48, -17, -21, -23, -12, -23, -22, -34, 32, -59, -10, -25, -20, -27, -15, -33, -28, -31, 32, -60, -23, -31, -19, -35, -20, -27, -12, -31, -23, 32, -22, -31, -24, -25, -20, -27, -15, -23, -19, -36, 32, -60, -39, -47, -59, -63, -51, 32, -13, -12, -17, 32, -28, -33, -22, -12, -11, -17, 32, -13, -11, -29, -22, -17, -23, -19, -7, -19, -23, -2, -19, 32, -12, -25, -14, 32, -56, -27, -13, -13, -31, -21, -17, -19, -33, -22, -25, -14 };
                    String greekText = new String(greekTextBytes, "ISO-8859-7");
                    {
                        InputStream input = new ByteArrayInputStream(greekTextBytes);
                        try {
                            i.setContentAsStream(input);
                        } finally {
                            input.close();
                        }
                    }
                    assertEquals("ISO-8859-7", i.getEncoding());
                    assertEquals(300005L, i.getLastModified());
                    assertEquals(10, i.getTranslationCount());
                    assertFalse(i.isCached());
                    i.updateAfterAllContentUpdated(null, null);
                    {
                        assertEquals(3, i.getHeaders().size());
                        int ii = 0;
                        for (ResponseHeader h : i.getHeaders()) {
                            ii++;
                            if (ii == 1) {
                                assertEquals("Content-Length", h.getName());
                                assertEquals("[97]", Arrays.toString(h.getValues()));
                            } else if (ii == 2) {
                                assertEquals("Test1", h.getName());
                                assertEquals("[Value1, Value2]", Arrays.toString(h.getValues()));
                            } else if (ii == 3) {
                                assertEquals("Test2", h.getName());
                                assertEquals("[Value3, Value4]", Arrays.toString(h.getValues()));
                            }
                        }
                    }
                    c.storeInCache(key1, i);
                    assertEquals("ISO-8859-7", i.getEncoding());
                    assertEquals(300005L, i.getLastModified());
                    assertEquals(10, i.getTranslationCount());
                    assertTrue(i.isCached());
                    {
                        InputStream input = i.getContentAsStream();
                        StringWriter w = new StringWriter();
                        IOUtils.copy(input, w, "ISO-8859-7");
                        IOUtils.closeQuietly(input);
                        IOUtils.closeQuietly(w);
                        assertEquals(greekText, w.toString());
                    }
                }
                {
                    c.removeCacheEntry(key2, null);
                    CacheItem i = c.getOrCreateCacheEntry(key2);
                    assertNull(i.getEncoding());
                    assertEquals(-1L, i.getLastModified());
                    assertEquals(-1, i.getTranslationCount());
                    assertFalse(i.isCached());
                    assertNull(i.getHeaders());
                    i.setLastModified(350000L);
                    i.setTranslationCount(11);
                    i.setEncoding("ISO-8859-1");
                    i.setHeader(new ResponseHeaderImpl("Test3", new String[] { "Value3", "Value4" }));
                    i.setHeader(new ResponseHeaderImpl("Test4", new String[] { "Value1" }));
                    String englishText = "Hello this is another example";
                    {
                        InputStream input = new ByteArrayInputStream(englishText.getBytes("ISO-8859-1"));
                        try {
                            i.setContentAsStream(input);
                        } finally {
                            input.close();
                        }
                    }
                    assertEquals("ISO-8859-1", i.getEncoding());
                    assertEquals(350000L, i.getLastModified());
                    assertEquals(11, i.getTranslationCount());
                    assertFalse(i.isCached());
                    i.updateAfterAllContentUpdated(null, null);
                    {
                        assertEquals(3, i.getHeaders().size());
                        int ii = 0;
                        for (ResponseHeader h : i.getHeaders()) {
                            ii++;
                            if (ii == 1) {
                                assertEquals("Content-Length", h.getName());
                                assertEquals("[29]", Arrays.toString(h.getValues()));
                            } else if (ii == 2) {
                                assertEquals("Test3", h.getName());
                                assertEquals("[Value3, Value4]", Arrays.toString(h.getValues()));
                            } else if (ii == 3) {
                                assertEquals("Test4", h.getName());
                                assertEquals("[Value1]", Arrays.toString(h.getValues()));
                            }
                        }
                    }
                    c.storeInCache(key2, i);
                    assertEquals("ISO-8859-1", i.getEncoding());
                    assertEquals(350000L, i.getLastModified());
                    assertEquals(11, i.getTranslationCount());
                    assertTrue(i.isCached());
                    {
                        InputStream input = i.getContentAsStream();
                        StringWriter w = new StringWriter();
                        IOUtils.copy(input, w, "ISO-8859-1");
                        IOUtils.closeQuietly(input);
                        IOUtils.closeQuietly(w);
                        assertEquals(englishText, w.toString());
                    }
                }
                {
                    CacheItem i = c.getOrCreateCacheEntry(key1);
                    assertEquals("ISO-8859-7", i.getEncoding());
                    assertEquals(300005L, i.getLastModified());
                    assertEquals(10, i.getTranslationCount());
                    assertTrue(i.isCached());
                    {
                        assertEquals(3, i.getHeaders().size());
                        int ii = 0;
                        for (ResponseHeader h : i.getHeaders()) {
                            ii++;
                            if (ii == 1) {
                                assertEquals("Content-Length", h.getName());
                                assertEquals("[97]", Arrays.toString(h.getValues()));
                            } else if (ii == 2) {
                                assertEquals("Test1", h.getName());
                                assertEquals("[Value1, Value2]", Arrays.toString(h.getValues()));
                            } else if (ii == 3) {
                                assertEquals("Test2", h.getName());
                                assertEquals("[Value3, Value4]", Arrays.toString(h.getValues()));
                            }
                        }
                    }
                    byte[] greekTextBytes = new byte[] { -57, -20, -27, -15, -34, -13, -23, -31, 32, -48, -17, -21, -23, -12, -23, -22, -34, 32, -59, -10, -25, -20, -27, -15, -33, -28, -31, 32, -60, -23, -31, -19, -35, -20, -27, -12, -31, -23, 32, -22, -31, -24, -25, -20, -27, -15, -23, -19, -36, 32, -60, -39, -47, -59, -63, -51, 32, -13, -12, -17, 32, -28, -33, -22, -12, -11, -17, 32, -13, -11, -29, -22, -17, -23, -19, -7, -19, -23, -2, -19, 32, -12, -25, -14, 32, -56, -27, -13, -13, -31, -21, -17, -19, -33, -22, -25, -14 };
                    String greekText = new String(greekTextBytes, "ISO-8859-7");
                    {
                        InputStream input = i.getContentAsStream();
                        StringWriter w = new StringWriter();
                        IOUtils.copy(input, w, "ISO-8859-7");
                        IOUtils.closeQuietly(input);
                        IOUtils.closeQuietly(w);
                        assertEquals(greekText, w.toString());
                    }
                }
                {
                    c.removeCacheEntry(key1, null);
                    CacheItem i = c.getOrCreateCacheEntry(key1);
                    assertNull(i.getEncoding());
                    assertEquals(-1L, i.getLastModified());
                    assertEquals(-1, i.getTranslationCount());
                    assertFalse(i.isCached());
                    assertNull(i.getHeaders());
                }
            } finally {
                c.removeCacheEntry(key1, null);
            }
        } finally {
            c.removeCacheEntry(key2, null);
        }
    }
} </s>
<s>class temp {    public void init(String file) {
        URL url = SoundFactory.class.getResource(file);
        try {
            JAXBContext context = JAXBContext.newInstance("elf.xml.sounds");
            Unmarshaller unmarshaller = context.createUnmarshaller();
            SoundsBaseType root = null;
            Object tmpobj = unmarshaller.unmarshal(url.openConnection().getInputStream());
            if (tmpobj instanceof JAXBElement<?>) {
                if (((JAXBElement<?>) tmpobj).getValue() instanceof SoundsBaseType) {
                    root = (SoundsBaseType) ((JAXBElement<?>) tmpobj).getValue();
                    addMusic("MENUSONG", root.getMenumusic().getMusicpath());
                    List<SoundsMusicType> musiclist = root.getMusic();
                    Iterator<SoundsMusicType> it = musiclist.iterator();
                    while (it.hasNext()) {
                        SoundsMusicType smt = it.next();
                        addMusic(smt.getMusicname(), smt.getMusicpath());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private Image2D resolvePNG(URI uri) {
        Image2D image2D = null;
        if (uri.getScheme() != null) {
            try {
                URL url = new URL(uri.toString());
                InputStream is = url.openStream();
                BufferedImage image = PNGDecoder.decode(is);
                int imageType = Image2D.RGB;
                if (image.getType() == BufferedImage.TYPE_INT_RGB) imageType = Image2D.RGB; else if (image.getType() == BufferedImage.TYPE_INT_ARGB) imageType = Image2D.RGBA;
                image2D = new Image2D(imageType, image);
            } catch (IOException ex) {
            }
        } else {
            String path = uri.getPath();
            File file = new File(path);
            if (file.getAbsoluteFile().exists()) {
                try {
                    FileInputStream is = new FileInputStream(file);
                    BufferedImage image = PNGDecoder.decode(is);
                    int imageType = Image2D.RGB;
                    if (image.getType() == BufferedImage.TYPE_INT_RGB) imageType = Image2D.RGB; else if (image.getType() == BufferedImage.TYPE_INT_ARGB) imageType = Image2D.RGBA;
                    image2D = new Image2D(imageType, image);
                } catch (FileNotFoundException ex) {
                } catch (IOException ex) {
                }
            }
        }
        return image2D;
    }
} </s>
<s>class temp {    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource("/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties").getPath()).toString();
            File englishFile = new File(i18nPath + "TranubeConstants_en.properties");
            if (!englishFile.exists()) throw new Exception("English file not found");
            String propertiesFilePath = i18nPath + "TranubeConstants_" + locale + ".properties";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream("/es/ua/tranube/prototype/main/client/TranubeConstants_" + locale + ".properties");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith("#")) strBuilder.append(line).append("\n"); else {
                    String[] pieces = line.split("=");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + " = " + messageValue + "\n");
                            found = true;
                        } else strBuilder.append(line).append("\n");
                    } else strBuilder.append(line).append("\n");
                }
            }
            if (!found) strBuilder.append(messageName).append(" = ").append(messageValue).append("\n");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public String getPloidy(String source) {
        StringBuilder ploidyHtml = new StringBuilder();
        String hyperdiploidyUrl = customParameters.getHyperdiploidyUrl();
        String urlString = hyperdiploidyUrl + "?source=" + source;
        URL url = null;
        try {
            url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = "";
            while ((line = in.readLine()) != null) {
                ploidyHtml.append(line);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ploidyHtml.toString();
    }
} </s>
<s>class temp {    public static String hashPassword(String password) {
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(password.getBytes());
            byte result[] = md5.digest("InTeRlOgY".getBytes());
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < result.length; i++) {
                String s = Integer.toHexString(result[i]);
                int length = s.length();
                if (length >= 2) {
                    sb.append(s.substring(length - 2, length));
                } else {
                    sb.append("0");
                    sb.append(s);
                }
            }
            return "{md5}" + sb.toString();
        } catch (NoSuchAlgorithmException e) {
            return password;
        }
    }
} </s>
<s>class temp {    public void patchFile(final File classFile) {
        if (!classFile.exists()) {
            myErrors.add(new FormErrorInfo(null, "Class to bind does not exist: " + myRootContainer.getClassToBind()));
            return;
        }
        FileInputStream fis;
        try {
            byte[] patchedData;
            fis = new FileInputStream(classFile);
            try {
                patchedData = patchClass(fis);
                if (patchedData == null) {
                    return;
                }
            } finally {
                fis.close();
            }
            FileOutputStream fos = new FileOutputStream(classFile);
            try {
                fos.write(patchedData);
            } finally {
                fos.close();
            }
        } catch (IOException e) {
            myErrors.add(new FormErrorInfo(null, "Cannot read or write class file " + classFile.getPath() + ": " + e.toString()));
        }
    }
} </s>
<s>class temp {    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException e) {
            log.error("Algorithm not found", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
} </s>
<s>class temp {    private synchronized void connect() throws IOException {
        long now = System.currentTimeMillis();
        if (lastConnect == 0 || lastConnect + 500 < now) {
            Log.logRB(Resource.CONNECTINGTO, new Object[] { getName() });
            String auth = setProxy();
            conn = url.openConnection();
            if (auth != null) conn.setRequestProperty("Proxy-Authorization", auth);
            conn.connect();
            lastModified = conn.getLastModified();
            lastConnect = System.currentTimeMillis();
        }
    }
} </s>
<s>class temp {    public static void moveOutputAsmFile(File inputLocation, File outputLocation) throws Exception {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        try {
            inputStream = new FileInputStream(inputLocation);
            outputStream = new FileOutputStream(outputLocation);
            byte buffer[] = new byte[1024];
            while (inputStream.available() > 0) {
                int read = inputStream.read(buffer);
                outputStream.write(buffer, 0, read);
            }
            inputLocation.delete();
        } finally {
            IOUtil.closeAndIgnoreErrors(inputStream);
            IOUtil.closeAndIgnoreErrors(outputStream);
        }
    }
} </s>
<s>class temp {    public void send(String payload, TransportReceiver receiver) {
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost();
        post.setHeader("Content-Type", "application/json;charset=UTF-8");
        post.setHeader("Cookie", cookie);
        post.setURI(uri);
        Throwable ex;
        try {
            post.setEntity(new StringEntity(payload, "UTF-8"));
            HttpResponse response = client.execute(post);
            if (200 == response.getStatusLine().getStatusCode()) {
                String contents = readStreamAsString(response.getEntity().getContent());
                receiver.onTransportSuccess(contents);
            } else {
                receiver.onTransportFailure(new ServerFailure(response.getStatusLine().getReasonPhrase()));
            }
            return;
        } catch (UnsupportedEncodingException e) {
            ex = e;
        } catch (ClientProtocolException e) {
            ex = e;
        } catch (IOException e) {
            ex = e;
        }
        receiver.onTransportFailure(new ServerFailure(ex.getMessage()));
    }
} </s>
<s>class temp {    private void doIt() throws Throwable {
        int numCachedTiles = 0;
        try {
            List<MapTile> backTiles = new ArrayList<MapTile>();
            final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(south, west), new LatLngPoint(north, east));
            final String backMapGuid = "gst";
            final XFile dstDir = new XFile(new XFile(Configuration.getInstance().getPublicMapStorage().toString()), backMapGuid);
            dstDir.mkdir();
            for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) {
                final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z);
                final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z);
                for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) {
                    NASAMapTile tile = new NASAMapTile((int) x, (int) y, z);
                    XFile file = new XFile(dstDir, tile.toKeyString());
                    if (file.exists() && file.isFile()) continue;
                    backTiles.add(tile);
                }
            }
            logger.info(backTiles.size() + " tiles to cache");
            for (MapTile tile : backTiles) {
                InputStream in = null;
                OutputStream out = null;
                final URL url = new URL(tile.getPath());
                try {
                    int i = 4;
                    while (--i > 0) {
                        final XFile outFile = new XFile(dstDir, tile.toKeyString());
                        final URLConnection conn = url.openConnection();
                        if (conn == null || !conn.getContentType().startsWith("image")) {
                            logger.error("onearth.jpl.nasa.gov service returns non-image file, " + "content-type='" + conn.getContentType() + "'");
                            Thread.sleep(1000L * (long) Math.pow(2, 8 - i));
                            continue;
                        }
                        in = conn.getInputStream();
                        if (in != null) {
                            out = new XFileOutputStream(outFile);
                            IOUtils.copy(in, out);
                            break;
                        } else throw new IllegalStateException("opened stream is null");
                    }
                } finally {
                    if (out != null) {
                        out.flush();
                        out.close();
                    }
                    if (in != null) in.close();
                }
                if (++numCachedTiles % 10 == 0) {
                    logger.info(numCachedTiles + " tiles cached");
                    Thread.sleep(sleep);
                }
            }
        } catch (Throwable e) {
            logger.error("map tile caching has failed: ", e);
            throw e;
        }
    }
} </s>
<s>class temp {    public static int doPost(String urlString, String username, String password, Map<String, String> parameters) throws IOException {
        PrintWriter out = null;
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            if (username != null && password != null) {
                String encoding = base64Encode(username + ':' + password);
                connection.setRequestProperty("Authorization", "Basic " + encoding);
            }
            connection.setDoOutput(true);
            out = new PrintWriter(connection.getOutputStream());
            boolean first = true;
            for (Map.Entry<String, String> entry : parameters.entrySet()) {
                if (first) {
                    first = false;
                } else {
                    out.print('&');
                }
                out.print(entry.getKey());
                out.print('=');
                out.print(URLEncoder.encode(entry.getValue(), "UTF-8"));
            }
            out.close();
            connection.connect();
            if (!(connection instanceof HttpURLConnection)) {
                throw new IOException();
            }
            return ((HttpURLConnection) connection).getResponseCode();
        } catch (IOException ex) {
            throw ex;
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }
} </s>
