<s>class temp {    private void setInlineXML(Entry entry, DatastreamXMLMetadata ds) throws UnsupportedEncodingException, StreamIOException {
        String content;
        if (m_obj.hasContentModel(Models.SERVICE_DEPLOYMENT_3_0) && (ds.DatastreamID.equals("SERVICE-PROFILE") || ds.DatastreamID.equals("WSDL"))) {
            content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext);
        } else {
            content = new String(ds.xmlContent, m_encoding);
        }
        if (m_format.equals(ATOM_ZIP1_1)) {
            String name = ds.DSVersionID + ".xml";
            try {
                m_zout.putNextEntry(new ZipEntry(name));
                InputStream is = new ByteArrayInputStream(content.getBytes(m_encoding));
                IOUtils.copy(is, m_zout);
                m_zout.closeEntry();
                is.close();
            } catch (IOException e) {
                throw new StreamIOException(e.getMessage(), e);
            }
            IRI iri = new IRI(name);
            entry.setSummary(ds.DSVersionID);
            entry.setContent(iri, ds.DSMIME);
        } else {
            entry.setContent(content, ds.DSMIME);
        }
    }
} </s>
<s>class temp {    private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException {
        if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) {
            String mimeType = vds.DSMIME;
            if (MimeTypeHelper.isText(mimeType) || MimeTypeHelper.isXml(mimeType)) {
                try {
                    entry.setContent(IOUtils.toString(vds.getContentStream(), m_encoding), mimeType);
                } catch (IOException e) {
                    throw new StreamIOException(e.getMessage(), e);
                }
            } else {
                entry.setContent(vds.getContentStream(), mimeType);
            }
        } else {
            String dsLocation;
            IRI iri;
            if (m_format.equals(ATOM_ZIP1_1) && m_transContext != DOTranslationUtility.AS_IS) {
                dsLocation = vds.DSVersionID + "." + MimeTypeUtils.fileExtensionForMIMEType(vds.DSMIME);
                try {
                    m_zout.putNextEntry(new ZipEntry(dsLocation));
                    InputStream is = vds.getContentStream();
                    IOUtils.copy(is, m_zout);
                    is.close();
                    m_zout.closeEntry();
                } catch (IOException e) {
                    throw new StreamIOException(e.getMessage(), e);
                }
            } else {
                dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation);
            }
            iri = new IRI(dsLocation);
            entry.setSummary(vds.DSVersionID);
            entry.setContent(iri, vds.DSMIME);
        }
    }
} </s>
<s>class temp {    public static URLConnection createConnection(URL url) throws java.io.IOException {
        URLConnection urlConn = url.openConnection();
        if (urlConn instanceof HttpURLConnection) {
            HttpURLConnection httpConn = (HttpURLConnection) urlConn;
            httpConn.setRequestMethod("POST");
        }
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setUseCaches(false);
        urlConn.setDefaultUseCaches(false);
        return urlConn;
    }
} </s>
<s>class temp {    private static void generateGIF(Connection con, String category, String area_code, String topic_code, String timeseries, String diff_timeseries, Calendar time, String area_label, String raster_label, String image_label, String note, Rectangle2D bounds, Rectangle2D raster_bounds, String source_filename, String diff_filename, String legend_filename, String output_filename, int output_maximum_size) throws SQLException, IOException {
        System.out.println("ImageCropper.generateGIF begin");
        MapContext map_context = new MapContext("test", new Configuration());
        try {
            Map map = new Map(map_context, area_label, new Configuration());
            map.setCoordSys(ProjectionCategories.default_coordinate_system);
            map.setPatternOutline(new XPatternOutline(new XPatternPaint(Color.white)));
            String type = null;
            RasterLayer rlayer = getRasterLayer(map, raster_label, getLinuxPathEquivalent(source_filename), getLinuxPathEquivalent(diff_filename), type, getLinuxPathEquivalent(legend_filename));
            map.addLayer(rlayer, true);
            map.setBounds2DImage(bounds, true);
            Dimension image_dim = null;
            image_dim = new Dimension((int) rlayer.raster.getDeviceBounds().getWidth() + 1, (int) rlayer.raster.getDeviceBounds().getHeight() + 1);
            if (output_maximum_size > 0) {
                double width_factor = image_dim.getWidth() / output_maximum_size;
                double height_factor = image_dim.getHeight() / output_maximum_size;
                double factor = Math.max(width_factor, height_factor);
                if (factor > 1.0) {
                    image_dim.setSize(image_dim.getWidth() / factor, image_dim.getHeight() / factor);
                }
            }
            map.setImageDimension(image_dim);
            map.scale();
            image_dim = new Dimension((int) map.getBounds2DImage().getWidth(), (int) map.getBounds2DImage().getHeight());
            Image image = null;
            Graphics gr = null;
            image = ImageCreator.getImage(image_dim);
            gr = image.getGraphics();
            try {
                map.paint(gr);
            } catch (Exception e) {
                Debug.println("map.paint error: " + e.getMessage());
            }
            String gif_filename = "";
            try {
                gif_filename = formatPath(category, timeseries, output_filename);
                new File(new_filename).mkdirs();
                new GifEncoder(image, new FileOutputStream(gif_filename)).encode();
            } catch (IOException e) {
                Debug.println("ImageCropper.generateGIF e: " + e.getMessage());
                throw new IOException("GenerateGIF.IOException: " + e);
            }
            PreparedStatement pstmt = null;
            try {
                String delete_raster = "delete raster_layer where " + "label='" + gif_name.trim() + "' and category='" + category.trim() + "' and area_code=' " + area_code.trim() + "'";
                pstmt = con.prepareStatement(delete_raster);
                boolean del = pstmt.execute();
                pstmt.close();
                String insert_raster = "insert into RASTER_LAYER " + "values(RASTER_LAYER_ID.nextval, ?, ?, ?, " + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " + "SYSDATE, ?)";
                pstmt = con.prepareStatement(insert_raster);
                pstmt.setString(1, gif_name);
                pstmt.setString(2, category);
                pstmt.setString(3, area_code);
                pstmt.setString(4, topic_code);
                if (time == null) {
                    pstmt.setNull(5, java.sql.Types.DATE);
                } else {
                    pstmt.setDate(5, new java.sql.Date(time.getTimeInMillis()));
                }
                pstmt.setString(6, timeseries);
                pstmt.setString(7, gif_filename);
                pstmt.setNull(8, java.sql.Types.INTEGER);
                pstmt.setNull(9, java.sql.Types.INTEGER);
                pstmt.setDouble(10, raster_bounds.getX());
                pstmt.setDouble(11, raster_bounds.getY());
                pstmt.setDouble(12, raster_bounds.getWidth());
                pstmt.setDouble(13, raster_bounds.getHeight());
                pstmt.setString(14, note);
                int sequence = 0;
                if (gif_name.endsWith("DP")) {
                    sequence = 1;
                } else if (gif_name.endsWith("DY")) {
                    sequence = 2;
                } else if (gif_name.endsWith("DA")) {
                    sequence = 3;
                }
                pstmt.setInt(15, sequence);
                pstmt.executeUpdate();
            } catch (SQLException e) {
                Debug.println("SQLException occurred e: " + e.getMessage());
                con.rollback();
                throw new SQLException("GenerateGIF.SQLException: " + e);
            } finally {
                pstmt.close();
            }
        } catch (Exception e) {
            Debug.println("ImageCropper.generateGIF e: " + e.getMessage());
        }
        System.out.println("ImageCropper.generateGIF end");
    }
} </s>
<s>class temp {    public EFaxResult sendFax(ototype.SendFaxWrapper parameters) {
        EFaxResult efr = new EFaxResult();
        if (!validFaxUser(parameters.getUserID(), parameters.getPassWord())) {
            efr.setResultCode(211);
            return efr;
        }
        Connection conn = null;
        String faxKey = getSegquence("t_fax_send") + "";
        String sql = "insert into t_fax_send(faxKey,userID,appcode,sendername," + "sendernumber,sendercompany,sendtime,accountId, userId2, PID, moduleId, CDRType) values(?,?,?,?,?,?,?,?,?,?,?,?)";
        Fax fax = parameters.getFax();
        FaxContactor sender = fax.getSender();
        FaxContactor[] receiver = fax.getReceiver();
        try {
            conn = this.getJdbcTemplate().getDataSource().getConnection();
            conn.setAutoCommit(false);
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, faxKey);
            pstmt.setString(2, parameters.getUserID());
            pstmt.setString(3, parameters.getAppCode());
            pstmt.setString(4, sender.getContactor());
            pstmt.setString(5, sender.getFaxNumber());
            pstmt.setString(6, sender.getCompany());
            pstmt.setString(7, fax.getSendTime());
            pstmt.setString(8, parameters.getAccountId());
            pstmt.setString(9, parameters.getUserId());
            pstmt.setString(10, parameters.getPID());
            pstmt.setInt(11, parameters.getModuleId());
            pstmt.setInt(12, parameters.getCDRType());
            pstmt.executeUpdate();
            sql = "insert into t_fax_contactor(faxKey,contactorID,contactor,faxnumber,company) values(?,?,?,?,?)";
            pstmt = conn.prepareStatement(sql);
            for (int k = 0; k < receiver.length; k++) {
                pstmt.setString(1, faxKey);
                pstmt.setString(2, receiver[k].getContactorID());
                pstmt.setString(3, receiver[k].getContactor());
                pstmt.setString(4, receiver[k].getFaxNumber());
                pstmt.setString(5, receiver[k].getCompany());
                pstmt.addBatch();
            }
            pstmt.executeBatch();
            sql = "insert into t_fax_file(faxKey,fileID,filename,filetype,fileurl,faxpages) values(?,?,?,?,?,?)";
            pstmt = conn.prepareStatement(sql);
            FaxFile[] files = fax.getFiles();
            for (int h = 0; h < files.length; h++) {
                String fileID = getSegquence("t_Fax_file") + "";
                pstmt.setString(1, faxKey);
                pstmt.setString(2, fileID);
                pstmt.setString(3, files[h].getFileName());
                pstmt.setString(4, files[h].getFileType());
                pstmt.setString(5, files[h].getFileURL());
                pstmt.setInt(6, files[h].getFaxPages());
                Service.writeByteFile(files[h].getFile(), fileID);
                pstmt.addBatch();
            }
            pstmt.executeBatch();
            conn.commit();
            efr.setResultCode(100);
            efr.setResultInfo(faxKey);
        } catch (SQLException e) {
            efr.setResultCode(200);
            try {
                conn.rollback();
            } catch (Exception e1) {
                logger.error("Error validFaxUser", e1);
            }
            logger.error("Error validFaxUser", e);
        } catch (IOException e) {
            efr.setResultCode(200);
            logger.error("Error write file on sendfax", e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (Exception e) {
                    logger.error("Error sendFax on close conn", e);
                }
            }
        }
        return efr;
    }
} </s>
<s>class temp {    protected void copyFile(String inputFilePath, String outputFilePath) throws GenerationException {
        String from = getTemplateDir() + inputFilePath;
        try {
            logger.debug("Copying from " + from + " to " + outputFilePath);
            InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(from);
            if (inputStream == null) {
                throw new GenerationException("Source file not found: " + from);
            }
            FileOutputStream outputStream = new FileOutputStream(new File(outputFilePath));
            IOUtils.copy(inputStream, outputStream);
            inputStream.close();
            outputStream.close();
        } catch (Exception e) {
            throw new GenerationException("Error while copying file: " + from, e);
        }
    }
} </s>
<s>class temp {    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
} </s>
<s>class temp {    private boolean serverOK(String serverAddress, String serverPort) {
        boolean status = false;
        String serverString = serverAddress + ":" + serverPort + MolConvertInNodeModel.SERVER_WSDL_PATH;
        System.out.println("connecting to " + serverString + "...");
        try {
            java.net.URL url = new java.net.URL(serverString);
            try {
                java.net.HttpURLConnection connection = (java.net.HttpURLConnection) url.openConnection();
                status = readContents(connection);
                if (status) {
                    JOptionPane.showMessageDialog(this.getPanel(), "Connection to Server is OK");
                }
            } catch (Exception connEx) {
                JOptionPane.showMessageDialog(this.getPanel(), connEx.getMessage());
                logger.error(connEx.getMessage());
            }
        } catch (java.net.MalformedURLException urlEx) {
            JOptionPane.showMessageDialog(this.getPanel(), urlEx.getMessage());
            logger.error(urlEx.getMessage());
        }
        return status;
    }
} </s>
<s>class temp {    public static int[] bubbleSort(int[] source) {
        if (source != null && source.length > 0) {
            boolean flag = true;
            while (flag) {
                flag = false;
                for (int i = 0; i < source.length - 1; i++) {
                    if (source[i] > source[i + 1]) {
                        int temp = source[i];
                        source[i] = source[i + 1];
                        source[i + 1] = temp;
                        flag = true;
                    }
                }
            }
        }
        return source;
    }
} </s>
<s>class temp {    public static int[] bubbleSort2(int[] source) {
        if (null != source && source.length > 0) {
            boolean flag = false;
            while (!flag) {
                for (int i = 0; i < source.length - 1; i++) {
                    if (source[i] > source[i + 1]) {
                        int temp = source[i];
                        source[i] = source[i + 1];
                        source[i + 1] = temp;
                        break;
                    } else if (i == source.length - 2) {
                        flag = true;
                    }
                }
            }
        }
        return source;
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        FileInputStream fr = null;
        FileOutputStream fw = null;
        BufferedInputStream br = null;
        BufferedOutputStream bw = null;
        try {
            fr = new FileInputStream("D:/5.xls");
            fw = new FileOutputStream("c:/Dxw.java");
            br = new BufferedInputStream(fr);
            bw = new BufferedOutputStream(fw);
            int read = br.read();
            while (read != -1) {
                bw.write(read);
                read = br.read();
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    protected URLConnection openConnection(URL url) throws IOException {
        URLStreamHandler handler = factory.findAuthorizedURLStreamHandler(protocol);
        if (handler != null) {
            try {
                return (URLConnection) openConnectionMethod.invoke(handler, new Object[] { url });
            } catch (Exception e) {
                factory.adaptor.getFrameworkLog().log(new FrameworkLogEntry(MultiplexingURLStreamHandler.class.getName(), "openConnection", FrameworkLogEntry.ERROR, e, null));
                throw new RuntimeException(e.getMessage());
            }
        }
        throw new MalformedURLException();
    }
} </s>
<s>class temp {    private Datastream addManagedDatastreamVersion(Entry entry) throws StreamIOException, ObjectIntegrityException {
        Datastream ds = new DatastreamManagedContent();
        setDSCommonProperties(ds, entry);
        ds.DSLocationType = "INTERNAL_ID";
        ds.DSMIME = getDSMimeType(entry);
        IRI contentLocation = entry.getContentSrc();
        if (contentLocation != null) {
            if (m_obj.isNew()) {
                ValidationUtility.validateURL(contentLocation.toString(), ds.DSControlGrp);
            }
            if (m_format.equals(ATOM_ZIP1_1)) {
                if (!contentLocation.isAbsolute() && !contentLocation.isPathAbsolute()) {
                    File f = getContentSrcAsFile(contentLocation);
                    contentLocation = new IRI(DatastreamManagedContent.TEMP_SCHEME + f.getAbsolutePath());
                }
            }
            ds.DSLocation = contentLocation.toString();
            ds.DSLocation = (DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), ds, m_transContext)).DSLocation;
            return ds;
        }
        try {
            File temp = File.createTempFile("binary-datastream", null);
            OutputStream out = new FileOutputStream(temp);
            if (MimeTypeHelper.isText(ds.DSMIME) || MimeTypeHelper.isXml(ds.DSMIME)) {
                IOUtils.copy(new StringReader(entry.getContent()), out, m_encoding);
            } else {
                IOUtils.copy(entry.getContentStream(), out);
            }
            ds.DSLocation = DatastreamManagedContent.TEMP_SCHEME + temp.getAbsolutePath();
        } catch (IOException e) {
            throw new StreamIOException(e.getMessage(), e);
        }
        return ds;
    }
} </s>
<s>class temp {    private String getCoded(String pass) {
        String passSecret = "";
        try {
            MessageDigest m = MessageDigest.getInstance("MD5");
            m.update(pass.getBytes("UTF8"));
            byte s[] = m.digest();
            for (int i = 0; i < s.length; i++) {
                passSecret += Integer.toHexString((0x000000ff & s[i]) | 0xffffff00).substring(6);
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return passSecret;
    }
} </s>
<s>class temp {    public static String encryptPassword(String password) throws PasswordException {
        String hash = null;
        if (password != null && !password.equals("")) {
            try {
                MessageDigest md = MessageDigest.getInstance("SHA");
                md.update(password.getBytes("UTF-8"));
                byte raw[] = md.digest();
                hash = (new BASE64Encoder()).encode(raw);
            } catch (NoSuchAlgorithmException nsae) {
                throw new PasswordException(PasswordException.SYSTEM_ERROR);
            } catch (UnsupportedEncodingException uee) {
                throw new PasswordException(PasswordException.SYSTEM_ERROR);
            }
        }
        return hash;
    }
} </s>
<s>class temp {    @Test
    public void usingStream() throws IOException, NameNotFoundException {
        URL url = new URL("ftp://ftp.ebi.ac.uk/pub/databases/interpro/entry.list");
        InterproNameHandler handler = new InterproNameHandler(url.openStream());
        String interproName = handler.getNameById("IPR008255");
        assertNotNull(interproName);
        assertEquals("Pyridine nucleotide-disulphide oxidoreductase, class-II, active site", interproName);
        assertEquals(null, handler.getNameById("Active_site"));
    }
} </s>
<s>class temp {    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {
        File sourceFile = getTileFile(x, y, zoom, tileSource);
        if (!sourceFile.exists()) return false;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        long sourceBytes = 0;
        long writtenBytes = 0;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(targetFileName);
            FileChannel source = fis.getChannel();
            FileChannel destination = fos.getChannel();
            sourceBytes = source.size();
            writtenBytes = destination.transferFrom(source, 0, sourceBytes);
        } finally {
            Utilities.closeStream(fis);
            Utilities.closeStream(fos);
        }
        if (writtenBytes != sourceBytes) throw new IOException("Target file's size is not equal to the source file's size!");
        return true;
    }
} </s>
<s>class temp {    public StringBuffer get(URL url) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer page = new StringBuffer();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            String utf = new String(line.getBytes("UTF-8"), "UTF-8");
            page.append(utf);
        }
        bufferedReader.close();
        return page;
    }
} </s>
<s>class temp {    private static String getDocumentAt(String urlString) {
        StringBuffer html_text = new StringBuffer();
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) html_text.append(line + "\n");
            reader.close();
        } catch (MalformedURLException e) {
            System.out.println("  Ч  URL: " + urlString);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html_text.toString();
    }
} </s>
<s>class temp {    @Override
    protected void setUp() throws Exception {
        this.logger = new ConsoleLogger(ConsoleLogger.LEVEL_WARN);
        File repoFolder = new File("target/repository");
        removeRepository(repoFolder);
        InputStream repoConfigIn = getClass().getResourceAsStream(REPO_CONFIG_FILE);
        File tempRepoConfigFile = File.createTempFile("repository", "xml");
        tempRepoConfigFile.deleteOnExit();
        OutputStream tempRepoConfigOut = new FileOutputStream(tempRepoConfigFile);
        try {
            IOUtils.copy(repoConfigIn, tempRepoConfigOut);
        } finally {
            repoConfigIn.close();
            tempRepoConfigOut.close();
        }
        Repository repo = new TransientRepository(tempRepoConfigFile.getAbsolutePath(), "target/repository");
        ServerAdapterFactory factory = new ServerAdapterFactory();
        RemoteRepository remoteRepo = factory.getRemoteRepository(repo);
        reg = LocateRegistry.createRegistry(Registry.REGISTRY_PORT);
        reg.rebind(REMOTE_REPO_NAME, remoteRepo);
        session = repo.login(new SimpleCredentials(LOGIN, PWD.toCharArray()), WORKSPACE);
        InputStream nodeTypeDefIn = getClass().getResourceAsStream(MQ_JCR_XML_NODETYPES_FILE);
        JackrabbitInitializerHelper.setupRepository(session, new InputStreamReader(nodeTypeDefIn), "");
    }
} </s>
<s>class temp {    public ScoreModel(URL url) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        list = new ArrayList<ScoreModelItem>();
        map = new HashMap<String, ScoreModelItem>();
        line = in.readLine();
        int n = 1;
        String[] rowAttrib;
        ScoreModelItem item;
        while ((line = in.readLine()) != null) {
            rowAttrib = line.split(";");
            item = new ScoreModelItem(n, Double.valueOf(rowAttrib[3]), Double.valueOf(rowAttrib[4]), Double.valueOf(rowAttrib[2]), Double.valueOf(rowAttrib[5]), rowAttrib[1]);
            list.add(item);
            map.put(item.getHash(), item);
            n++;
        }
        in.close();
    }
} </s>
<s>class temp {    private void unzip(File filename) throws ZipException, IOException {
        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));
        ZipEntry entry = null;
        boolean first_entry = true;
        while ((entry = in.getNextEntry()) != null) {
            if (first_entry) {
                if (!entry.isDirectory()) {
                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));
                    if (!subdir.exists()) {
                        subdir.mkdir();
                        dir = subdir;
                    }
                }
                first_entry = false;
            }
            if (entry.isDirectory()) {
                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));
            } else {
                File outfile = new File(dir + File.separator + entry.getName());
                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));
                if (!outdir.exists()) FileUtils.forceMkdir(outdir);
                FileOutputStream fo = new FileOutputStream(outfile);
                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);
                int read;
                byte data[] = new byte[BUFFER];
                while ((read = in.read(data, 0, BUFFER)) != -1) {
                    read_position++;
                    bos.write(data, 0, read);
                }
                bos.flush();
                bos.close();
            }
        }
        in.close();
    }
} </s>
<s>class temp {    private static void generateTIFF(Connection con, String category, String area_code, String topic_code, String timeseries, String diff_timeseries, Calendar time, String area_label, String raster_label, String image_label, String note, Rectangle2D bounds, Rectangle2D raster_bounds, String source_filename, String diff_filename, String legend_filename, String output_filename, int output_maximum_size) throws SQLException, IOException {
        Debug.println("ImageCropper.generateTIFF begin");
        MapContext map_context = new MapContext("test", new Configuration());
        try {
            Map map = new Map(map_context, area_label, new Configuration());
            map.setCoordSys(ProjectionCategories.default_coordinate_system);
            map.setPatternOutline(new XPatternOutline(new XPatternPaint(Color.white)));
            String type = null;
            RasterLayer rlayer = getRasterLayer(map, raster_label, getLinuxPathEquivalent(source_filename), getLinuxPathEquivalent(diff_filename), type, getLinuxPathEquivalent(legend_filename));
            map.addLayer(rlayer, true);
            map.setBounds2DImage(bounds, true);
            Dimension image_dim = null;
            image_dim = new Dimension((int) rlayer.raster.getDeviceBounds().getWidth() + 1, (int) rlayer.raster.getDeviceBounds().getHeight() + 1);
            if (output_maximum_size > 0) {
                double width_factor = image_dim.getWidth() / output_maximum_size;
                double height_factor = image_dim.getHeight() / output_maximum_size;
                double factor = Math.max(width_factor, height_factor);
                if (factor > 1.0) {
                    image_dim.setSize(image_dim.getWidth() / factor, image_dim.getHeight() / factor);
                }
            }
            map.setImageDimension(image_dim);
            map.scale();
            image_dim = new Dimension((int) map.getBounds2DImage().getWidth(), (int) map.getBounds2DImage().getHeight());
            Image image = null;
            Graphics gr = null;
            image = ImageCreator.getImage(image_dim);
            gr = image.getGraphics();
            try {
                map.paint(gr);
            } catch (Exception e) {
                Debug.println("map.paint error: " + e.getMessage());
            }
            String tiff_filename = "";
            try {
                tiff_filename = formatPath(category, timeseries, output_filename);
                new File(new_filename).mkdirs();
                Debug.println("tiff_filename: " + tiff_filename);
                BufferedImage bi = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_BYTE_INDEXED);
                bi.createGraphics().drawImage(image, 0, 0, null);
                File f = new File(tiff_filename);
                FileOutputStream out = new FileOutputStream(f);
                TIFFEncodeParam param = new TIFFEncodeParam();
                param.setCompression(TIFFEncodeParam.COMPRESSION_PACKBITS);
                TIFFImageEncoder encoder = (TIFFImageEncoder) TIFFCodec.createImageEncoder("tiff", out, param);
                encoder.encode(bi);
                out.close();
            } catch (IOException e) {
                Debug.println("ImageCropper.generateTIFF TIFFCodec e: " + e.getMessage());
                throw new IOException("GenerateTIFF.IOException: " + e);
            }
            PreparedStatement pstmt = null;
            try {
                String query = "select Proj_ID, AccessType_Code from project " + "where Proj_Code= '" + area_code.trim() + "'";
                Statement stmt = null;
                ResultSet rs = null;
                int proj_id = -1;
                int access_code = -1;
                stmt = con.createStatement();
                rs = stmt.executeQuery(query);
                if (rs.next()) {
                    proj_id = rs.getInt(1);
                    access_code = rs.getInt(2);
                }
                rs.close();
                stmt.close();
                String delete_raster = "delete from rasterlayer where " + "Raster_Name='" + tiff_name.trim() + "' and Group_Code='" + category.trim() + "' and Proj_ID =" + proj_id;
                Debug.println("***** delete_raster: " + delete_raster);
                pstmt = con.prepareStatement(delete_raster);
                boolean del = pstmt.execute();
                pstmt.close();
                String insert_raster = "insert into rasterlayer(Raster_Name, " + "Group_Code, Proj_ID, Raster_TimeCode, Raster_Xmin, " + "Raster_Ymin, Raster_Area_Xmin, Raster_Area_Ymin, " + "Raster_Visibility, Raster_Order, Raster_Path, " + "AccessType_Code, Raster_TimePeriod) values(?,?,?,?, " + "?,?,?,?,?,?,?,?,?)";
                pstmt = con.prepareStatement(insert_raster);
                pstmt.setString(1, tiff_name);
                pstmt.setString(2, category);
                pstmt.setInt(3, proj_id);
                pstmt.setString(4, timeseries);
                pstmt.setDouble(5, raster_bounds.getX());
                pstmt.setDouble(6, raster_bounds.getY());
                pstmt.setDouble(7, raster_bounds.getWidth());
                pstmt.setDouble(8, raster_bounds.getHeight());
                pstmt.setString(9, "false");
                int sequence = 0;
                if (tiff_name.endsWith("DP")) {
                    sequence = 1;
                } else if (tiff_name.endsWith("DY")) {
                    sequence = 2;
                } else if (tiff_name.endsWith("DA")) {
                    sequence = 3;
                }
                pstmt.setInt(10, sequence);
                pstmt.setString(11, tiff_filename);
                pstmt.setInt(12, access_code);
                if (time == null) {
                    pstmt.setNull(13, java.sql.Types.DATE);
                } else {
                    pstmt.setDate(13, new java.sql.Date(time.getTimeInMillis()));
                }
                pstmt.executeUpdate();
            } catch (SQLException e) {
                Debug.println("SQLException occurred e: " + e.getMessage());
                con.rollback();
                throw new SQLException("GenerateTIFF.SQLException: " + e);
            } finally {
                pstmt.close();
            }
        } catch (Exception e) {
            Debug.println("ImageCropper.generateTIFF e: " + e.getMessage());
        }
        Debug.println("ImageCropper.generateTIFF end");
    }
} </s>
<s>class temp {    public static List<PluginInfo> getPluginInfos(String urlRepo) throws MalformedURLException, IOException {
        XStream xStream = new XStream();
        xStream.alias("plugin", PluginInfo.class);
        xStream.alias("plugins", List.class);
        List<PluginInfo> infos = null;
        URL url;
        BufferedReader in = null;
        StringBuilder buffer = new StringBuilder();
        try {
            url = new URL(urlRepo);
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                buffer.append(inputLine);
            }
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(RemotePluginsManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        infos = (List<PluginInfo>) xStream.fromXML(buffer.toString());
        return infos;
    }
} </s>
<s>class temp {    public ClientDTO changePassword(String pMail, String pMdp) {
        Client vClientBean = null;
        ClientDTO vClientDTO = null;
        vClientBean = mClientDao.getClient(pMail);
        if (vClientBean != null) {
            MessageDigest vMd5Instance;
            try {
                vMd5Instance = MessageDigest.getInstance("MD5");
                vMd5Instance.reset();
                vMd5Instance.update(pMdp.getBytes());
                byte[] vDigest = vMd5Instance.digest();
                BigInteger vBigInt = new BigInteger(1, vDigest);
                String vHashPassword = vBigInt.toString(16);
                vClientBean.setMdp(vHashPassword);
                vClientDTO = BeanToDTO.getInstance().createClientDTO(vClientBean);
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
        }
        return vClientDTO;
    }
} </s>
<s>class temp {    private static FileChannel getFileChannel(File file, boolean isOut, boolean append) throws OpenR66ProtocolSystemException {
        FileChannel fileChannel = null;
        try {
            if (isOut) {
                FileOutputStream fileOutputStream = new FileOutputStream(file.getPath(), append);
                fileChannel = fileOutputStream.getChannel();
                if (append) {
                    try {
                        fileChannel.position(file.length());
                    } catch (IOException e) {
                    }
                }
            } else {
                if (!file.exists()) {
                    throw new OpenR66ProtocolSystemException("File does not exist");
                }
                FileInputStream fileInputStream = new FileInputStream(file.getPath());
                fileChannel = fileInputStream.getChannel();
            }
        } catch (FileNotFoundException e) {
            throw new OpenR66ProtocolSystemException("File not found", e);
        }
        return fileChannel;
    }
} </s>
<s>class temp {    public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) {
        if (username == null || username.length() == 0) return;
        if (password == null || password.length() == 0) return;
        if (description == null || description.length() == 0) return;
        if (tags == null || tags.length() == 0) return;
        if (pseudoFileName == null || pseudoFileName.endsWith(".gpx")) return;
        new Thread(new Runnable() {

            public void run() {
                if (!Util.isSufficienDataForUpload(recordedGeoPoints)) return;
                final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes());
                String tagsToUse = tags;
                if (addDateTags || tagsToUse == null) if (tagsToUse == null) tagsToUse = autoTagFormat.format(new GregorianCalendar().getTime()); else tagsToUse = tagsToUse + " " + autoTagFormat.format(new GregorianCalendar().getTime());
                try {
                    final String urlDesc = (description == null) ? DEFAULT_DESCRIPTION : description.replaceAll("\\.;&?,/", "_");
                    final String urlTags = (tagsToUse == null) ? DEFAULT_TAGS : tagsToUse.replaceAll("\\\\.;&?,/", "_");
                    final URL url = new URL("http://www.openstreetmap.org/api/" + API_VERSION + "/gpx/create");
                    final HttpURLConnection con = (HttpURLConnection) url.openConnection();
                    con.setConnectTimeout(15000);
                    con.setRequestMethod("POST");
                    con.setDoOutput(true);
                    con.addRequestProperty("Authorization", "Basic " + encodeBase64(username + ":" + password));
                    con.addRequestProperty("Content-Type", "multipart/form-data; boundary=" + BOUNDARY);
                    con.addRequestProperty("Connection", "close");
                    con.addRequestProperty("Expect", "");
                    con.connect();
                    DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream()));
                    writeContentDispositionFile(out, "file", gpxInputStream, pseudoFileName);
                    writeContentDisposition(out, "description", urlDesc);
                    writeContentDisposition(out, "tags", urlTags);
                    writeContentDisposition(out, "public", "1");
                    out.writeBytes("--" + BOUNDARY + "--" + LINE_END);
                    out.flush();
                    final int retCode = con.getResponseCode();
                    String retMsg = con.getResponseMessage();
                    if (retCode != 200) {
                        if (con.getHeaderField("Error") != null) retMsg += "\n" + con.getHeaderField("Error");
                        con.disconnect();
                        throw new RuntimeException(retCode + " " + retMsg);
                    }
                    out.close();
                    con.disconnect();
                } catch (Exception e) {
                }
            }
        }, "OSMUpload-Thread").start();
    }
} </s>
<s>class temp {    public static synchronized String getMD5_Base64(String input) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException("System doesn't support MD5 algorithm.");
        }
        try {
            msgDigest.update(input.getBytes("UTF-8"));
        } catch (java.io.UnsupportedEncodingException ex) {
            throw new IllegalStateException("System doesn't support your  EncodingException.");
        }
        byte[] rawData = msgDigest.digest();
        byte[] encoded = Base64.encodeBase64(rawData);
        String retValue = new String(encoded);
        return retValue;
    }
} </s>
<s>class temp {    public void run() {
        videoId = videoId.trim();
        System.out.println("fetching video");
        String requestUrl = "http://www.youtube.com/get_video_info?&video_id=" + videoId;
        try {
            URL url = new URL(requestUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = rd.readLine();
            int from = line.indexOf("&token=") + 7;
            int to = line.indexOf("&thumbnail_url=");
            String id = line.substring(from, to);
            String tmp = "http://www.youtube.com/get_video?video_id=" + videoId + "&t=" + id;
            url = new URL(tmp);
            conn = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            rd.readLine();
            tmp = conn.getURL().toString();
            url = new URL(tmp);
            conn = (HttpURLConnection) url.openConnection();
            InputStream is;
            OutputStream outStream;
            URLConnection uCon;
            byte[] buf;
            int ByteRead, ByteWritten = 0;
            url = new URL(tmp);
            outStream = new BufferedOutputStream(new FileOutputStream(videoId + ".flv"));
            uCon = url.openConnection();
            is = uCon.getInputStream();
            buf = new byte[1024];
            while ((ByteRead = is.read(buf)) != -1) {
                outStream.write(buf, 0, ByteRead);
                ByteWritten += ByteRead;
            }
            is.close();
            outStream.close();
            System.out.println(videoUrl + " is ready");
        } catch (Exception e) {
            System.out.println("Could not find flv-url " + videoId + "! " + e.getMessage());
        } finally {
            ready = true;
        }
    }
} </s>
<s>class temp {    public static String hashPassword(String password) {
        String hashStr = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(password.getBytes(Charset.defaultCharset()));
            BigInteger hash = new BigInteger(1, md5.digest());
            hashStr = hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
            return password;
        }
        StringBuilder buffer = new StringBuilder(hashStr);
        while (buffer.length() < 32) {
            buffer.insert(0, '0');
        }
        return buffer.toString();
    }
} </s>
<s>class temp {    public static String createStringFromHtml(MyUrl url) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.getUrl().openStream(), "UTF-8"));
            String line;
            String xmlAsString = "";
            while ((line = reader.readLine()) != null) {
                xmlAsString += line;
            }
            reader.close();
            return xmlAsString;
        } catch (Exception e) {
            return null;
        }
    }
} </s>
<s>class temp {    private void doUpload(UploadKind uploadKind, WriteKind writeKind) throws Exception {
        int n = 512 * 1024;
        AtomicInteger total = new AtomicInteger(0);
        ServerSocket ss = startSinkServer(total);
        URL url = new URL("http://localhost:" + ss.getLocalPort() + "/test1");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod("POST");
        if (uploadKind == UploadKind.CHUNKED) {
            conn.setChunkedStreamingMode(-1);
        } else {
            conn.setFixedLengthStreamingMode(n);
        }
        OutputStream out = conn.getOutputStream();
        if (writeKind == WriteKind.BYTE_BY_BYTE) {
            for (int i = 0; i < n; ++i) {
                out.write('x');
            }
        } else {
            byte[] buf = new byte[writeKind == WriteKind.SMALL_BUFFERS ? 256 : 64 * 1024];
            Arrays.fill(buf, (byte) 'x');
            for (int i = 0; i < n; i += buf.length) {
                out.write(buf, 0, Math.min(buf.length, n - i));
            }
        }
        out.close();
        assertTrue(conn.getResponseCode() > 0);
        assertEquals(uploadKind == UploadKind.CHUNKED ? -1 : n, total.get());
    }
} </s>
<s>class temp {    protected void channelConnected() throws IOException {
        MessageDigest md = null;
        String digest = "";
        try {
            String userid = nateon.getUserId();
            if (userid.endsWith("@nate.com")) userid = userid.substring(0, userid.lastIndexOf('@'));
            md = MessageDigest.getInstance("MD5");
            md.update(nateon.getPassword().getBytes());
            md.update(userid.getBytes());
            byte[] bData = md.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b : bData) {
                int v = (int) b;
                v = v < 0 ? v + 0x100 : v;
                String s = Integer.toHexString(v);
                if (s.length() == 1) sb.append('0');
                sb.append(s);
            }
            digest = sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        NateOnMessage out = new NateOnMessage("LSIN");
        out.add(nateon.getUserId()).add(digest).add("MD5").add("3.615");
        out.setCallback("processAuth");
        writeMessage(out);
    }
} </s>
<s>class temp {    private File getDvdDataFileFromWeb() throws IOException {
        System.out.println("Downloading " + dvdCsvFileUrl);
        URL url = new URL(dvdCsvFileUrl);
        URLConnection conn = url.openConnection();
        InputStream in = conn.getInputStream();
        OutputStream out = new FileOutputStream(dvdCsvZipFileName);
        writeFromTo(in, out);
        System.out.println("Extracting " + dvdCsvFileName + " from " + dvdCsvZipFileName);
        File dvdZipFile = new File(dvdCsvZipFileName);
        File dvdCsvFile = new File(dvdCsvFileName);
        ZipFile zipFile = new ZipFile(dvdZipFile);
        ZipEntry zipEntry = zipFile.getEntry(dvdCsvFileName);
        FileOutputStream os = new FileOutputStream(dvdCsvFile);
        InputStream is = zipFile.getInputStream(zipEntry);
        writeFromTo(is, os);
        System.out.println("Deleting zip file");
        dvdZipFile.delete();
        System.out.println("Dvd csv file download complete");
        return dvdCsvFile;
    }
} </s>
<s>class temp {    protected InputStream getInputStream(URL url) {
        InputStream is = null;
        if (url != null) {
            try {
                is = url.openStream();
            } catch (Exception ex) {
            }
        }
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        if (is == null) {
            try {
                is = classLoader.getResourceAsStream("osworkflow.xml");
            } catch (Exception e) {
            }
        }
        if (is == null) {
            try {
                is = classLoader.getResourceAsStream("/osworkflow.xml");
            } catch (Exception e) {
            }
        }
        if (is == null) {
            try {
                is = classLoader.getResourceAsStream("META-INF/osworkflow.xml");
            } catch (Exception e) {
            }
        }
        if (is == null) {
            try {
                is = classLoader.getResourceAsStream("/META-INF/osworkflow.xml");
            } catch (Exception e) {
            }
        }
        return is;
    }
} </s>
<s>class temp {    private void getViolationsReportByProductOfferIdYearMonth() throws IOException {
        String xmlFile8Send = System.getenv("SLASOI_HOME") + System.getProperty("file.separator") + "Integration" + System.getProperty("file.separator") + "soap" + System.getProperty("file.separator") + "getViolationsReportByProductOfferIdYearMonth.xml";
        URL url8;
        url8 = new URL(bmReportingWSUrl);
        URLConnection connection8 = url8.openConnection();
        HttpURLConnection httpConn8 = (HttpURLConnection) connection8;
        FileInputStream fin8 = new FileInputStream(xmlFile8Send);
        ByteArrayOutputStream bout8 = new ByteArrayOutputStream();
        SOAPClient4XG.copy(fin8, bout8);
        fin8.close();
        byte[] b8 = bout8.toByteArray();
        httpConn8.setRequestProperty("Content-Length", String.valueOf(b8.length));
        httpConn8.setRequestProperty("Content-Type", "application/soap+xml; charset=UTF-8");
        httpConn8.setRequestProperty("SOAPAction", soapAction);
        httpConn8.setRequestMethod("POST");
        httpConn8.setDoOutput(true);
        httpConn8.setDoInput(true);
        OutputStream out8 = httpConn8.getOutputStream();
        out8.write(b8);
        out8.close();
        InputStreamReader isr8 = new InputStreamReader(httpConn8.getInputStream());
        BufferedReader in8 = new BufferedReader(isr8);
        String inputLine8;
        StringBuffer response8 = new StringBuffer();
        while ((inputLine8 = in8.readLine()) != null) {
            response8.append(inputLine8);
        }
        in8.close();
        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" + "####################################################" + "#################################################\n" + "####################################################" + "#################################################\n" + "Component Name: Business Manager\n" + "Interface Name: getReport\n" + "Operation Name:" + "getViolationsReportByProductOfferIdYearMonth\n" + "Input" + "ProductOfferID-1\n" + "PartyID-1\n" + "\n" + "####################################################" + "#################################################\n" + "####################################################" + "#################################################\n" + "######################################## RESPONSE" + "############################################\n\n");
        System.out.println("--------------------------------");
        System.out.println("Response\n" + response8.toString());
    }
} </s>
<s>class temp {    private void getViolationsReportByProductOfferIdYearMonthDay() throws IOException {
        String xmlFile9Send = System.getenv("SLASOI_HOME") + System.getProperty("file.separator") + "Integration" + System.getProperty("file.separator") + "soap" + System.getProperty("file.separator") + "getViolationsReportByProductOfferIdYearMonthDay.xml";
        URL url9;
        url9 = new URL(bmReportingWSUrl);
        URLConnection connection9 = url9.openConnection();
        HttpURLConnection httpConn9 = (HttpURLConnection) connection9;
        FileInputStream fin9 = new FileInputStream(xmlFile9Send);
        ByteArrayOutputStream bout9 = new ByteArrayOutputStream();
        SOAPClient4XG.copy(fin9, bout9);
        fin9.close();
        byte[] b9 = bout9.toByteArray();
        httpConn9.setRequestProperty("Content-Length", String.valueOf(b9.length));
        httpConn9.setRequestProperty("Content-Type", "application/soap+xml; charset=UTF-8");
        httpConn9.setRequestProperty("SOAPAction", soapAction);
        httpConn9.setRequestMethod("POST");
        httpConn9.setDoOutput(true);
        httpConn9.setDoInput(true);
        OutputStream out9 = httpConn9.getOutputStream();
        out9.write(b9);
        out9.close();
        InputStreamReader isr9 = new InputStreamReader(httpConn9.getInputStream());
        BufferedReader in9 = new BufferedReader(isr9);
        String inputLine9;
        StringBuffer response9 = new StringBuffer();
        while ((inputLine9 = in9.readLine()) != null) {
            response9.append(inputLine9);
        }
        in9.close();
        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" + "####################################################" + "#################################################\n" + "####################################################" + "#################################################\n" + "Component Name: Business Manager\n" + "Interface Name: getReport\n" + "Operation Name: " + "getViolationsReportByProductOfferIdYearMonthDay\n" + "Input" + "ProductOfferID-1\n" + "PartyID-1\n" + "\n" + "####################################################" + "#################################################\n" + "####################################################" + "#################################################\n" + "######################################## RESPONSE" + "############################################\n\n");
        System.out.println("--------------------------------");
        System.out.println("Response\n" + response9.toString());
    }
} </s>
<s>class temp {    private void getViolationsReportBySLATIdYearMonth() throws IOException {
        String xmlFile10Send = System.getenv("SLASOI_HOME") + System.getProperty("file.separator") + "Integration" + System.getProperty("file.separator") + "soap" + System.getProperty("file.separator") + "getViolationsReportBySLATIdYearMonth.xml";
        URL url10;
        url10 = new URL(bmReportingWSUrl);
        URLConnection connection10 = url10.openConnection();
        HttpURLConnection httpConn10 = (HttpURLConnection) connection10;
        FileInputStream fin10 = new FileInputStream(xmlFile10Send);
        ByteArrayOutputStream bout10 = new ByteArrayOutputStream();
        SOAPClient4XG.copy(fin10, bout10);
        fin10.close();
        byte[] b10 = bout10.toByteArray();
        httpConn10.setRequestProperty("Content-Length", String.valueOf(b10.length));
        httpConn10.setRequestProperty("Content-Type", "application/soap+xml; charset=UTF-8");
        httpConn10.setRequestProperty("SOAPAction", soapAction);
        httpConn10.setRequestMethod("POST");
        httpConn10.setDoOutput(true);
        httpConn10.setDoInput(true);
        OutputStream out10 = httpConn10.getOutputStream();
        out10.write(b10);
        out10.close();
        InputStreamReader isr10 = new InputStreamReader(httpConn10.getInputStream());
        BufferedReader in10 = new BufferedReader(isr10);
        String inputLine10;
        StringBuffer response10 = new StringBuffer();
        while ((inputLine10 = in10.readLine()) != null) {
            response10.append(inputLine10);
        }
        in10.close();
        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" + "####################################################" + "#################################################\n" + "####################################################" + "#################################################\n" + "Component Name: Business Manager\n" + "Interface Name: getReport\n" + "Operation Name: getViolationsReportBySLATIdYearMonth\n" + "Input" + "ProductOfferID-1\n" + "PartyID-1\n" + "\n" + "####################################################" + "#################################################\n" + "####################################################" + "#################################################\n" + "######################################## RESPONSE" + "############################################\n\n");
        System.out.println("--------------------------------");
        System.out.println("Response\n" + response10.toString());
    }
} </s>
<s>class temp {    private void getViolationsReportBySLATIdYearMonthDay() throws IOException {
        String xmlFile11Send = System.getenv("SLASOI_HOME") + System.getProperty("file.separator") + "Integration" + System.getProperty("file.separator") + "soap" + System.getProperty("file.separator") + "getViolationsReportBySLATIdYearMonthDay.xml";
        URL url11;
        url11 = new URL(bmReportingWSUrl);
        URLConnection connection11 = url11.openConnection();
        HttpURLConnection httpConn11 = (HttpURLConnection) connection11;
        FileInputStream fin11 = new FileInputStream(xmlFile11Send);
        ByteArrayOutputStream bout11 = new ByteArrayOutputStream();
        SOAPClient4XG.copy(fin11, bout11);
        fin11.close();
        byte[] b11 = bout11.toByteArray();
        httpConn11.setRequestProperty("Content-Length", String.valueOf(b11.length));
        httpConn11.setRequestProperty("Content-Type", "application/soap+xml; charset=UTF-8");
        httpConn11.setRequestProperty("SOAPAction", soapAction);
        httpConn11.setRequestMethod("POST");
        httpConn11.setDoOutput(true);
        httpConn11.setDoInput(true);
        OutputStream out11 = httpConn11.getOutputStream();
        out11.write(b11);
        out11.close();
        InputStreamReader isr11 = new InputStreamReader(httpConn11.getInputStream());
        BufferedReader in11 = new BufferedReader(isr11);
        String inputLine11;
        StringBuffer response11 = new StringBuffer();
        while ((inputLine11 = in11.readLine()) != null) {
            response11.append(inputLine11);
        }
        in11.close();
        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" + "####################################################" + "#################################################\n" + "####################################################" + "#################################################\n" + "Component Name: Business Manager\n" + "Interface Name: getReport\n" + "Operation Name: getViolationsReportBySLATIdYearMonthDay\n" + "Input" + "ProductOfferID-1\n" + "PartyID-1\n" + "\n" + "####################################################" + "#################################################\n" + "####################################################" + "#################################################\n" + "######################################## RESPONSE" + "############################################\n\n");
        System.out.println("--------------------------------");
        System.out.println("Response\n" + response11.toString());
    }
} </s>
<s>class temp {    public void open() throws IOException, RecursionException {
        String encoding = null;
        if (source != null) {
            Reader sourceReader = source.getCharacterStream();
            if (sourceReader != null) {
                if (readerReader == null) readerReader = new XMLReaderReader();
                readerReader.reset(sourceReader, true);
                isStandalone = readerReader.isXMLStandalone();
                activeReader = readerReader;
                isOpen = true;
                return;
            }
            InputStream in = source.getByteStream();
            if (in != null) {
                if (streamReader == null) streamReader = new XMLStreamReader();
                streamReader.reset(in, source.getEncoding(), true);
                isOpen = true;
                isStandalone = streamReader.isXMLStandalone();
                activeReader = streamReader;
                return;
            }
            url = new URL(defaultContext, source.getSystemId());
            sysID = url.toString();
            encoding = source.getEncoding();
        }
        if (streamReader == null) streamReader = new XMLStreamReader();
        streamReader.reset(url.openStream(), encoding, true);
        isStandalone = streamReader.isXMLStandalone();
        activeReader = streamReader;
        isOpen = true;
    }
} </s>
<s>class temp {    @Override
    public BufferedImageAndBytes load(T thing) {
        String iurl = resolver.getUrl(thing);
        URL url;
        for (int k = 0; k < nTries; k++) {
            if (k > 0) {
                logger.debug("retry #" + k);
            }
            try {
                url = new URL(iurl);
                URLConnection connection = url.openConnection();
                if (userAgent != null) {
                    connection.setRequestProperty("User-Agent", userAgent);
                }
                InputStream is = new BufferedInputStream(connection.getInputStream());
                ByteArrayOutputStream baos = new ByteArrayOutputStream(40000);
                int b;
                while ((b = is.read()) != -1) {
                    baos.write(b);
                }
                is.close();
                byte[] bytes = baos.toByteArray();
                ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                BufferedImage image = ImageIO.read(bais);
                return new BufferedImageAndBytes(image, bytes);
            } catch (MalformedURLException e) {
                continue;
            } catch (IOException e) {
                continue;
            }
        }
        return null;
    }
} </s>
<s>class temp {    @HttpAction(name = "map.calibrate", method = { HttpAction.Method.post }, responseType = "text/plain", parameters = { @HttpParameter(name = "user"), @HttpParameter(name = "guid"), @HttpParameter(name = "uploadFile"), @HttpParameter(name = "mapUrl"), @HttpParameter(name = "mapSource"), @HttpParameter(name = "south"), @HttpParameter(name = "west"), @HttpParameter(name = "north"), @HttpParameter(name = "east") })
    @HttpAuthentication(method = { HttpAuthentication.Method.WSSE })
    public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException {
        GenericDAO<UserMapOriginal> dao = DAOFactory.createDAO(UserMapOriginal.class);
        try {
            TransactionManager.beginTransaction();
        } catch (Throwable e) {
            logger.error(e);
            return "FAIL";
        }
        try {
            final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid));
            if (mapOriginal == null) throw new HttpRpcException(ErrorConstant.ERROR_NOT_FOUND, "map");
            if (UserMapOriginal.SubState.INPROC.equals(mapOriginal.getSubstate())) throw new HttpRpcException(ErrorConstant.ERROR_ILLEGAL_OBJECT_STATE, "map");
            if (UserMapOriginal.State.COMBINE.equals(mapOriginal.getState())) throw new HttpRpcException(ErrorConstant.ERROR_ILLEGAL_OBJECT_STATE, "map");
            if (!"download".equals(mapSource) && !"upload".equals(mapSource) && !"current".equals(mapSource)) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, "mapSource");
            try {
                mapOriginal.setSWLat(Double.parseDouble(south));
            } catch (Throwable t) {
                throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, "south");
            }
            try {
                mapOriginal.setSWLon(Double.parseDouble(west));
            } catch (Throwable t) {
                throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, "west");
            }
            try {
                mapOriginal.setNELat(Double.parseDouble(north));
            } catch (Throwable t) {
                throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, "north");
            }
            try {
                mapOriginal.setNELon(Double.parseDouble(east));
            } catch (Throwable t) {
                throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, "east");
            }
            mapOriginal.setState(UserMapOriginal.State.CALIBRATE);
            mapOriginal.setSubstate(UserMapOriginal.SubState.INPROC);
            final XFile mapStorage = new XFile(new XFile(Configuration.getInstance().getPrivateMapStorage().toString()), mapOriginal.getGuid());
            mapStorage.mkdir();
            if ("download".equals(mapSource)) {
                final XFile tmpFile;
                final URI uri = new URI(mapUrl);
                String query = (StringUtils.isEmpty(uri.getQuery())) ? "?BBOX=" : "&BBOX=";
                query += west + "," + south + "," + east + "," + north;
                URLConnection con = (new URL(mapUrl + query)).openConnection();
                if (con == null || con.getContentLength() == 0) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_RESOURCE, "mapUrl");
                if (!con.getContentType().startsWith("image/")) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT_TYPE, "mapUrl");
                tmpFile = new XFile(mapStorage, mapOriginal.getGuid());
                XFileOutputStream out = new XFileOutputStream(tmpFile);
                IOUtils.copy(con.getInputStream(), out);
                out.flush();
                out.close();
            } else if ("upload".equals(mapSource)) {
                final XFile tmpFile;
                final FileItem file = uploadFile.iterator().next();
                if (file == null || file.getSize() == 0) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_RESOURCE, "uploadFile");
                if (!file.getContentType().startsWith("image/")) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT_TYPE, "uploadFile");
                tmpFile = new XFile(mapStorage, mapOriginal.getGuid());
                XFileOutputStream out = new XFileOutputStream(tmpFile);
                IOUtils.copy(file.getInputStream(), out);
                out.flush();
                out.close();
            } else if ("current".equals(mapSource)) {
            }
            dao.update(mapOriginal);
            TransactionManager.commitTransaction();
            try {
                PoolClientInterface pool = PoolFactory.getInstance().getClientPool();
                if (pool == null) throw ErrorConstant.EXCEPTION_INTERNAL;
                pool.put(mapOriginal, new StatesStack(new byte[] { 0x00, 0x18 }), GeneralCompleteStrategy.class);
            } catch (Throwable t) {
                logger.error(t);
            }
            return "SUCCESS";
        } catch (HttpRpcException e) {
            TransactionManager.rollbackTransaction();
            logger.error(e);
            return "FAIL";
        } catch (Throwable e) {
            logger.error(e);
            TransactionManager.rollbackTransaction();
            return "FAIL";
        }
    }
} </s>
<s>class temp {    protected void initDefaultRolesFile() {
        String webConfigPath = System.getProperty("dcm4chee-web3.cfg.path", "conf/dcm4chee-web3");
        File mappingFile = new File(webConfigPath + "roles.json");
        if (!mappingFile.isAbsolute()) mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath());
        if (mappingFile.exists()) return;
        log.info("Init default Role Mapping file! mappingFile:" + mappingFile);
        if (mappingFile.getParentFile().mkdirs()) log.info("M-WRITE dir:" + mappingFile.getParent());
        FileChannel fos = null;
        InputStream is = null;
        try {
            URL url = getClass().getResource("/META-INF/roles-default.json");
            log.info("Use default Mapping File content of url:" + url);
            is = url.openStream();
            ReadableByteChannel inCh = Channels.newChannel(is);
            fos = new FileOutputStream(mappingFile).getChannel();
            int pos = 0;
            while (is.available() > 0) pos += fos.transferFrom(inCh, pos, is.available());
        } catch (Exception e) {
            log.error("Roles file doesn't exist and the default can't be created!", e);
        } finally {
            close(is);
            close(fos);
        }
    }
} </s>
<s>class temp {    public boolean ImportData() {
        if (fileData == null) {
            return false;
        }
        String line = new String();
        BufferedReader br;
        BufferedWriter bw;
        String tableName = new String();
        List<String> columns = new ArrayList<String>();
        long recordsNumber;
        String sql = new String();
        File tempDataFile;
        String filePath = new String();
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(fileData)));
            if (br.ready()) {
                if ((line = br.readLine()) != null) {
                    do {
                        tableName = siteName + "_" + getTableName(line);
                        columns = getTableColumns(line);
                        tempDataFile = new File("./Data/" + tableName + ".txt");
                        tempDataFile.createNewFile();
                        filePath = tempDataFile.getCanonicalPath();
                        sql = generateSQL(tableName, columns, filePath);
                        recordsNumber = getRecordNumber(line);
                        bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempDataFile)));
                        for (long i = 0; i < recordsNumber; i++) {
                            bw.write(br.readLine() + "\r\n");
                        }
                        bw.close();
                        if (sqlConnector != null) {
                            sqlConnector.executeSQL(sql);
                        } else {
                            return false;
                        }
                    } while ((line = br.readLine()) != null);
                }
                br.close();
            }
        } catch (Exception e) {
            ExceptionHandler.handleExcptin(e);
        }
        return true;
    }
} </s>
<s>class temp {    private Bitmap fetchImage(String urlstr) throws Exception {
        URL url;
        url = new URL(urlstr);
        HttpURLConnection c = (HttpURLConnection) url.openConnection();
        c.setDoInput(true);
        c.setRequestProperty("User-Agent", "Agent");
        c.connect();
        InputStream is = c.getInputStream();
        Bitmap img;
        img = BitmapFactory.decodeStream(is);
        return img;
    }
} </s>
<s>class temp {    private Response postRequest(String urlString, String params) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection uc = (HttpURLConnection) url.openConnection();
        uc.setDoInput(true);
        uc.setDoOutput(true);
        uc.setUseCaches(false);
        uc.setAllowUserInteraction(false);
        uc.setRequestMethod("POST");
        uc.setRequestProperty("ContentType", "application/x-www-form-urlencoded");
        uc.setRequestProperty("User-Agent", "CytoLinkFromMJ");
        if (cookie != null) uc.setRequestProperty("Cookie", cookie);
        PrintStream out = new PrintStream(uc.getOutputStream());
        out.print(params);
        out.flush();
        out.close();
        uc.connect();
        StringBuffer sb = new StringBuffer();
        String inputLine;
        BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
        while ((inputLine = in.readLine()) != null) {
            sb.append(inputLine + "\n");
        }
        in.close();
        Response res = new Response();
        res.content = sb.toString();
        res.contentType = uc.getHeaderField("Content-Type");
        res.cookie = uc.getHeaderField("Set-Cookie");
        return res;
    }
} </s>
<s>class temp {    void loadImage(final int runnumber, final String surl, final StatusCallback status) {
        Runnable run = new Runnable() {

            public void run() {
                try {
                    if (sync == SyncType.SyncSpaced || sync == SyncType.Spaced) {
                        Thread.sleep(spaceMillis);
                    }
                    URL url = new URL(surl + "&requestId=" + runnumber);
                    long t0 = System.currentTimeMillis();
                    InputStream in = url.openStream();
                    transfer(in, new FileOutputStream(new File(outputFolder, "" + runnumber + ".png")));
                    BufferedImage image = ImageIO.read(new File(outputFolder, "" + runnumber + ".png"));
                    status.score(runnumber, System.currentTimeMillis() - t0);
                    ImageIO.write(image, "png", new FileOutputStream(new File(outputFolder, "" + runnumber + ".png")));
                    if (false) {
                        int whiteCount = 0;
                        for (int i = 0; i < image.getWidth(); i++) {
                            for (int j = 0; j < image.getHeight(); j++) {
                                whiteCount += image.getRGB(i, j) == -1 ? 1 : 0;
                            }
                        }
                        System.err.println("##" + runnumber + "#: " + whiteCount);
                        if (whiteCount < 227564) {
                            System.err.println("whiteCount fails!!!!");
                            System.err.println("whiteCount fails!!!!");
                            System.exit(0);
                        }
                    }
                } catch (Exception ex) {
                    System.err.println("##" + runnumber + "#: Exception!!! ###");
                    ex.printStackTrace();
                    status.score(runnumber, -999);
                }
            }
        };
        if (sync == SyncType.SyncSpaced || sync == SyncType.Sync) {
            run.run();
        } else {
            new Thread(run).start();
        }
    }
} </s>
<s>class temp {            public void run() {
                try {
                    if (sync == SyncType.SyncSpaced || sync == SyncType.Spaced) {
                        Thread.sleep(spaceMillis);
                    }
                    URL url = new URL(surl + "&requestId=" + runnumber);
                    long t0 = System.currentTimeMillis();
                    InputStream in = url.openStream();
                    transfer(in, new FileOutputStream(new File(outputFolder, "" + runnumber + ".png")));
                    BufferedImage image = ImageIO.read(new File(outputFolder, "" + runnumber + ".png"));
                    status.score(runnumber, System.currentTimeMillis() - t0);
                    ImageIO.write(image, "png", new FileOutputStream(new File(outputFolder, "" + runnumber + ".png")));
                    if (false) {
                        int whiteCount = 0;
                        for (int i = 0; i < image.getWidth(); i++) {
                            for (int j = 0; j < image.getHeight(); j++) {
                                whiteCount += image.getRGB(i, j) == -1 ? 1 : 0;
                            }
                        }
                        System.err.println("##" + runnumber + "#: " + whiteCount);
                        if (whiteCount < 227564) {
                            System.err.println("whiteCount fails!!!!");
                            System.err.println("whiteCount fails!!!!");
                            System.exit(0);
                        }
                    }
                } catch (Exception ex) {
                    System.err.println("##" + runnumber + "#: Exception!!! ###");
                    ex.printStackTrace();
                    status.score(runnumber, -999);
                }
            }
} </s>
<s>class temp {    @SuppressWarnings("unused")
    private String getMD5(String value) {
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            return "";
        }
        md5.reset();
        md5.update(value.getBytes());
        byte[] messageDigest = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < messageDigest.length; i++) {
            hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
        }
        String hashedPassword = hexString.toString();
        return hashedPassword;
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Specify name of the file, just one entry per line");
            System.exit(0);
        }
        File inFile = new File(args[0]);
        BufferedReader myBR = null;
        File outFile = new File(args[0] + ".xml");
        BufferedWriter myBW = null;
        try {
            myBR = new BufferedReader(new FileReader(inFile));
            myBW = new BufferedWriter(new FileWriter(outFile));
        } catch (Exception ex) {
            System.out.println("IN: " + inFile.getAbsolutePath());
            System.out.println("OUT: " + outFile.getAbsolutePath());
            ex.printStackTrace();
            System.exit(0);
        }
        try {
            String readLine;
            while ((readLine = myBR.readLine()) != null) {
                myBW.write("<dbColumn name=\"" + readLine + "\" display=\"" + readLine + "\" panel=\"CENTER\"  >");
                myBW.write("\n");
                myBW.write("<dbType name=\"text\" maxVal=\"10\" defaultVal=\"\" sizeX=\"5\"/>");
                myBW.write("\n");
                myBW.write("</dbColumn>");
                myBW.write("\n");
            }
            myBW.close();
            myBR.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            System.exit(0);
        }
        System.out.println("OUT: " + outFile.getAbsolutePath());
        System.out.println("erzeugt");
    }
} </s>
<s>class temp {    protected URLConnection getConnection(String uri, String data) throws MalformedURLException, IOException {
        URL url = new URL(uri);
        URLConnection conn = url.openConnection();
        conn.setConnectTimeout((int) MINUTE / 2);
        conn.setReadTimeout((int) MINUTE / 2);
        return conn;
    }
} </s>
<s>class temp {    void acessResource(ClassLoader cl, String resource) throws IOException {
        URL url = cl.getResource(resource);
        if (url == null) {
            println("Ups can't find resource " + resource);
        } else {
            println("URL OK " + resource + " ->" + url);
            InputStream is = url.openStream();
            try {
                is.read();
            } finally {
                is.close();
            }
            println("Read OK " + resource + " ->" + url);
        }
    }
} </s>
<s>class temp {    void createAgentProgram(PrintStream ps, String agentName, String agentID) throws IOException, ConfigException {
        Agent agent = service.getAgent(agentName);
        File instanceDir = getInstanceDir();
        double agent_timeout_seconds = engine.getTimeout();
        String ii = "\"";
        String agentScript = "agent-" + agentName + ".py";
        String serviceScript = "service.py";
        Set<String> taskNames = agent.getTasks().keySet();
        File scriptDir = getService().getScriptDir();
        final boolean embedScripts = true;
        {
            ps.println("#!/bin/sh");
            ps.println("umask 0077");
        }
        for (String taskName : taskNames) {
            Task task = getService().getTask(taskName);
            String script = task.getScriptContent();
            if (embedScripts) {
                ps.println();
                ps.println("cat > " + task.getFile() + " << " + ii + "EOF_" + task.getFile() + ii);
                ps.println(script);
                ps.println("EOF_" + task.getFile());
            } else {
                File taskScriptFile = new File(instanceDir, task.getFile());
                PrintStream xs = new PrintStream(taskScriptFile);
                xs.print(script);
                xs.close();
            }
        }
        {
            PrintStream ss = null;
            if (embedScripts) {
                ps.println();
                ps.println("cat > " + serviceScript + " << " + ii + "EOF_" + serviceScript + ii);
                ss = ps;
            } else {
                File serviceScriptFile = new File(instanceDir, serviceScript);
                ss = new PrintStream(serviceScriptFile);
            }
            service.createServiceScript(ss);
            if (embedScripts) ps.println("EOF_" + serviceScript); else ss.close();
        }
        {
            URL url = new URL(engine.getAgentContextURL() + "/" + engine.getAgentURLPath());
            log.debug("url for agent = " + url.toExternalForm());
            PrintStream as = null;
            if (embedScripts) {
                ps.println();
                ps.println("cat > " + agentScript + " << " + ii + "EOF_" + agentScript + ii);
                as = ps;
            } else {
                File agentScriptFile = new File(instanceDir, agentScript);
                as = new PrintStream(agentScriptFile);
            }
            String tab[] = { "", "    ", "        ", "            ", "                ", "                    " };
            int i = 0;
            as.println(tab[i] + "from wrapper import ZSIWrapper");
            as.println(tab[i] + "from service import Service");
            as.println(tab[i] + "import threading");
            as.println(tab[i] + "from sys import exit");
            as.println();
            as.println(tab[i] + "URL=" + ii + url.toString() + ii);
            as.println(tab[i] + "agentID=" + ii + agentID + ii);
            as.println(tab[i] + "instanceID=" + instanceID);
            as.println(tab[i] + "instanceKey=" + ii + key + ii);
            as.println(tab[i] + "timeout=" + ii + agent_timeout_seconds + ii);
            as.println(tab[i] + "stop_flag=0");
            as.println(tab[i] + "kill_flag=0");
            as.println();
            as.println(tab[i] + "# Need extra port for each thread, " + "ZSIWrapper (actually ZSI) not thread save");
            as.println(tab[i] + "port0=ZSIWrapper(URL, agentID, instanceID, instanceKey, timeout)");
            as.println(tab[i] + "port0.setAgentStatus(" + Status.RUNNING.ordinal() + ")");
            as.println();
            as.println(tab[i] + "def create_namespace(service) :");
            as.println(tab[i] + "    " + ii + "create a namespace for injection " + "into a task script and returns it." + ii);
            as.println(tab[i] + "# first get most (not all) variables");
            as.print(tab[i] + "    arglist = [ ");
            int counter = 0;
            for (VarAttributes va : attributesMap.values()) {
                counter++;
                String varname = va.getName();
                if (Constants.VAR_STDOUT.equals(varname)) continue;
                VarTypeEnum vartype = va.getType();
                switch(vartype) {
                    case DOUBLE:
                    case STRING:
                    case LONG:
                    case BOOLEAN:
                    case CHOICE:
                        as.print(tab[i] + "    '" + varname + "'");
                        if (counter != attributesMap.size()) as.println(",\\");
                        break;
                    case FILES:
                        break;
                    default:
                        throw new RuntimeException("unkown data type in switch");
                }
            }
            as.println("]");
            as.println(tab[i] + "    vars=port0.getManyVars(arglist)");
            as.println(tab[i] + "    namesp = vars ");
            as.println(tab[i] + "    namesp[ 'service' ] = service ");
            as.println(tab[i] + "    return namesp");
            as.println();
            for (String taskName : taskNames) {
                Task task = getService().getTask(taskName);
                boolean background = task.isBackground();
                as.println(tab[i] + "def task_" + taskName + "():");
                {
                    i++;
                    as.println(tab[i] + "try :");
                    if (background) {
                        as.println(tab[i] + "    # as ZSIWrapper is not task save," + " create a new one");
                        as.println(tab[i] + "    port_task=ZSIWrapper(URL, agentID, " + "instanceID, instanceKey, timeout)");
                        as.println(tab[i] + "    service = Service(port_task)");
                    } else {
                        as.println(tab[i] + "    # this is foreground, " + "use port0 from current task");
                        as.println(tab[i] + "    service = Service(port0)");
                    }
                    as.println(tab[i] + "    globals = create_namespace(service)");
                    as.println(tab[i] + "    locals = { }");
                    as.println(tab[i] + "    execfile('" + task.getFile() + "', globals, locals )");
                    as.println(tab[i] + "except :");
                    as.println(tab[i] + "    port0.setTaskStatus('" + taskName + "', " + Status.FAILED.ordinal() + " )");
                    as.println(tab[i] + "else :");
                    as.println(tab[i] + "    if kill_flag :");
                    as.println(tab[i] + "        task_exit_status = " + Status.FAILED.ordinal());
                    as.println(tab[i] + "    elif stop_flag :");
                    as.println(tab[i] + "        task_exit_status = " + Status.TERMINATED.ordinal());
                    as.println(tab[i] + "    else :");
                    as.println(tab[i] + "        task_exit_status = " + Status.FINISHED.ordinal());
                    as.println(tab[i] + "    port0.setTaskStatus('" + taskName + "', task_exit_status )");
                    as.println();
                    i--;
                }
            }
            as.println(tab[i] + "try:");
            i++;
            as.println(tab[i] + "tasklist = []");
            as.println(tab[i] + "action=None");
            as.println(tab[i] + "while action != '" + Agent.STOP + "' and action != '" + Agent.KILL + "' and action != '" + Agent.FINISH + "' :");
            {
                i++;
                as.println(tab[i] + "# print 'ACTION=', action");
                as.println(tab[i] + "action = port0.getAction()");
                as.println(tab[i] + "");
                as.println(tab[i] + "# cleanup tasklist (only to save memory)");
                as.println(tab[i] + "# In two cycles, don't change list during iter.");
                as.println(tab[i] + "to_be_removed = []");
                as.println(tab[i] + "for tr2 in tasklist:");
                as.println(tab[i] + "    if (not tr2.isAlive()):");
                as.println(tab[i] + "        to_be_removed.append(tr2)");
                as.println(tab[i] + "for tr3 in to_be_removed:");
                as.println(tab[i] + "    # print 'old task removed: ',tr3.getName()");
                as.println(tab[i] + "    tasklist.remove(tr3)");
                as.println(tab[i] + "");
                as.println(tab[i] + "if action == None :");
                as.println(tab[i] + "    # print 'processing None'");
                as.println(tab[i] + "    None");
                as.println(tab[i] + "if action == '" + Agent.FINISH + "' :");
                as.println(tab[i] + "    # print 'processing FINISH'");
                as.println(tab[i] + "    None");
                as.println(tab[i] + "elif action == '" + Agent.STOP + "' :");
                as.println(tab[i] + "    stop_flag=1");
                as.println(tab[i] + "    # print 'processing STOP'");
                String onStop = agent.onStop;
                if (onStop != null) {
                    String function = "task_" + onStop;
                    as.println(tab[i] + "    " + function + "()");
                }
                as.println(tab[i] + "");
                as.println(tab[i] + "elif action == '" + Agent.KILL + "' :");
                as.println(tab[i] + "    kill_flag=1");
                as.println(tab[i] + "    # print 'processing KILL'");
                String onKill = agent.onKill;
                if (onKill != null) {
                    String function = "task_" + onKill;
                    as.println(tab[i] + "    " + function + "()");
                }
                as.println(tab[i] + "    # This would be the place " + "to kill external programs");
                as.println(tab[i] + "    port0.setAgentStatus(" + Status.FAILED.ordinal() + ")");
                as.println(tab[i] + "    # exit without waiting for bg threads");
                as.println(tab[i] + "    exit(13)");
                as.println(tab[i] + "");
                for (String taskName : taskNames) {
                    Task task = getService().getTask(taskName);
                    boolean background = task.isBackground();
                    as.println(tab[i] + "elif action == '" + Agent.TASK + taskName + "':");
                    String function = "task_" + taskName;
                    if (background) {
                        as.println(tab[i] + "    # create, register and start task");
                        as.println(tab[i] + "    t = threading.Thread(target=" + function + ", name='" + function + "')");
                        as.println(tab[i] + "    tasklist.append(t)");
                        as.println(tab[i] + "    t.start()");
                    } else {
                        as.println(tab[i] + "    " + function + "()");
                    }
                }
                as.println(tab[i] + "else :");
                as.println(tab[i] + "    print 'undefined case in agent script iov0j23fds, " + "action=', action");
                i--;
            }
            as.println();
            as.println(tab[i] + "# wait for running background tasks");
            as.println(tab[i] + "# print 'remaining threads (inclides demonic ones!):'" + ", threading.activeCount()");
            as.println(tab[i] + "# for tr in threading.enumerate():");
            as.println(tab[i] + "#    print 'remaining thread: '," + " tr.getName()");
            as.println(tab[i] + "for tr2 in tasklist:");
            as.println(tab[i] + "    # print 'joining with ',tr2.getName()");
            as.println(tab[i] + "    tr2.join()");
            i--;
            as.println(tab[i] + "# Set agent status");
            as.println(tab[i] + "except :");
            as.println(tab[i] + "    port0.setAgentStatus(" + Status.FAILED.ordinal() + ")");
            as.println(tab[i] + "else :");
            as.println(tab[i] + "    if kill_flag :");
            as.println(tab[i] + "        agent_exit_status = " + Status.FAILED.ordinal());
            as.println(tab[i] + "    elif stop_flag :");
            as.println(tab[i] + "        agent_exit_status = " + Status.TERMINATED.ordinal());
            as.println(tab[i] + "    else :");
            as.println(tab[i] + "        agent_exit_status = " + Status.FINISHED.ordinal());
            as.println(tab[i] + "    port0.setAgentStatus( agent_exit_status )");
            if (embedScripts) ps.println("EOF_" + agentScript); else as.close();
        }
        for (String agentFileName : agent.getFilesSet()) {
            ps.println();
            File agentRelFile = new File(agentFileName);
            File directory = agentRelFile.getParentFile();
            if (directory != null) {
                ps.println("mkdir -p " + directory.getPath());
            }
            ps.println("cat > " + agentFileName + " << " + ii + "EOF_" + agentFileName + ii);
            File file = new File(scriptDir, agentFileName);
            byte bytes[] = FileUtils.readFileToByteArray(file);
            ps.write(bytes);
            ps.println();
            ps.println("EOF_" + agentFileName);
        }
        if (embedScripts) {
            ps.println("SKIP=`awk '/^__ARCHIVE_FOLLOWS__/ { print NR + 1; exit 0; }' $0`");
            ps.println("tail -n +$SKIP $0 | gzip -dc | tar x ");
            ps.println("python -u " + agentScript);
            ps.println("exit 0");
            ps.println("__ARCHIVE_FOLLOWS__");
            java.io.InputStream istream = this.getClass().getClassLoader().getResourceAsStream("sc/fgrid/agent.tar.gz");
            IOUtils.copy(istream, ps);
        } else {
            String pypath = engine.getAgentPythonPath();
            ps.println("export PYTHONPATH=" + ii + pypath + ii);
            ps.println("python -u " + agentScript);
            ps.println("exit 0");
        }
    }
} </s>
<s>class temp {    private List<String[]> retrieveData(String query) {
        List<String[]> data = new Vector<String[]>();
        query = query.replaceAll("\\s", "+");
        String q = "http://www.uniprot.org/uniprot/?query=" + query + "&format=tab&columns=id,protein%20names,organism";
        try {
            URL url = new URL(q);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = "";
            reader.readLine();
            while ((line = reader.readLine()) != null) {
                String[] st = line.split("\t");
                String[] d = new String[] { st[0], st[1], st[2] };
                data.add(d);
            }
            reader.close();
            if (data.size() == 0) {
                JOptionPane.showMessageDialog(this, "No data found for query");
            }
        } catch (MalformedURLException e) {
            System.err.println("Query " + q + " caused exception: ");
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Query " + q + " caused exception: ");
            e.printStackTrace();
        }
        return data;
    }
} </s>
<s>class temp {    public void add(Site site) throws Exception {
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            String sqlStr = "insert into t_ip_site (id,name,description,ascii_name,site_path,remark_number,increment_index,use_status,appserver_id) VALUES(?,?,?,?,?,?,?,?,?)";
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            preparedStatement = connection.prepareStatement(sqlStr);
            preparedStatement.setInt(1, site.getSiteID());
            preparedStatement.setString(2, site.getName());
            preparedStatement.setString(3, site.getDescription());
            preparedStatement.setString(4, site.getAsciiName());
            preparedStatement.setString(5, site.getPath());
            preparedStatement.setInt(6, site.getRemarkNumber());
            preparedStatement.setString(7, site.getIncrementIndex().trim());
            preparedStatement.setString(8, String.valueOf(site.getUseStatus()));
            preparedStatement.setString(9, String.valueOf(site.getAppserverID()));
            preparedStatement.executeUpdate();
            String[] path = new String[1];
            path[0] = site.getPath();
            selfDefineAdd(path, site, connection, preparedStatement);
            connection.commit();
            int resID = site.getSiteID() + Const.SITE_TYPE_RES;
            String resName = site.getName();
            int resTypeID = Const.RES_TYPE_ID;
            int operateTypeID = Const.OPERATE_TYPE_ID;
            String remark = "";
            AuthorityManager am = new AuthorityManager();
            am.createExtResource(Integer.toString(resID), resName, resTypeID, operateTypeID, remark);
            site.wirteFile();
        } catch (SQLException ex) {
            connection.rollback();
            log.error("    վ  ʧ  !", ex);
            throw ex;
        } finally {
            close(resultSet, null, preparedStatement, connection, dbo);
        }
    }
} </s>
<s>class temp {    public void delete(Site site) throws Exception {
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            String chkSql = "select id from t_ip_doc where channel_path=?";
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            String[] selfDefinePath = getSelfDefinePath(site.getPath(), "1", connection, preparedStatement, resultSet);
            selfDefineDelete(selfDefinePath, connection, preparedStatement);
            preparedStatement = connection.prepareStatement(chkSql);
            preparedStatement.setString(1, site.getPath());
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                throw new Exception("ɾ  ʧ ܣ " + site.getName() + "   Ѿ    ĵ    ڣ ");
            } else {
                String sqlStr = "delete from t_ip_site where site_path=?";
                dbo = createDBOperation();
                connection = dbo.getConnection();
                preparedStatement = connection.prepareStatement(sqlStr);
                preparedStatement.setString(1, site.getPath());
                preparedStatement.executeUpdate();
            }
            connection.commit();
        } catch (SQLException ex) {
            connection.rollback();
            throw ex;
        } finally {
            close(resultSet, null, preparedStatement, connection, dbo);
        }
    }
} </s>
<s>class temp {    public void update(Site site) throws Exception {
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String exp = site.getExtendParent();
        String path = site.getPath();
        try {
            String sqlStr = "update t_ip_site set id=?,name=?,description=?,ascii_name=?,remark_number=?,increment_index=?,use_status=?,appserver_id=? where id=?";
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            String[] selfDefinePath = getSelfDefinePath(path, exp, connection, preparedStatement, resultSet);
            selfDefineDelete(selfDefinePath, connection, preparedStatement);
            selfDefineAdd(selfDefinePath, site, connection, preparedStatement);
            preparedStatement = connection.prepareStatement(sqlStr);
            preparedStatement.setInt(1, site.getSiteID());
            preparedStatement.setString(2, site.getName());
            preparedStatement.setString(3, site.getDescription());
            preparedStatement.setString(4, site.getAsciiName());
            preparedStatement.setInt(5, site.getRemarkNumber());
            preparedStatement.setString(6, site.getIncrementIndex().trim());
            preparedStatement.setString(7, String.valueOf(site.getUseStatus()));
            preparedStatement.setString(8, String.valueOf(site.getAppserverID()));
            preparedStatement.setInt(9, site.getSiteID());
            preparedStatement.executeUpdate();
            connection.commit();
            int resID = site.getSiteID() + Const.SITE_TYPE_RES;
            StructResource sr = new StructResource();
            sr.setResourceID(Integer.toString(resID));
            sr.setOperateID(Integer.toString(1));
            sr.setOperateTypeID(Const.OPERATE_TYPE_ID);
            sr.setTypeID(Const.RES_TYPE_ID);
            StructAuth sa = new AuthorityManager().getExternalAuthority(sr);
            int authID = sa.getAuthID();
            if (authID == 0) {
                String resName = site.getName();
                int resTypeID = Const.RES_TYPE_ID;
                int operateTypeID = Const.OPERATE_TYPE_ID;
                String remark = "";
                AuthorityManager am = new AuthorityManager();
                am.createExtResource(Integer.toString(resID), resName, resTypeID, operateTypeID, remark);
            }
            site.wirteFile();
        } catch (SQLException ex) {
            connection.rollback();
            log.error("    վ      ʧ  !", ex);
            throw ex;
        } finally {
            close(resultSet, null, preparedStatement, connection, dbo);
        }
    }
} </s>
<s>class temp {    public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception {
        {
            String sep = System.getProperty("file.separator");
            String folders = to.getPath();
            String path = "";
            for (int i = 0; i < folders.length(); i++) {
                path += folders.charAt(i);
                if (path.endsWith(sep)) {
                    File f = new File(path);
                    if (!f.exists()) f.mkdir();
                    if (!f.isDirectory()) {
                        Out.error(URLDownloader.class, path + " is not a directory!");
                        return;
                    }
                }
            }
        }
        Out.info(URLDownloader.class, "Downloading " + url.toExternalForm());
        URLConnection uc = url.openConnection();
        DataInputStream is = new DataInputStream(new BufferedInputStream(uc.getInputStream()));
        FileOutputStream os = new FileOutputStream(to);
        byte[] b = new byte[1024];
        int fileLength = uc.getHeaderFieldInt("Content-Length", 0) / b.length;
        Task task = null;
        if (fileLength > 0) task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB");
        do {
            int c = is.read(b);
            if (c == -1) break;
            os.write(b, 0, c);
            if (task != null) task.advanceProgress();
        } while (true);
        if (task != null) task.complete();
        os.close();
        is.close();
    }
} </s>
<s>class temp {    public String encrypt(String password) {
        if (password.length() == 40) {
            return password;
        }
        if (salt != null) {
            password = password + salt;
        }
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA1");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalArgumentException(e.getMessage(), e);
        }
        messageDigest.reset();
        messageDigest.update(password.getBytes());
        final byte[] bytes = messageDigest.digest();
        String encrypted = new BigInteger(1, bytes).toString(16);
        if (encrypted.length() < 40) {
            final StringBuilder builder = new StringBuilder(encrypted);
            while (builder.length() < 40) {
                builder.insert(0, '0');
            }
            encrypted = builder.toString();
        }
        return encrypted;
    }
} </s>
<s>class temp {    @Test
    public void testWriteAndRead() throws Exception {
        JCFS.configureLoopback(dir);
        RFile file = new RFile("testreadwrite.txt");
        RFileOutputStream out = new RFileOutputStream(file);
        out.write("test".getBytes("utf-8"));
        out.close();
        RFileInputStream in = new RFileInputStream(file);
        byte[] buffer = new byte[4];
        int readCount = in.read(buffer);
        in.close();
        assertEquals(4, readCount);
        String resultRead = new String(buffer, "utf-8");
        assertEquals("test", resultRead);
    }
} </s>
<s>class temp {    public static String encriptaSenha(String string) throws ApplicationException {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(string.getBytes());
            BASE64Encoder encoder = new BASE64Encoder();
            return encoder.encode(digest.digest());
        } catch (NoSuchAlgorithmException ns) {
            ns.printStackTrace();
            throw new ApplicationException("Erro ao Encriptar Senha");
        }
    }
} </s>
<s>class temp {    private void download(String address, String localFileName) throws UrlNotFoundException, Exception {
        String ext = G_File.getExtensao(address);
        if (ext.equals("jsp")) {
            throw new Exception("Erro ao baixar pagina JSP, tipo negado." + address);
        }
        File temp = new File(localFileName + ".tmp");
        if (temp.exists()) temp.delete();
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            try {
                URL url = new URL(address);
                conn = url.openConnection();
                in = conn.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            out = new BufferedOutputStream(new FileOutputStream(temp));
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldArq = new File(localFileName);
        if (oldArq.exists()) {
            oldArq.delete();
        }
        oldArq = null;
        File nomeFinal = new File(localFileName);
        temp.renameTo(nomeFinal);
    }
} </s>
<s>class temp {    private int[] sort(int n) {
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        boolean t = true;
        int tmp = 0;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    tmp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = tmp;
                    t = true;
                }
            }
        }
        return mas;
    }
} </s>
<s>class temp {    public boolean Load_Clickable_Peaks_Source_File(String tam) {
        if (tam == null) return false;
        try {
            URL url = new URL(getDocumentBase(), tam);
            InputStream stream = url.openStream();
            DataInputStream fichier = new DataInputStream(stream);
            texte = new Vector();
            String s;
            while ((s = fichier.readLine()) != null) {
                texte.addElement(s);
            }
            My_ZoneVisu.Nb_Clickable_Peaks = texte.size();
        } catch (Exception e) {
            return false;
        }
        My_ZoneVisu.Peak_Start = new double[My_ZoneVisu.Nb_Clickable_Peaks];
        My_ZoneVisu.Peak_Stop = new double[My_ZoneVisu.Nb_Clickable_Peaks];
        My_ZoneVisu.Peak_Html = new String[My_ZoneVisu.Nb_Clickable_Peaks];
        int cpt_tokens = 0;
        int i = 0;
        StringTokenizer mon_token;
        while (cpt_tokens < My_ZoneVisu.Nb_Clickable_Peaks) {
            do {
                String mysub = (String) texte.elementAt(cpt_tokens);
                mon_token = new StringTokenizer(mysub, " ");
                cpt_tokens++;
            } while (cpt_tokens < My_ZoneVisu.Nb_Clickable_Peaks && mon_token.hasMoreTokens() == false);
            if (mon_token.hasMoreTokens() == true) {
                My_ZoneVisu.Peak_Start[i] = Double.valueOf(mon_token.nextToken()).doubleValue();
                My_ZoneVisu.Peak_Stop[i] = Double.valueOf(mon_token.nextToken()).doubleValue();
                if (My_ZoneVisu.Peak_Start[i] > My_ZoneVisu.Peak_Stop[i]) {
                    double temp = My_ZoneVisu.Peak_Start[i];
                    My_ZoneVisu.Peak_Start[i] = My_ZoneVisu.Peak_Stop[i];
                    My_ZoneVisu.Peak_Stop[i] = temp;
                }
                My_ZoneVisu.Peak_Html[i] = (String) mon_token.nextToken();
            }
            i++;
        }
        return true;
    }
} </s>
<s>class temp {    public boolean initFile(String filename) {
        showStatus("Loading the file, please wait...");
        x_units = "?";
        y_units = "ARBITRARY";
        Datatype = "UNKNOWN";
        if (filename.toLowerCase().endsWith(".spc")) {
            try {
                URL url = new URL(getDocumentBase(), filename);
                InputStream stream = url.openStream();
                DataInputStream fichier = new DataInputStream(stream);
                byte ftflgs = fichier.readByte();
                byte fversn = fichier.readByte();
                if (((ftflgs != 0) && (ftflgs != 0x20)) || (fversn != 0x4B)) {
                    Current_Error = ", support only Evenly Spaced new version 4B";
                    return false;
                }
                byte fexp = fichier.readByte();
                if (fexp != 0x80) YFactor = Math.pow(2, fexp) / Math.pow(2, 32);
                Nbpoints = NumericDataUtils.convToIntelInt(fichier.readInt());
                if (Firstx == shitty_starting_constant) {
                    Firstx = NumericDataUtils.convToIntelDouble(fichier.readLong());
                    Lastx = NumericDataUtils.convToIntelDouble(fichier.readLong());
                }
                byte fxtype = fichier.readByte();
                switch(fxtype) {
                    case 0:
                        x_units = "Arbitrary";
                        break;
                    case 1:
                        x_units = "Wavenumber (cm -1)";
                        break;
                    case 2:
                        x_units = "Micrometers";
                        break;
                    case 3:
                        x_units = "Nanometers";
                        break;
                    case 4:
                        x_units = "Seconds";
                        break;
                    case 5:
                        x_units = "Minuts";
                        break;
                    case 6:
                        x_units = "Hertz";
                        break;
                    case 7:
                        x_units = "Kilohertz";
                        break;
                    case 8:
                        x_units = "Megahertz";
                        break;
                    case 9:
                        x_units = "Mass (M/z)";
                        break;
                    case 10:
                        x_units = "Parts per million";
                        break;
                    case 11:
                        x_units = "Days";
                        break;
                    case 12:
                        x_units = "Years";
                        break;
                    case 13:
                        x_units = "Raman Shift (cm -1)";
                        break;
                    case 14:
                        x_units = "Electron Volt (eV)";
                        break;
                    case 16:
                        x_units = "Diode Number";
                        break;
                    case 17:
                        x_units = "Channel";
                        break;
                    case 18:
                        x_units = "Degrees";
                        break;
                    case 19:
                        x_units = "Temperature (F)";
                        break;
                    case 20:
                        x_units = "Temperature (C)";
                        break;
                    case 21:
                        x_units = "Temperature (K)";
                        break;
                    case 22:
                        x_units = "Data Points";
                        break;
                    case 23:
                        x_units = "Milliseconds (mSec)";
                        break;
                    case 24:
                        x_units = "Microseconds (uSec)";
                        break;
                    case 25:
                        x_units = "Nanoseconds (nSec)";
                        break;
                    case 26:
                        x_units = "Gigahertz (GHz)";
                        break;
                    case 27:
                        x_units = "Centimeters (cm)";
                        break;
                    case 28:
                        x_units = "Meters (m)";
                        break;
                    case 29:
                        x_units = "Millimeters (mm)";
                        break;
                    case 30:
                        x_units = "Hours";
                        break;
                    case -1:
                        x_units = "(double interferogram)";
                        break;
                }
                byte fytype = fichier.readByte();
                switch(fytype) {
                    case 0:
                        y_units = "Arbitrary Intensity";
                        break;
                    case 1:
                        y_units = "Interfeogram";
                        break;
                    case 2:
                        y_units = "Absorbance";
                        break;
                    case 3:
                        y_units = "Kubelka-Munk";
                        break;
                    case 4:
                        y_units = "Counts";
                        break;
                    case 5:
                        y_units = "Volts";
                        break;
                    case 6:
                        y_units = "Degrees";
                        break;
                    case 7:
                        y_units = "Milliamps";
                        break;
                    case 8:
                        y_units = "Millimeters";
                        break;
                    case 9:
                        y_units = "Millivolts";
                        break;
                    case 10:
                        y_units = "Log (1/R)";
                        break;
                    case 11:
                        y_units = "Percent";
                        break;
                    case 12:
                        y_units = "Intensity";
                        break;
                    case 13:
                        y_units = "Relative Intensity";
                        break;
                    case 14:
                        y_units = "Energy";
                        break;
                    case 16:
                        y_units = "Decibel";
                        break;
                    case 19:
                        y_units = "Temperature (F)";
                        break;
                    case 20:
                        y_units = "Temperature (C)";
                        break;
                    case 21:
                        y_units = "Temperature (K)";
                        break;
                    case 22:
                        y_units = "Index of Refraction [N]";
                        break;
                    case 23:
                        y_units = "Extinction Coeff. [K]";
                        break;
                    case 24:
                        y_units = "Real";
                        break;
                    case 25:
                        y_units = "Imaginary";
                        break;
                    case 26:
                        y_units = "Complex";
                        break;
                    case -128:
                        y_units = "Transmission";
                        break;
                    case -127:
                        y_units = "Reflectance";
                        break;
                    case -126:
                        y_units = "Arbitrary or Single Beam with Valley Peaks";
                        break;
                    case -125:
                        y_units = "Emission";
                        break;
                }
                if (ftflgs == 0) {
                    fichier.skipBytes(512 - 30);
                } else {
                    fichier.skipBytes(188);
                    byte b;
                    int i = 0;
                    x_units = "";
                    do {
                        b = fichier.readByte();
                        x_units += (char) b;
                        i++;
                    } while (b != 0);
                    int j = 0;
                    y_units = "";
                    do {
                        b = fichier.readByte();
                        y_units += (char) b;
                        j++;
                    } while (b != 0);
                    fichier.skipBytes(512 - 30 - 188 - i - j);
                }
                fichier.skipBytes(32);
                My_ZoneVisu.tableau_points = new double[Nbpoints];
                if (fexp == 0x80) {
                    for (int i = 0; i < Nbpoints; i++) {
                        My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelFloat(fichier.readInt());
                    }
                } else {
                    for (int i = 0; i < Nbpoints; i++) {
                        My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelInt(fichier.readInt());
                    }
                }
            } catch (Exception e) {
                Current_Error = "SPC file corrupted";
                return false;
            }
            Datatype = "XYDATA";
            return true;
        }
        try {
            URL url = new URL(getDocumentBase(), filename);
            InputStream stream = url.openStream();
            BufferedReader fichier = new BufferedReader(new InputStreamReader(stream));
            texte = new Vector();
            String s;
            while ((s = fichier.readLine()) != null) {
                texte.addElement(s);
            }
            nbLignes = texte.size();
        } catch (Exception e) {
            return false;
        }
        int My_Counter = 0;
        String uneligne = "";
        while (My_Counter < nbLignes) {
            try {
                StringTokenizer mon_token;
                do {
                    uneligne = (String) texte.elementAt(My_Counter);
                    My_Counter++;
                    mon_token = new StringTokenizer(uneligne, " ");
                } while (My_Counter < nbLignes && mon_token.hasMoreTokens() == false);
                if (mon_token.hasMoreTokens() == true) {
                    String keyword = mon_token.nextToken();
                    if (StringDataUtils.compareStrings(keyword, "##TITLE=") == 0) TexteTitre = uneligne.substring(9);
                    if (StringDataUtils.compareStrings(keyword, "##FIRSTX=") == 0) Firstx = Double.valueOf(mon_token.nextToken()).doubleValue();
                    if (StringDataUtils.compareStrings(keyword, "##LASTX=") == 0) Lastx = Double.valueOf(mon_token.nextToken()).doubleValue();
                    if (StringDataUtils.compareStrings(keyword, "##YFACTOR=") == 0) YFactor = Double.valueOf(mon_token.nextToken()).doubleValue();
                    if (StringDataUtils.compareStrings(keyword, "##NPOINTS=") == 0) Nbpoints = Integer.valueOf(mon_token.nextToken()).intValue();
                    if (StringDataUtils.compareStrings(keyword, "##XUNITS=") == 0) x_units = uneligne.substring(10);
                    if (StringDataUtils.compareStrings(keyword, "##YUNITS=") == 0) y_units = uneligne.substring(10);
                    if (StringDataUtils.compareStrings(keyword, "##.OBSERVE") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "FREQUENCY=") == 0) nmr_observe_frequency = Double.valueOf(mon_token.nextToken()).doubleValue();
                    if (StringDataUtils.compareStrings(keyword, "##XYDATA=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(X++(Y..Y))") == 0) Datatype = "XYDATA";
                    if (StringDataUtils.compareStrings(keyword, "##XYDATA=(X++(Y..Y))") == 0) Datatype = "XYDATA";
                    if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(XY..XY)") == 0) Datatype = "PEAK TABLE";
                    if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=(XY..XY)") == 0) Datatype = "PEAK TABLE";
                }
            } catch (Exception e) {
            }
        }
        if (Datatype.compareTo("UNKNOWN") == 0) return false;
        if (Datatype.compareTo("PEAK TABLE") == 0 && x_units.compareTo("?") == 0) x_units = "M/Z";
        if (StringDataUtils.truncateEndBlanks(x_units).compareTo("HZ") == 0 && nmr_observe_frequency != shitty_starting_constant) {
            Firstx /= nmr_observe_frequency;
            Lastx /= nmr_observe_frequency;
            x_units = "PPM.";
        }
        String resultat_move_points = Move_Points_To_Tableau();
        if (resultat_move_points.compareTo("OK") != 0) {
            Current_Error = resultat_move_points;
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    public static String email_get_public_hash(String email) {
        try {
            if (email != null) {
                email = email.trim().toLowerCase();
                CRC32 crc32 = new CRC32();
                crc32.reset();
                crc32.update(email.getBytes());
                MessageDigest md5 = MessageDigest.getInstance("MD5");
                md5.reset();
                return crc32.getValue() + " " + new String(md5.digest(email.getBytes()));
            }
        } catch (Exception e) {
        }
        return "";
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        File container = new File(ArchiveFeature.class.getProtectionDomain().getCodeSource().getLocation().toURI());
        if (container == null) {
            throw new RuntimeException("this use-case isn't being invoked from the executable jar");
        }
        JarFile jarFile = new JarFile(container);
        String artifactName = PROJECT_DIST_ARCHIVE + ".tar.gz";
        File artifactFile = new File(".", artifactName);
        ZipEntry artifactEntry = jarFile.getEntry(artifactName);
        InputStream source = jarFile.getInputStream(artifactEntry);
        try {
            FileOutputStream dest = new FileOutputStream(artifactFile);
            try {
                IOUtils.copy(source, dest);
            } finally {
                IOUtils.closeQuietly(dest);
            }
        } finally {
            IOUtils.closeQuietly(source);
        }
        Project project = new Project();
        project.setName("project");
        project.init();
        Target target = new Target();
        target.setName("target");
        project.addTarget(target);
        project.addBuildListener(new Log4jListener());
        Untar untar = new Untar();
        untar.setTaskName("untar");
        untar.setSrc(artifactFile);
        untar.setDest(new File("."));
        Untar.UntarCompressionMethod method = new Untar.UntarCompressionMethod();
        method.setValue("gzip");
        untar.setCompression(method);
        untar.setProject(project);
        untar.setOwningTarget(target);
        target.addTask(untar);
        untar.execute();
    }
} </s>
<s>class temp {    public static String encodeMD5(String s) throws NoSuchAlgorithmException {
        MessageDigest m = null;
        String result = null;
        m = MessageDigest.getInstance("MD5");
        m.update(s.getBytes(), 0, s.length());
        result = new BigInteger(1, m.digest()).toString(16);
        if (result.length() == 31) {
            result = "0" + result;
        }
        return result;
    }
} </s>
<s>class temp {    private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
            File selectedFile = documentFileChooser.getSelectedFile();
            File collectionCopyFile;
            String newDocumentName = selectedFile.getName();
            Document newDocument = new Document(newDocumentName);
            if (activeCollection.containsDocument(newDocument)) {
                int matchingFilenameDistinguisher = 1;
                StringBuilder distinguisherReplacer = new StringBuilder();
                newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")");
                newDocument.setDocumentName(newDocumentName);
                while (activeCollection.containsDocument(newDocument)) {
                    matchingFilenameDistinguisher++;
                    newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();
                    newDocument.setDocumentName(newDocumentName);
                }
            }
            Scanner tokenizer = null;
            FileChannel fileSource = null;
            FileChannel collectionDestination = null;
            HashMap<String, Integer> termHashMap = new HashMap<String, Integer>();
            Index collectionIndex = activeCollection.getIndex();
            int documentTermMaxFrequency = 0;
            int currentTermFrequency;
            try {
                tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));
                tokenizer.useDelimiter(Pattern.compile("\\p{Space}|\\p{Punct}|\\p{Cntrl}"));
                String nextToken;
                while (tokenizer.hasNext()) {
                    nextToken = tokenizer.next().toLowerCase();
                    if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);
                }
                Term newTerm;
                for (String term : termHashMap.keySet()) {
                    newTerm = new Term(term);
                    if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);
                    currentTermFrequency = termHashMap.get(term);
                    if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;
                    collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency);
                }
                activeCollection.addDocument(newDocument);
                String userHome = System.getProperty("user.home");
                String fileSeparator = System.getProperty("file.separator");
                collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);
                collectionCopyFile.createNewFile();
                fileSource = new FileInputStream(selectedFile).getChannel();
                collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();
                collectionDestination.transferFrom(fileSource, 0, fileSource.size());
            } catch (FileNotFoundException e) {
                System.err.println(e.getMessage() + " This error should never occur! The file was just selected!");
                return;
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "An I/O error occured during file transfer!", "File transfer I/O error", JOptionPane.WARNING_MESSAGE);
                return;
            } finally {
                try {
                    if (tokenizer != null) tokenizer.close();
                    if (fileSource != null) fileSource.close();
                    if (collectionDestination != null) collectionDestination.close();
                } catch (IOException e) {
                    System.err.println(e.getMessage());
                }
            }
            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
} </s>
<s>class temp {    private boolean copyFile(BackupItem item) {
        try {
            FileChannel src = new FileInputStream(item.getDrive() + ":" + item.getPath()).getChannel();
            createFolderStructure(this.task.getDestinationPath() + "\\" + item.getDrive() + item.getPath());
            FileChannel dest = new FileOutputStream(this.task.getDestinationPath() + "\\" + item.getDrive() + item.getPath()).getChannel();
            dest.transferFrom(src, 0, src.size());
            src.close();
            dest.close();
            Logging.logMessage("file " + item.getDrive() + ":" + item.getPath() + " was backuped");
            return true;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) sourceChannel.close();
            if (destinationChannel != null) destinationChannel.close();
        }
    }
} </s>
<s>class temp {    public static void copyFile(final String src, final String dest) {
        Runnable r1 = new Runnable() {

            public void run() {
                try {
                    File inf = new File(dest);
                    if (!inf.exists()) {
                        inf.getParentFile().mkdirs();
                    }
                    FileChannel in = new FileInputStream(src).getChannel();
                    FileChannel out = new FileOutputStream(dest).getChannel();
                    out.transferFrom(in, 0, in.size());
                    in.close();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.err.println("Error copying file \n" + src + "\n" + dest);
                }
            }
        };
        Thread cFile = new Thread(r1, "copyFile");
        cFile.start();
    }
} </s>
<s>class temp {            public void run() {
                try {
                    File inf = new File(dest);
                    if (!inf.exists()) {
                        inf.getParentFile().mkdirs();
                    }
                    FileChannel in = new FileInputStream(src).getChannel();
                    FileChannel out = new FileOutputStream(dest).getChannel();
                    out.transferFrom(in, 0, in.size());
                    in.close();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.err.println("Error copying file \n" + src + "\n" + dest);
                }
            }
} </s>
<s>class temp {    public static synchronized String getMD5_Base64(final String input) {
        if (isInited == false) {
            isInited = true;
            try {
                digest = MessageDigest.getInstance("MD5");
            } catch (Exception ex) {
                logger.error("Cannot get MessageDigest. Application may fail to run correctly.", ex);
            }
        }
        if (digest == null) {
            return input;
        }
        try {
            digest.update(input.getBytes("UTF-8"));
        } catch (java.io.UnsupportedEncodingException ex) {
            logger.error("Assertion: This should never occur.");
        }
        byte[] rawData = digest.digest();
        byte[] encoded = Base64.encode(rawData);
        String retValue = new String(encoded);
        return retValue;
    }
} </s>
<s>class temp {    public String runRawSearch(final String search) throws IOException {
        if (search == null) {
            return null;
        }
        StringBuilder urlString = new StringBuilder("http://ajax.googleapis.com/ajax/services/search/web?");
        if (version != null) {
            urlString.append("v=");
            urlString.append(version);
            urlString.append("&");
        }
        urlString.append("q=");
        urlString.append(StringEscapeUtils.escapeHtml(search));
        URL url = new URL(urlString.toString());
        Proxy proxy = null;
        final URLConnection connection;
        if (proxy != null) {
            connection = url.openConnection(proxy);
        } else {
            connection = url.openConnection();
        }
        if (referer != null) {
            connection.addRequestProperty("Referer", referer);
        }
        String line;
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        while ((line = reader.readLine()) != null) {
            builder.append(line);
        }
        return builder.toString();
    }
} </s>
<s>class temp {    public static List importSymbols(List symbols) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbols);
        IDQuoteFilter filter = new YahooIDQuoteFilter();
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.loadProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line;
            do {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        IDQuote quote = filter.toIDQuote(line);
                        quote.verify();
                        quotes.add(quote);
                    } catch (QuoteFormatException e) {
                    }
                }
            } while (line != null);
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString("UNABLE_TO_CONNECT_ERROR", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString("UNABLE_TO_CONNECT_ERROR", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString("UNKNOWN_HOST_ERROR", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString("DESTINATION_UNREACHABLE_ERROR", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString("INVALID_PROXY_ERROR", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
            throw new ImportExportException(Locale.getString("ERROR_DOWNLOADING_QUOTES"));
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString("ERROR_DOWNLOADING_QUOTES"));
        }
        return quotes;
    }
} </s>
<s>class temp {    public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) {
        logger.debug("compress(%s, %s, %s)", sSourceDir, aFiles, sDestinationFilename);
        BufferedInputStream oOrigin = null;
        FileOutputStream oDestination;
        ZipOutputStream oOutput = null;
        Iterator<String> oIterator;
        byte[] aData;
        try {
            oDestination = new FileOutputStream(sDestinationFilename);
            oOutput = new ZipOutputStream(new BufferedOutputStream(oDestination));
            aData = new byte[BUFFER_SIZE];
            oIterator = aFiles.iterator();
            while (oIterator.hasNext()) {
                try {
                    String sFilename = (String) oIterator.next();
                    FileInputStream fisInput = new FileInputStream(sSourceDir + File.separator + sFilename);
                    oOrigin = new BufferedInputStream(fisInput, BUFFER_SIZE);
                    ZipEntry oEntry = new ZipEntry(sFilename.replace('\\', '/'));
                    oOutput.putNextEntry(oEntry);
                    int iCount;
                    while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount);
                } finally {
                    StreamHelper.close(oOrigin);
                }
            }
        } catch (Exception oException) {
            logger.error(oException.getMessage(), oException);
            return false;
        } finally {
            StreamHelper.close(oOutput);
        }
        return true;
    }
} </s>
<s>class temp {    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
} </s>
<s>class temp {    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
} </s>
<s>class temp {    protected static void copyOrMove(File sourceLocation, File targetLocation, boolean move) throws IOException {
        String[] children;
        int i;
        InputStream in;
        OutputStream out;
        byte[] buf;
        int len;
        if (sourceLocation.isDirectory()) {
            if (!targetLocation.exists()) targetLocation.mkdir();
            children = sourceLocation.list();
            for (i = 0; i < children.length; i++) {
                copyOrMove(new File(sourceLocation, children[i]), new File(targetLocation, children[i]), move);
            }
            if (move) sourceLocation.delete();
        } else {
            in = new FileInputStream(sourceLocation);
            if (targetLocation.isDirectory()) out = new FileOutputStream(targetLocation.getAbsolutePath() + File.separator + sourceLocation.getName()); else out = new FileOutputStream(targetLocation);
            buf = new byte[1024];
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
            if (move) sourceLocation.delete();
        }
    }
} </s>
<s>class temp {    @Override
    public String encodePassword(String rawPass, Object salt) throws DataAccessException {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            digest.reset();
            digest.update(((String) salt).getBytes("UTF-8"));
            return new String(digest.digest(rawPass.getBytes("UTF-8")));
        } catch (Throwable e) {
            throw new DataAccessException("Error al codificar la contrase a", e) {

                private static final long serialVersionUID = 3880106673612870103L;
            };
        }
    }
} </s>
<s>class temp {    @Override
    public boolean isPasswordValid(String encPass, String rawPass, Object salt) throws DataAccessException {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            digest.reset();
            digest.update(((String) salt).getBytes("UTF-8"));
            String encodedRawPass = new String(digest.digest(rawPass.getBytes("UTF-8")));
            return encodedRawPass.equals(encPass);
        } catch (Throwable e) {
            throw new DataAccessException("Error al codificar la contrase a", e) {

                private static final long serialVersionUID = -302443565702455874L;
            };
        }
    }
} </s>
<s>class temp {    public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        ResultSet rs = null;
        int retVal = -1;
        try {
            pst1 = conn.prepareStatement("INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)");
            pst1.setString(1, name);
            pst1.setString(2, instructions);
            pst1.setInt(3, categoryId);
            if (pst1.executeUpdate() > 0) {
                pst2 = conn.prepareStatement("SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?");
                pst2.setString(1, name);
                pst2.setString(2, instructions);
                pst2.setInt(3, categoryId);
                rs = pst2.executeQuery();
                if (rs.next()) {
                    int id = rs.getInt(1);
                    System.out.println("Lis t  n ainesosat");
                    String[] aines;
                    for (int i = 0; i < ainekset.length; ++i) {
                        aines = ainekset[i];
                        addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));
                    }
                    retVal = id;
                } else {
                    retVal = -1;
                }
            } else {
                retVal = -1;
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception("Reseptin lis ys ep onnistui. Poikkeus: " + e.getMessage());
        }
    }
} </s>
<s>class temp {    private static void addIngredient(int recipeId, String name, String amount, int measureId, int shopFlag) throws Exception {
        PreparedStatement pst = null;
        try {
            pst = conn.prepareStatement("INSERT INTO ingredients (recipe_id, name, amount, measure_id, shop_flag) VALUES (?,?,?,?,?)");
            pst.setInt(1, recipeId);
            pst.setString(2, name);
            pst.setString(3, amount);
            pst.setInt(4, measureId);
            pst.setInt(5, shopFlag);
            pst.executeUpdate();
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception("Ainesosan lis ys ep onnistui. Poikkeus: " + e.getMessage());
        }
    }
} </s>
<s>class temp {    private static void loadParentProperties(Properties props, ClassLoader cl) throws IOException {
        String pName = props.getProperty(PARENT_PROPERTIES);
        if (pName == null) {
            return;
        }
        URL url = cl.getResource(pName);
        if (url == null) {
            return;
        }
        InputStream is = url.openStream();
        if (is != null) {
            Properties tmpProps = new Properties();
            tmpProps.load(is);
            is.close();
            loadParentProperties(tmpProps, cl);
            Iterator itr = tmpProps.entrySet().iterator();
            while (itr.hasNext()) {
                Map.Entry entry = (Map.Entry) itr.next();
                if (!props.containsKey(entry.getKey())) {
                    props.put(entry.getKey(), entry.getValue());
                }
            }
        }
    }
} </s>
<s>class temp {    public String encrypt(String pwd) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            System.out.println("Error");
        }
        try {
            md5.update(pwd.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "That is not a valid encrpytion type");
        }
        byte raw[] = md5.digest();
        String empty = "";
        String hash = "";
        for (byte b : raw) {
            String tmp = empty + Integer.toHexString(b & 0xff);
            if (tmp.length() == 1) {
                tmp = 0 + tmp;
            }
            hash += tmp;
        }
        return hash;
    }
} </s>
<s>class temp {    public void update() {
        try {
            String passwordMD5 = new String();
            if (this.password != null && this.password.length() > 0) {
                MessageDigest md = MessageDigest.getInstance("md5");
                md.update(this.password.getBytes());
                byte[] digest = md.digest();
                for (int i = 0; i < digest.length; i++) {
                    passwordMD5 += Integer.toHexString((digest[i] >> 4) & 0xf);
                    passwordMD5 += Integer.toHexString((digest[i] & 0xf));
                }
            }
            this.authCode = new String(Base64Encoder.encode(new String(this.username + ";" + passwordMD5).getBytes()));
        } catch (Throwable throwable) {
            throwable.printStackTrace();
        }
    }
} </s>
<s>class temp {    public TableDirectory(RandomAccessFile raf) throws IOException {
        version = raf.readInt();
        numTables = raf.readShort();
        searchRange = raf.readShort();
        entrySelector = raf.readShort();
        rangeShift = raf.readShort();
        entries = new DirectoryEntry[numTables];
        for (int i = 0; i < numTables; i++) {
            entries[i] = new DirectoryEntry(raf);
        }
        boolean modified = true;
        while (modified) {
            modified = false;
            for (int i = 0; i < numTables - 1; i++) {
                if (entries[i].getOffset() > entries[i + 1].getOffset()) {
                    DirectoryEntry temp = entries[i];
                    entries[i] = entries[i + 1];
                    entries[i + 1] = temp;
                    modified = true;
                }
            }
        }
    }
} </s>
<s>class temp {    public static boolean isLinkHtmlContent(String address) {
        boolean isHtml = false;
        URLConnection conn = null;
        try {
            if (!address.startsWith("http://")) {
                address = "http://" + address;
            }
            URL url = new URL(address);
            conn = url.openConnection();
            if (conn.getContentType().equals("text/html") && !conn.getHeaderField(0).contains("404")) {
                isHtml = true;
            }
        } catch (Exception e) {
            logger.error("Address attempted: " + conn.getURL());
            logger.error("Error Message: " + e.getMessage());
        }
        return isHtml;
    }
} </s>
<s>class temp {    public static void printResponseHeaders(String address) {
        logger.info("Address: " + address);
        try {
            URL url = new URL(address);
            URLConnection conn = url.openConnection();
            for (int i = 0; ; i++) {
                String headerName = conn.getHeaderFieldKey(i);
                String headerValue = conn.getHeaderField(i);
                if (headerName == null && headerValue == null) {
                    break;
                }
                if (headerName == null) {
                    logger.info(headerValue);
                    continue;
                }
                logger.info(headerName + " " + headerValue);
            }
        } catch (Exception e) {
            logger.error("Exception Message: " + e.getMessage());
        }
    }
} </s>
<s>class temp {    public static Map<String, List<String>> getResponseHeader(String address) {
        System.out.println(address);
        URLConnection conn = null;
        Map<String, List<String>> responseHeader = null;
        try {
            URL url = new URL(address);
            conn = url.openConnection();
            responseHeader = conn.getHeaderFields();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return responseHeader;
    }
} </s>
<s>class temp {    public static int getContentLength(String address) {
        URLConnection conn = null;
        int contentLength = 0;
        try {
            URL url = new URL(address);
            conn = url.openConnection();
            contentLength = conn.getContentLength();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return contentLength;
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException {
        InputStream stream = null;
        FileOutputStream fos = null;
        File in = new File("in.txt");
        try {
            URL url = new URL(args[0]);
            stream = url.openStream();
            fos = new FileOutputStream(in);
            int i;
            while ((i = stream.read()) != -1) {
                fos.write(i);
            }
            fos.flush();
            fos.close();
            new FileRunner(in, new File("out.txt")).run();
            FileReader reader = new FileReader("out.txt");
            System.out.println(reader.toString());
        } finally {
            if (stream != null) stream.close();
        }
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    public static Document getDocument(String string, String defaultCharset) {
        DOMParser parser = new DOMParser();
        try {
            URL url = new URL(string);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setConnectTimeout(10000);
            con.setUseCaches(false);
            con.addRequestProperty("_", UUID.randomUUID().toString());
            String contentType = con.getContentType();
            if (contentType == null) {
                return null;
            }
            String charsetSearch = contentType.replaceFirst("(?i).*charset=(.*)", "$1");
            String contentTypeCharset = con.getContentEncoding();
            BufferedReader reader = null;
            if (!contentType.equals(charsetSearch)) {
                contentTypeCharset = charsetSearch;
            }
            if (contentTypeCharset == null) {
                reader = new BufferedReader(new InputStreamReader(con.getInputStream(), defaultCharset));
            } else {
                reader = new BufferedReader(new InputStreamReader(con.getInputStream(), contentTypeCharset));
            }
            InputSource source = new InputSource(reader);
            parser.setFeature("http://xml.org/sax/features/namespaces", false);
            parser.parse(source);
            Document document = parser.getDocument();
            String metaTagCharset = getMetaTagCharset(document);
            if (metaTagCharset != null && !metaTagCharset.equals(contentTypeCharset)) {
                HttpURLConnection reconnection = (HttpURLConnection) url.openConnection();
                reconnection.setConnectTimeout(10000);
                reconnection.setUseCaches(false);
                reconnection.addRequestProperty("_", UUID.randomUUID().toString());
                reader = new BufferedReader(new InputStreamReader(reconnection.getInputStream(), metaTagCharset));
                source = new InputSource(reader);
                parser.setFeature("http://xml.org/sax/features/namespaces", false);
                parser.parse(source);
                document = parser.getDocument();
            }
            reader.close();
            return document;
        } catch (DOMException e) {
            if (!"UTF-8".equals(defaultCharset)) {
                return getDocument(string, "UTF-8");
            }
            return null;
        } catch (Exception ex) {
            return null;
        }
    }
} </s>
<s>class temp {    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException("Destination '" + destFile + "' exists but is a directory");
        }
        FileInputStream input = new FileInputStream(srcFile);
        try {
            FileOutputStream output = new FileOutputStream(destFile);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.close(output);
            }
        } finally {
            IOUtils.close(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
} </s>
<s>class temp {    public static void copyURLToFile(URL source, File destination) throws IOException {
        InputStream input = source.openStream();
        try {
            FileOutputStream output = openOutputStream(destination);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.close(output);
            }
        } finally {
            IOUtils.close(input);
        }
    }
} </s>
<s>class temp {    public static Checksum checksum(File file, Checksum checksum) throws IOException {
        if (file.isDirectory()) {
            throw new IllegalArgumentException("Checksums can't be computed on directories");
        }
        InputStream in = null;
        try {
            in = new CheckedInputStream(new FileInputStream(file), checksum);
            IOUtils.copy(in, NULL_OUTPUT_STREAM);
        } finally {
            IOUtils.close(in);
        }
        return checksum;
    }
} </s>
<s>class temp {    public BigInteger calculateMd5(String input) throws FileSystemException {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(input.getBytes());
            byte[] messageDigest = digest.digest();
            BigInteger bigInt = new BigInteger(1, messageDigest);
            return bigInt;
        } catch (Exception e) {
            throw new FileSystemException(e);
        }
    }
} </s>
<s>class temp {    @Override
    public void send() {
        BufferedReader in = null;
        StringBuffer result = new StringBuffer();
        try {
            URL url = new URL(getUrl());
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                result.append(str);
            }
        } catch (ConnectException ce) {
            logger.error("MockupExecutableCommand excute fail: " + ce.getMessage());
        } catch (Exception e) {
            logger.error("MockupExecutableCommand excute fail: " + e.getMessage());
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    logger.error("BufferedReader could not be closed", e);
                }
            }
        }
    }
} </s>
