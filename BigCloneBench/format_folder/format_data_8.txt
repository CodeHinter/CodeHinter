<s>class temp {    public static String hash(final String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance("SHA-1");
            byte[] sha1hash = new byte[40];
            md.update(text.getBytes("iso-8859-1"), 0, text.length());
            sha1hash = md.digest();
            return Sha1.convertToHex(sha1hash);
        } catch (final Exception e) {
            return null;
        }
    }
} </s>
<s>class temp {    public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        OutputStream b64os = new BASE64EncoderStream(bos, Integer.MAX_VALUE);
        SecureRandom random;
        try {
            random = new SecureRandom();
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException ex) {
            if (debugout != null) debugout.println("DEBUG DIGEST-MD5: " + ex);
            throw new IOException(ex.toString());
        }
        StringBuffer result = new StringBuffer();
        uri = "smtp/" + host;
        String nc = "00000001";
        String qop = "auth";
        byte[] bytes = new byte[32];
        int resp;
        if (debugout != null) debugout.println("DEBUG DIGEST-MD5: Begin authentication ...");
        Hashtable map = tokenize(serverChallenge);
        if (realm == null) {
            String text = (String) map.get("realm");
            realm = text != null ? new StringTokenizer(text, ",").nextToken() : host;
        }
        String nonce = (String) map.get("nonce");
        random.nextBytes(bytes);
        b64os.write(bytes);
        b64os.flush();
        String cnonce = bos.toString();
        bos.reset();
        md5.update(md5.digest(ASCIIUtility.getBytes(user + ":" + realm + ":" + passwd)));
        md5.update(ASCIIUtility.getBytes(":" + nonce + ":" + cnonce));
        clientResponse = toHex(md5.digest()) + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop + ":";
        md5.update(ASCIIUtility.getBytes("AUTHENTICATE:" + uri));
        md5.update(ASCIIUtility.getBytes(clientResponse + toHex(md5.digest())));
        result.append("username=\"" + user + "\"");
        result.append(",realm=\"" + realm + "\"");
        result.append(",qop=" + qop);
        result.append(",nc=" + nc);
        result.append(",nonce=\"" + nonce + "\"");
        result.append(",cnonce=\"" + cnonce + "\"");
        result.append(",digest-uri=\"" + uri + "\"");
        result.append(",response=" + toHex(md5.digest()));
        if (debugout != null) debugout.println("DEBUG DIGEST-MD5: Response => " + result.toString());
        b64os.write(ASCIIUtility.getBytes(result.toString()));
        b64os.flush();
        return bos.toByteArray();
    }
} </s>
<s>class temp {    private void getImage(String filename) throws MalformedURLException, IOException, SAXException, FileNotFoundException {
        String url = Constants.STRATEGICDOMINATION_URL + "/images/gameimages/" + filename;
        WebRequest req = new GetMethodWebRequest(url);
        SiteResponse response = getSiteResponse(req);
        File file = new File("etc/images/" + filename);
        FileOutputStream outputStream = new FileOutputStream(file);
        IOUtils.copy(response.getInputStream(), outputStream);
    }
} </s>
<s>class temp {    public static String encrypt(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA1");
            md.update(input.getBytes("UTF-8"));
            return toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public boolean run() {
        String url;
        try {
            url = getFileName();
        } catch (NoSuchFieldException e) {
            return false;
        }
        if (url == null) {
            logger.error("URL not specified! Cannot continue.");
            return false;
        }
        try {
            URL newURL = new URL(url);
            String extension = url.substring((url.lastIndexOf(".")) + 1, url.length());
            File temp = File.createTempFile("temp", "." + extension);
            System.out.printf("Storing URL contents to a temp file : %s\n", temp);
            temp.deleteOnExit();
            InputStream urlINS = new BufferedInputStream(newURL.openConnection().getInputStream());
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(temp));
            int len = 0;
            for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) {
                out.write(singleByte);
                len++;
            }
            System.out.printf("Stored %d bytes from URL contents\n", len);
            out.flush();
            out.close();
            System.out.printf("URL/Temp extension : %s\n", extension);
            if (extension.equalsIgnoreCase("gz")) {
                String shorterName = url.substring(0, url.lastIndexOf("."));
                String extension2 = shorterName.substring((shorterName.lastIndexOf(".")) + 1, shorterName.length());
                File temp2 = File.createTempFile("temp", "." + extension2);
                temp2.deleteOnExit();
                System.out.printf("URL/Temp extension after decompressing gzip : %s\n", extension2);
                GZIPInputStream decompressor = new GZIPInputStream(new FileInputStream(temp));
                OutputStream target = new FileOutputStream(temp2);
                byte[] buffer = new byte[1024];
                int length;
                while ((length = decompressor.read(buffer)) > 0) {
                    target.write(buffer, 0, length);
                }
                target.flush();
                target.close();
                temp = temp2;
            }
            String tempName = temp.getName();
            extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length());
            Preprocessor fileLoader = null;
            BasePreprocessorConfig configObject = null;
            if (MethodCallTable.containsKey(extension) == false) {
                fileLoader = MethodCallTable.get("default");
            } else {
                fileLoader = MethodCallTable.get(extension);
            }
            System.out.printf("Calling filter '%s' for extension: %s\n", fileLoader.getPreprocessingMethodName(), extension);
            configObject = new LoadCSVPreprocessorConfig();
            configObject.setValueByName("FileName", temp.getAbsolutePath());
            fileLoader.setConfigurationClass(configObject);
            return fileLoader.run();
        } catch (Exception e) {
            logger.error(e);
            return false;
        }
    }
} </s>
<s>class temp {    private void copy(File source, File target) throws IOException {
        FileChannel in = (new FileInputStream(source)).getChannel();
        FileChannel out = (new FileOutputStream(target)).getChannel();
        in.transferTo(0, source.length(), out);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    public File createFileFromClasspathResource(String resourceUrl) throws IOException {
        File fichierTest = File.createTempFile("xmlFieldTestFile", "");
        FileOutputStream fos = new FileOutputStream(fichierTest);
        InputStream is = XmlFieldDomSelectorTest.class.getResourceAsStream(resourceUrl);
        IOUtils.copy(is, fos);
        is.close();
        fos.close();
        return fichierTest;
    }
} </s>
<s>class temp {    public static String sha1(String src) {
        MessageDigest md1 = null;
        try {
            md1 = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md1.update(src.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return hex(md1.digest());
    }
} </s>
<s>class temp {    public String move(Integer param) {
        LOG.debug("move " + param);
        StringBuffer ret = new StringBuffer();
        try {
            URL url = new URL("http://" + host + "/decoder_control.cgi?command=" + param + "&user=" + user + "&pwd=" + password);
            URLConnection con = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                ret.append(inputLine);
            }
            in.close();
        } catch (Exception e) {
            logException(e);
            connect(host, user, password);
        }
        return ret.toString();
    }
} </s>
<s>class temp {    public static LinkedList<String> read(URL url) throws IOException {
        LinkedList<String> data = new LinkedList<String>();
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String input = "";
        while (true) {
            input = br.readLine();
            if (input == null) break;
            data.add(input);
        }
        br.close();
        return data;
    }
} </s>
<s>class temp {    public static LinkedList<String> read(URL url, String exc) throws IOException {
        LinkedList<String> data = new LinkedList<String>();
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String input = "";
        while (true) {
            input = br.readLine();
            if (input == null) break;
            if (!input.startsWith(exc)) {
                data.add(input);
            }
        }
        br.close();
        return data;
    }
} </s>
<s>class temp {    private void connect(URL url) throws IOException {
        String protocol = url.getProtocol();
        if (!protocol.equals("http")) throw new IllegalArgumentException("URL must use 'http:' protocol");
        int port = url.getPort();
        if (port == -1) port = 80;
        fileName = url.getFile();
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);
        conn.setDoInput(true);
        toServer = new OutputStreamWriter(conn.getOutputStream());
        fromServer = conn.getInputStream();
    }
} </s>
<s>class temp {            public void run() {
                waiting(200);
                try {
                    URL url = new URL(urlAddress);
                    SAXParserFactory spf = SAXParserFactory.newInstance();
                    SAXParser sp = spf.newSAXParser();
                    XMLReader xr = sp.getXMLReader();
                    XMLHandlerSingleAlbum myXMLHandler = new XMLHandlerSingleAlbum();
                    xr.setContentHandler(myXMLHandler);
                    xr.parse(new InputSource(url.openStream()));
                    statuscode = myXMLHandler.statuscode;
                    if (statuscode != 200 && statuscode != 206) {
                        throw new Exception();
                    }
                    genre = myXMLHandler.genre;
                    genreId = myXMLHandler.genreId;
                    labelId = myXMLHandler.labelId;
                    label = myXMLHandler.label;
                    date = myXMLHandler.releaseDate;
                    rating = myXMLHandler.rating;
                    imageURL = myXMLHandler.imageURL;
                    artist = myXMLHandler.artist;
                    artistId = myXMLHandler.artistId;
                    numberOfTracks = myXMLHandler.nItems;
                    trackNames = myXMLHandler.tracks;
                    handlerSetContent.sendEmptyMessage(0);
                    dialog.dismiss();
                    updateImage();
                } catch (Exception e) {
                    final Exception ef = e;
                    nameTextView.post(new Runnable() {

                        public void run() {
                            nameTextView.setText(R.string.couldnt_get_album_info);
                        }
                    });
                }
                if (dialog.isShowing()) {
                    dialog.dismiss();
                }
                handlerDoneLoading.sendEmptyMessage(0);
            }
} </s>
<s>class temp {    public static void main(String[] args) {
        FileDialog fd = new FileDialog(new Frame(), "Find a .def file", FileDialog.LOAD);
        boolean proceed = true;
        String input = "";
        DataInputStream dis;
        OutputStream out;
        InputStream in;
        File out_file, in_file;
        byte[] buffer = new byte[2048];
        int bytes_read;
        while (proceed) {
            fd.show();
            if (fd.getFile() != null) {
                try {
                    in_file = new File(fd.getDirectory(), fd.getFile());
                    out_file = new File(fd.getDirectory(), fd.getFile() + ".out");
                    out = new FileOutputStream(out_file);
                    in = new MSZipInputStream(new FileInputStream(in_file));
                    while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
                    in.close();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("Do another (y/n)?");
            dis = new DataInputStream(System.in);
            try {
                input = dis.readLine();
            } catch (Exception blah) {
            }
            if (input.toLowerCase().startsWith("n")) proceed = false;
        }
    }
} </s>
<s>class temp {    public static String criptografar(String senha) {
        if (senha == null) {
            return null;
        }
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(senha.getBytes());
            BASE64Encoder encoder = new BASE64Encoder();
            return encoder.encode(digest.digest());
        } catch (NoSuchAlgorithmException ns) {
            LoggerFactory.getLogger(UtilAdrs.class).error(Msg.EXCEPTION_MESSAGE, UtilAdrs.class.getSimpleName(), ns);
            return senha;
        }
    }
} </s>
<s>class temp {    public static String novoMetodoDeCriptografarParaMD5QueNaoFoiUtilizadoAinda(String input) {
        if (input == null) {
            return null;
        }
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(input.getBytes("UTF-8"));
            BigInteger hash = new BigInteger(1, digest.digest());
            String output = hash.toString(16);
            if (output.length() < 32) {
                int sizeDiff = 32 - output.length();
                do {
                    output = "0" + output;
                } while (--sizeDiff > 0);
            }
            return output;
        } catch (NoSuchAlgorithmException ns) {
            LoggerFactory.getLogger(UtilAdrs.class).error(Msg.EXCEPTION_MESSAGE, UtilAdrs.class.getSimpleName(), ns);
            return input;
        } catch (UnsupportedEncodingException e) {
            LoggerFactory.getLogger(UtilAdrs.class).error(Msg.EXCEPTION_MESSAGE, UtilAdrs.class.getSimpleName(), e);
            return input;
        }
    }
} </s>
<s>class temp {    void readData() {
        String[] nextLine;
        int line;
        double value;
        URL url = null;
        String FileToRead;
        try {
            for (int i = 0; i < names.length; i++) {
                FileToRead = "data/" + names[i] + ".csv";
                url = new URL(ja.getCodeBase(), FileToRead);
                System.out.println(url.toString());
                InputStream in = url.openStream();
                CSVReader reader = new CSVReader(new InputStreamReader(in));
                line = 0;
                while ((nextLine = reader.readNext()) != null) {
                    allset.months[line] = Integer.parseInt(nextLine[0].substring(0, 2));
                    allset.years[line] = Integer.parseInt(nextLine[0].substring(6, 10));
                    value = Double.parseDouble(nextLine[1]);
                    allset.values.getDataRef()[line][i] = value;
                    line++;
                }
            }
        } catch (IOException e) {
            System.err.println("File Read Exception");
        }
    }
} </s>
<s>class temp {    private synchronized jdbcResultSet executeHTTP(String s) throws SQLException {
        byte result[];
        try {
            URL url = new URL(sConnect);
            String p = StringConverter.unicodeToHexString(sUser);
            p += "+" + StringConverter.unicodeToHexString(sPassword);
            p += "+" + StringConverter.unicodeToHexString(s);
            URLConnection c = url.openConnection();
            c.setDoOutput(true);
            OutputStream os = c.getOutputStream();
            os.write(p.getBytes(ENCODING));
            os.close();
            c.connect();
            InputStream is = (InputStream) c.getContent();
            BufferedInputStream in = new BufferedInputStream(is);
            int len = c.getContentLength();
            result = new byte[len];
            for (int i = 0; i < len; i++) {
                int r = in.read();
                result[i] = (byte) r;
            }
        } catch (Exception e) {
            throw Trace.error(Trace.CONNECTION_IS_BROKEN, e.getMessage());
        }
        return new jdbcResultSet(new Result(result));
    }
} </s>
<s>class temp {    protected File getFile(NameCategory category) throws IOException {
        File home = new File(System.getProperty("user.dir"));
        String fileName = String.format("%s.txt", category);
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = DefaultNameGenerator.class.getResource("/sc/common/" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format("Cannot find resource at %s", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    public static void zip(String input, OutputStream out) {
        File file = new File(input);
        ZipOutputStream zip = null;
        FileInputStream in = null;
        try {
            if (file.exists()) {
                Collection<File> items = new ArrayList();
                if (file.isDirectory()) {
                    items = FileUtils.listFiles(file, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);
                    zip = new ZipOutputStream(out);
                    zip.putNextEntry(new ZipEntry(file.getName() + "/"));
                    Iterator iter = items.iterator();
                    while (iter.hasNext()) {
                        File item = (File) iter.next();
                        in = new FileInputStream(item);
                        zip.putNextEntry(new ZipEntry(file.getName() + "/" + item.getName()));
                        IOUtils.copy(in, zip);
                        IOUtils.closeQuietly(in);
                        zip.closeEntry();
                    }
                    IOUtils.closeQuietly(zip);
                }
            } else {
                log.info("-->>   ļ   û   ļ ");
            }
        } catch (Exception e) {
            log.error("    ѹ  " + input + "       ", e);
            throw new RuntimeException("    ѹ  " + input + "       ", e);
        } finally {
            try {
                if (null != zip) {
                    zip.close();
                    zip = null;
                }
                if (null != in) {
                    in.close();
                    in = null;
                }
            } catch (Exception e) {
                log.error(" ر  ļ       ");
            }
        }
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    public static void unzip(String input, String output) {
        try {
            if (!output.endsWith("/")) output = output + "/";
            ZipFile zip = new ZipFile(input);
            Enumeration entries = zip.entries();
            while (entries.hasMoreElements()) {
                ZipEntry entry = (ZipEntry) entries.nextElement();
                if (entry.isDirectory()) {
                    FileUtils.forceMkdir(new File(output + entry.getName()));
                } else {
                    FileOutputStream out = new FileOutputStream(output + entry.getName());
                    IOUtils.copy(zip.getInputStream(entry), out);
                    IOUtils.closeQuietly(out);
                }
            }
        } catch (Exception e) {
            log.error("     ҵ  ļ :" + output, e);
            throw new RuntimeException("     ҵ  ļ :" + output, e);
        }
    }
} </s>
<s>class temp {    protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException {
        login = login.trim().toLowerCase();
        long userId = GetterUtil.getLong(login);
        if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {
            if (!Validator.isEmailAddress(login)) {
                throw new UserEmailAddressException();
            }
        } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {
            if (Validator.isNull(login)) {
                throw new UserScreenNameException();
            }
        } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {
            if (Validator.isNull(login)) {
                throw new UserIdException();
            }
        }
        if (Validator.isNull(password)) {
            throw new UserPasswordException(UserPasswordException.PASSWORD_INVALID);
        }
        int authResult = Authenticator.FAILURE;
        String[] authPipelinePre = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE);
        if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {
            authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap);
        } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {
            authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap);
        } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {
            authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap);
        }
        User user = null;
        try {
            if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {
                user = UserUtil.findByC_EA(companyId, login);
            } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {
                user = UserUtil.findByC_SN(companyId, login);
            } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {
                user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login));
            }
        } catch (NoSuchUserException nsue) {
            return Authenticator.DNE;
        }
        if (user.isDefaultUser()) {
            _log.error("The default user should never be allowed to authenticate");
            return Authenticator.DNE;
        }
        if (!user.isPasswordEncrypted()) {
            user.setPassword(PwdEncryptor.encrypt(user.getPassword()));
            user.setPasswordEncrypted(true);
            UserUtil.update(user);
        }
        checkLockout(user);
        checkPasswordExpired(user);
        if (authResult == Authenticator.SUCCESS) {
            if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK))) {
                String encPwd = PwdEncryptor.encrypt(password, user.getPassword());
                if (user.getPassword().equals(encPwd)) {
                    authResult = Authenticator.SUCCESS;
                } else if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_MAC_ALLOW))) {
                    try {
                        MessageDigest digester = MessageDigest.getInstance(PropsUtil.get(PropsUtil.AUTH_MAC_ALGORITHM));
                        digester.update(login.getBytes("UTF8"));
                        String shardKey = PropsUtil.get(PropsUtil.AUTH_MAC_SHARED_KEY);
                        encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")));
                        if (password.equals(encPwd)) {
                            authResult = Authenticator.SUCCESS;
                        } else {
                            authResult = Authenticator.FAILURE;
                        }
                    } catch (NoSuchAlgorithmException nsae) {
                        throw new SystemException(nsae);
                    } catch (UnsupportedEncodingException uee) {
                        throw new SystemException(uee);
                    }
                } else {
                    authResult = Authenticator.FAILURE;
                }
            }
        }
        if (authResult == Authenticator.SUCCESS) {
            String[] authPipelinePost = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST);
            if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {
                authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap);
            } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {
                authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap);
            } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {
                authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap);
            }
        }
        if (authResult == Authenticator.FAILURE) {
            try {
                String[] authFailure = PropsUtil.getArray(PropsUtil.AUTH_FAILURE);
                if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {
                    AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap);
                } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {
                    AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap);
                } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {
                    AuthPipeline.onFailureByUserId(authFailure, companyId, userId, headerMap, parameterMap);
                }
                if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) {
                    PasswordPolicy passwordPolicy = user.getPasswordPolicy();
                    int failedLoginAttempts = user.getFailedLoginAttempts();
                    int maxFailures = passwordPolicy.getMaxFailure();
                    if ((failedLoginAttempts >= maxFailures) && (maxFailures != 0)) {
                        String[] authMaxFailures = PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES);
                        if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {
                            AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap);
                        } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {
                            AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap);
                        } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {
                            AuthPipeline.onMaxFailuresByUserId(authMaxFailures, companyId, userId, headerMap, parameterMap);
                        }
                    }
                }
            } catch (Exception e) {
                _log.error(e, e);
            }
        }
        return authResult;
    }
} </s>
<s>class temp {    public void createNewFile(String filePath, InputStream in) throws IOException {
        FileOutputStream out = null;
        try {
            File file = newFileRef(filePath);
            FileHelper.createNewFile(file, true);
            out = new FileOutputStream(file);
            IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
} </s>
<s>class temp {    public static void addProviders(URL url) {
        Reader reader = null;
        Properties prop = new Properties();
        try {
            reader = new InputStreamReader(url.openStream());
            prop.load(reader);
        } catch (Throwable t) {
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (Throwable t) {
                }
            }
        }
        for (Map.Entry<Object, Object> entry : prop.entrySet()) {
            try {
                Class<?> cla = Class.forName((String) entry.getValue(), true, Thread.currentThread().getContextClassLoader());
                providers.put(((String) entry.getKey()).toUpperCase(), (CharsetProvider) cla.newInstance());
            } catch (Throwable t) {
            }
        }
    }
} </s>
<s>class temp {    private String fetchHTML(String s) {
        String str;
        StringBuffer sb = new StringBuffer();
        try {
            URL url = new URL(s);
            InputStream is = url.openStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            while ((str = br.readLine()) != null) {
                sb.append(str);
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return sb.toString();
    }
} </s>
<s>class temp {        public boolean check(Object credentials) {
            String password = (credentials instanceof String) ? (String) credentials : credentials.toString();
            try {
                MessageDigest md = MessageDigest.getInstance("MD5");
                byte[] ha1;
                if (credentials instanceof Credential.MD5) {
                    ha1 = ((Credential.MD5) credentials).getDigest();
                } else {
                    md.update(username.getBytes(StringUtil.__ISO_8859_1));
                    md.update((byte) ':');
                    md.update(realm.getBytes(StringUtil.__ISO_8859_1));
                    md.update((byte) ':');
                    md.update(password.getBytes(StringUtil.__ISO_8859_1));
                    ha1 = md.digest();
                }
                md.reset();
                md.update(method.getBytes(StringUtil.__ISO_8859_1));
                md.update((byte) ':');
                md.update(uri.getBytes(StringUtil.__ISO_8859_1));
                byte[] ha2 = md.digest();
                md.update(TypeUtil.toString(ha1, 16).getBytes(StringUtil.__ISO_8859_1));
                md.update((byte) ':');
                md.update(nonce.getBytes(StringUtil.__ISO_8859_1));
                md.update((byte) ':');
                md.update(nc.getBytes(StringUtil.__ISO_8859_1));
                md.update((byte) ':');
                md.update(cnonce.getBytes(StringUtil.__ISO_8859_1));
                md.update((byte) ':');
                md.update(qop.getBytes(StringUtil.__ISO_8859_1));
                md.update((byte) ':');
                md.update(TypeUtil.toString(ha2, 16).getBytes(StringUtil.__ISO_8859_1));
                byte[] digest = md.digest();
                return (TypeUtil.toString(digest, 16).equalsIgnoreCase(response));
            } catch (Exception e) {
                Log.warn(e);
            }
            return false;
        }
} </s>
<s>class temp {    private synchronized Document executeHttpMethod(final HttpUriRequest httpRequest) throws UnauthorizedException, ThrottledException, ApiException {
        if (!isNextRequestAllowed()) {
            try {
                if (LOGGER.isDebugEnabled()) {
                    LOGGER.debug("Wait " + WAITING_TIME + "ms for request.");
                }
                wait(WAITING_TIME);
            } catch (InterruptedException ie) {
                throw new ApiException("Waiting for request interrupted.", ie);
            }
        }
        try {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Perform request.");
            }
            HttpResponse httpResponse = httpClient.execute(httpRequest);
            switch(httpResponse.getStatusLine().getStatusCode()) {
                case HTTP_OK:
                    HttpEntity httpEntity = httpResponse.getEntity();
                    if (httpEntity != null) {
                        InputStream responseStream = httpEntity.getContent();
                        if (responseStream == null) {
                            throw new ApiException("TODO");
                        } else {
                            String response = null;
                            try {
                                response = IOUtils.toString(responseStream, RESPONSE_ENCODING);
                            } catch (IOException ioe) {
                                throw new ApiException("Problem reading response", ioe);
                            } catch (RuntimeException re) {
                                httpRequest.abort();
                                throw new ApiException("Problem reading response", re);
                            } finally {
                                responseStream.close();
                            }
                            StringReader responseReader = new StringReader(response);
                            Document document = documentBuilder.parse(new InputSource(responseReader));
                            return document;
                        }
                    }
                case HTTP_UNAVAILABLE:
                    throw new ThrottledException("TODO");
                case HTTP_UNAUTHORIZED:
                    throw new UnauthorizedException("TODO");
                default:
                    throw new ApiException("Unexpected HTTP status code: " + httpResponse.getStatusLine().getStatusCode());
            }
        } catch (SAXException se) {
            throw new ApiException("TODO", se);
        } catch (IOException ioe) {
            throw new ApiException("TODO", ioe);
        } finally {
            updateLastRequestTimestamp();
        }
    }
} </s>
<s>class temp {    @Override
    public Document duplicate() {
        BinaryDocument b = new BinaryDocument(this.name, this.content.getContentType());
        try {
            IOUtils.copy(this.getContent().getInputStream(), this.getContent().getOutputStream());
            return b;
        } catch (IOException e) {
            throw ManagedIOException.manage(e);
        }
    }
} </s>
<s>class temp {    private File copyFromURL(URL url, String dir) throws IOException {
        File urlFile = new File(url.getFile());
        File dest = new File(dir, urlFile.getName());
        logger.log("Extracting " + urlFile.getName() + " to " + dir + "...");
        FileOutputStream os = new FileOutputStream(dest);
        InputStream is = url.openStream();
        byte data[] = new byte[4096];
        int ct;
        while ((ct = is.read(data)) >= 0) os.write(data, 0, ct);
        is.close();
        os.close();
        logger.log("ok\n");
        return dest;
    }
} </s>
<s>class temp {    @Override
    public void runTask(HashMap pjobParameters) throws Exception {
        if (hasRequiredResources(isSubTask())) {
            String lstrSource = getSourceFilename();
            String lstrTarget = getTargetFilename();
            if (getSourceDirectory() != null) {
                lstrSource = getSourceDirectory() + File.separator + getSourceFilename();
            }
            if (getTargetDirectory() != null) {
                lstrTarget = getTargetDirectory() + File.separator + getTargetFilename();
            }
            GZIPInputStream lgzipInput = new GZIPInputStream(new FileInputStream(lstrSource));
            OutputStream lfosGUnzip = new FileOutputStream(lstrTarget);
            byte[] buf = new byte[1024];
            int len;
            while ((len = lgzipInput.read(buf)) > 0) lfosGUnzip.write(buf, 0, len);
            lgzipInput.close();
            lfosGUnzip.close();
        }
    }
} </s>
<s>class temp {    public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL u = new URL(url);
            if (url.startsWith("file://")) {
                is = new BufferedInputStream(u.openStream());
            } else {
                Proxy proxy;
                if (proxyHost != null) {
                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
                } else {
                    proxy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) u.openConnection(proxy);
                con.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6");
                con.addRequestProperty("Accept-Charset", "UTF-8");
                con.addRequestProperty("Accept-Language", "en-US,en");
                con.addRequestProperty("Accept", "text/html,image/*");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
} </s>
<s>class temp {    private static String createBoundary(int number) {
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        digest.update(String.valueOf(Math.random()).getBytes());
        digest.update(String.valueOf(System.currentTimeMillis()).getBytes());
        digest.update(String.valueOf(digest.hashCode()).getBytes());
        byte[] bytes = digest.digest();
        String paddedNumber = Integer.toString(number);
        paddedNumber = ("0000000000".substring(0, 10 - paddedNumber.length()) + paddedNumber);
        StringBuffer buffer = new StringBuffer();
        buffer.append("---------------------------------=__");
        for (int i = 0; i < 8; i++) {
            String hex = Integer.toHexString((bytes[i] & 0xff) + 0x100).substring(1);
            buffer.append(hex);
        }
        buffer.append('_');
        buffer.append(paddedNumber);
        return buffer.toString();
    }
} </s>
<s>class temp {    private void addServices(Bundle bundle) {
        if (!resolvedBundles.containsKey(bundle)) {
            Enumeration enumeration = bundle.findEntries("META-INF", "*services.xml", false);
            int i = 0;
            List<AxisServiceGroup> axisServiceGroupList = null;
            if (enumeration != null) {
                axisServiceGroupList = new ArrayList<AxisServiceGroup>();
            }
            while (enumeration != null && enumeration.hasMoreElements()) {
                try {
                    URL url = (URL) enumeration.nextElement();
                    AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration());
                    serviceGroup.addParameter("last.updated", bundle.getLastModified());
                    ClassLoader loader = new BundleClassLoader(bundle, Registry.class.getClassLoader());
                    serviceGroup.setServiceGroupClassLoader(loader);
                    InputStream inputStream = url.openStream();
                    DescriptionBuilder builder = new DescriptionBuilder(inputStream, configCtx);
                    OMElement rootElement = builder.buildOM();
                    String elementName = rootElement.getLocalName();
                    Dictionary headers = bundle.getHeaders();
                    String bundleSymbolicName = (String) headers.get("Bundle-SymbolicName");
                    bundleSymbolicName = bundleSymbolicName + "_" + i;
                    serviceGroup.setServiceGroupName(bundleSymbolicName);
                    HashMap wsdlServicesMap = new HashMap();
                    if (DeploymentConstants.TAG_SERVICE.equals(elementName)) {
                        AxisService axisService = new AxisService(bundleSymbolicName);
                        axisService.setParent(serviceGroup);
                        axisService.setClassLoader(loader);
                        ServiceBuilder serviceBuilder = new OSGiServiceBuilder(configCtx, axisService);
                        serviceBuilder.setWsdlServiceMap(wsdlServicesMap);
                        AxisService service = serviceBuilder.populateService(rootElement);
                        ArrayList<AxisService> serviceList = new ArrayList<AxisService>();
                        serviceList.add(service);
                        DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration());
                        log.info("[Axis2/OSGi] Deployed axis2 service:" + service.getName() + " in Bundle: " + bundle.getSymbolicName());
                    } else if (DeploymentConstants.TAG_SERVICE_GROUP.equals(elementName)) {
                        ServiceGroupBuilder groupBuilder = new OSGiServiceGroupBuilder(rootElement, wsdlServicesMap, configCtx);
                        ArrayList serviceList = groupBuilder.populateServiceGroup(serviceGroup);
                        DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration());
                        log.info("[Axis2/OSGi] Deployed axis2 service group:" + serviceGroup.getServiceGroupName() + " in Bundle: " + bundle.getSymbolicName());
                    }
                    serviceGroup.addParameter(OSGi_BUNDLE_ID, bundle.getBundleId());
                    axisServiceGroupList.add(serviceGroup);
                    if (unreslovedBundles.contains(bundle)) {
                        unreslovedBundles.remove(bundle);
                    }
                    i++;
                } catch (Throwable e) {
                    String msg = "Error while reading from the bundle";
                    if (e instanceof DeploymentException) {
                        String message = e.getMessage();
                        if (message != null && message.length() != 0) {
                            if (message.indexOf(MODULE_NOT_FOUND_ERROR) > -1) {
                                if (!unreslovedBundles.contains(bundle)) {
                                    log.info("A service being found with unmeant module " + "dependency. Hence, moved it to UNRESOLVED state.");
                                    unreslovedBundles.add(bundle);
                                } else {
                                    log.info("A service being found in UNRESOLVED state.");
                                }
                            } else {
                                log.error(msg, e);
                                break;
                            }
                        } else {
                            log.error(msg, e);
                            break;
                        }
                    } else {
                        log.error(msg, e);
                        break;
                    }
                }
            }
            if (axisServiceGroupList != null && axisServiceGroupList.size() > 0) {
                resolvedBundles.put(bundle, axisServiceGroupList);
            }
        }
    }
} </s>
<s>class temp {    public void zip_compressFiles() throws Exception {
        FileInputStream in = null;
        File f1 = new File("C:\\WINDOWS\\regedit.exe");
        File f2 = new File("C:\\WINDOWS\\win.ini");
        File file = new File("C:\\" + NTUtil.class.getName() + ".zip");
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file));
        out.putNextEntry(new ZipEntry("regedit.exe"));
        in = new FileInputStream(f1);
        while (in.available() > 0) {
            out.write(in.read());
        }
        in.close();
        out.closeEntry();
        out.putNextEntry(new ZipEntry("win.ini"));
        in = new FileInputStream(f2);
        while (in.available() > 0) {
            out.write(in.read());
        }
        in.close();
        out.closeEntry();
        out.close();
    }
} </s>
<s>class temp {    private void constructDialogContent(Composite parent) {
        SashForm splitter = new SashForm(parent, SWT.HORIZONTAL);
        splitter.setLayoutData(new GridData(GridData.FILL_BOTH));
        Group fragmentsGroup = new Group(splitter, SWT.NONE);
        fragmentsGroup.setLayout(new GridLayout(1, false));
        fragmentsGroup.setText("Result Fragments");
        fragmentsTable = CheckboxTableViewer.newCheckList(fragmentsGroup, SWT.NONE);
        fragmentsTable.getTable().setLayoutData(new GridData(GridData.FILL_BOTH));
        fragmentsTable.setContentProvider(new ArrayContentProvider());
        fragmentsTable.setLabelProvider(new LabelProvider() {

            public Image getImage(Object element) {
                return JFaceResources.getImage(WsmoImageRegistry.INSTANCE_ICON);
            }

            public String getText(Object element) {
                if (element == null) {
                    return "";
                }
                if (element instanceof ProcessFragment) {
                    ProcessFragment frag = (ProcessFragment) element;
                    String label = (frag.getName() == null) ? " <no-fragment-name>" : frag.getName();
                    if (frag.getDescription() != null) {
                        label += "  [" + Utils.normalizeSpaces(frag.getDescription()) + ']';
                    }
                    return label;
                }
                return element.toString();
            }
        });
        fragmentsTable.setInput(results.toArray());
        final MenuManager menuMgr = new MenuManager();
        menuMgr.setRemoveAllWhenShown(true);
        menuMgr.addMenuListener(new IMenuListener() {

            public void menuAboutToShow(IMenuManager mgr) {
                if (false == GUIHelper.containsCursor(fragmentsTable.getTable())) {
                    return;
                }
                if (false == fragmentsTable.getSelection().isEmpty()) {
                    menuMgr.add(new Action("Edit Name") {

                        public void run() {
                            doEditName();
                        }
                    });
                    menuMgr.add(new Action("Edit Description") {

                        public void run() {
                            doEditDescription();
                        }
                    });
                    menuMgr.add(new Separator());
                }
                menuMgr.add(new Action("Select All") {

                    public void run() {
                        fragmentsTable.setAllChecked(true);
                        updateSelectionMonitor();
                    }
                });
                menuMgr.add(new Separator());
                menuMgr.add(new Action("Unselect All") {

                    public void run() {
                        fragmentsTable.setAllChecked(false);
                        updateSelectionMonitor();
                    }
                });
            }
        });
        fragmentsTable.getTable().setMenu(menuMgr.createContextMenu(fragmentsTable.getTable()));
        fragmentsTable.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                updatePreviewPanel((IStructuredSelection) event.getSelection());
            }
        });
        new FragmentsToolTipProvider(this.fragmentsTable.getTable());
        Group previewGroup = new Group(splitter, SWT.NONE);
        previewGroup.setLayout(new GridLayout(1, false));
        previewGroup.setText("Fragment Preview");
        createZoomToolbar(previewGroup);
        previewArea = new Composite(previewGroup, SWT.BORDER);
        previewArea.setLayoutData(new GridData(GridData.FILL_BOTH));
        previewArea.setLayout(new GridLayout(1, false));
        viewer = new ScrollingGraphicalViewer();
        viewer.createControl(previewArea);
        ScalableFreeformRootEditPart rootEditPart = new ScalableFreeformRootEditPart();
        viewer.setRootEditPart(rootEditPart);
        viewer.setEditPartFactory(new GraphicalPartFactory());
        viewer.getControl().setBackground(ColorConstants.listBackground);
        viewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
        ZoomManager zoomManager = rootEditPart.getZoomManager();
        ArrayList<String> zoomContributions = new ArrayList<String>();
        zoomContributions.add(ZoomManager.FIT_ALL);
        zoomContributions.add(ZoomManager.FIT_HEIGHT);
        zoomContributions.add(ZoomManager.FIT_WIDTH);
        zoomManager.setZoomLevelContributions(zoomContributions);
        zoomManager.setZoomLevels(new double[] { 0.25, 0.33, 0.5, 0.75, 1.0 });
        zoomManager.setZoom(1.0);
        Composite businessGoalPanel = new Composite(previewGroup, SWT.NONE);
        businessGoalPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        businessGoalPanel.setLayout(new GridLayout(4, false));
        Label lab = new Label(businessGoalPanel, SWT.NONE);
        lab.setText("Process goal:");
        bpgIRI = new Text(businessGoalPanel, SWT.BORDER | SWT.READ_ONLY);
        bpgIRI.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        selectBpgButton = new Button(businessGoalPanel, SWT.NONE);
        selectBpgButton.setText("Select");
        selectBpgButton.setEnabled(false);
        selectBpgButton.addSelectionListener(new SelectionAdapter() {

            public void widgetSelected(SelectionEvent s) {
                doSelectProcessGoal();
            }
        });
        clearBpgButton = new Button(businessGoalPanel, SWT.NONE);
        clearBpgButton.setText("Clear");
        clearBpgButton.setEnabled(false);
        clearBpgButton.addSelectionListener(new SelectionAdapter() {

            public void widgetSelected(SelectionEvent s) {
                IStructuredSelection sel = (IStructuredSelection) fragmentsTable.getSelection();
                if (sel.isEmpty() || false == sel.getFirstElement() instanceof ProcessFragment) {
                    return;
                }
                ((ProcessFragment) sel.getFirstElement()).setBusinessProcessGoal(null);
                updatePreviewPanel(sel);
            }
        });
        splitter.setWeights(new int[] { 1, 2 });
    }
} </s>
<s>class temp {    public static void copyFile(String from, String to, boolean append) throws IOException {
        FileChannel in = new FileInputStream(from).getChannel();
        FileChannel out = new FileOutputStream(to, append).getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);
        while (in.read(buffer) != -1) {
            buffer.flip();
            out.write(buffer);
            buffer.clear();
        }
    }
} </s>
<s>class temp {    public void fetchFile(String ID) {
        String url = "http://www.nal.usda.gov/cgi-bin/agricola-ind?bib=" + ID + "&conf=010000++++++++++++++&screen=MA";
        System.out.println(url);
        try {
            PrintWriter pw = new PrintWriter(new FileWriter("MARC" + ID + ".txt"));
            if (!id.contains("MARC" + ID + ".txt")) {
                id.add("MARC" + ID + ".txt");
            }
            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
            in.readLine();
            String inputLine, stx = "";
            StringBuffer sb = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith("<TR><TD><B>")) {
                    String sts = (inputLine.substring(inputLine.indexOf("B>") + 2, inputLine.indexOf("</")));
                    int i = 0;
                    try {
                        i = Integer.parseInt(sts);
                    } catch (NumberFormatException nfe) {
                    }
                    if (i > 0) {
                        stx = stx + "\n" + sts + " - ";
                    } else {
                        stx += sts;
                    }
                }
                if (!(inputLine.startsWith("<") || inputLine.startsWith(" <") || inputLine.startsWith(">"))) {
                    String tx = inputLine.trim();
                    stx += tx;
                }
            }
            pw.println(stx);
            pw.close();
        } catch (Exception e) {
            System.out.println("Couldn't open stream");
            System.out.println(e);
        }
    }
} </s>
<s>class temp {    public void afficherMetar(String oaci) {
        if (oaci.length() != 4) {
            System.out.println("un code METAR est composé de 4 caracteres");
        }
        oaci.toUpperCase();
        try {
            URL url = new URL("http://weather.noaa.gov/pub/data/observations/metar/stations/" + oaci + ".TXT");
            System.out.println(url.toString());
            Proxy acReunion = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("proxy.ac-reunion.fr", 8080));
            HttpURLConnection con = (HttpURLConnection) url.openConnection(acReunion);
            InputStreamReader isr = new InputStreamReader(con.getInputStream());
            BufferedReader in = new BufferedReader(isr);
            Vector vListe = new Vector();
            String line;
            System.out.println("Affichage METAR");
            System.out.println("--------");
            while ((line = in.readLine()) != null) {
                System.out.println(line);
                vListe.add(line);
            }
            System.out.println("--------");
            in.close();
        } catch (java.io.FileNotFoundException e) {
            System.out.println("Impossible de trouver le METAR");
            System.out.println(e);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
} </s>
<s>class temp {    public void downloadTranslationsAndReload() {
        File languages = new File(this.translationsFile);
        try {
            URL languageURL = new URL(languageServer);
            InputStream is = languageURL.openStream();
            OutputStream os = new FileOutputStream(languages);
            byte[] read = new byte[512000];
            int bytesRead = 0;
            do {
                bytesRead = is.read(read);
                if (bytesRead > 0) {
                    os.write(read, 0, bytesRead);
                }
            } while (bytesRead > 0);
            is.close();
            os.close();
            this.loadTranslations();
        } catch (Exception e) {
            System.err.println("Remote languages file not found!");
            if (languages.exists()) {
                try {
                    XMLDecoder loader = new XMLDecoder(new FileInputStream(languages));
                    this.languages = (Hashtable) loader.readObject();
                    loader.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                    this.languages.put(naiveLanguage, new Hashtable());
                }
            } else this.languages.put(naiveLanguage, new Hashtable());
        }
    }
} </s>
<s>class temp {    private void externalizeFiles(Document doc, File out) throws IOException {
        File[] files = doc.getImages();
        if (files.length > 0) {
            File dir = new File(out.getParentFile(), out.getName() + ".images");
            if (!dir.mkdirs()) throw new IOException("cannot create directory " + dir);
            if (dir.exists()) {
                for (int i = 0; i < files.length; i++) {
                    File file = files[i];
                    File copy = new File(dir, file.getName());
                    FileChannel from = null, to = null;
                    long count = -1;
                    try {
                        from = new FileInputStream(file).getChannel();
                        count = from.size();
                        to = new FileOutputStream(copy).getChannel();
                        from.transferTo(0, count, to);
                        doc.setImage(file, dir.getName() + "/" + copy.getName());
                    } catch (Throwable t) {
                        LOG.log(Level.WARNING, "Copying '" + file + "' to '" + copy + "' failed (size=" + count + ")", t);
                    } finally {
                        try {
                            to.close();
                        } catch (Throwable t) {
                        }
                        try {
                            from.close();
                        } catch (Throwable t) {
                        }
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    protected static void clearTables() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate("delete from Objects");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (1, 'Money value')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (2, 'Date')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (3, 'Unix path')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (4, 'Dos path')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (5, 'Time')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (6, 'IP address')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (7, 'Internet hostname')");
            stmt.executeUpdate("insert into Objects (ObjectId, Description) values (8, 'Number')");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
} </s>
<s>class temp {    public final void close() throws IOException {
        if (dataStream == null) throw new NullPointerException("Write stream is null.");
        dataStream.flush();
        dataStream.close();
        dataStream = null;
        File tmpFile = new File(packPath + ".tmp");
        FileOutputStream packStream = new FileOutputStream(packPath);
        try {
            String nbFiles = Long.toString(currentNbFiles) + "\0";
            packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));
            structBufferWriter.flush();
            structBufferWriter.close();
            int headerSize = structBuffer.size() + nbFiles.length();
            packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));
            packStream.write('\0');
            packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));
            structBuffer.writeTo(packStream);
            structBufferWriter = null;
            structBuffer = null;
            FileInputStream in = new FileInputStream(tmpFile);
            try {
                byte[] buffer = new byte[FILE_COPY_BUFFER_LEN];
                int read;
                while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read);
                packStream.flush();
                packStream.close();
            } finally {
                Utilities.closeStream(in);
            }
        } finally {
            Utilities.closeStream(packStream);
        }
        if (tmpFile.isFile()) Utilities.deleteFile(tmpFile);
        packPath = null;
        structBuffer = null;
    }
} </s>
<s>class temp {    public RespID(PublicKey key) throws OCSPException {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA1");
            ASN1InputStream aIn = new ASN1InputStream(key.getEncoded());
            SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(aIn.readObject());
            digest.update(info.getPublicKeyData().getBytes());
            ASN1OctetString keyHash = new DEROctetString(digest.digest());
            this.id = new ResponderID(keyHash);
        } catch (Exception e) {
            throw new OCSPException("problem creating ID: " + e, e);
        }
    }
} </s>
<s>class temp {    public static void copyFile(File source, File destination, boolean lazy) {
        if (!source.exists()) {
            return;
        }
        if (lazy) {
            String oldContent = null;
            try {
                oldContent = read(source);
            } catch (Exception e) {
                return;
            }
            String newContent = null;
            try {
                newContent = read(destination);
            } catch (Exception e) {
            }
            if (oldContent == null || !oldContent.equals(newContent)) {
                copyFile(source, destination, false);
            }
        } else {
            if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
                destination.getParentFile().mkdirs();
            }
            try {
                FileChannel srcChannel = new FileInputStream(source).getChannel();
                FileChannel dstChannel = new FileOutputStream(destination).getChannel();
                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                srcChannel.close();
                dstChannel.close();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public static int copy(File src, int amount, File dst) {
        final int BUFFER_SIZE = 1024;
        int amountToRead = amount;
        boolean ok = true;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new BufferedInputStream(new FileInputStream(src));
            out = new BufferedOutputStream(new FileOutputStream(dst));
            byte[] buf = new byte[BUFFER_SIZE];
            while (amountToRead > 0) {
                int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead));
                if (read == -1) break;
                amountToRead -= read;
                out.write(buf, 0, read);
            }
        } catch (IOException e) {
        } finally {
            if (in != null) try {
                in.close();
            } catch (IOException e) {
            }
            if (out != null) {
                try {
                    out.flush();
                } catch (IOException e) {
                }
                try {
                    out.close();
                } catch (IOException e) {
                }
            }
        }
        return amount - amountToRead;
    }
} </s>
<s>class temp {    @Test
    public void testRegister() {
        try {
            String username = "muchu";
            String password = "123";
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(password.getBytes());
            String passwordMd5 = new String(md5.digest());
            LogService logServiceMock = EasyMock.createMock(LogService.class);
            DbService dbServiceMock = EasyMock.createMock(DbService.class);
            userServ.setDbServ(dbServiceMock);
            userServ.setLogger(logServiceMock);
            IFeelerUser user = new FeelerUserImpl();
            user.setUsername(username);
            user.setPassword(passwordMd5);
            logServiceMock.info(DbUserServiceImpl.class, ">>>rigister " + username + "<<<");
            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(null);
            dbServiceMock.addFeelerUser(username, passwordMd5);
            logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");
            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);
            EasyMock.replay(dbServiceMock, logServiceMock);
            Assert.assertTrue(userServ.register(username, password));
            EasyMock.verify(dbServiceMock, logServiceMock);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    @Test
    public void testIdentification() {
        try {
            String username = "muchu";
            String password = "123";
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(password.getBytes());
            LogService logServiceMock = EasyMock.createMock(LogService.class);
            DbService dbServiceMock = EasyMock.createMock(DbService.class);
            userServ.setDbServ(dbServiceMock);
            userServ.setLogger(logServiceMock);
            logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<");
            IFeelerUser user = new FeelerUserImpl();
            user.setUsername(username);
            user.setPassword(new String(md5.digest()));
            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);
            EasyMock.replay(logServiceMock, dbServiceMock);
            Assert.assertTrue(userServ.identification(username, password));
            EasyMock.verify(logServiceMock, dbServiceMock);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    protected HttpResponseImpl makeRequest(final HttpMethod m, final String requestId) {
        try {
            HttpResponseImpl ri = new HttpResponseImpl();
            ri.setRequestMethod(m);
            ri.setResponseCode(_client.executeMethod(m));
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            IOUtils.copy(m.getResponseBodyAsStream(), bos);
            ri.setResponseBody(bos.toByteArray());
            notifyOfRequestSuccess(requestId, m, ri);
            return ri;
        } catch (HttpException ex) {
            notifyOfRequestFailure(requestId, m, ex);
        } catch (IOException ex) {
            notifyOfRequestFailure(requestId, m, ex);
        }
        return null;
    }
} </s>
<s>class temp {    private static void loadFromZip() {
        InputStream in = Resources.class.getResourceAsStream("data.zip");
        if (in == null) {
            return;
        }
        ZipInputStream zipIn = new ZipInputStream(in);
        try {
            while (true) {
                ZipEntry entry = zipIn.getNextEntry();
                if (entry == null) {
                    break;
                }
                String entryName = entry.getName();
                if (!entryName.startsWith("/")) {
                    entryName = "/" + entryName;
                }
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                IOUtils.copy(zipIn, out);
                zipIn.closeEntry();
                FILES.put(entryName, out.toByteArray());
            }
            zipIn.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    @Override
    public MD2Model loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {
        boolean baseURLWasNull = setBaseURLFromModelURL(url);
        MD2Model model = loadModel(url.openStream(), skin);
        if (baseURLWasNull) {
            popBaseURL();
        }
        return (model);
    }
} </s>
<s>class temp {    public void test() throws Exception {
        StorageStringWriter s = new StorageStringWriter(2048, "UTF-8");
        s.addText("Test");
        try {
            s.getOutputStream();
            fail("Should throw IOException as method not supported.");
        } catch (IOException e) {
        }
        s.getWriter().write("ing is important");
        s.close(ResponseStateOk.getInstance());
        assertEquals("Testing is important", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, "UTF-8");
        assertEquals("Testing is important", writer.toString());
        try {
            s.getWriter();
            fail("Should throw IOException as storage is closed.");
        } catch (IOException e) {
        }
    }
} </s>
<s>class temp {    public static String urlContentToString(URL url, String encoding) throws IOException {
        String out = "";
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), Constants.ENCODING));
        String line;
        while ((line = in.readLine()) != null) {
            out += line;
        }
        in.close();
        return out;
    }
} </s>
<s>class temp {    private static byte[] getHashValue(INewEntryDescriptor descriptor) {
        String timeStamp = Calendar.getInstance().getTime().toString();
        MessageDigest sha1;
        byte[] digest = { 0 };
        try {
            sha1 = MessageDigest.getInstance("SHA-1");
            sha1.update(descriptor.getContactName().getBytes());
            sha1.update(descriptor.getAlgorithmName().getBytes());
            sha1.update(descriptor.getProvider().getBytes());
            return digest = sha1.digest(timeStamp.getBytes());
        } catch (NoSuchAlgorithmException e) {
            logger.error("NoSuchAlgorithmException while digesting", e);
        }
        return digest;
    }
} </s>
<s>class temp {    protected void handleUrl(URL url) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String s;
        boolean moreResults = false;
        while ((s = in.readLine()) != null) {
            if (s.indexOf("<h1>Search Results</h1>") > -1) {
                System.err.println("found severals result");
                moreResults = true;
            } else if (s.indexOf("Download <a href=") > -1) {
                if (s.indexOf("in JCAMP-DX format.") > -1) {
                    System.err.println("download masspec");
                    super.handleUrl(new URL((url.getProtocol() + "://" + url.getHost() + s.substring(s.indexOf("\"") + 1, s.lastIndexOf("\""))).replaceAll("amp;", "")));
                }
                moreResults = false;
            }
            if (moreResults == true) {
                if (s.indexOf("<li><a href=\"/cgi/cbook.cgi?ID") > -1) {
                    System.err.println("\tdownloading new url " + new URL((url.getProtocol() + "://" + url.getHost() + s.substring(s.indexOf("\"") + 1, s.lastIndexOf("\""))).replaceAll("amp;", "")));
                    this.handleUrl(new URL((url.getProtocol() + "://" + url.getHost() + s.substring(s.indexOf("\"") + 1, s.lastIndexOf("\""))).replaceAll("amp;", "")));
                }
            }
        }
    }
} </s>
<s>class temp {    private int[] Tri(int[] pertinence, int taille) {
        boolean change = true;
        int tmp;
        while (change) {
            change = false;
            for (int i = 0; i < taille - 2; i++) {
                if (pertinence[i] < pertinence[i + 1]) {
                    tmp = pertinence[i];
                    pertinence[i] = pertinence[i + 1];
                    pertinence[i + 1] = tmp;
                    change = true;
                }
            }
        }
        return pertinence;
    }
} </s>
<s>class temp {    private String digestPassword(String password) {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance("MD5");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte[] messageDigest = algorithm.digest();
            for (byte b : messageDigest) {
                hexString.append(Integer.toHexString(0xFF & b));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    public void testRoundTrip_1(String resource) throws Exception {
        long start1 = System.currentTimeMillis();
        File originalFile = File.createTempFile("RoundTripTest", "testRoundTrip_1");
        FileOutputStream fos = new FileOutputStream(originalFile);
        IOUtils.copy(getClass().getResourceAsStream(resource), fos);
        fos.close();
        long start2 = System.currentTimeMillis();
        IsoFile isoFile = new IsoFile(new FileInputStream(originalFile).getChannel());
        long start3 = System.currentTimeMillis();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel wbc = Channels.newChannel(baos);
        long start4 = System.currentTimeMillis();
        Walk.through(isoFile);
        long start5 = System.currentTimeMillis();
        isoFile.getBox(wbc);
        wbc.close();
        long start6 = System.currentTimeMillis();
        System.err.println("Preparing tmp copy took: " + (start2 - start1) + "ms");
        System.err.println("Parsing took           : " + (start3 - start2) + "ms");
        System.err.println("Writing took           : " + (start6 - start3) + "ms");
        System.err.println("Walking took           : " + (start5 - start4) + "ms");
        byte[] a = IOUtils.toByteArray(getClass().getResourceAsStream(resource));
        byte[] b = baos.toByteArray();
        Assert.assertArrayEquals(a, b);
    }
} </s>
<s>class temp {    protected InputStream createIconType(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        JavaliController.debug(JavaliController.LG_VERBOSE, "Creating iconType");
        String cHash = PRM_TYPE + "=" + TP_ICON;
        String iconName = req.getParameter("iconName");
        if (iconName == null) {
            res.sendError(res.SC_NOT_FOUND);
            return null;
        }
        Locale loc = null;
        HttpSession sess = req.getSession(false);
        JavaliSession jsess = null;
        int menuType = -1;
        String menuTypeString = req.getParameter(PRM_MENU_TYPE);
        try {
            menuType = new Integer(menuTypeString).intValue();
        } catch (Exception e) {
        }
        if (sess != null) jsess = (JavaliSession) sess.getAttribute(FormConstants.SESSION_BINDING);
        if (jsess != null && jsess.getUser() != null) loc = jsess.getUser().getLocale(); else if (sess != null) loc = (Locale) sess.getAttribute(FormConstants.LOCALE_BINDING);
        if (loc == null) loc = Locale.getDefault();
        if (menuType == -1) menuType = MENU_TYPE_TEXTICON;
        String iconText = JavaliResource.getString("icon." + iconName, loc);
        if (iconText == null) {
            iconText = req.getParameter(PRM_MENU_NAME);
            if (iconText == null) iconText = "";
        }
        cHash += ", " + PRM_ICON_NAME + "=" + iconName + ", text=" + iconText + ", menuType=" + menuType;
        String iconFileName = null;
        String fontName = req.getParameter(PRM_FONT_NAME);
        if (fontName == null) {
            fontName = "Helvetica";
        }
        cHash += "," + PRM_FONT_NAME + "=" + fontName;
        String fontSizeString = req.getParameter(PRM_FONT_SIZE);
        int fontSize;
        try {
            fontSize = Integer.parseInt(fontSizeString);
        } catch (NumberFormatException nfe) {
            fontSize = 12;
        }
        cHash += "," + PRM_FONT_SIZE + "=" + fontSize;
        String fontTypeString = req.getParameter(PRM_FONT_TYPE);
        int fontType = Font.BOLD;
        if ("PLAIN".equalsIgnoreCase(fontTypeString)) fontType = Font.PLAIN;
        if ("BOLD".equalsIgnoreCase(fontTypeString)) fontType = Font.BOLD;
        if ("ITALIC".equalsIgnoreCase(fontTypeString)) fontType = Font.ITALIC;
        if ("ITALICBOLD".equalsIgnoreCase(fontTypeString) || "BOLDITALIC".equalsIgnoreCase(fontTypeString) || "BOLD_ITALIC".equalsIgnoreCase(fontTypeString) || "ITALIC_BOLD".equalsIgnoreCase(fontTypeString)) {
            fontType = Font.ITALIC | Font.BOLD;
        }
        cHash += "," + PRM_FONT_TYPE + "=" + fontType;
        String fontColor = req.getParameter(PRM_FONT_COLOR);
        if (fontColor == null || fontColor.equals("")) fontColor = "0x000000";
        cHash += "," + PRM_FONT_COLOR + "=" + fontColor;
        String fName = cacheInfo.file(cHash);
        JavaliController.debug(JavaliController.LG_VERBOSE, "Called for: " + fName);
        if (fName == null) {
            JavaliController.debug(JavaliController.LG_VERBOSE, "No cache found for: " + cHash);
            if (getServletConfig() != null && getServletConfig().getServletContext() != null) {
                if (iconName != null && iconName.startsWith("/")) iconFileName = getServletConfig().getServletContext().getRealPath(iconName + ".gif"); else iconFileName = getServletConfig().getServletContext().getRealPath("/icons/" + iconName + ".gif");
                File iconFile = new File(iconFileName);
                if (!iconFile.exists()) {
                    JavaliController.debug(JavaliController.LG_VERBOSE, "Could not find: " + iconFileName);
                    res.sendError(res.SC_NOT_FOUND);
                    return null;
                }
                iconFileName = iconFile.getAbsolutePath();
                JavaliController.debug(JavaliController.LG_VERBOSE, "file: " + iconFileName + " and cHash=" + cHash);
            } else {
                JavaliController.debug(JavaliController.LG_VERBOSE, "No ServletConfig=" + getServletConfig() + " or servletContext");
                res.sendError(res.SC_NOT_FOUND);
                return null;
            }
            File tmp = File.createTempFile(PREFIX, SUFIX, cacheDir);
            OutputStream out = new FileOutputStream(tmp);
            if (menuType == MENU_TYPE_ICON) {
                FileInputStream in = new FileInputStream(iconFileName);
                byte buf[] = new byte[2048];
                int read = -1;
                while ((read = in.read(buf)) != -1) out.write(buf, 0, read);
            } else if (menuType == MENU_TYPE_TEXT) MessageImage.sendAsGIF(MessageImage.makeMessageImage(iconText, fontName, fontSize, fontType, fontColor, false, "0x000000", true), out); else MessageImage.sendAsGIF(MessageImage.makeIconImage(iconFileName, iconText, fontName, fontColor, fontSize, fontType), out);
            out.close();
            cacheInfo.putFile(cHash, tmp);
            fName = cacheInfo.file(cHash);
        }
        return new FileInputStream(new File(cacheDir, fName));
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        System.out.println("Start filtering zgps...");
        final Config config = Gbl.createConfig(args);
        final String CONFIG_MODULE = "GPSFilterZGPS";
        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, "sourceFileSelectedStages"));
        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, "sourceFileZGPS"));
        File targetFile = new File(config.findParam(CONFIG_MODULE, "targetFile"));
        System.out.println("Start reading selected stages...");
        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();
        selectedStages.createSelectedStages(sourceFileSelectedStages);
        System.out.println("Done. " + selectedStages.getSelectedStages().size() + " stages were stored");
        System.out.println("Start reading and writing zgps...");
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));
            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));
            out.write(in.readLine());
            out.newLine();
            String lineFromInputFile;
            while ((lineFromInputFile = in.readLine()) != null) {
                String[] entries = lineFromInputFile.split("\t");
                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {
                    out.write(lineFromInputFile);
                    out.newLine();
                    out.flush();
                }
            }
            in.close();
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println("Could not find source file for selected stages.");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("IO Exception while reading or writing zgps.");
            e.printStackTrace();
        }
        System.out.println("Done.");
    }
} </s>
<s>class temp {    private ShaderProgram loadShaderProgram() {
        ShaderProgram sp = null;
        String vertexProgram = null;
        String fragmentProgram = null;
        Shader[] shaders = new Shader[2];
        try {
            ClassLoader cl = this.getClass().getClassLoader();
            URL url = cl.getResource("Shaders/simple.vert");
            System.out.println("url " + url);
            InputStream inputSteam = cl.getResourceAsStream("Shaders/simple.vert");
            Reader reader = null;
            if (inputSteam != null) {
                reader = new InputStreamReader(inputSteam);
            } else {
                File file = new File("lib");
                URL url2 = new URL("jar:file:" + file.getAbsolutePath() + "/j3d-vrml97-i3mainz.jar!/Shaders/simple.vert");
                InputStream inputSteam2 = url2.openStream();
                reader = new InputStreamReader(inputSteam2);
            }
            char[] buffer = new char[10000];
            int len = reader.read(buffer);
            vertexProgram = new String(buffer);
            vertexProgram = vertexProgram.substring(0, len);
        } catch (Exception e) {
            System.err.println("could'nt load simple.vert");
            e.printStackTrace();
        }
        try {
            ClassLoader cl = this.getClass().getClassLoader();
            URL url = cl.getResource("Shaders/simple.frag");
            System.out.println("url " + url);
            InputStream inputSteam = cl.getResourceAsStream("Shaders/simple.frag");
            Reader reader = null;
            if (inputSteam != null) {
                reader = new InputStreamReader(inputSteam);
            } else {
                File file = new File("lib");
                URL url2 = new URL("jar:file:" + file.getAbsolutePath() + "/j3d-vrml97-i3mainz.jar!/Shaders/simple.frag");
                InputStream inputSteam2 = url2.openStream();
                reader = new InputStreamReader(inputSteam2);
            }
            char[] buffer = new char[10000];
            int len = reader.read(buffer);
            fragmentProgram = new String(buffer);
            fragmentProgram = fragmentProgram.substring(0, len);
        } catch (Exception e) {
            System.err.println("could'nt load simple.frag");
            e.printStackTrace();
        }
        if (vertexProgram != null && fragmentProgram != null) {
            shaders[0] = new SourceCodeShader(Shader.SHADING_LANGUAGE_GLSL, Shader.SHADER_TYPE_VERTEX, vertexProgram);
            shaders[1] = new SourceCodeShader(Shader.SHADING_LANGUAGE_GLSL, Shader.SHADER_TYPE_FRAGMENT, fragmentProgram);
            sp = new GLSLShaderProgram();
            sp.setShaders(shaders);
        }
        return sp;
    }
} </s>
<s>class temp {    public static void convertEncoding(File infile, File outfile, String from, String to) throws IOException, UnsupportedEncodingException {
        InputStream in;
        if (infile != null) in = new FileInputStream(infile); else in = System.in;
        OutputStream out;
        outfile.createNewFile();
        if (outfile != null) out = new FileOutputStream(outfile); else out = System.out;
        if (from == null) from = System.getProperty("file.encoding");
        if (to == null) to = "Unicode";
        Reader r = new BufferedReader(new InputStreamReader(in, from));
        Writer w = new BufferedWriter(new OutputStreamWriter(out, to));
        char[] buffer = new char[4096];
        int len;
        while ((len = r.read(buffer)) != -1) w.write(buffer, 0, len);
        r.close();
        w.close();
    }
} </s>
<s>class temp {    public void testFileSystem() throws IOException {
        Fragment f = Fragment.EMPTY;
        Fragment g = f.plus(System.getProperty("java.io.tmpdir"));
        Fragment h = f.plus("april", "1971", "data.txt");
        Fragment i = f.plus(g, h);
        InOutLocation iol = locs.fs.plus(i);
        PrintStream ps = new PrintStream(iol.openOutput());
        List<String> expected = new ArrayList<String>();
        expected.add("So I am stepping out this old brown shoe");
        expected.add("Maybe I'm in love with you");
        for (String s : expected) ps.println(s);
        ps.close();
        InLocation inRoot = locs.fs;
        List<String> lst = read(inRoot.plus(i).openInput());
        assertEquals(expected, lst);
        URL url = iol.toUrl();
        lst = read(url.openStream());
        assertEquals(expected, lst);
    }
} </s>
<s>class temp {    public static String hash(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(text.getBytes());
            byte[] digest = md.digest();
            StringBuffer sb = new StringBuffer(digest.length * 2);
            for (int i = 0; i < digest.length; ++i) {
                byte b = digest[i];
                int high = (b & 0xF0) >> 4;
                int low = b & 0xF;
                sb.append(DECIMAL_HEX[high]);
                sb.append(DECIMAL_HEX[low]);
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new NonBusinessException("Error hashing string", e);
        }
    }
} </s>
<s>class temp {    private HttpURLConnection connect() throws MalformedURLException, IOException {
        HttpURLConnection connection = null;
        if (repositoryLocation == null) {
            Utils.debug("RemoteRepository", "repository Location unspecified");
            return null;
        }
        URL url = new URL(repositoryLocation);
        connection = (HttpURLConnection) url.openConnection();
        return connection;
    }
} </s>
<s>class temp {    private static byte[] calcMd5(String pass) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance("MD5");
            digest.update(pass.getBytes(), 0, pass.length());
            byte[] hash = digest.digest();
            return hash;
        } catch (NoSuchAlgorithmException e) {
            System.err.println("No MD5 algorithm found");
            System.exit(1);
        }
        return null;
    }
} </s>
<s>class temp {    private static void cut() {
        File inputFile = new File(inputFileName);
        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile), inputCharSet));
        } catch (FileNotFoundException e) {
            System.err.print("Invalid File Name!");
            System.err.flush();
            System.exit(1);
        } catch (UnsupportedEncodingException e) {
            System.err.print("Invalid Char Set Name!");
            System.err.flush();
            System.exit(1);
        }
        switch(cutMode) {
            case charMode:
                {
                    int outputFileIndex = 1;
                    char[] readBuf = new char[charPerFile];
                    while (true) {
                        int readCount = 0;
                        try {
                            readCount = in.read(readBuf);
                        } catch (IOException e) {
                            System.err.println("Read IO Error!");
                            System.err.flush();
                            System.exit(1);
                        }
                        if (-1 == readCount) break; else {
                            try {
                                int ppos = inputFileName.lastIndexOf(".");
                                String prefixInputFileName = inputFileName.substring(0, ppos);
                                String postfixInputFileName = "html";
                                DecimalFormat outputFileIndexFormat = new DecimalFormat("0000");
                                File outputFile = new File(prefixInputFileName + "-" + outputFileIndexFormat.format(outputFileIndex) + "." + postfixInputFileName);
                                BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), outputCharSet));
                                out.write(readBuf, 0, readCount);
                                out.flush();
                                out.close();
                                outputFileIndex++;
                            } catch (IOException e) {
                                System.err.println("Write IO Error!");
                                System.err.flush();
                                System.exit(1);
                            }
                        }
                    }
                    break;
                }
            case lineMode:
                {
                    boolean isFileEnd = false;
                    int outputFileIndex = 1;
                    while (!isFileEnd) {
                        try {
                            int ppos = inputFileName.lastIndexOf(".");
                            String prefixInputFileName = inputFileName.substring(0, ppos);
                            String postfixInputFileName = inputFileName.substring(ppos + 1);
                            DecimalFormat outputFileIndexFormat = new DecimalFormat("0000");
                            File outputFile = new File(prefixInputFileName + outputFileIndexFormat.format(outputFileIndex) + "." + postfixInputFileName);
                            PrintStream out = new PrintStream(new FileOutputStream(outputFile), false, outputCharSet);
                            int p = 0;
                            while (p < linePerFile) {
                                String line = in.readLine();
                                if (null == line) {
                                    isFileEnd = true;
                                    break;
                                }
                                out.println(line);
                                ++p;
                            }
                            out.flush();
                            out.close();
                        } catch (IOException e) {
                            System.err.println("Write IO Error!");
                            System.err.flush();
                            System.exit(1);
                        }
                        ++outputFileIndex;
                    }
                    break;
                }
            case htmlMode:
                {
                    boolean isFileEnd = false;
                    int outputFileIndex = 1;
                    int ppos = inputFileName.lastIndexOf(".");
                    String prefixInputFileName = inputFileName.substring(0, ppos);
                    String postfixInputFileName = "html";
                    DecimalFormat df = new DecimalFormat("0000");
                    while (!isFileEnd) {
                        try {
                            File outputFile = new File(prefixInputFileName + "-" + df.format(outputFileIndex) + "." + postfixInputFileName);
                            PrintStream out = new PrintStream(new FileOutputStream(outputFile), false, outputCharSet);
                            out.println("<html><head><title>" + prefixInputFileName + "-" + df.format(outputFileIndex) + "</title>" + "<meta http-equiv=\"Content-Type\"" + " content=\"text/html; " + "charset=" + outputCharSet + "\" />" + "<link rel =\"stylesheet\" " + "type=\"text/css\" " + "href=\"stylesheet.css\" />" + "</head><body><div id=\"content\">");
                            int p = 0;
                            while (p < pPerFile) {
                                String line = in.readLine();
                                if (null == line) {
                                    isFileEnd = true;
                                    break;
                                }
                                if (line.length() > 0) out.println("<p>" + line + "</p>");
                                ++p;
                            }
                            out.println("</div><a href=\"" + prefixInputFileName + "-" + df.format(outputFileIndex + 1) + "." + postfixInputFileName + "\">NEXT</a></body></html>");
                            out.flush();
                            out.close();
                        } catch (IOException e) {
                            System.err.println("Write IO Error!");
                            System.err.flush();
                            System.exit(1);
                        }
                        ++outputFileIndex;
                    }
                    try {
                        File indexFile = new File("index.html");
                        PrintStream out = new PrintStream(new FileOutputStream(indexFile), false, outputCharSet);
                        out.println("<html><head><title>" + "Index" + "</title>" + "<meta http-equiv=\"Content-Type\"" + " content=\"text/html; " + "charset=" + outputCharSet + "\" />" + "<link rel =\"stylesheet\" " + "type=\"text/css\" " + "href=\"stylesheet.css\" />" + "</head><body><h2>" + htmlTitle + "</h2><div id=\"content\"><ul>");
                        for (int i = 1; i < outputFileIndex; i++) {
                            out.println("<li><a href=\"" + prefixInputFileName + "-" + df.format(i) + "." + postfixInputFileName + "\">" + df.format(i) + "</a></li>");
                        }
                        out.println("</ul></body></html>");
                        out.flush();
                        out.close();
                    } catch (IOException e) {
                        System.err.println("Write IO Error!");
                        System.err.flush();
                        System.exit(1);
                    }
                    break;
                }
        }
    }
} </s>
<s>class temp {    private void addConfigurationResource(final String fileName, NotFoundPolicy notFoundPolicy) {
        try {
            final ClassLoader cl = this.getClass().getClassLoader();
            final Properties p = new Properties();
            final URL url = cl.getResource(fileName);
            if (url == null) {
                throw new NakedObjectException("Failed to load configuration resource: " + fileName);
            }
            p.load(url.openStream());
            LOG.info("configuration resource " + fileName + " loaded");
            configuration.add(p);
        } catch (final Exception e) {
            if (notFoundPolicy == NotFoundPolicy.FAIL_FAST) {
                throw new NakedObjectException(e);
            }
            LOG.info("configuration resource " + fileName + " not found, but not needed");
        }
    }
} </s>
<s>class temp {    public String[] retrieveFasta(String id) throws Exception {
        URL url = new URL("http://www.ebi.ac.uk/ena/data/view/" + id + "&display=fasta");
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String header = reader.readLine();
        StringBuffer seq = new StringBuffer();
        String line = "";
        while ((line = reader.readLine()) != null) {
            seq.append(line);
        }
        reader.close();
        return new String[] { header, seq.toString() };
    }
} </s>
<s>class temp {    public FTPClient connect(String host, String userId, String password, String alias) throws IOException {
        FTPClient client = null;
        if (connections.get(alias) != null) {
            client = (FTPClient) connections.get(alias);
            if (client.isConnected() == false) {
                client.connect(host);
            }
        } else {
            client = new FTPClient();
            client.connect(host);
            client.login(userId, password);
            connections.put(alias, client);
        }
        return client;
    }
} </s>
<s>class temp {    protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
        Session session = HibernateUtil.getInstance().getSession();
        response.setBufferSize(65536);
        ServletOutputStream outStream = response.getOutputStream();
        File file = null;
        FileData fileData = null;
        try {
            String fileParameter = request.getParameter("file");
            String disposition = request.getParameter("disposition");
            if (fileParameter == null || fileParameter.equals("")) {
                String pi = request.getPathInfo();
                int lastSlashIndex = pi.lastIndexOf("/") + 1;
                fileParameter = pi.substring(lastSlashIndex, pi.indexOf("_", pi.lastIndexOf("/")));
            }
            if (fileParameter == null || fileParameter.equals("")) {
                response.sendError(HttpServletResponse.SC_BAD_REQUEST);
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                response.flushBuffer();
                Logger.log("file parameter not specified");
                return;
            }
            if (disposition == null || disposition.equals("")) {
                String pi = request.getPathInfo();
                String filename = pi.substring(pi.lastIndexOf("/") + 1);
                int underscoreIndex = filename.indexOf("_") + 1;
                disposition = filename.substring(underscoreIndex, filename.indexOf("_", underscoreIndex));
            }
            file = (File) session.load(File.class, new Long(fileParameter));
            Logger.log("Content requested=" + file.getName() + ":" + fileParameter + " Referral: " + request.getParameter("referer"));
            long ifModifiedSince = request.getDateHeader("If-Modified-Since");
            long fileDate = file.getLastModifiedDate() - (file.getLastModifiedDate() % 1000);
            if (fileDate <= ifModifiedSince) {
                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                if ("attachment".equals(disposition)) {
                    response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
                } else {
                    response.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"");
                }
                response.setContentType(file.getContentType());
                response.setHeader("Content-Description", file.getName());
                response.setDateHeader("Last-Modified", file.getLastModifiedDate());
                response.setDateHeader("Expires", System.currentTimeMillis() + 31536000000L);
                response.setContentLength((int) file.getSize());
                response.flushBuffer();
                Logger.log("Conditional GET: " + file.getName());
                return;
            }
            User authUser = baseService.getAuthenticatedUser(session, request, response);
            if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "Forbidden");
                response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                response.flushBuffer();
                Logger.log("Forbidden content requested: " + fileParameter);
                return;
            }
            String contentType = file.getContentType();
            response.setContentType(contentType);
            if ("attachment".equals(disposition)) {
                response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
            } else {
                response.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"");
            }
            String name = file.getName();
            response.setHeader("Content-Description", name);
            response.setDateHeader("Last-Modified", file.getLastModifiedDate());
            response.setDateHeader("Expires", System.currentTimeMillis() + 31536000000L);
            response.setContentLength((int) file.getSize());
            java.io.File possibleDataFile = new java.io.File(BaseSystem.getTempDir() + file.getNameOnDisk());
            if (possibleDataFile.exists()) {
                Logger.log("File exists in " + BaseSystem.getTempDir() + " pulling " + possibleDataFile.getName());
                FileInputStream fileInputStream = new FileInputStream(possibleDataFile);
                try {
                    IOUtils.copy(fileInputStream, outStream);
                } finally {
                    try {
                        fileInputStream.close();
                    } catch (Throwable t) {
                    }
                }
            } else {
                List<FileData> fileDataList = HibernateUtil.getInstance().executeQuery(session, "from " + FileData.class.getSimpleName() + " where permissibleObject.id = " + file.getId());
                if (fileDataList.size() == 0) {
                    response.sendError(HttpServletResponse.SC_NOT_FOUND);
                    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                    Logger.log("Requested content not found: " + fileParameter);
                    response.flushBuffer();
                    return;
                }
                fileData = (FileData) fileDataList.get(0);
                FileOutputStream fileOutputStream = null;
                try {
                    java.io.File tmpDir = new java.io.File(BaseSystem.getTempDir());
                    tmpDir.mkdirs();
                    fileOutputStream = new FileOutputStream(possibleDataFile);
                    IOUtils.write(fileData.getData(), fileOutputStream);
                } catch (Throwable t) {
                    Logger.log(t);
                } finally {
                    try {
                        fileOutputStream.close();
                    } catch (Throwable t) {
                    }
                }
                IOUtils.write(fileData.getData(), outStream);
            }
        } catch (Throwable t) {
            Logger.log(t);
            try {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                response.flushBuffer();
            } catch (Throwable tt) {
            }
            try {
                response.reset();
                response.resetBuffer();
            } catch (Throwable tt) {
            }
        } finally {
            file = null;
            fileData = null;
            try {
                outStream.flush();
            } catch (Throwable t) {
            }
            try {
                outStream.close();
            } catch (Throwable t) {
            }
            try {
                session.close();
            } catch (Throwable t) {
            }
        }
    }
} </s>
<s>class temp {    private void chooseGame(DefaultHttpClient httpclient) throws IOException, ClientProtocolException {
        HttpGet httpget = new HttpGet(Constants.STRATEGICDOMINATION_URL + "/gameboard.cgi?gameid=" + 1687);
        HttpResponse response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();
        System.out.println("cg form get: " + response.getStatusLine());
        if (entity != null) {
            InputStream inStream = entity.getContent();
            IOUtils.copy(inStream, System.out);
        }
        System.out.println("cg set of cookies:");
        List<Cookie> cookies = httpclient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
            System.out.println("None");
        } else {
            for (int i = 0; i < cookies.size(); i++) {
                System.out.println("- " + cookies.get(i).toString());
            }
        }
    }
} </s>
<s>class temp {    public String getLastVersion() {
        try {
            String server = icescrum2Properties.get("check.url").toString();
            Boolean useProxy = new Boolean(icescrum2Properties.get("proxy.active").toString());
            Boolean authProxy = new Boolean(icescrum2Properties.get("proxy.auth.active").toString());
            URL url = new URL(server);
            if (useProxy) {
                String proxy = icescrum2Properties.get("proxy.url").toString();
                String port = icescrum2Properties.get("proxy.port").toString();
                Properties systemProperties = System.getProperties();
                systemProperties.setProperty("http.proxyHost", proxy);
                systemProperties.setProperty("http.proxyPort", port);
            }
            URLConnection connection = url.openConnection();
            if (authProxy) {
                String username = icescrum2Properties.get("proxy.auth.username").toString();
                String password = icescrum2Properties.get("proxy.auth.password").toString();
                String login = username + ":" + password;
                String encodedLogin = Base64.base64Encode(login);
                connection.setRequestProperty("Proxy-Authorization", "Basic " + encodedLogin);
            }
            connection.setConnectTimeout(Integer.parseInt(icescrum2Properties.get("check.timeout").toString()));
            InputStream input = connection.getInputStream();
            StringWriter writer = new StringWriter();
            InputStreamReader streamReader = new InputStreamReader(input);
            BufferedReader buffer = new BufferedReader(streamReader);
            String value = "";
            while (null != (value = buffer.readLine())) {
                writer.write(value);
            }
            return writer.toString();
        } catch (IOException e) {
        }
        return null;
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public T_Result unmarshall(URL url) throws SAXException, ParserConfigurationException, IOException {
        XMLReader parser = getParserFactory().newSAXParser().getXMLReader();
        parser.setContentHandler(getContentHandler());
        parser.setDTDHandler(getContentHandler());
        parser.setEntityResolver(getContentHandler());
        parser.setErrorHandler(getContentHandler());
        InputSource inputSource = new InputSource(url.openStream());
        inputSource.setSystemId(url.toString());
        parser.parse(inputSource);
        return contentHandler.getRootObject();
    }
} </s>
<s>class temp {    private static String getServiceResponse(final String requestName, final Template template, final Map variables) {
        OutputStreamWriter outputWriter = null;
        try {
            final StringWriter writer = new StringWriter();
            final VelocityContext context = new VelocityContext(variables);
            template.merge(context, writer);
            final String request = writer.toString();
            final URLConnection urlConnection = new URL(SERVICE_URL).openConnection();
            urlConnection.setUseCaches(false);
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2b4) Gecko/20091124 Firefox/3.6b4");
            urlConnection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
            urlConnection.setRequestProperty("Accept-Language", "en-us,en;q=0.5");
            urlConnection.setRequestProperty("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.7");
            urlConnection.setRequestProperty("Accept-Encoding", "gzip,deflate");
            urlConnection.setRequestProperty("Keep-Alive", "115");
            urlConnection.setRequestProperty("Connection", "keep-alive");
            urlConnection.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
            urlConnection.setRequestProperty("Content-Length", "" + request.length());
            urlConnection.setRequestProperty("SOAPAction", requestName);
            outputWriter = new OutputStreamWriter(urlConnection.getOutputStream(), "UTF-8");
            outputWriter.write(request);
            outputWriter.flush();
            final InputStream result = urlConnection.getInputStream();
            return IOUtils.toString(result);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        } finally {
            if (outputWriter != null) {
                try {
                    outputWriter.close();
                } catch (IOException logOrIgnore) {
                }
            }
        }
    }
} </s>
<s>class temp {    public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    public static String getMD5(String password) {
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance("MD5");
            md5.update(password.getBytes());
            String pwd = new BigInteger(1, md5.digest()).toString(16);
            return pwd;
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return password;
    }
} </s>
<s>class temp {    public static String[] bubbleSort(String[] unsortedString, boolean ascending) {
        if (unsortedString.length < 2) return unsortedString;
        String[] sortedString = new String[unsortedString.length];
        for (int i = 0; i < unsortedString.length; i++) {
            sortedString[i] = unsortedString[i];
        }
        if (ascending) {
            for (int i = 0; i < sortedString.length - 1; i++) {
                for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) {
                    String swap = sortedString[j];
                    sortedString[j] = sortedString[j + 1];
                    sortedString[j + 1] = swap;
                }
            }
        } else {
            for (int i = sortedString.length - 2; i >= 0; i--) {
                for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) {
                    String swap = sortedString[j];
                    sortedString[j] = sortedString[j + 1];
                    sortedString[j + 1] = swap;
                }
            }
        }
        return sortedString;
    }
} </s>
<s>class temp {    public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) {
        ActionMessages errors = new ActionMessages();
        ActionMessages messages = new ActionMessages();
        String returnPage = "submitPocketSampleInformationPage";
        UploadForm form = (UploadForm) actForm;
        Integer shippingId = null;
        try {
            eHTPXXLSParser parser = new eHTPXXLSParser();
            String proposalCode;
            String proposalNumber;
            String proposalName;
            String uploadedFileName;
            String realXLSPath;
            if (request != null) {
                proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE);
                proposalNumber = String.valueOf(request.getSession().getAttribute(Constants.PROPOSAL_NUMBER));
                proposalName = proposalCode + proposalNumber.toString();
                uploadedFileName = form.getRequestFile().getFileName();
                String fileName = proposalName + "_" + uploadedFileName;
                realXLSPath = request.getRealPath("\\tmp\\") + "\\" + fileName;
                FormFile f = form.getRequestFile();
                InputStream in = f.getInputStream();
                File outputFile = new File(realXLSPath);
                if (outputFile.exists()) outputFile.delete();
                FileOutputStream out = new FileOutputStream(outputFile);
                while (in.available() != 0) {
                    out.write(in.read());
                    out.flush();
                }
                out.flush();
                out.close();
            } else {
                proposalCode = "ehtpx";
                proposalNumber = "1";
                proposalName = proposalCode + proposalNumber.toString();
                uploadedFileName = "ispyb-template41.xls";
                realXLSPath = "D:\\" + uploadedFileName;
            }
            FileInputStream inFile = new FileInputStream(realXLSPath);
            parser.retrieveShippingId(realXLSPath);
            shippingId = parser.getShippingId();
            String requestShippingId = form.getShippingId();
            if (requestShippingId != null && !requestShippingId.equals("")) {
                shippingId = new Integer(requestShippingId);
            }
            ClientLogger.getInstance().debug("uploadFile for shippingId " + shippingId);
            if (shippingId != null) {
                Log.debug(" ---[uploadFile] Upload for Existing Shipment (DewarTRacking): Deleting Samples from Shipment :");
                double nbSamplesContainers = DBAccess_EJB.DeleteAllSamplesAndContainersForShipping(shippingId);
                if (nbSamplesContainers > 0) parser.getValidationWarnings().add(new XlsUploadException("Shipment contained Samples and/or Containers", "Previous Samples and/or Containers have been deleted and replaced by new ones.")); else parser.getValidationWarnings().add(new XlsUploadException("Shipment contained no Samples and no Containers", "Samples and Containers have been added."));
            }
            Hashtable<String, Hashtable<String, Integer>> listProteinAcronym_SampleName = new Hashtable<String, Hashtable<String, Integer>>();
            ProposalFacadeLocal proposal = ProposalFacadeUtil.getLocalHome().create();
            ProteinFacadeLocal protein = ProteinFacadeUtil.getLocalHome().create();
            CrystalFacadeLocal crystal = CrystalFacadeUtil.getLocalHome().create();
            ProposalLightValue targetProposal = (ProposalLightValue) (((ArrayList) proposal.findByCodeAndNumber(proposalCode, new Integer(proposalNumber))).get(0));
            ArrayList listProteins = (ArrayList) protein.findByProposalId(targetProposal.getProposalId());
            for (int p = 0; p < listProteins.size(); p++) {
                ProteinValue prot = (ProteinValue) listProteins.get(p);
                Hashtable<String, Integer> listSampleName = new Hashtable<String, Integer>();
                CrystalLightValue listCrystals[] = prot.getCrystals();
                for (int c = 0; c < listCrystals.length; c++) {
                    CrystalLightValue _xtal = (CrystalLightValue) listCrystals[c];
                    CrystalValue xtal = crystal.findByPrimaryKey(_xtal.getPrimaryKey());
                    BlsampleLightValue listSamples[] = xtal.getBlsamples();
                    for (int s = 0; s < listSamples.length; s++) {
                        BlsampleLightValue sample = listSamples[s];
                        listSampleName.put(sample.getName(), sample.getBlSampleId());
                    }
                }
                listProteinAcronym_SampleName.put(prot.getAcronym(), listSampleName);
            }
            parser.validate(inFile, listProteinAcronym_SampleName, targetProposal.getProposalId());
            List listErrors = parser.getValidationErrors();
            List listWarnings = parser.getValidationWarnings();
            if (listErrors.size() == 0) {
                parser.open(realXLSPath);
                if (parser.getCrystals().size() == 0) {
                    parser.getValidationErrors().add(new XlsUploadException("No crystals have been found", "Empty shipment"));
                }
            }
            Iterator errIt = listErrors.iterator();
            while (errIt.hasNext()) {
                XlsUploadException xlsEx = (XlsUploadException) errIt.next();
                errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("message.free", xlsEx.getMessage() + " ---> " + xlsEx.getSuggestedFix()));
            }
            try {
                saveErrors(request, errors);
            } catch (Exception e) {
            }
            Iterator warnIt = listWarnings.iterator();
            while (warnIt.hasNext()) {
                XlsUploadException xlsEx = (XlsUploadException) warnIt.next();
                messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("message.free", xlsEx.getMessage() + " ---> " + xlsEx.getSuggestedFix()));
            }
            try {
                saveMessages(request, messages);
            } catch (Exception e) {
            }
            if (listErrors.size() > 0) {
                resetCounts(shippingId);
                return mapping.findForward("submitPocketSampleInformationPage");
            }
            if (listWarnings.size() > 0) returnPage = "submitPocketSampleInformationPage";
            String crystalDetailsXML;
            XtalDetails xtalDetailsWebService = new XtalDetails();
            CrystalDetailsBuilder cDE = new CrystalDetailsBuilder();
            CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals());
            cDE.validateJAXBObject(cd);
            crystalDetailsXML = cDE.marshallJaxBObjToString(cd);
            xtalDetailsWebService.submitCrystalDetails(crystalDetailsXML);
            String diffractionPlan;
            DiffractionPlan diffractionPlanWebService = new DiffractionPlan();
            DiffractionPlanBuilder dPB = new DiffractionPlanBuilder();
            Iterator it = parser.getDiffractionPlans().iterator();
            while (it.hasNext()) {
                DiffractionPlanElement dpe = (DiffractionPlanElement) it.next();
                dpe.setProjectUUID(proposalName);
                diffractionPlan = dPB.marshallJaxBObjToString(dpe);
                diffractionPlanWebService.submitDiffractionPlan(diffractionPlan);
            }
            String crystalShipping;
            Shipping shippingWebService = new Shipping();
            CrystalShippingBuilder cSB = new CrystalShippingBuilder();
            Person person = cSB.createPerson("XLS Upload", null, "ISPyB", null, null, "ISPyB", null, "ispyb@esrf.fr", "0000", "0000", null, null);
            Laboratory laboratory = cSB.createLaboratory("Generic Laboratory", "ISPyB Lab", "Sandwich", "Somewhere", "UK", "ISPyB", "ispyb.esrf.fr", person);
            DeliveryAgent deliveryAgent = parser.getDeliveryAgent();
            CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars());
            String shippingName;
            shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xls")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xls") : 0);
            if (shippingName.equalsIgnoreCase("")) shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xlt")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xlt") : 0);
            cs.setName(shippingName);
            crystalShipping = cSB.marshallJaxBObjToString(cs);
            shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId);
            ServerLogger.Log4Stat("XLS_UPLOAD", proposalName, uploadedFileName);
        } catch (XlsUploadException e) {
            resetCounts(shippingId);
            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.detail", e.getMessage()));
            ClientLogger.getInstance().error(e.toString());
            saveErrors(request, errors);
            return mapping.findForward("error");
        } catch (Exception e) {
            resetCounts(shippingId);
            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.detail", e.toString()));
            ClientLogger.getInstance().error(e.toString());
            e.printStackTrace();
            saveErrors(request, errors);
            return mapping.findForward("error");
        }
        setCounts(shippingId);
        return mapping.findForward(returnPage);
    }
} </s>
<s>class temp {    private static void insertFiles(Connection con, File file) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(file));
        String line = bf.readLine();
        while (line != null) {
            if (!line.startsWith(" ") && !line.startsWith("#")) {
                try {
                    System.out.println("Exec: " + line);
                    PreparedStatement prep = con.prepareStatement(line);
                    prep.executeUpdate();
                    prep.close();
                    con.commit();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        con.rollback();
                    } catch (SQLException e1) {
                        e1.printStackTrace();
                    }
                }
            }
            line = bf.readLine();
        }
        bf.close();
    }
} </s>
<s>class temp {    String openUrlAsString(String address, int maxLines) {
        StringBuffer sb;
        try {
            URL url = new URL(address);
            InputStream in = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            sb = new StringBuffer();
            int count = 0;
            String line;
            while ((line = br.readLine()) != null && count++ < maxLines) sb.append(line + "\n");
            in.close();
        } catch (IOException e) {
            sb = null;
        }
        return sb != null ? new String(sb) : null;
    }
} </s>
<s>class temp {    String[] openUrlAsList(String address) {
        IJ.showStatus("Connecting to " + IJ.URL);
        Vector v = new Vector();
        try {
            URL url = new URL(address);
            InputStream in = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String line;
            while (true) {
                line = br.readLine();
                if (line == null) break;
                if (!line.equals("")) v.addElement(line);
            }
            br.close();
        } catch (Exception e) {
        }
        String[] lines = new String[v.size()];
        v.copyInto((String[]) lines);
        IJ.showStatus("");
        return lines;
    }
} </s>
<s>class temp {    public static void addIntegrityEnforcements(Session session) throws HibernateException {
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            Statement st = session.connection().createStatement();
            st.executeUpdate("DROP TABLE hresperformsrole;" + "CREATE TABLE hresperformsrole" + "(" + "hresid varchar(255) NOT NULL," + "rolename varchar(255) NOT NULL," + "CONSTRAINT hresperformsrole_pkey PRIMARY KEY (hresid, rolename)," + "CONSTRAINT ResourceFK FOREIGN KEY (hresid) REFERENCES resserposid (id) ON UPDATE CASCADE ON DELETE CASCADE," + "CONSTRAINT RoleFK FOREIGN KEY (rolename) REFERENCES role (rolename) ON UPDATE CASCADE ON DELETE CASCADE" + ");");
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
    }
} </s>
<s>class temp {    protected RemoteInputStream getUrlResource(URL url) throws IOException {
        URLConnection conn = url.openConnection();
        conn.setConnectTimeout(url_loading_time_out);
        conn.setReadTimeout(url_loading_time_out);
        conn.setRequestProperty("connection", "Keep-Alive");
        conn.connect();
        long last_modify_time = conn.getLastModified();
        IOCacheService cache_service = CIO.getAppBridge().getIO().getCache();
        if (cache_service != null) {
            RemoteInputStream cache = cache_service.findCache(url, last_modify_time);
            if (cache != null) {
                return cache;
            }
        }
        return new URLConnectionInputStream(url, conn);
    }
} </s>
<s>class temp {    public static boolean copyFile(String sourceName, String destName) {
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        boolean wasOk = false;
        try {
            sourceChannel = new FileInputStream(sourceName).getChannel();
            destChannel = new FileOutputStream(destName).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
            wasOk = true;
        } catch (Throwable exception) {
            logger.log(Level.SEVERE, "Exception in copyFile", exception);
        } finally {
            try {
                if (sourceChannel != null) sourceChannel.close();
            } catch (Throwable tt) {
            }
            try {
                if (destChannel != null) destChannel.close();
            } catch (Throwable tt) {
            }
        }
        return wasOk;
    }
} </s>
<s>class temp {    private static String hashPass(String p) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(p.getBytes("iso-8859-1"), 0, p.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
} </s>
<s>class temp {    @Override
    public void send() {
        BufferedReader in = null;
        StringBuffer result = new StringBuffer();
        try {
            URL url = new URL(getUrl());
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                result.append(str);
            }
        } catch (ConnectException ce) {
            logger.error("MockupExecutableCommand excute fail: " + ce.getMessage());
        } catch (Exception e) {
            logger.error("MockupExecutableCommand excute fail: " + e.getMessage());
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    logger.error("BufferedReader could not be closed", e);
                }
            }
        }
    }
} </s>
<s>class temp {    public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) {
        FileOutputStream os = null;
        DataOutputStream dos = null;
        try {
            LPKTable[] fileTable = new LPKTable[srcFilePath.length];
            long fileOffset = outputOffset(header);
            for (int i = 0; i < srcFilePath.length; i++) {
                String sourceFileName = FileUtils.getFileName(srcFilePath[i]);
                long sourceFileSize = FileUtils.getFileSize(srcFilePath[i]);
                LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset);
                fileOffset = outputNextOffset(sourceFileSize, fileOffset);
                fileTable[i] = ft;
            }
            File file = new File(makeFilePath);
            if (!file.exists()) {
                FileUtils.makedirs(file);
            }
            os = new FileOutputStream(file);
            dos = new DataOutputStream(os);
            dos.writeInt(header.getPAKIdentity());
            writeByteArray(header.getPassword(), dos);
            dos.writeFloat(header.getVersion());
            dos.writeLong(header.getTables());
            for (int i = 0; i < fileTable.length; i++) {
                writeByteArray(fileTable[i].getFileName(), dos);
                dos.writeLong(fileTable[i].getFileSize());
                dos.writeLong(fileTable[i].getOffSet());
            }
            for (int i = 0; i < fileTable.length; i++) {
                File ftFile = new File(srcFilePath[i]);
                FileInputStream ftFis = new FileInputStream(ftFile);
                DataInputStream ftDis = new DataInputStream(ftFis);
                byte[] buff = new byte[256];
                int readLength = 0;
                while ((readLength = ftDis.read(buff)) != -1) {
                    makeBuffer(buff, readLength);
                    dos.write(buff, 0, readLength);
                }
                ftDis.close();
                ftFis.close();
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            if (dos != null) {
                try {
                    dos.close();
                    dos = null;
                } catch (IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {        private String download(MacroManagerProgress progress, String fileName, String url) throws Exception {
            URLConnection conn = new URL(url).openConnection();
            progress.setMaximum(Math.max(0, conn.getContentLength()));
            String path = MiscUtilities.constructPath(installDirectory, fileName);
            if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true)) return null;
            if (archive_zip) {
                Enumeration entries;
                ZipFile zipFile;
                try {
                    File tempFile = new File(path);
                    zipFile = new ZipFile(tempFile);
                    entries = zipFile.entries();
                    while (entries.hasMoreElements()) {
                        ZipEntry entry = (ZipEntry) entries.nextElement();
                        if (entry.isDirectory()) {
                            String dpath = MiscUtilities.constructPath(installDirectory, entry.getName());
                            (new File(dpath)).mkdir();
                            continue;
                        }
                        progress.setMaximum((int) entry.getSize());
                        String ePath = MiscUtilities.constructPath(installDirectory, entry.getName());
                        copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true);
                    }
                    zipFile.close();
                    tempFile.delete();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            } else if (archive_gzip) {
                File srce = new File(path);
                GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(srce));
                File temp = File.createTempFile("macro", "mgr");
                progress.setMaximum((int) srce.length());
                copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true);
                TarArchive tarc = new TarArchive(new FileInputStream(temp));
                tarc.extractContents(new File(installDirectory));
                tarc.closeArchive();
                (new File(path)).delete();
            }
            return path;
        }
} </s>
<s>class temp {    public static Builder fromURL(URL url) {
        try {
            InputStream in = null;
            try {
                in = url.openStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                int read = -1;
                byte[] buf = new byte[4096];
                while ((read = in.read(buf)) >= 0) {
                    if (read > 0) {
                        baos.write(buf, 0, read);
                    }
                }
                StreamBuilder b = (StreamBuilder) fromMemory(baos.toByteArray());
                try {
                    b.setSystemId(url.toURI().toString());
                } catch (URISyntaxException use) {
                    b.setSystemId(url.toString());
                }
                return b;
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (IOException ex) {
            throw new XMLUnitException(ex);
        }
    }
} </s>
<s>class temp {    public void read(String skeletonFilename) throws Exception {
        ClassLoader loader = UnicodePropertiesSkeleton.class.getClassLoader();
        URL url = loader.getResource(skeletonFilename);
        if (null == url) {
            throw new Exception("Cannot locate '" + skeletonFilename + "' - aborting.");
        }
        String line;
        StringBuilder section = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));
        while (null != (line = reader.readLine())) {
            if (line.startsWith("---")) {
                sections.add(section.toString());
                section.setLength(0);
            } else {
                section.append(line);
                section.append(NL);
            }
        }
        if (section.length() > 0) {
            sections.add(section.toString());
        }
        if (sections.size() != size) {
            throw new Exception("Skeleton file '" + skeletonFilename + "' has " + sections.size() + " static sections, but " + size + " were expected.");
        }
    }
} </s>
<s>class temp {    private void checkRoundtrip(byte[] content) throws Exception {
        InputStream in = new ByteArrayInputStream(content);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        CodecUtil.encodeQuotedPrintable(in, out);
        in = new QuotedPrintableInputStream(new ByteArrayInputStream(out.toByteArray()));
        out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        assertEquals(content, out.toByteArray());
    }
} </s>
<s>class temp {    public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return "";
        }
    }
} </s>
<s>class temp {    public static String readRss(String feed, int num) {
        InputStream stream = null;
        try {
            feed = appendParam(feed, "num", "" + num);
            System.out.println("feed=" + feed);
            URL url = new URL(feed);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty("User-Agent", RSS_USER_AGENT);
            stream = connection.getInputStream();
            return CFileHelper.readInputStream(stream);
        } catch (Exception e) {
            throw new CException(e);
        } finally {
            CFileHelper.closeStream(stream);
        }
    }
} </s>
<s>class temp {    public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {
        LOG.info("Loading URL: " + url);
        String pageDump = null;
        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);
        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getSocketTimeout());
        HttpGet httpget = new HttpGet(url);
        httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getSocketTimeout());
        HttpResponse response = execute(httpget);
        HttpEntity entity = response.getEntity();
        pageDump = IOUtils.toString(entity.getContent(), "UTF-8");
        return pageDump;
    }
} </s>
<s>class temp {    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {
        if (validateData()) {
            LoginUser me = AdministrationPanelView.getMe();
            Connection dbConnection = null;
            try {
                DriverManager.registerDriver(new com.mysql.jdbc.Driver());
                dbConnection = DriverManager.getConnection(me.getSqlReportsURL(), me.getSqlReportsUser(), me.getSqlReportsPassword());
                dbConnection.setAutoCommit(false);
                dbConnection.setSavepoint();
                String sql = "INSERT INTO campaigns (type, name, dateCreated, createdBy) VALUES (?, ?, ?, ?)";
                PreparedStatement statement = dbConnection.prepareStatement(sql);
                statement.setByte(1, (optTypeAgents.isSelected()) ? CampaignStatics.CAMP_TYPE_AGENT : CampaignStatics.CAMP_TYPE_IVR);
                statement.setString(2, txtCampaignName.getText());
                statement.setTimestamp(3, new Timestamp(Calendar.getInstance().getTime().getTime()));
                statement.setLong(4, me.getId());
                statement.executeUpdate();
                ResultSet rs = statement.getGeneratedKeys();
                rs.next();
                long campaignId = rs.getLong(1);
                sql = "INSERT INTO usercampaigns (userid, campaignid, role) VALUES (?, ?, ?)";
                statement = dbConnection.prepareStatement(sql);
                statement.setLong(1, me.getId());
                statement.setLong(2, campaignId);
                statement.setString(3, "admin");
                statement.executeUpdate();
                dbConnection.commit();
                dbConnection.close();
                CampaignAdmin ca = new CampaignAdmin();
                ca.setCampaign(txtCampaignName.getText());
                ca.setVisible(true);
                dispose();
            } catch (SQLException ex) {
                try {
                    dbConnection.rollback();
                } catch (SQLException ex1) {
                    Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, null, ex1);
                }
                JOptionPane.showMessageDialog(this.getRootPane(), ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, null, ex);
            }
        }
    }
} </s>
<s>class temp {    public static String digest(String algorithm, String text) {
        MessageDigest mDigest = null;
        try {
            mDigest = MessageDigest.getInstance(algorithm);
            mDigest.update(text.getBytes(ENCODING));
        } catch (NoSuchAlgorithmException nsae) {
            _log.error(nsae, nsae);
        } catch (UnsupportedEncodingException uee) {
            _log.error(uee, uee);
        }
        byte[] raw = mDigest.digest();
        BASE64Encoder encoder = new BASE64Encoder();
        return encoder.encode(raw);
    }
} </s>
<s>class temp {    protected IRunnableWithProgress getProjectCreationRunnable() {
        return new IRunnableWithProgress() {

            public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                int remainingWorkUnits = 10;
                monitor.beginTask("New Modulo Project Creation", remainingWorkUnits);
                IWorkspace ws = ResourcesPlugin.getWorkspace();
                newProject = fMainPage.getProjectHandle();
                IProjectDescription description = ws.newProjectDescription(newProject.getName());
                String[] natures = { JavaCore.NATURE_ID, ModuloLauncherPlugin.NATURE_ID };
                description.setNatureIds(natures);
                ICommand command = description.newCommand();
                command.setBuilderName(JavaCore.BUILDER_ID);
                ICommand[] commands = { command };
                description.setBuildSpec(commands);
                IJavaProject jproject = JavaCore.create(newProject);
                ModuloProject modProj = new ModuloProject();
                modProj.setJavaProject(jproject);
                try {
                    newProject.create(description, new SubProgressMonitor(monitor, 1));
                    newProject.open(new SubProgressMonitor(monitor, 1));
                    IFolder srcFolder = newProject.getFolder("src");
                    IFolder javaFolder = srcFolder.getFolder("java");
                    IFolder buildFolder = newProject.getFolder("build");
                    IFolder classesFolder = buildFolder.getFolder("classes");
                    modProj.createFolder(srcFolder);
                    modProj.createFolder(javaFolder);
                    modProj.createFolder(buildFolder);
                    modProj.createFolder(classesFolder);
                    IPath buildPath = newProject.getFolder("build/classes").getFullPath();
                    jproject.setOutputLocation(buildPath, new SubProgressMonitor(monitor, 1));
                    IClasspathEntry[] entries = new IClasspathEntry[] { JavaCore.newSourceEntry(newProject.getFolder("src/java").getFullPath()), JavaCore.newContainerEntry(new Path(JavaRuntime.JRE_CONTAINER)), JavaCore.newContainerEntry(new Path(ModuloClasspathContainer.CONTAINER_ID)) };
                    jproject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1));
                    ModuleDefinition definition = new ModuleDefinition();
                    definition.setId(fModuloPage.getPackageName());
                    definition.setVersion(new VersionNumber(1, 0, 0));
                    definition.setMetaName(fModuloPage.getModuleName());
                    definition.setMetaDescription("The " + fModuloPage.getModuleName() + " Module.");
                    definition.setModuleClassName(fModuloPage.getPackageName() + "." + fModuloPage.getModuleClassName());
                    if (fModuloPage.isConfigSelectioned()) definition.setConfigurationClassName(fModuloPage.getPackageName() + "." + fModuloPage.getConfigClassName());
                    if (fModuloPage.isStatSelectioned()) definition.setStatisticsClassName(fModuloPage.getPackageName() + "." + fModuloPage.getStatClassName());
                    modProj.setDefinition(definition);
                    modProj.createPackage();
                    modProj.createModuleXML();
                    modProj.createMainClass();
                    if (fModuloPage.isConfigSelectioned()) modProj.createConfigClass();
                    if (fModuloPage.isStatSelectioned()) modProj.createStatClass();
                    modProj.createModuleProperties();
                    modProj.createMessagesProperties();
                    IFolder binFolder = newProject.getFolder("bin");
                    binFolder.delete(true, new SubProgressMonitor(monitor, 1));
                } catch (CoreException e) {
                    e.printStackTrace();
                } finally {
                    monitor.done();
                }
            }
        };
    }
} </s>
<s>class temp {            public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                int remainingWorkUnits = 10;
                monitor.beginTask("New Modulo Project Creation", remainingWorkUnits);
                IWorkspace ws = ResourcesPlugin.getWorkspace();
                newProject = fMainPage.getProjectHandle();
                IProjectDescription description = ws.newProjectDescription(newProject.getName());
                String[] natures = { JavaCore.NATURE_ID, ModuloLauncherPlugin.NATURE_ID };
                description.setNatureIds(natures);
                ICommand command = description.newCommand();
                command.setBuilderName(JavaCore.BUILDER_ID);
                ICommand[] commands = { command };
                description.setBuildSpec(commands);
                IJavaProject jproject = JavaCore.create(newProject);
                ModuloProject modProj = new ModuloProject();
                modProj.setJavaProject(jproject);
                try {
                    newProject.create(description, new SubProgressMonitor(monitor, 1));
                    newProject.open(new SubProgressMonitor(monitor, 1));
                    IFolder srcFolder = newProject.getFolder("src");
                    IFolder javaFolder = srcFolder.getFolder("java");
                    IFolder buildFolder = newProject.getFolder("build");
                    IFolder classesFolder = buildFolder.getFolder("classes");
                    modProj.createFolder(srcFolder);
                    modProj.createFolder(javaFolder);
                    modProj.createFolder(buildFolder);
                    modProj.createFolder(classesFolder);
                    IPath buildPath = newProject.getFolder("build/classes").getFullPath();
                    jproject.setOutputLocation(buildPath, new SubProgressMonitor(monitor, 1));
                    IClasspathEntry[] entries = new IClasspathEntry[] { JavaCore.newSourceEntry(newProject.getFolder("src/java").getFullPath()), JavaCore.newContainerEntry(new Path(JavaRuntime.JRE_CONTAINER)), JavaCore.newContainerEntry(new Path(ModuloClasspathContainer.CONTAINER_ID)) };
                    jproject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1));
                    ModuleDefinition definition = new ModuleDefinition();
                    definition.setId(fModuloPage.getPackageName());
                    definition.setVersion(new VersionNumber(1, 0, 0));
                    definition.setMetaName(fModuloPage.getModuleName());
                    definition.setMetaDescription("The " + fModuloPage.getModuleName() + " Module.");
                    definition.setModuleClassName(fModuloPage.getPackageName() + "." + fModuloPage.getModuleClassName());
                    if (fModuloPage.isConfigSelectioned()) definition.setConfigurationClassName(fModuloPage.getPackageName() + "." + fModuloPage.getConfigClassName());
                    if (fModuloPage.isStatSelectioned()) definition.setStatisticsClassName(fModuloPage.getPackageName() + "." + fModuloPage.getStatClassName());
                    modProj.setDefinition(definition);
                    modProj.createPackage();
                    modProj.createModuleXML();
                    modProj.createMainClass();
                    if (fModuloPage.isConfigSelectioned()) modProj.createConfigClass();
                    if (fModuloPage.isStatSelectioned()) modProj.createStatClass();
                    modProj.createModuleProperties();
                    modProj.createMessagesProperties();
                    IFolder binFolder = newProject.getFolder("bin");
                    binFolder.delete(true, new SubProgressMonitor(monitor, 1));
                } catch (CoreException e) {
                    e.printStackTrace();
                } finally {
                    monitor.done();
                }
            }
} </s>
<s>class temp {    private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
} </s>
