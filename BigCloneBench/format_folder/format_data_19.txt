<s>class temp {    private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {
        String url = request.getRequestURL().toString();
        if (delayed.contains(url)) {
            delayed.remove(url);
            LOGGER.info(MessageFormat.format("Loading delayed resource at url = [{0}]", url));
            chain.doFilter(request, response);
        } else {
            LOGGER.info("Returning resource = [LoaderApplication.swf]");
            InputStream input = null;
            OutputStream output = null;
            try {
                input = getClass().getResourceAsStream("LoaderApplication.swf");
                output = response.getOutputStream();
                delayed.add(url);
                response.setHeader("Cache-Control", "no-cache");
                IOUtils.copy(input, output);
            } finally {
                IOUtils.closeQuietly(output);
                IOUtils.closeQuietly(input);
            }
        }
    }
} </s>
<s>class temp {    public TwilioRestResponse request(String path, String method, Map<String, String> vars) throws TwilioRestException {
        String encoded = "";
        if (vars != null) {
            for (String key : vars.keySet()) {
                try {
                    encoded += "&" + key + "=" + URLEncoder.encode(vars.get(key), "UTF-8");
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
            }
            if (encoded.length() > 0) {
                encoded = encoded.substring(1);
            }
        }
        String url = this.endpoint + path;
        if (method.toUpperCase().equals("GET")) url += ((path.indexOf('?') == -1) ? "?" : "&") + encoded;
        try {
            URL resturl = new URL(url);
            HttpURLConnection con = (HttpURLConnection) resturl.openConnection();
            String userpass = this.accountSid + ":" + this.authToken;
            String encodeuserpass = new String(Base64.encodeToByte(userpass.getBytes(), false));
            con.setRequestProperty("Authorization", "Basic " + encodeuserpass);
            con.setDoOutput(true);
            if (method.toUpperCase().equals("GET")) {
                con.setRequestMethod("GET");
            } else if (method.toUpperCase().equals("POST")) {
                con.setRequestMethod("POST");
                OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
                out.write(encoded);
                out.close();
            } else if (method.toUpperCase().equals("PUT")) {
                con.setRequestMethod("PUT");
                OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
                out.write(encoded);
                out.close();
            } else if (method.toUpperCase().equals("DELETE")) {
                con.setRequestMethod("DELETE");
            } else {
                throw new TwilioRestException("Unknown method " + method);
            }
            BufferedReader in = null;
            try {
                if (con.getInputStream() != null) {
                    in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                }
            } catch (IOException e) {
                if (con.getErrorStream() != null) {
                    in = new BufferedReader(new InputStreamReader(con.getErrorStream()));
                }
            }
            if (in == null) {
                throw new TwilioRestException("Unable to read response from server");
            }
            StringBuffer decodedString = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                decodedString.append(line);
            }
            in.close();
            int responseCode = con.getResponseCode();
            return new TwilioRestResponse(url, decodedString.toString(), responseCode);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public static void fileCopy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public void saveFile(final InputStream inputStream, final String fileName) {
        final File file = new File(System.getProperty("java.io.tmpdir") + File.separator + fileName);
        FileOutputStream fileOut = null;
        try {
            fileOut = new FileOutputStream(file);
            IOUtils.copy(inputStream, fileOut);
        } catch (FileNotFoundException e) {
            LOGGER.error("saveFile() - File Not Found." + e);
        } catch (IOException e) {
            LOGGER.error("saveFile() - Error while saving file." + e);
        } finally {
            try {
                inputStream.close();
                if (fileOut != null) {
                    fileOut.close();
                }
            } catch (IOException e) {
                LOGGER.error(e);
            }
        }
    }
} </s>
<s>class temp {    public static void download(String address, String localFileName) {
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            URL url = new URL(address);
            out = new BufferedOutputStream(new FileOutputStream(localFileName));
            conn = url.openConnection();
            in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
            System.out.println(localFileName + "\t" + numWritten);
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (in != null) in.close();
                if (out != null) out.close();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    @Override
    public void execute(IAlert alert, IReport report, Rule rule, Row row) {
        try {
            URL url = new URL(getUrl());
            URLConnection con = url.openConnection();
            con.setConnectTimeout(getTimeout());
            con.setDoOutput(true);
            OutputStream out = con.getOutputStream();
            out.write(formatOutput(report, alert, rule, row).getBytes());
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuilder input = new StringBuilder();
            String line = null;
            while ((line = in.readLine()) != null) {
                input.append(line);
                input.append('\n');
            }
            in.close();
            this.lastResult = input.toString();
        } catch (Throwable e) {
            logError("Error sending alert", e);
            if (!isHeadless()) {
                alert.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Can't send alert " + e + "\n" + alert.getName() + " alert disabled.", "Action Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
} </s>
<s>class temp {    private static String lastModified(URL url) {
        try {
            URLConnection conn = url.openConnection();
            return long2date(conn.getLastModified());
        } catch (Exception e) {
            SWGAide.printDebug("cach", 1, "SWGCraftCache:lastModified: " + e.getMessage());
        }
        return "0";
    }
} </s>
<s>class temp {    public static void fileUpload() throws IOException {
        HttpClient httpclient = new DefaultHttpClient();
        httpclient.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
        file = new File("H:\\FileServeUploader.java");
        HttpPost httppost = new HttpPost(postURL);
        httppost.setHeader("Cookie", langcookie + ";" + sessioncookie + ";" + mailcookie + ";" + namecookie + ";" + rolecookie + ";" + orderbycookie + ";" + directioncookie + ";");
        MultipartEntity mpEntity = new MultipartEntity();
        ContentBody cbFile = new FileBody(file);
        mpEntity.addPart("files[]", cbFile);
        httppost.setEntity(mpEntity);
        System.out.println("Now uploading your file into wupload...........................");
        HttpResponse response = httpclient.execute(httppost);
        HttpEntity resEntity = response.getEntity();
        System.out.println(response.getStatusLine());
    }
} </s>
<s>class temp {    public static void loginWuploader() throws IOException {
        HttpParams params = new BasicHttpParams();
        params.setParameter("http.useragent", "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6");
        DefaultHttpClient httpclient = new DefaultHttpClient(params);
        System.out.println("Trying to log in to Wupload");
        HttpPost httppost = new HttpPost("http://www.wupload.in/account/login");
        httppost.setHeader("Referer", "http://www.wupload.in/");
        httppost.setHeader("Accept", "application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        formparams.add(new BasicNameValuePair("email", uname));
        formparams.add(new BasicNameValuePair("password", pwd));
        formparams.add(new BasicNameValuePair("redirect", "/"));
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");
        httppost.setEntity(entity);
        HttpResponse httpresponse = httpclient.execute(httppost);
        System.out.println("Getting cookies........");
        Iterator<Cookie> it = httpclient.getCookieStore().getCookies().iterator();
        Cookie escookie = null;
        while (it.hasNext()) {
            escookie = it.next();
            if (escookie.getName().equalsIgnoreCase("PHPSESSID")) {
                sessioncookie = "PHPSESSID=" + escookie.getValue();
                System.out.println(sessioncookie);
            }
            if (escookie.getName().equalsIgnoreCase("email")) {
                mailcookie = "email=" + escookie.getValue();
                login = true;
                System.out.println(mailcookie);
            }
            if (escookie.getName().equalsIgnoreCase("nickname")) {
                namecookie = "nickname=" + escookie.getValue();
                System.out.println(namecookie);
            }
            if (escookie.getName().equalsIgnoreCase("isAffiliate")) {
                affiliatecookie = "isAffiliate=" + escookie.getValue();
                System.out.println(affiliatecookie);
            }
            if (escookie.getName().equalsIgnoreCase("role")) {
                rolecookie = "role=" + escookie.getValue();
                System.out.println(rolecookie);
            }
        }
        if (login) {
            System.out.println("Login Success");
            getFolderCookies();
        } else {
            System.out.println("Login failed");
        }
    }
} </s>
<s>class temp {    public static String md5(final String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[FOUR_BYTES];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    public void reademi(Vector<String> descriptions, Vector<String> links, String linkaddress, String idmap) {
        InputStream is = null;
        URL url;
        ArrayList<String> keys = new ArrayList<String>();
        ArrayList<String> names = new ArrayList<String>();
        try {
            url = new URL(idmap);
            is = url.openStream();
            Scanner scanner = new Scanner(is);
            scanner.nextLine();
            String line = "";
            String id = "";
            while (scanner.hasNextLine()) {
                line = scanner.nextLine();
                Scanner linescanner = new Scanner(line);
                linescanner.useDelimiter("\t");
                id = linescanner.next();
                id = id.substring(0, id.length() - 2);
                keys.add(id);
                linescanner.next();
                linescanner.next();
                linescanner.next();
                linescanner.useDelimiter("\n");
                names.add(linescanner.next());
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(linkaddress).openStream()));
            String link = "";
            String key = "";
            String name = "";
            int counter = 0;
            while ((line = reader.readLine()) != null) {
                if (line.indexOf("style=raw") != -1) {
                    int linkstart = line.indexOf("http://www.ebi.ac.uk/cgi-bin/dbfetch?db");
                    int idstart = line.indexOf("id=") + 3;
                    int linkend = line.substring(linkstart).indexOf("\"") + linkstart;
                    link = line.substring(linkstart, linkend);
                    key = line.substring(idstart, linkend);
                    if (keys.indexOf(key) != -1) {
                        name = names.get(keys.indexOf(key));
                        counter++;
                        descriptions.add(counter + " " + key + " " + name);
                        links.add(link);
                    }
                }
            }
        } catch (MalformedURLException e) {
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public void readUNI(Vector<String> descriptions, String source) {
        InputStream is = null;
        try {
            URL url = new URL(source);
            is = url.openStream();
            Scanner scanner = new Scanner(is);
            scanner.nextLine();
            String line = "";
            String id = "";
            String desc = "";
            while (scanner.hasNextLine()) {
                line = scanner.nextLine();
                Scanner linescanner = new Scanner(line);
                linescanner.useDelimiter("\t");
                id = linescanner.next();
                linescanner.next();
                desc = linescanner.next();
                linescanner.useDelimiter("\n");
                linescanner.next();
                descriptions.add(id + " " + desc);
            }
        } catch (MalformedURLException e) {
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException {
        LOG.debug("Merging content of group : " + group.getName());
        for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) {
            Group subGroup = (Group) iterator.next();
            String subLocation = subGroup.getBestLocation(location);
            ResourcesProcessor subGroupProcessor = null;
            if (subGroup.isMinimize() == null) subGroupProcessor = this; else subGroupProcessor = subGroup.getJSProcessor();
            subGroupProcessor.process(subGroup, subGroup.getJsNames(), excludeResources, servletContext, out, subLocation);
        }
        for (Iterator it = resourcesName.iterator(); it.hasNext(); ) {
            URL url = null;
            String path = (String) it.next();
            if (!excludeResources.contains(path)) {
                url = URLUtils.getLocalURL(path, servletContext);
                if (url == null) {
                    String webPath = URLUtils.concatUrlWithSlaches(group.getBestLocation(location), path);
                    url = URLUtils.getWebUrlResource(webPath);
                }
                if (url == null) {
                    throw new IOException("The resources '" + path + "' could not be found neither in the webapp folder nor in a jar");
                }
                InputStream in = null;
                try {
                    in = url.openStream();
                    IOUtils.copy(in, out, URLUtils.DEFAULT_ENCODING);
                    out.write("\n\n");
                } catch (Exception e) {
                    LOG.error("Merge failed for file " + path, e);
                } finally {
                    if (in != null) in.close();
                }
                excludeResources.add(path);
            }
        }
    }
} </s>
<s>class temp {    public Set<String> getAvailableRoles() {
        if (availableRoles == null) {
            availableRoles = new HashSet<String>();
            try {
                Enumeration<URL> resources = org.springframework.util.ClassUtils.getDefaultClassLoader().getResources(ROLE_FILE_LOCATION);
                while (resources.hasMoreElements()) {
                    URL url = resources.nextElement();
                    InputStream is = null;
                    try {
                        URLConnection con = url.openConnection();
                        con.setUseCaches(false);
                        is = con.getInputStream();
                        List<String> lines = IOUtils.readLines(is, "ISO-8859-1");
                        if (lines != null) {
                            for (String line : lines) {
                                availableRoles.add(line.trim());
                            }
                        }
                    } finally {
                        if (is != null) {
                            is.close();
                        }
                    }
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return availableRoles;
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws ObclipseException {
        try {
            FileChannel inChannel = null;
            FileChannel outChannel = null;
            try {
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (FileNotFoundException e) {
            Msg.error("The file ''{0}'' to copy does not exist!", e, in.getAbsolutePath());
        } catch (IOException e) {
            Msg.ioException(in, out, e);
        }
    }
} </s>
<s>class temp {    public static String convertToSha1(final String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
} </s>
<s>class temp {    public static String getHashedPasswordTc(String password) throws java.security.NoSuchAlgorithmException {
        java.security.MessageDigest d = java.security.MessageDigest.getInstance("MD5");
        d.reset();
        d.update(password.getBytes());
        byte[] buf = d.digest();
        char[] cbf = new char[buf.length * 2];
        for (int jj = 0, kk = 0; jj < buf.length; jj++) {
            cbf[kk++] = "0123456789abcdef".charAt((buf[jj] >> 4) & 0x0F);
            cbf[kk++] = "0123456789abcdef".charAt(buf[jj] & 0x0F);
        }
        return new String(cbf);
    }
} </s>
<s>class temp {    public static String getHashedStringMD5(String value) throws java.security.NoSuchAlgorithmException {
        java.security.MessageDigest d = java.security.MessageDigest.getInstance("MD5");
        d.reset();
        d.update(value.getBytes());
        byte[] buf = d.digest();
        return new String(buf);
    }
} </s>
<s>class temp {    public static void bubble(double[] a) {
        for (int i = a.length - 1; i > 0; i--) for (int j = 0; j < i; j++) if (a[j] > a[j + 1]) {
            double temp = a[j];
            a[j] = a[j + 1];
            a[j + 1] = temp;
        }
    }
} </s>
<s>class temp {    public static String getRandomUserAgent() {
        if (USER_AGENT_CACHE == null) {
            Collection<String> userAgentsCache = new ArrayList<String>();
            try {
                URL url = Tools.getResource(UserAgent.class.getClassLoader(), "user-agents-browser.txt");
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                String str;
                while ((str = in.readLine()) != null) {
                    userAgentsCache.add(str);
                }
                in.close();
                USER_AGENT_CACHE = userAgentsCache.toArray(new String[userAgentsCache.size()]);
            } catch (Exception e) {
                System.err.println("Can not read file; using default user-agent; error message: " + e.getMessage());
                return DEFAULT_USER_AGENT;
            }
        }
        return USER_AGENT_CACHE[new Random().nextInt(USER_AGENT_CACHE.length)];
    }
} </s>
<s>class temp {    public String contactService(String service, StringBuffer xmlRequest) throws Exception {
        Logger.debug(UPSConnections.class, "UPS CONNECTIONS ***** Started " + service + " " + new Date().toString() + " *****");
        HttpURLConnection connection;
        URL url;
        String response = "";
        try {
            Logger.debug(UPSConnections.class, "connect to " + protocol + "://" + hostname + "/" + URLPrefix + "/" + service);
            if (protocol.equalsIgnoreCase("https")) {
                java.security.Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
                System.getProperties().put("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");
                url = new URL(protocol + "://" + hostname + "/" + URLPrefix + "/" + service);
                connection = (HttpsURLConnection) url.openConnection();
            } else {
                url = new URL(protocol + "://" + hostname + "/" + URLPrefix + "/" + service);
                connection = (HttpURLConnection) url.openConnection();
            }
            Logger.debug(UPSConnections.class, "Establishing connection with " + url.toString());
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setUseCaches(false);
            OutputStream out = connection.getOutputStream();
            StringBuffer request = new StringBuffer();
            request.append(accessXMLRequest());
            request.append(xmlRequest);
            out.write((request.toString()).getBytes());
            Logger.debug(UPSConnections.class, "Transmission sent to " + url.toString() + ":\n" + xmlRequest);
            out.close();
            try {
                response = readURLConnection(connection);
            } catch (Exception e) {
                Logger.debug(UPSConnections.class, "Error in reading URL Connection" + e.getMessage());
                throw e;
            }
            Logger.debug(UPSConnections.class, "Response = " + response);
        } catch (Exception e1) {
            Logger.info(UPSConnections.class, "Error sending data to server" + e1.toString());
            Logger.debug(UPSConnections.class, "Error sending data to server" + e1.toString());
        } finally {
            Logger.info(UPSConnections.class, "****** Transmission Finished " + service + " " + new Date().toString() + " *********");
            Logger.debug(UPSConnections.class, "****** Transmission Finished " + service + " " + new Date().toString() + " *********");
        }
        return response;
    }
} </s>
<s>class temp {    private static void loadQueryProcessorFactories() {
        qpFactoryMap = new HashMap<String, QueryProcessorFactoryIF>();
        Enumeration<URL> resources = null;
        try {
            resources = QueryUtils.class.getClassLoader().getResources(RESOURCE_STRING);
        } catch (IOException e) {
            log.error("Error while trying to look for " + "QueryProcessorFactoryIF implementations.", e);
        }
        while (resources != null && resources.hasMoreElements()) {
            URL url = resources.nextElement();
            InputStream is = null;
            try {
                is = url.openStream();
            } catch (IOException e) {
                log.warn("Error opening stream to QueryProcessorFactoryIF service description.", e);
            }
            if (is != null) {
                BufferedReader rdr = new BufferedReader(new InputStreamReader(is));
                String line;
                try {
                    while ((line = rdr.readLine()) != null) {
                        try {
                            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
                            Class<?> c = Class.forName(line, true, classLoader);
                            if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) {
                                QueryProcessorFactoryIF factory = (QueryProcessorFactoryIF) c.newInstance();
                                qpFactoryMap.put(factory.getQueryLanguage().toUpperCase(), factory);
                            } else {
                                log.warn("Wrong entry for QueryProcessorFactoryIF service " + "description, '" + line + "' is not implementing the " + "correct interface.");
                            }
                        } catch (Exception e) {
                            log.warn("Could not create an instance for " + "QueryProcessorFactoryIF service '" + line + "'.");
                        }
                    }
                } catch (IOException e) {
                    log.warn("Could not read from QueryProcessorFactoryIF " + "service descriptor.", e);
                }
            }
        }
        if (!qpFactoryMap.containsKey(DEFAULT_LANGUAGE)) {
            qpFactoryMap.put(DEFAULT_LANGUAGE, new TologQueryProcessorFactory());
        }
    }
} </s>
<s>class temp {    public static String md5String(String string) {
        try {
            MessageDigest msgDigest = MessageDigest.getInstance("MD5");
            msgDigest.update(string.getBytes("UTF-8"));
            byte[] digest = msgDigest.digest();
            String result = "";
            for (int i = 0; i < digest.length; i++) {
                int value = digest[i];
                if (value < 0) value += 256;
                result += Integer.toHexString(value);
            }
            return result;
        } catch (UnsupportedEncodingException error) {
            throw new IllegalArgumentException(error);
        } catch (NoSuchAlgorithmException error) {
            throw new IllegalArgumentException(error);
        }
    }
} </s>
<s>class temp {    public static InputStream openURL(String url, ConnectData data) {
        try {
            URLConnection con = new URL(url).openConnection();
            con.setConnectTimeout(TIMEOUT);
            con.setReadTimeout(TIMEOUT);
            con.setUseCaches(false);
            con.setRequestProperty("Accept-Charset", "utf-8");
            setUA(con);
            if (data.cookie != null) con.setRequestProperty("Cookie", data.cookie);
            InputStream is = con.getInputStream();
            parseCookie(con, data);
            return new BufferedInputStream(is);
        } catch (IOException ioe) {
            Log.except("failed to open URL " + url, ioe);
        }
        return null;
    }
} </s>
<s>class temp {    public static InputStream sendReq(String url, String content, ConnectData data) {
        try {
            URLConnection con = new URL(url).openConnection();
            con.setConnectTimeout(TIMEOUT);
            con.setReadTimeout(TIMEOUT);
            con.setUseCaches(false);
            setUA(con);
            con.setRequestProperty("Accept-Charset", "utf-8");
            con.setDoOutput(true);
            con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            if (data.cookie != null) con.setRequestProperty("Cookie", data.cookie);
            HttpURLConnection httpurl = (HttpURLConnection) con;
            httpurl.setRequestMethod("POST");
            Writer wr = new OutputStreamWriter(con.getOutputStream());
            wr.write(content);
            wr.flush();
            con.connect();
            InputStream is = con.getInputStream();
            is = new BufferedInputStream(is);
            wr.close();
            parseCookie(con, data);
            return is;
        } catch (IOException ioe) {
            Log.except("failed to send request " + url, ioe);
        }
        return null;
    }
} </s>
<s>class temp {    private void reloadData(String dataSourceUrl) {
        try {
            URL url = new URL(dataSourceUrl);
            InputStream is = url.openStream();
            if (progressMonitor.isCanceled() == false) {
                progressMonitor.setNote("Building classifications...");
                progressMonitor.setProgress(2);
                mediator.loadClassificationTree(is);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public static void copyFile(IPath fromFileName, IPath toFileName) throws IOException {
        File fromFile = fromFileName.toFile();
        File toFile = toFileName.toFile();
        if (!fromFile.exists()) throw new IOException("FileCopy: " + "no such source file: " + fromFileName);
        if (!fromFile.isFile()) throw new IOException("FileCopy: " + "can't copy directory: " + fromFileName);
        if (!fromFile.canRead()) throw new IOException("FileCopy: " + "source file is unreadable: " + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException("FileCopy: " + "destination file is unwriteable: " + toFileName);
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty("user.dir");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException("FileCopy: " + "destination directory doesn't exist: " + parent);
            if (dir.isFile()) throw new IOException("FileCopy: " + "destination is not a directory: " + parent);
            if (!dir.canWrite()) throw new IOException("FileCopy: " + "destination directory is unwriteable: " + parent);
        }
        InputStream from = null;
        OutputStream to = null;
        try {
            from = new BufferedInputStream(new FileInputStream(fromFile));
            to = new BufferedOutputStream(new FileOutputStream(toFile));
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    public static ArrayList<FriendInfo> downloadFriendsList(String username) {
        try {
            URL url;
            url = new URL(WS_URL + "/user/" + URLEncoder.encode(username, "UTF-8") + "/friends.xml");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            InputStream is = conn.getInputStream();
            DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbFac.newDocumentBuilder();
            Document doc = db.parse(is);
            NodeList friends = doc.getElementsByTagName("user");
            ArrayList<FriendInfo> result = new ArrayList<FriendInfo>();
            for (int i = 0; i < friends.getLength(); i++) try {
                result.add(new FriendInfo((Element) friends.item(i)));
            } catch (Utils.ParseException e) {
                Log.e(TAG, "in downloadFriendsList", e);
                return null;
            }
            return result;
        } catch (Exception e) {
            Log.e(TAG, "in downloadFriendsList", e);
            return null;
        }
    }
} </s>
<s>class temp {    private ArrayList<XSPFTrackInfo> getPlaylist() {
        try {
            Log.d(TAG, "Getting playlist started");
            String urlString = "http://" + mBaseURL + "/xspf.php?sk=" + mSession + "&discovery=0&desktop=1.4.1.57486";
            if (mAlternateConn) {
                urlString += "&api_key=9d1bbaef3b443eb97973d44181d04e4b";
                Log.d(TAG, "Using alternate connection method");
            }
            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            InputStream is = conn.getInputStream();
            DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbFac.newDocumentBuilder();
            Document doc = db.parse(is);
            Element root = doc.getDocumentElement();
            NodeList titleNs = root.getElementsByTagName("title");
            String stationName = "<unknown station>";
            if (titleNs.getLength() > 0) {
                Element titleElement = (Element) titleNs.item(0);
                String res = "";
                for (int i = 0; i < titleElement.getChildNodes().getLength(); i++) {
                    Node item = titleElement.getChildNodes().item(i);
                    if (item.getNodeType() == Node.TEXT_NODE) res += item.getNodeValue();
                }
                stationName = URLDecoder.decode(res, "UTF-8");
            }
            NodeList tracks = doc.getElementsByTagName("track");
            ArrayList<XSPFTrackInfo> result = new ArrayList<XSPFTrackInfo>();
            for (int i = 0; i < tracks.getLength(); i++) try {
                result.add(new XSPFTrackInfo(stationName, (Element) tracks.item(i)));
            } catch (Utils.ParseException e) {
                Log.e(TAG, "in getPlaylist", e);
                return null;
            }
            Log.d(TAG, "Getting playlist successful");
            return result;
        } catch (Exception e) {
            Log.e(TAG, "in getPlaylist", e);
            return null;
        }
    }
} </s>
<s>class temp {    private boolean adjust(String stationUrl) throws LastFMError {
        try {
            URL url = new URL("http://" + mBaseURL + "/adjust.php?session=" + mSession + "&url=" + URLEncoder.encode(stationUrl, "UTF-8"));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            InputStream is = conn.getInputStream();
            InputStreamReader reader = new InputStreamReader(is);
            BufferedReader stringReader = new BufferedReader(reader);
            Utils.OptionsParser options = new Utils.OptionsParser(stringReader);
            if (!options.parse()) options = null;
            stringReader.close();
            if ("OK".equals(options.get("response"))) {
                return true;
            } else {
                Log.e(TAG, "Adjust failed: \"" + options.get("response") + "\"");
                return false;
            }
        } catch (MalformedURLException e) {
            Log.e(TAG, "in adjust", e);
            throw new LastFMError("Adjust failed:" + e.toString());
        } catch (UnsupportedEncodingException e) {
            Log.e(TAG, "in adjust", e);
            throw new LastFMError("Adjust failed:" + e.toString());
        } catch (IOException e) {
            Log.e(TAG, "in adjust", e);
            throw new LastFMError("Station not found:" + stationUrl);
        }
    }
} </s>
<s>class temp {    boolean checkIfUserExists(String username) throws IOException {
        try {
            URL url = new URL(WS_URL + "/user/" + URLEncoder.encode(username, "UTF-8") + "/profile.xml");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            InputStream is = conn.getInputStream();
            is.close();
            return true;
        } catch (FileNotFoundException e) {
            return false;
        }
    }
} </s>
<s>class temp {    static void xmlRpcCall(String method, String[] params) throws LastFMError {
        try {
            XmlPullParserFactory fac = XmlPullParserFactory.newInstance();
            XmlSerializer serializer = fac.newSerializer();
            URL url;
            url = new URL(XMLRPC_URL);
            URLConnection conn;
            conn = url.openConnection();
            conn.setRequestProperty("Content-Type", "text/xml");
            conn.setDoOutput(true);
            serializer.setOutput(conn.getOutputStream(), "UTF-8");
            serializer.startDocument("UTF-8", true);
            serializer.startTag(null, "methodCall");
            serializer.startTag(null, "methodName");
            serializer.text(method);
            serializer.endTag(null, "methodName");
            serializer.startTag(null, "params");
            for (String s : params) {
                serializer.startTag(null, "param");
                serializer.startTag(null, "value");
                serializer.startTag(null, "string");
                serializer.text(s);
                serializer.endTag(null, "string");
                serializer.endTag(null, "value");
                serializer.endTag(null, "param");
            }
            serializer.endTag(null, "params");
            serializer.endTag(null, "methodCall");
            serializer.flush();
            InputStream is = conn.getInputStream();
            DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbFac.newDocumentBuilder();
            Document doc = db.parse(is);
            try {
                String res = Utils.getChildElement(doc.getDocumentElement(), new String[] { "params", "param", "value", "string" });
                if (!res.equals("OK")) {
                    Log.e(TAG, "while xmlrpc got " + res);
                    throw new LastFMXmlRpcError("XMLRPC Call failed: " + res);
                }
            } catch (ParseException e) {
                String faultString = Utils.getChildElement(doc.getDocumentElement(), new String[] { "params", "param", "value", "struct", "member[1]", "value", "string" });
                throw new LastFMXmlRpcError(faultString);
            }
        } catch (LastFMXmlRpcError e) {
            throw e;
        } catch (Exception e) {
            Log.e(TAG, "while xmlrpc", e);
            throw new LastFMError(e.toString());
        }
    }
} </s>
<s>class temp {    public static Document getSkeleton() {
        Document doc = null;
        String filesep = System.getProperty("file.separator");
        try {
            java.net.URL url = Skeleton.class.getResource(filesep + "simplemassimeditor" + filesep + "resources" + filesep + "configskeleton.xml");
            InputStream input = url.openStream();
            DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            try {
                doc = parser.parse(input);
            } catch (SAXException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return doc;
    }
} </s>
<s>class temp {    public ICCColorSpaceExt createICCColorSpaceExt(BridgeContext ctx, Element paintedElement, String iccProfileName) {
        ICCColorSpaceExt cs = cache.request(iccProfileName.toLowerCase());
        if (cs != null) {
            return cs;
        }
        Document doc = paintedElement.getOwnerDocument();
        NodeList list = doc.getElementsByTagNameNS(SVG_NAMESPACE_URI, SVG_COLOR_PROFILE_TAG);
        int n = list.getLength();
        Element profile = null;
        for (int i = 0; i < n; i++) {
            Node node = list.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element profileNode = (Element) node;
                String nameAttr = profileNode.getAttributeNS(null, SVG_NAME_ATTRIBUTE);
                if (iccProfileName.equalsIgnoreCase(nameAttr)) {
                    profile = profileNode;
                }
            }
        }
        if (profile == null) return null;
        String href = XLinkSupport.getXLinkHref(profile);
        ICC_Profile p = null;
        if (href != null) {
            String baseURI = ((SVGOMDocument) doc).getURL();
            ParsedURL purl = new ParsedURL(baseURI, href);
            if (!purl.complete()) throw new BridgeException(paintedElement, ERR_URI_MALFORMED, new Object[] { href });
            try {
                ParsedURL pDocURL = null;
                if (baseURI != null) {
                    pDocURL = new ParsedURL(baseURI);
                }
                ctx.getUserAgent().checkLoadExternalResource(purl, pDocURL);
                p = ICC_Profile.getInstance(purl.openStream());
            } catch (IOException e) {
                throw new BridgeException(paintedElement, ERR_URI_IO, new Object[] { href });
            } catch (SecurityException e) {
                throw new BridgeException(paintedElement, ERR_URI_UNSECURE, new Object[] { href });
            }
        }
        if (p == null) {
            return null;
        }
        int intent = convertIntent(profile);
        cs = new ICCColorSpaceExt(p, intent);
        cache.put(iccProfileName.toLowerCase(), cs);
        return cs;
    }
} </s>
<s>class temp {    public static void main(String args[]) {
        String midletClass = null;
        ;
        File appletInputFile = null;
        File deviceInputFile = null;
        File midletInputFile = null;
        File htmlOutputFile = null;
        File appletOutputFile = null;
        File deviceOutputFile = null;
        File midletOutputFile = null;
        List params = new ArrayList();
        for (int i = 0; i < args.length; i++) {
            params.add(args[i]);
        }
        Iterator argsIterator = params.iterator();
        while (argsIterator.hasNext()) {
            String arg = (String) argsIterator.next();
            argsIterator.remove();
            if ((arg.equals("--help")) || (arg.equals("-help"))) {
                System.out.println(usage());
                System.exit(0);
            } else if (arg.equals("--midletClass")) {
                midletClass = (String) argsIterator.next();
                argsIterator.remove();
            } else if (arg.equals("--appletInput")) {
                appletInputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals("--deviceInput")) {
                deviceInputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals("--midletInput")) {
                midletInputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals("--htmlOutput")) {
                htmlOutputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals("--appletOutput")) {
                appletOutputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals("--deviceOutput")) {
                deviceOutputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals("--midletOutput")) {
                midletOutputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            }
        }
        if (midletClass == null || appletInputFile == null || deviceInputFile == null || midletInputFile == null || htmlOutputFile == null || appletOutputFile == null || deviceOutputFile == null || midletOutputFile == null) {
            System.out.println(usage());
            System.exit(0);
        }
        try {
            DeviceImpl device = null;
            String descriptorLocation = null;
            JarFile jar = new JarFile(deviceInputFile);
            for (Enumeration en = jar.entries(); en.hasMoreElements(); ) {
                String entry = ((JarEntry) en.nextElement()).getName();
                if ((entry.toLowerCase().endsWith(".xml") || entry.toLowerCase().endsWith("device.txt")) && !entry.toLowerCase().startsWith("meta-inf")) {
                    descriptorLocation = entry;
                    break;
                }
            }
            if (descriptorLocation != null) {
                EmulatorContext context = new EmulatorContext() {

                    private DisplayComponent displayComponent = new NoUiDisplayComponent();

                    private InputMethod inputMethod = new J2SEInputMethod();

                    private DeviceDisplay deviceDisplay = new J2SEDeviceDisplay(this);

                    private FontManager fontManager = new J2SEFontManager();

                    private DeviceComponent deviceComponent = new SwingDeviceComponent(true);

                    public DisplayComponent getDisplayComponent() {
                        return displayComponent;
                    }

                    public InputMethod getDeviceInputMethod() {
                        return inputMethod;
                    }

                    public DeviceDisplay getDeviceDisplay() {
                        return deviceDisplay;
                    }

                    public FontManager getDeviceFontManager() {
                        return fontManager;
                    }

                    public InputStream getResourceAsStream(String name) {
                        return MIDletBridge.getCurrentMIDlet().getClass().getResourceAsStream(name);
                    }

                    public DeviceComponent getDeviceComponent() {
                        return deviceComponent;
                    }
                };
                URL[] urls = new URL[1];
                urls[0] = deviceInputFile.toURI().toURL();
                ClassLoader classLoader = new ExtensionsClassLoader(urls, urls.getClass().getClassLoader());
                device = DeviceImpl.create(context, classLoader, descriptorLocation, J2SEDevice.class);
            }
            if (device == null) {
                System.out.println("Error parsing device package: " + descriptorLocation);
                System.exit(0);
            }
            createHtml(htmlOutputFile, device, midletClass, midletOutputFile, appletOutputFile, deviceOutputFile);
            createMidlet(midletInputFile.toURI().toURL(), midletOutputFile);
            IOUtils.copyFile(appletInputFile, appletOutputFile);
            IOUtils.copyFile(deviceInputFile, deviceOutputFile);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        System.exit(0);
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    private Properties loadPropertiesFromURL(String propertiesURL, Properties defaultProperties) {
        Properties properties = new Properties(defaultProperties);
        URL url;
        try {
            url = new URL(propertiesURL);
            URLConnection urlConnection = url.openConnection();
            properties.load(urlConnection.getInputStream());
        } catch (MalformedURLException e) {
            System.out.println("Error while loading url " + propertiesURL + " (" + e.getClass().getName() + ")");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Error while loading url " + propertiesURL + " (" + e.getClass().getName() + ")");
            e.printStackTrace();
        }
        return properties;
    }
} </s>
<s>class temp {    public void run() {
        XmlFilesFilter filter = new XmlFilesFilter();
        String pathTemp = Settings.get("vo_store.databaseMetaCollection");
        String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2));
        String templateName = VOAccess.getElementByName(settingsDB, "TEMPLATE", sectionName);
        String schemaName = VOAccess.getElementByName(settingsDB, "SCHEMA", sectionName);
        byte[] buf = new byte[1024];
        Hashtable templateElements = null;
        try {
            URL xmlTemplateUrl = new URL(httpURI + settingsDB + "/" + templateName);
            URL getDocPathsAndValuesXslUrl = new URL(httpURI + settingsDB + "/" + "getDocPathsValuesAndDisplays.xsl");
            org.w3c.dom.Document curTemplateXml = VOAccess.readDocument(xmlTemplateUrl);
            DOMResult templateResult = new DOMResult();
            InputStream tempInput = getDocPathsAndValuesXslUrl.openStream();
            javax.xml.transform.sax.SAXSource tempXslSource = new javax.xml.transform.sax.SAXSource(new org.xml.sax.InputSource(tempInput));
            Transformer trans = TransformerFactory.newInstance().newTransformer(tempXslSource);
            trans.setParameter("schemaUrl", httpURI + settingsDB + "/" + schemaName);
            trans.transform(new javax.xml.transform.dom.DOMSource(curTemplateXml), templateResult);
            tempInput.close();
            templateElements = VOAccess.displaysToHashtable(templateResult);
            ((CollectionManagementService) CollectionsManager.getService(xmldbURI + rootDB, false, "CollectionManager")).createCollection(rootDB + pathTemp);
        } catch (Exception ex) {
            logger.error("Error parsing input document", ex);
            ex.printStackTrace();
        }
        while (true) {
            File[] fileList = sourceMetaFilesDir.listFiles(filter);
            for (int i = 0; i < Math.min(fileList.length, 500); i++) {
                File newFile = fileList[i];
                try {
                    Document metaDoc = build.build(newFile);
                    Element metaElm = metaDoc.getRootElement();
                    String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview");
                    String objId = VOAccess.getUniqueId();
                    metaElm.getChild("Content").setText("videostore?type=doc&objId=" + objId);
                    metaElm.getChild("Preview").setText("videostore?type=preview&objId=" + objId);
                    boolean found = false;
                    for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) {
                        String sourceDataFilesDir = (String) it.next();
                        File dataInput = new File(sourceDataFilesDir + "/" + dataFileName);
                        if (dataInput.exists()) {
                            found = true;
                            BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput));
                            FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"));
                            int read = inp.read(buf, 0, buf.length);
                            while (read > 0) {
                                outp.write(buf, 0, read);
                                read = inp.read(buf, 0, buf.length);
                            }
                            inp.close();
                            outp.flush();
                            outp.close();
                            dataInput = new File(sourceDataFilesDir + "/" + previewFileName);
                            inp = new BufferedInputStream(new FileInputStream(dataInput));
                            outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"));
                            read = inp.read(buf, 0, buf.length);
                            while (read > 0) {
                                outp.write(buf, 0, read);
                                read = inp.read(buf, 0, buf.length);
                            }
                            inp.close();
                            outp.flush();
                            outp.close();
                            curDirWriteTo++;
                            if (curDirWriteTo >= targetDataFilesDirs.size()) {
                                curDirWriteTo = 0;
                            }
                        }
                    }
                    if (!found) {
                        newFile.renameTo(new File(newFile.getAbsolutePath() + ".not_found"));
                    } else {
                        String title = getValueByPath((String) templateElements.get("title"), metaDoc.getRootElement());
                        String description = getValueByPath((String) templateElements.get("description"), metaDoc.getRootElement());
                        String onlink = "";
                        if (null != templateElements.get("onlink")) {
                            onlink = getValueByPath((String) templateElements.get("onlink"), metaDoc.getRootElement());
                        }
                        String ncover = "";
                        if (null != templateElements.get("ncover")) {
                            ncover = getValueByPath((String) templateElements.get("ncover"), metaDoc.getRootElement());
                        }
                        String wcover = "";
                        if (null != templateElements.get("wcover")) {
                            wcover = getValueByPath((String) templateElements.get("wcover"), metaDoc.getRootElement());
                        }
                        String ecover = "";
                        if (null != templateElements.get("ecover")) {
                            ecover = getValueByPath((String) templateElements.get("ecover"), metaDoc.getRootElement());
                        }
                        String scover = "";
                        if (null != templateElements.get("scover")) {
                            scover = getValueByPath((String) templateElements.get("scover"), metaDoc.getRootElement());
                        }
                        String datefrom = "";
                        if (null != templateElements.get("datefrom")) {
                            datefrom = getValueByPath((String) templateElements.get("datefrom"), metaDoc.getRootElement());
                        }
                        String dateto = "";
                        if (null != templateElements.get("dateto")) {
                            dateto = getValueByPath((String) templateElements.get("dateto"), metaDoc.getRootElement());
                        }
                        String previewimg = "";
                        if (null != templateElements.get("previewimg")) {
                            previewimg = getValueByPath((String) templateElements.get("previewimg"), metaDoc.getRootElement());
                        }
                        String discRestr = "false";
                        String votingRestr = "false";
                        datefrom = VOAccess.parseDate(datefrom, "yyyy-MM-dd'T'HH:mm:ss", VO.defaultTimeFormat.toPattern());
                        dateto = VOAccess.parseDate(datefrom, "yyyy-MM-dd'T'HH:mm:ss", VO.defaultTimeFormat.toPattern());
                        Hashtable discussionFields = new Hashtable();
                        discussionFields.put("OBJECT_ID", objId);
                        discussionFields.put("AUTHOR_ID", "auto");
                        discussionFields.put("AUTHOR_NAME", "auto");
                        discussionFields.put("OBJECT_SECTION", sectionName);
                        discussionFields.put("OBJECT_PATH", pathTemp);
                        discussionFields.put("FILE_PATH", "");
                        discussionFields.put("TITLE", title);
                        discussionFields.put("DESCRIPTION", description);
                        discussionFields.put("ONLINK", onlink);
                        discussionFields.put("NCOVER", ncover);
                        discussionFields.put("ECOVER", ecover);
                        discussionFields.put("SCOVER", scover);
                        discussionFields.put("WCOVER", wcover);
                        discussionFields.put("PERIOD_START", datefrom);
                        discussionFields.put("PERIOD_END", dateto);
                        discussionFields.put("PREVIEW_IMG", previewimg);
                        discussionFields.put("DISCUSSRESTRICTION", discRestr);
                        discussionFields.put("VOTINGRESTRICTION", votingRestr);
                        VOAccess.createDiscussionFile(discussionFields);
                        VOAccess.updateLastItem(objId, sectionName);
                        Collection col = CollectionsManager.getCollection(rootDB + pathTemp, true);
                        XMLResource document = (XMLResource) col.createResource(objId + ".xml", XMLResource.RESOURCE_TYPE);
                        document.setContent(outXml.outputString(metaElm));
                        col.storeResource(document);
                        Indexer.index(objId);
                        newFile.delete();
                    }
                } catch (Exception ex) {
                    logger.error("Error parsing input document", ex);
                    ex.printStackTrace();
                    newFile.renameTo(new File(newFile.getAbsolutePath() + ".bad"));
                }
            }
            try {
                this.sleep(600000);
            } catch (InterruptedException ex1) {
                ex1.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public boolean finish() {
        IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName.getText());
        try {
            project.create(null);
            project.open(null);
            IProjectDescription desc = project.getDescription();
            desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
            project.setDescription(desc, null);
            IJavaProject javaProject = JavaCore.create(project);
            IPath fitLib = project.getFullPath().append(FIT_LIBRARY);
            javaProject.setRawClasspath(createClassPathEntries(project, fitLib), null);
            copyLibrary(project);
            javaProject.setOutputLocation(createOutputFolder(project, DEFAULT_OUTPUT_FOLDER).getFullPath(), null);
            createOutputFolder(project, fitTests.getText());
            createOutputFolder(project, fitResults.getText());
            if (!DEFAULT_OUTPUT_FOLDER.equals(fitResults.getText())) {
                DefaultFolderProperties.setDefinedOutputLocation(project, fitResults.getText());
            }
            if (!DEFAULT_SOURCE_FOLDER.equals(fitFixtures.getText())) {
                DefaultFolderProperties.setDefinedSourceLocation(project, fitFixtures.getText());
            }
            if (includeExamplesCheck.getSelection()) {
                copySamples(project);
            }
        } catch (CoreException e) {
            handleError(getContainer().getShell(), project, "Could not create project:" + e.getMessage());
            return false;
        } catch (IOException e) {
            handleError(getContainer().getShell(), project, "Could not create project:" + e.getMessage());
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    protected File compress(File orig, IWrapCompression wrapper) throws IOException {
        File compressed = File.createTempFile("test.", ".gz");
        FileOutputStream fos = new FileOutputStream(compressed);
        OutputStream wos = wrapper.wrap(fos);
        FileInputStream fis = new FileInputStream(orig);
        IOUtils.copy(fis, wos);
        IOUtils.closeQuietly(fis);
        IOUtils.closeQuietly(wos);
        return compressed;
    }
} </s>
<s>class temp {    @Override
    protected FTPClient ftpConnect() throws SocketException, IOException, NoSuchAlgorithmException {
        FilePathItem fpi = getFilePathItem();
        FTPClient f = new FTPSClient();
        f.connect(fpi.getHost());
        f.login(fpi.getUsername(), fpi.getPassword());
        return f;
    }
} </s>
<s>class temp {    public void concatFiles() throws IOException {
        Writer writer = null;
        try {
            final File targetFile = new File(getTargetDirectory(), getTargetFile());
            targetFile.getParentFile().mkdirs();
            if (null != getEncoding()) {
                getLog().info("Writing aggregated file with encoding '" + getEncoding() + "'");
                writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()));
            } else {
                getLog().info("WARNING: writing aggregated file with system encoding");
                writer = new FileWriter(targetFile);
            }
            for (File file : getFiles()) {
                Reader reader = null;
                try {
                    if (null != getEncoding()) {
                        getLog().info("Reading file " + file.getCanonicalPath() + " with encoding  '" + getEncoding() + "'");
                        reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getEncoding()));
                    } else {
                        getLog().info("WARNING: Reading file " + file.getCanonicalPath() + " with system encoding");
                        reader = new FileReader(file);
                    }
                    IOUtils.copy(reader, writer);
                    final String delimiter = getDelimiter();
                    if (delimiter != null) {
                        writer.write(delimiter.toCharArray());
                    }
                } finally {
                    IOUtils.closeQuietly(reader);
                }
            }
        } finally {
            IOUtils.closeQuietly(writer);
        }
    }
} </s>
<s>class temp {    public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException {
        HttpRequest req = transport.buildGetRequest();
        req.setUrl(targetUrl);
        NotifyFeed feed = req.execute().parseAs(NotifyFeed.class);
        if (feed.entry == null) {
            return Collections.emptyList();
        }
        List<T_new> results = new ArrayList<T_new>();
        for (NotifyEntry e : feed.entry) {
            StringBuilder buffer = new StringBuilder();
            if (e.id != null) {
                buffer.append(e.id);
            }
            buffer.append("@");
            if (e.updated != null) {
                buffer.append(e.updated.toStringRfc3339().substring(0, 19) + "Z");
            }
            Key key = Datastore.createKey(T_new.class, buffer.toString());
            T_new news = new T_new();
            news.setTitle(e.title);
            if (e.content != null) {
                news.setNewText(e.content.substring(0, Math.min(e.content.length(), 500)));
            }
            if (e.status != null && e.content == null) {
                news.setNewText(e.status);
            }
            if (e.updated != null) {
                news.setCreatedAt(new Date(e.updated.value));
            }
            news.setContentUrl(e.getAlternate());
            if (e.author != null) {
                news.setAuthor(e.author.name);
            }
            news.setKey(key);
            results.add(news);
        }
        return results;
    }
} </s>
<s>class temp {    public static byte[] encrypt(String passphrase, byte[] data) throws Exception {
        byte[] dataTemp;
        try {
            Security.addProvider(new com.sun.crypto.provider.SunJCE());
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(passphrase.getBytes());
            DESKeySpec key = new DESKeySpec(md.digest());
            SecretKeySpec DESKey = new SecretKeySpec(key.getKey(), "DES");
            Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, DESKey);
            dataTemp = cipher.doFinal(data);
        } catch (Exception e) {
            throw e;
        }
        return dataTemp;
    }
} </s>
<s>class temp {    public static byte[] decrypt(String passphrase, byte[] data) throws Exception {
        byte[] dataTemp;
        try {
            Security.addProvider(new com.sun.crypto.provider.SunJCE());
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(passphrase.getBytes());
            DESKeySpec key = new DESKeySpec(md.digest());
            SecretKeySpec DESKey = new SecretKeySpec(key.getKey(), "DES");
            Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, DESKey);
            dataTemp = cipher.doFinal(data);
        } catch (Exception e) {
            throw e;
        }
        return dataTemp;
    }
} </s>
<s>class temp {    protected void findPackages(Set<String> packages, ClassLoader classLoader) throws IOException {
        Enumeration<URL> resources = classLoader.getResources(META_INF_SERVICES);
        while (resources.hasMoreElements()) {
            URL url = resources.nextElement();
            String path = url.getPath();
            if (!visitedURIs.contains(path)) {
                visitedURIs.add(path);
                LOG.debug("Loading file {} to retrieve list of packages, from url: {}", META_INF_SERVICES, url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                try {
                    while (true) {
                        String line = reader.readLine();
                        if (line == null) {
                            break;
                        }
                        line = line.trim();
                        if (line.startsWith("#") || line.length() == 0) {
                            continue;
                        }
                        tokenize(packages, line);
                    }
                } finally {
                    IOHelper.close(reader, null, LOG);
                }
            }
        }
    }
} </s>
<s>class temp {    public void run() {
        try {
            if (FileDenAccount.loginsuccessful) {
                host = FileDenAccount.username + " | FileDen.com";
            } else {
                host = "FileDen.com";
                uploadFailed();
                return;
            }
            if (file.length() > 1073741824) {
                JOptionPane.showMessageDialog(neembuuuploader.NeembuuUploader.getInstance(), "<html><b>" + getClass().getSimpleName() + "</b> " + TranslationProvider.get("neembuuuploader.uploaders.maxfilesize") + ": <b>1GB</b></html>", getClass().getSimpleName(), JOptionPane.ERROR_MESSAGE);
                uploadFailed();
                return;
            }
            file_ext = file.getName().substring(file.getName().lastIndexOf(".") + 1);
            String[] unsupported = new String[] { "html", "htm", "php", "php3", "phtml", "htaccess", "htpasswd", "cgi", "pl", "asp", "aspx", "cfm", "exe", "ade", "adp", "bas", "bat", "chm", "cmd", "com", "cpl", "crt", "hlp", "hta", "inf", "ins", "isp", "jse", "lnk", "mdb", "mde", "msc", "msi", "msp", "mst", "pcd", "pif", "reg", "scr", "sct", "shs", "url", "vbe", "vbs", "wsc", "wsf", "wsh", "shb", "js", "vb", "ws", "mdt", "mdw", "mdz", "shb", "scf", "pl", "pm", "dll" };
            for (int i = 0; i < unsupported.length; i++) {
                if (file_ext.equalsIgnoreCase(unsupported[i])) {
                    file_extension_not_supported = true;
                    break;
                }
            }
            if (file_extension_not_supported) {
                JOptionPane.showMessageDialog(neembuuuploader.NeembuuUploader.getInstance(), "<html><b>" + getClass().getSimpleName() + "</b> " + TranslationProvider.get("neembuuuploader.uploaders.filetypenotsupported") + ": <b>" + file_ext + "</b></html>", getClass().getSimpleName(), JOptionPane.ERROR_MESSAGE);
                uploadFailed();
                return;
            }
            status = UploadStatus.INITIALISING;
            DefaultHttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost("http://www.fileden.com/upload_old.php");
            httppost.setHeader("Cookie", FileDenAccount.getCookies().toString());
            MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
            mpEntity.addPart("Filename", new StringBody(file.getName()));
            mpEntity.addPart("action", new StringBody("upload"));
            mpEntity.addPart("upload_to", new StringBody(""));
            mpEntity.addPart("overwrite_option", new StringBody("overwrite"));
            mpEntity.addPart("thumbnail_size", new StringBody("small"));
            mpEntity.addPart("create_img_tags", new StringBody("1"));
            mpEntity.addPart("file0", new MonitoredFileBody(file, uploadProgress));
            httppost.setEntity(mpEntity);
            NULogger.getLogger().log(Level.INFO, "executing request {0}", httppost.getRequestLine());
            NULogger.getLogger().info("Now uploading your file into fileden");
            status = UploadStatus.UPLOADING;
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity resEntity = response.getEntity();
            NULogger.getLogger().info(response.getStatusLine().toString());
            status = UploadStatus.GETTINGLINK;
            if (resEntity != null) {
                uploadresponse = EntityUtils.toString(resEntity);
            }
            NULogger.getLogger().info(uploadresponse);
            downloadlink = CommonUploaderTasks.parseResponse(uploadresponse, "'link':'", "'");
            NULogger.getLogger().log(Level.INFO, "Download link : {0}", downloadlink);
            downURL = downloadlink;
            httpclient.getConnectionManager().shutdown();
            uploadFinished();
        } catch (Exception e) {
            Logger.getLogger(RapidShare.class.getName()).log(Level.SEVERE, null, e);
            uploadFailed();
        }
    }
} </s>
<s>class temp {    private void doDecrypt(boolean createOutput) throws IOException {
        FileInputStream input = null;
        FileOutputStream output = null;
        File tempOutput = null;
        try {
            input = new FileInputStream(infile);
            String cipherBaseFilename = basename(infile);
            byte[] magic = new byte[MAGIC.length];
            input.read(magic);
            for (int i = 0; i < MAGIC.length; i++) {
                if (MAGIC[i] != magic[i]) throw new IOException("Not a BORK file (bad magic number)");
            }
            short version = readShort(input);
            if (version / 1000 > VERSION / 1000) throw new IOException("File created by an incompatible future version: " + version + " > " + VERSION);
            String cipherName = readString(input);
            Cipher cipher = createCipher(cipherName, createSessionKey(password, cipherBaseFilename));
            CipherInputStream decryptedInput = new CipherInputStream(input, cipher);
            long headerCrc = Unsigned.promote(readInt(decryptedInput));
            decryptedInput.resetCRC();
            outfile = new File(outputDir, readString(decryptedInput));
            if (!createOutput || outfile.exists()) {
                skipped = true;
                return;
            }
            tempOutput = File.createTempFile("bork", null, outputDir);
            tempOutput.deleteOnExit();
            byte[] buffer = new byte[BUFFER_SIZE];
            output = new FileOutputStream(tempOutput);
            int bytesRead;
            while ((bytesRead = decryptedInput.read(buffer)) != -1) output.write(buffer, 0, bytesRead);
            output.close();
            output = null;
            if (headerCrc != decryptedInput.getCRC()) {
                outfile = null;
                throw new IOException("CRC mismatch: password is probably incorrect");
            }
            if (!tempOutput.renameTo(outfile)) throw new IOException("Failed to rename temp output file " + tempOutput + " to " + outfile);
            outfile.setLastModified(infile.lastModified());
        } finally {
            close(input);
            close(output);
            if (tempOutput != null) tempOutput.delete();
        }
    }
} </s>
<s>class temp {    public static void zip(File mzml, File zipDestination) throws Exception {
        File preCompressionTmp = null;
        CompressionHandler comp = null;
        try {
            preCompressionTmp = new File(mzml.getName() + ".tmp");
            preCompressionTmp.createNewFile();
            if (!preCompressionTmp.canWrite()) {
                throw new Exception("Cannot write to temp file: " + preCompressionTmp.getAbsolutePath());
            }
            comp = new CompressionHandler();
            comp.compress(mzml, preCompressionTmp);
            comp.close();
            BufferedOutputStream bos = null;
            try {
                bos = new BufferedOutputStream(new FileOutputStream(zipDestination));
                bos.write(Util.convertIntToBytes(Util.getVersion()));
            } finally {
                try {
                    bos.flush();
                } catch (Exception nope) {
                }
                try {
                    bos.close();
                } catch (Exception nope) {
                }
            }
            GZIPOutputStream gos = null;
            BufferedInputStream bis = null;
            try {
                bis = new BufferedInputStream(new FileInputStream(preCompressionTmp));
                gos = new GZIPOutputStream(new FileOutputStream(zipDestination, true));
                final byte[] buffer = new byte[IO_BUFFER];
                int read = -1;
                while ((read = bis.read(buffer)) != -1) {
                    gos.write(buffer, 0, read);
                }
            } finally {
                try {
                    bis.close();
                } catch (Exception nope) {
                }
                try {
                    gos.flush();
                } catch (Exception nope) {
                }
                try {
                    gos.close();
                } catch (Exception nope) {
                }
            }
        } finally {
            try {
                comp.close();
            } catch (Exception nope) {
            }
            try {
                preCompressionTmp.delete();
            } catch (Exception nope) {
            }
        }
    }
} </s>
<s>class temp {    public SSLContext getSSLContext() throws IOException {
        try {
            URL url = getClass().getClassLoader().getResource(keyStoreFile);
            KeyStore keystore = KeyStore.getInstance(type.name());
            keystore.load(url.openStream(), keyPassword);
            KeyManagerFactory kmfactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            kmfactory.init(keystore, keyPassword);
            KeyManager[] keymanagers = kmfactory.getKeyManagers();
            SSLContext sslcontext = SSLContext.getInstance(protocol.name());
            sslcontext.init(keymanagers, TRUST_MANAGER, null);
            return sslcontext;
        } catch (Exception e) {
            throw new IOException(e);
        }
    }
} </s>
<s>class temp {    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources("/net/adrianromero/templates/" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources("/net/adrianromero/templates/en");
            }
            for (URL url : templates) {
                String fileName = url.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith(".xml") || fileName.endsWith(".txt")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = url.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + "\n");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error("Unable to load templates", e1);
        } catch (IOException e1) {
            logger.error("Unable to load templates", e1);
        }
        String[][] images = new String[][] { { "default.user", "yast_sysadmin.png" }, { "default.product", "colorize.png" }, { "Window.Logo", "windowlogo.png" }, { "Image.Backarrow", "3backarrow.png" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource("/net/adrianromero/images/" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("" + img.getId());
            imgProperty.save();
        }
    }
} </s>
<s>class temp {    public void serveResource(HTTPResource resource, HttpServletRequest request, HttpServletResponse response) throws java.io.IOException {
        Image image = (Image) resource;
        log.debug("Serving: " + image);
        URL url = image.getResourceURL();
        int idx = url.toString().lastIndexOf(".");
        String fn = image.getId() + url.toString().substring(idx);
        String cd = "filename=\"" + fn + "\"";
        response.setContentType(image.getContentType());
        log.debug("LOADING: " + url);
        IOUtil.copyData(response.getOutputStream(), url.openStream());
    }
} </s>
<s>class temp {    public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format("%02x", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
} </s>
<s>class temp {    private String readRDF() {
        try {
            FileReader fileStream = new FileReader(GeoModel.PATH_STORED_FILES + "rdfVersion.xml");
            BufferedReader readBuf = new BufferedReader(fileStream);
            StringBuilder contents = new StringBuilder();
            String line;
            while ((line = readBuf.readLine()) != null) {
                contents.append(line);
                contents.append(System.getProperty("line.separator"));
            }
            readBuf.close();
            return contents.toString();
        } catch (IOException e) {
            MessageViewer.infoMessage(mainFrame, "You are running a demo version using data files fetched from the web.\nResults cannot be saved.");
            mainFrame.setTitle(mainFrame.getTitle() + ". You are running a demo version using data files fetched from the web. Results cannot be saved.");
            URL urlRdf;
            try {
                urlRdf = new URL(GeoModel.URL_STORED_FILES + "rdfVersion.xml");
                URLConnection urlConnRdf = urlRdf.openConnection();
                BufferedReader urlReader = new BufferedReader(new InputStreamReader(urlConnRdf.getInputStream()));
                StringBuilder contents = new StringBuilder();
                String line;
                while ((line = urlReader.readLine()) != null) {
                    contents.append(line);
                    contents.append(System.getProperty("line.separator"));
                }
                urlReader.close();
                return contents.toString();
            } catch (Exception e1) {
                return null;
            }
        }
    }
} </s>
<s>class temp {    public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException {
        if (algorithm == null) {
            throw new IllegalArgumentException("THE ALGORITHM MUST NOT BE NULL");
        }
        if (password == null) {
            throw new IllegalArgumentException("THE PASSWORD MUST NOT BE NULL");
        }
        if (salt == null) {
            salt = "";
        }
        String result = null;
        try {
            MessageDigest md = MessageDigest.getInstance(algorithm);
            md.update(password.getBytes());
            md.update(salt.getBytes());
            result = SecurityHelper.byteArrayToHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new DruidSafeRuntimeException(e);
        }
        return result;
    }
} </s>
<s>class temp {    public static Hashtable getNamingHashtable() {
        Hashtable namingHash = new Hashtable();
        URL url = AceTree.class.getResource("/org/rhwlab/snight/namesHash.txt");
        InputStream istream = null;
        try {
            istream = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(istream));
            String s;
            while (br.ready()) {
                s = br.readLine();
                if (s.length() == 0) continue;
                String[] sa = s.split(",");
                namingHash.put(sa[0], sa[1]);
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return namingHash;
    }
} </s>
<s>class temp {    public static void copyFile(String fileName, String dstPath) throws IOException {
        FileChannel sourceChannel = new FileInputStream(fileName).getChannel();
        FileChannel destinationChannel = new FileOutputStream(dstPath).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    private void gerarFaturamento() {
        int opt = Funcoes.mensagemConfirma(null, "Confirma o faturamento?");
        if (opt == JOptionPane.OK_OPTION) {
            StringBuilder insert = new StringBuilder();
            insert.append("INSERT INTO RPFATURAMENTO ");
            insert.append("(CODEMP, CODFILIAL, CODPED, CODITPED, ");
            insert.append("QTDFATURADO, VLRFATURADO, QTDPENDENTE, ");
            insert.append("PERCCOMISFAT, VLRCOMISFAT, DTFATURADO ) ");
            insert.append("VALUES");
            insert.append("(?,?,?,?,?,?,?,?,?,?)");
            PreparedStatement ps;
            int parameterIndex;
            try {
                for (int i = 0; i < tab.getNumLinhas(); i++) {
                    parameterIndex = 1;
                    ps = con.prepareStatement(insert.toString());
                    ps.setInt(parameterIndex++, AplicativoRep.iCodEmp);
                    ps.setInt(parameterIndex++, ListaCampos.getMasterFilial("RPFATURAMENTO"));
                    ps.setInt(parameterIndex++, txtCodPed.getVlrInteger());
                    ps.setInt(parameterIndex++, (Integer) tab.getValor(i, ETabNota.ITEM.ordinal()));
                    ps.setBigDecimal(parameterIndex++, (BigDecimal) tab.getValor(i, ETabNota.QTDFATURADA.ordinal()));
                    ps.setBigDecimal(parameterIndex++, (BigDecimal) tab.getValor(i, ETabNota.VLRFATURADO.ordinal()));
                    ps.setBigDecimal(parameterIndex++, (BigDecimal) tab.getValor(i, ETabNota.QDTPENDENTE.ordinal()));
                    ps.setBigDecimal(parameterIndex++, (BigDecimal) tab.getValor(i, ETabNota.PERCCOMIS.ordinal()));
                    ps.setBigDecimal(parameterIndex++, (BigDecimal) tab.getValor(i, ETabNota.VLRCOMIS.ordinal()));
                    ps.setDate(parameterIndex++, Funcoes.dateToSQLDate(Calendar.getInstance().getTime()));
                    ps.executeUpdate();
                }
                gerarFaturamento.setEnabled(false);
                gerarComissao.setEnabled(true);
                Funcoes.mensagemInforma(null, "Faturamento criado para pedido " + txtCodPed.getVlrInteger());
                con.commit();
            } catch (Exception e) {
                e.printStackTrace();
                Funcoes.mensagemErro(this, "Erro ao gerar faturamento!\n" + e.getMessage());
                try {
                    con.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    private void gerarComissao() {
        int opt = Funcoes.mensagemConfirma(null, "Confirma gerar comiss es para o vendedor " + txtNomeVend.getVlrString().trim() + "?");
        if (opt == JOptionPane.OK_OPTION) {
            StringBuilder insert = new StringBuilder();
            insert.append("INSERT INTO RPCOMISSAO ");
            insert.append("(CODEMP, CODFILIAL, CODPED, CODITPED, ");
            insert.append("CODEMPVD, CODFILIALVD, CODVEND, VLRCOMISS ) ");
            insert.append("VALUES ");
            insert.append("(?,?,?,?,?,?,?,?)");
            PreparedStatement ps;
            int parameterIndex;
            boolean gerou = false;
            try {
                for (int i = 0; i < tab.getNumLinhas(); i++) {
                    if (((BigDecimal) tab.getValor(i, 8)).floatValue() > 0) {
                        parameterIndex = 1;
                        ps = con.prepareStatement(insert.toString());
                        ps.setInt(parameterIndex++, AplicativoRep.iCodEmp);
                        ps.setInt(parameterIndex++, ListaCampos.getMasterFilial("RPCOMISSAO"));
                        ps.setInt(parameterIndex++, txtCodPed.getVlrInteger());
                        ps.setInt(parameterIndex++, (Integer) tab.getValor(i, ETabNota.ITEM.ordinal()));
                        ps.setInt(parameterIndex++, AplicativoRep.iCodEmp);
                        ps.setInt(parameterIndex++, ListaCampos.getMasterFilial("RPVENDEDOR"));
                        ps.setInt(parameterIndex++, txtCodVend.getVlrInteger());
                        ps.setBigDecimal(parameterIndex++, (BigDecimal) tab.getValor(i, ETabNota.VLRCOMIS.ordinal()));
                        ps.executeUpdate();
                        gerou = true;
                    }
                }
                if (gerou) {
                    Funcoes.mensagemInforma(null, "Comiss o gerada para " + txtNomeVend.getVlrString().trim());
                    txtCodPed.setText("0");
                    lcPedido.carregaDados();
                    carregaTabela();
                    con.commit();
                } else {
                    Funcoes.mensagemInforma(null, "N o foi possiv l gerar comiss o!\nVerifique os valores das comiss es dos itens.");
                }
            } catch (Exception e) {
                e.printStackTrace();
                Funcoes.mensagemErro(this, "Erro ao gerar comiss o!\n" + e.getMessage());
                try {
                    con.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    public void testImageDataField() {
        PropertySet propertySet = fetchPropertySet();
        try {
            ImageDataField dataField = propertySet.getDataField(PropertySetTestStruct.TESTBLOCK_IMAGE, ImageDataField.class);
            URL url = getClass().getResource("JFire_Test.gif");
            if (url == null) return;
            InputStream in = url.openStream();
            try {
                dataField.loadStream(in, "JFire_Test.gif", "image/gif");
            } finally {
                in.close();
            }
        } catch (Exception e) {
            throw new RuntimeException("Setting image of ImageDataField failed", e);
        }
        try {
            propertySet.deflate();
            getPropertyManager().storePropertySet(propertySet, true, FETCH_GROUPS, FETCH_DEPTH);
        } catch (Exception e) {
            throw new RuntimeException("Storing PropertySet with ImageDataField failed", e);
        }
    }
} </s>
<s>class temp {    public static boolean writeFile(HttpServletResponse resp, File reqFile) {
        boolean retVal = false;
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(reqFile));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug("File successful written to servlet response: " + reqFile.getAbsolutePath());
        } catch (FileNotFoundException e) {
            logger.error("Resource not found: " + reqFile.getAbsolutePath());
        } catch (IOException e) {
            logger.error(String.format("Error while rendering [%s]: %s", reqFile.getAbsolutePath(), e.getMessage()), e);
        } finally {
            IOUtils.closeQuietly(in);
        }
        return retVal;
    }
} </s>
<s>class temp {    public static void copyFile(final File in, final File out) throws IOException {
        final FileChannel inChannel = new FileInputStream(in).getChannel();
        final FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
} </s>
<s>class temp {    private Response doLoad(URL url, URL referer, String postData) throws IOException {
        URLConnection connection = PROXY == null ? url.openConnection() : url.openConnection(PROXY);
        COOKIES.writeCookies(connection);
        connection.setRequestProperty("User-Agent", USER_AGENT);
        if (referer != null) {
            connection.setRequestProperty("Referer", referer.toString());
        }
        if (postData != null) {
            connection.setDoInput(true);
            connection.setDoOutput(true);
            connection.setUseCaches(false);
            connection.setRequestProperty("CONTENT_LENGTH", "" + postData.length());
            OutputStream os = connection.getOutputStream();
            OutputStreamWriter osw = new OutputStreamWriter(os);
            osw.write(postData);
            osw.flush();
            osw.close();
        }
        connection.connect();
        COOKIES.readCookies(connection);
        previouseUrl = url;
        return responceInstance(url, connection.getInputStream(), connection.getContentType());
    }
} </s>
<s>class temp {    public void run() {
        try {
            File f = new File(repository + fileName);
            if (!f.exists()) {
                URL url = new URL(urlString);
                URLConnection urlConnection = url.openConnection();
                urlConnection.connect();
                InputStream dis = url.openStream();
                File dir = new File(repository);
                if (!dir.exists()) dir.mkdirs();
                f.createNewFile();
                FileOutputStream fos = new FileOutputStream(f);
                byte[] buffer = new byte[4096];
                int len = 0;
                while ((len = dis.read(buffer)) > -1) fos.write(buffer, 0, len);
                fos.close();
                dis.close();
            }
            fireFileDownloadedListener(fileName);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    static byte[] getPassword(final String name, final String password) {
        try {
            final MessageDigest messageDigest = MessageDigest.getInstance("SHA");
            messageDigest.update(name.getBytes());
            messageDigest.update(password.getBytes());
            return messageDigest.digest();
        } catch (final NoSuchAlgorithmException e) {
            throw new JobException(e);
        }
    }
} </s>
<s>class temp {    private void loadOperatorsXML() {
        startwindow.setMessage("Loading Operators...");
        try {
            URL url = Application.class.getClassLoader().getResource(Resources.getString("OPERATORS_XML"));
            InputStream input = url.openStream();
            OperatorsReader.registerOperators(Resources.getString("OPERATORS_XML"), input);
        } catch (FileNotFoundException e) {
            Logger.logException("File '" + Resources.getString("OPERATORS_XML") + "' not found.", e);
        } catch (IOException error) {
            Logger.logException(error.getMessage(), error);
        }
    }
} </s>
<s>class temp {    public static boolean copyFileCover(String srcFileName, String descFileName, boolean coverlay) {
        File srcFile = new File(srcFileName);
        if (!srcFile.exists()) {
            System.out.println("     ļ ʧ ܣ Դ ļ " + srcFileName + "      !");
            return false;
        } else if (!srcFile.isFile()) {
            System.out.println("     ļ ʧ ܣ " + srcFileName + "    һ   ļ !");
            return false;
        }
        File descFile = new File(descFileName);
        if (descFile.exists()) {
            if (coverlay) {
                System.out.println("Ŀ   ļ  Ѵ  ڣ ׼  ɾ  !");
                if (!FileOperateUtils.delFile(descFileName)) {
                    System.out.println("ɾ  Ŀ   ļ " + descFileName + "ʧ  !");
                    return false;
                }
            } else {
                System.out.println("     ļ ʧ ܣ Ŀ   ļ " + descFileName + " Ѵ   !");
                return false;
            }
        } else {
            if (!descFile.getParentFile().exists()) {
                System.out.println("Ŀ   ļ    ڵ Ŀ¼     ڣ     Ŀ¼!");
                if (!descFile.getParentFile().mkdirs()) {
                    System.out.println("    Ŀ   ļ    ڵ Ŀ¼ʧ  !");
                    return false;
                }
            }
        }
        int readByte = 0;
        InputStream ins = null;
        OutputStream outs = null;
        try {
            ins = new FileInputStream(srcFile);
            outs = new FileOutputStream(descFile);
            byte[] buf = new byte[1024];
            while ((readByte = ins.read(buf)) != -1) {
                outs.write(buf, 0, readByte);
            }
            System.out.println("   Ƶ    ļ " + srcFileName + "  " + descFileName + " ɹ !");
            return true;
        } catch (Exception e) {
            System.out.println("     ļ ʧ ܣ " + e.getMessage());
            return false;
        } finally {
            if (outs != null) {
                try {
                    outs.close();
                } catch (IOException oute) {
                    oute.printStackTrace();
                }
            }
            if (ins != null) {
                try {
                    ins.close();
                } catch (IOException ine) {
                    ine.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    private byte[] rawHttpPost(URL serverTimeStamp, Hashtable reqProperties, byte[] postData) {
        logger.info("[rawHttpPost.in]:: " + Arrays.asList(new Object[] { serverTimeStamp, reqProperties, postData }));
        URLConnection urlConn;
        DataOutputStream printout;
        DataInputStream input;
        byte[] responseBody = null;
        try {
            urlConn = serverTimeStamp.openConnection();
            urlConn.setDoInput(true);
            urlConn.setDoOutput(true);
            urlConn.setUseCaches(false);
            Iterator iter = reqProperties.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                urlConn.setRequestProperty((String) entry.getKey(), (String) entry.getValue());
            }
            logger.debug("POSTing to: " + serverTimeStamp + " ...");
            printout = new DataOutputStream(urlConn.getOutputStream());
            printout.write(postData);
            printout.flush();
            printout.close();
            input = new DataInputStream(urlConn.getInputStream());
            byte[] buffer = new byte[1024];
            int bytesRead = 0;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            while ((bytesRead = input.read(buffer, 0, buffer.length)) >= 0) {
                baos.write(buffer, 0, bytesRead);
            }
            input.close();
            responseBody = baos.toByteArray();
        } catch (MalformedURLException me) {
            logger.warn("[rawHttpPost]:: ", me);
        } catch (IOException ioe) {
            logger.warn("[rawHttpPost]:: ", ioe);
        }
        return responseBody;
    }
} </s>
<s>class temp {    public static void copyFile(File file, String pathExport) throws IOException {
        File out = new File(pathExport);
        FileChannel sourceChannel = new FileInputStream(file).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
} </s>
<s>class temp {    @Test
    public void test_validate_geo_getEvents() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
            File schemaLocation = new File("tes.xsd");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL("http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse("File not found", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse("Schema did not validate", true);
        }
        assertTrue(true);
    }
} </s>
<s>class temp {    private static String encryptMD5(String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.reset();
            digest.update(password.getBytes("UTF-8"));
            digest.update(digestSeed.toString().getBytes("UTF-8"));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xff & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
} </s>
<s>class temp {    private static String encrypt(String algorithm, String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            digest.reset();
            digest.update(password.getBytes("UTF-8"));
            digest.update(digestSeed.toString().getBytes("UTF-8"));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));
                hexString.append(Integer.toHexString(0x0f & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
} </s>
<s>class temp {    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
} </s>
<s>class temp {    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    private static void copyObjects(File[] source, String target) {
        for (int i = 0; i < source.length; i++) {
            try {
                File inputFile = source[i];
                File outputFile = new File(target + source[i].getName());
                FileReader in = new FileReader(inputFile);
                FileWriter out = new FileWriter(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            } catch (Exception ex) {
                Logger.error(ex.getClass() + " " + ex.getMessage());
                for (int j = 0; j < ex.getStackTrace().length; j++) Logger.error("     " + ex.getStackTrace()[j].toString());
                ex.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    protected String getPostRequestContent(String urlText, String... postParams) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.setRequestMethod("POST");
        urlcon.setUseCaches(false);
        urlcon.setDoOutput(true);
        PrintStream ps = new PrintStream(urlcon.getOutputStream());
        for (String param : postParams) {
            ps.print(param);
        }
        ps.close();
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
} </s>
<s>class temp {    private URL resolveRedirects(URL url, int redirectCount) throws IOException {
        URLConnection uc = url.openConnection();
        if (uc instanceof HttpURLConnection) {
            HttpURLConnection huc = (HttpURLConnection) uc;
            huc.setInstanceFollowRedirects(false);
            huc.connect();
            int responseCode = huc.getResponseCode();
            String location = huc.getHeaderField("location");
            huc.disconnect();
            if ((responseCode == HttpURLConnection.HTTP_MOVED_TEMP) && (redirectCount < 5)) {
                try {
                    URL newUrl = new URL(location);
                    return resolveRedirects(newUrl, redirectCount + 1);
                } catch (MalformedURLException ex) {
                    return url;
                }
            } else return url;
        } else return url;
    }
} </s>
<s>class temp {    public static String loadPage(URL url) throws IOException {
        Reader in = null;
        URLConnection uc;
        HttpURLConnection huc = null;
        try {
            uc = url.openConnection();
            if (uc instanceof HttpURLConnection) {
                huc = (HttpURLConnection) uc;
                huc.setInstanceFollowRedirects(false);
                huc.connect();
                in = new InputStreamReader(huc.getInputStream());
                StringBuilder sb = new StringBuilder();
                int c;
                while ((c = in.read()) != -1) sb.append((char) c);
                return sb.toString();
            } else return null;
        } finally {
            try {
                if (in != null) in.close();
                if (huc != null) huc.disconnect();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    protected Collection<BibtexEntry> getBibtexEntries(String ticket, String citations) throws IOException {
        try {
            URL url = new URL(URL_BIBTEX);
            URLConnection conn = url.openConnection();
            conn.setRequestProperty("Cookie", ticket + "; " + citations);
            conn.connect();
            BibtexParser parser = new BibtexParser(new BufferedReader(new InputStreamReader(conn.getInputStream())));
            return parser.parse().getDatabase().getEntries();
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    protected String getCitations(String ticket, String query) throws IOException {
        String urlQuery;
        try {
            urlQuery = "http://www.jstor.org/search/BasicResults?hp=" + MAX_CITATIONS + "&si=1&gw=jtx&jtxsi=1&jcpsi=1&artsi=1&Query=" + URLEncoder.encode(query, "UTF-8") + "&wc=on&citationAction=saveAll";
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        URL url = new URL(urlQuery);
        URLConnection conn = url.openConnection();
        conn.setRequestProperty("Cookie", ticket);
        return getCookie(COOKIE_CITATIONS, conn);
    }
} </s>
<s>class temp {    public synchronized InputStream getResourceAsStream(String name) {
        InputStream inputStream = null;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            URL url = getResource(name);
            String remoteName = url.toExternalForm();
            String localName = (String) cacheHashtable.get(remoteName);
            if (localName != null) {
                System.out.println("Retrieving \"" + localName + "\"...");
                return new FileInputStream(localName);
            }
            String host = url.getHost();
            String prot = url.getProtocol();
            int port = url.getPort();
            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + "port" + (port == -1 ? "" : Integer.toString(port)) + File.separator + name);
            cacheFile = new File(cacheFile.getCanonicalPath());
            localName = cacheFile.getCanonicalPath();
            System.out.println("Comparing \"" + localName + "\"...");
            URLConnection urlConnection = url.openConnection();
            if (cacheFile.exists()) {
                urlConnection.setIfModifiedSince(cacheFile.lastModified());
            }
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod("GET");
                int responseCode = httpURLConnection.getResponseCode();
                System.out.println(httpURLConnection.getResponseMessage() + ", " + httpURLConnection.getContentLength() + " bytes" + ", " + new Date(httpURLConnection.getDate()) + ", " + new Date(httpURLConnection.getLastModified()));
                if (responseCode != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            inputStream = urlConnection.getInputStream();
            if (inputStream == null) return null;
            if (cacheFile.exists()) {
                long lastModified = urlConnection.getLastModified();
                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {
                    inputStream.close();
                    cacheHashtable.put(remoteName, localName);
                    System.out.println("Retrieving \"" + localName + "\"...");
                    return new FileInputStream(cacheFile);
                }
            }
            File parentFile = new File(cacheFile.getParent());
            parentFile.mkdirs();
            localName = cacheFile.getCanonicalPath();
            System.out.println("CACHING \"" + localName + "\"...");
            in = new BufferedInputStream(inputStream);
            out = new BufferedOutputStream(new FileOutputStream(cacheFile));
            int i;
            while ((i = in.read()) > -1) out.write(i);
            out.close();
            in.close();
            cacheHashtable.put(remoteName, localName);
            System.out.println("Retrieving \"" + localName + "\"...");
            return new FileInputStream(localName);
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            try {
                in.close();
            } catch (Exception ex1) {
            }
            try {
                out.close();
            } catch (Exception ex1) {
            }
            ex.printStackTrace();
            return null;
        }
    }
} </s>
<s>class temp {    public static final Bitmap getBitmap(final String key, int size) {
        Bitmap bmp = null;
        byte[] line = new byte[1024];
        int byteSize = 0;
        String urlStr = URI_IMAGE + key;
        try {
            URL url = new URL(urlStr);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");
            con.connect();
            InputStream is = con.getInputStream();
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            while ((byteSize = is.read(line)) > 0) {
                out.write(line, 0, byteSize);
            }
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inSampleSize = size;
            byte[] byteArray = out.toByteArray();
            bmp = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length, options);
            is.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bmp;
    }
} </s>
<s>class temp {    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
} </s>
<s>class temp {    public Download doDownload(HttpHeader[] headers, URI target) throws HttpRequestException {
        HttpRequest<E> con = createConnection(HttpMethods.METHOD_GET, target);
        if (defaultHeaders != null) {
            putHeaders(con, defaultHeaders);
        }
        if (headers != null) {
            putHeaders(con, headers);
        }
        HttpResponse<?> res = execute(con);
        if (res.getResponseCode() == 200) {
            return new Download(res);
        } else {
            throw new HttpRequestException(res.getResponseCode(), res.getResponseMessage());
        }
    }
} </s>
<s>class temp {    public HttpResponse<E> doRequest(HttpMethods method, HttpHeader[] headers, boolean auth, URI target, BlipMessagePart body) throws HttpRequestException {
        HttpRequest<E> con = createConnection(method, target);
        if (defaultHeaders != null) {
            putHeaders(con, defaultHeaders);
        }
        if (headers != null) {
            putHeaders(con, headers);
        }
        try {
            if (auth && authStrategy != null) {
                authStrategy.perform(con);
            }
            if (body != null) {
                bodyGenerator.writeBody(con, body);
            }
            HttpResponse<E> res = execute(con);
            return res;
        } catch (IOException e) {
            throw new HttpRequestException("Error executing request", e);
        }
    }
} </s>
<s>class temp {    public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) {
        if (!urlpath.endsWith("/")) {
            urlpath = urlpath + '/';
        }
        if (!urlpath.startsWith("http://")) {
            urlpath = "http://" + urlpath;
        }
        String url = urlpath;
        if (fname.startsWith("dusty_")) {
            url = url + "libraries/" + fname;
        } else {
            url = url + "users/" + fname;
        }
        StringBuffer src = new StringBuffer(2400);
        try {
            String s;
            BufferedReader br = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            while ((s = br.readLine()) != null) {
                src.append(s).append('\n');
            }
            br.close();
        } catch (Exception e) {
            OUT.println(new DSOut(DSOut.ERR_OUT, -1, "Dustyscript failed at reading the file'" + fname + "'\n\t...for 'use' statement"), vc, AT);
            return false;
        }
        fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies);
        return true;
    }
} </s>
<s>class temp {    public static boolean copyFile(File dest, File source) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        boolean rv = false;
        byte[] buf = new byte[1000000];
        int bytesRead = 0;
        if (!dest.getParentFile().exists()) dest.getParentFile().mkdirs();
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(dest);
            while ((bytesRead = fis.read(buf)) > 0) fos.write(buf, 0, bytesRead);
            fis.close();
            fis = null;
            fos.close();
            fos = null;
            rv = true;
        } catch (Throwable t) {
            throw new ApplicationException("copy error (" + source.getAbsolutePath() + " => " + dest.getAbsolutePath(), t);
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (Exception e) {
                }
                fis = null;
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (Exception e) {
                }
                fos = null;
            }
        }
        return rv;
    }
} </s>
<s>class temp {    public static boolean joinFiles(File dest, Collection<File> sources) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        boolean rv = false;
        byte[] buf = new byte[1000000];
        int bytesRead = 0;
        if (!dest.getParentFile().exists()) dest.getParentFile().mkdirs();
        try {
            fos = new FileOutputStream(dest);
            for (File source : sources) {
                fis = new FileInputStream(source);
                while ((bytesRead = fis.read(buf)) > 0) fos.write(buf, 0, bytesRead);
                fis.close();
                fis = null;
            }
            fos.close();
            fos = null;
            rv = true;
        } catch (Throwable t) {
            throw new ApplicationException("error joining files to " + dest.getAbsolutePath(), t);
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (Exception e) {
                }
                fis = null;
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (Exception e) {
                }
                fos = null;
            }
        }
        return rv;
    }
} </s>
<s>class temp {    public void testCreate() throws Exception {
        File f = File.createTempFile("DiskCacheItemTest", "tmp");
        f.deleteOnExit();
        try {
            DiskCacheItem i = new DiskCacheItem(f);
            i.setLastModified(200005L);
            i.setTranslationCount(11);
            i.setEncoding("GB2312");
            i.setHeader(new ResponseHeaderImpl("Test2", new String[] { "Value3", "Value4" }));
            i.setHeader(new ResponseHeaderImpl("Test1", new String[] { "Value1", "Value2" }));
            byte[] chineseText = new byte[] { -42, -48, -46, -30, 87, 101, 98, 46, 99, 111, 109, 32, -54, -57, -46, -69, -72, -10, -61, -26, -49, -14, -42, -48, -50, -60, -45, -61, -69, -89, -95, -94, -67, -23, -55, -36, -46, -30, -76, -13, -64, -5, -58, -13, -46, -75, -75, -60, -42, -48, -50, -60, -51, -8, -43, -66, -93, -84, -54, -57, -46, -69, -68, -36, -51, -88, -49, -14, -74, -85, -73, -67, -75, -60, -51, -8, -62, -25, -57, -59, -63, -70, -93, -84, -53, -4, -75, -60, -60, -65, -75, -60, -44, -38, -45, -38, -80, -17, -42, -6, -78, -69, -74, -49, -73, -94, -43, -71, -41, -77, -76, -13, -75, -60, -58, -13, -46, -75, -68, -28, -67, -8, -48, -48, -49, -32, -69, -91, -63, -86, -49, -75, -67, -45, -76, -91, -95, -93, -50, -46, -61, -57, -49, -32, -48, -59, -93, -84, -42, -48, -50, -60, -45, -61, -69, -89, -67, -85, -69, -31, -51, -88, -71, -3, -79, -66, -51, -8, -43, -66, -93, -84, -43, -46, -75, -67, -45, -48, -71, -40, -46, -47, -45, -21, -42, -48, -71, -6, -58, -13, -46, -75, -67, -88, -63, -94, -70, -49, -41, -9, -67, -69, -51, -7, -71, -40, -49, -75, -75, -60, -46, -30, -76, -13, -64, -5, -58, -13, -46, -75, -93, -84, -69, -14, -45, -48, -46, -30, -45, -21, -42, -48, -71, -6, 32, -58, -13, -46, -75, -67, -8, -48, -48, -70, -49, -41, -9, -67, -69, -51, -7, -75, -60, -46, -30, -76, -13, -64, -5, -58, -13, -46, -75, -75, -60, -45, -48, -45, -61, -48, -59, -49, -94, -41, -54, -63, -49, -95, -93 };
            {
                InputStream input = new ByteArrayInputStream(chineseText);
                try {
                    i.setContentAsStream(input);
                } finally {
                    input.close();
                }
            }
            assertEquals("GB2312", i.getEncoding());
            assertEquals(200005L, i.getLastModified());
            assertEquals(11, i.getTranslationCount());
            assertFalse(i.isCached());
            i.updateAfterAllContentUpdated(null, null);
            {
                assertEquals(3, i.getHeaders().size());
                int ii = 0;
                for (ResponseHeader h : i.getHeaders()) {
                    ii++;
                    if (ii == 1) {
                        assertEquals("Content-Length", h.getName());
                        assertEquals("[279]", Arrays.toString(h.getValues()));
                    } else if (ii == 2) {
                        assertEquals("Test1", h.getName());
                        assertEquals("[Value1, Value2]", Arrays.toString(h.getValues()));
                    } else if (ii == 3) {
                        assertEquals("Test2", h.getName());
                        assertEquals("[Value3, Value4]", Arrays.toString(h.getValues()));
                    }
                }
            }
            {
                FileInputStream input = new FileInputStream(f);
                StringWriter w = new StringWriter();
                try {
                    IOUtils.copy(input, w, "GB2312");
                } finally {
                    IOUtils.closeQuietly(input);
                    IOUtils.closeQuietly(w);
                }
                assertEquals(new String(chineseText, "GB2312"), w.toString());
            }
            {
                FileInputStream input = new FileInputStream(f);
                ByteArrayOutputStream output = new ByteArrayOutputStream();
                try {
                    IOUtils.copy(input, output);
                } finally {
                    IOUtils.closeQuietly(input);
                    IOUtils.closeQuietly(output);
                }
                assertTrue(Arrays.equals(chineseText, output.toByteArray()));
            }
        } finally {
            f.delete();
        }
    }
} </s>
<s>class temp {    public void testImageInfo() throws MalformedURLException, IOException {
        System.out.println("ImageInfo:");
        long start = Calendar.getInstance().getTimeInMillis();
        for (int i = 0; i < images.length; i++) {
            String url = Constants.getDefaultURIMediaConnectorBasePath() + "albums/hund/" + images[i];
            InputStream istream = (new URL(url)).openStream();
            ImageInfo ii = new ImageInfo();
            ii.setInput(istream);
            assertTrue("Not a supported image file format.", ii.check());
            int width = ii.getWidth();
            int height = ii.getHeight();
            System.out.println(width + "x" + height);
        }
        long stop = Calendar.getInstance().getTimeInMillis();
        System.out.println("zeit: " + (stop - start));
    }
} </s>
<s>class temp {    public void testJPEGBuffImage() throws MalformedURLException, IOException {
        System.out.println("JPEGCodec BufferedImage:");
        long start = Calendar.getInstance().getTimeInMillis();
        for (int i = 0; i < images.length; i++) {
            String url = Constants.getDefaultURIMediaConnectorBasePath() + "albums/hund/" + images[i];
            InputStream istream = (new URL(url)).openStream();
            JPEGImageDecoder dec = JPEGCodec.createJPEGDecoder(istream);
            BufferedImage image = dec.decodeAsBufferedImage();
            int width = image.getWidth();
            int height = image.getHeight();
            istream.close();
            System.out.println("w: " + width + " - h: " + height);
        }
        long stop = Calendar.getInstance().getTimeInMillis();
        System.out.println("zeit: " + (stop - start));
    }
} </s>
<s>class temp {    public void testJPEGRaster() throws MalformedURLException, IOException {
        System.out.println("JPEGCodec RasterImage:");
        long start = Calendar.getInstance().getTimeInMillis();
        for (int i = 0; i < images.length; i++) {
            String url = Constants.getDefaultURIMediaConnectorBasePath() + "albums/hund/" + images[i];
            InputStream istream = (new URL(url)).openStream();
            JPEGImageDecoder dec = JPEGCodec.createJPEGDecoder(istream);
            Raster raster = dec.decodeAsRaster();
            int width = raster.getWidth();
            int height = raster.getHeight();
            istream.close();
            System.out.println("w: " + width + " - h: " + height);
        }
        long stop = Calendar.getInstance().getTimeInMillis();
        System.out.println("zeit: " + (stop - start));
    }
} </s>
<s>class temp {    public static void copy(FileInputStream source, FileOutputStream dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = source.getChannel();
            out = dest.getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
} </s>
<s>class temp {    private void addPNMLFileToLibrary(File selected) {
        try {
            FileChannel srcChannel = new FileInputStream(selected.getAbsolutePath()).getChannel();
            FileChannel dstChannel = new FileOutputStream(new File(matchingOrderXML).getParent() + "/" + selected.getName()).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
            order.add(new ComponentDescription(false, selected.getName().replaceAll(".pnml", ""), 1.0));
            updateComponentList();
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(dialog, "Could not add the PNML file " + selected.getName() + " to the library!");
        }
    }
} </s>
<s>class temp {        private final int copyFiles(File[] list, String dest, boolean dest_is_full_name) throws InterruptedException {
            Context c = ctx;
            File file = null;
            for (int i = 0; i < list.length; i++) {
                boolean existed = false;
                FileChannel in = null;
                FileChannel out = null;
                File outFile = null;
                file = list[i];
                if (file == null) {
                    error(c.getString(R.string.unkn_err));
                    break;
                }
                String uri = file.getAbsolutePath();
                try {
                    if (isStopReq()) {
                        error(c.getString(R.string.canceled));
                        break;
                    }
                    long last_modified = file.lastModified();
                    String fn = file.getName();
                    outFile = dest_is_full_name ? new File(dest) : new File(dest, fn);
                    if (file.isDirectory()) {
                        if (depth++ > 40) {
                            error(ctx.getString(R.string.too_deep_hierarchy));
                            break;
                        } else if (outFile.exists() || outFile.mkdir()) {
                            copyFiles(file.listFiles(), outFile.getAbsolutePath(), false);
                            if (errMsg != null) break;
                        } else error(c.getString(R.string.cant_md, outFile.getAbsolutePath()));
                        depth--;
                    } else {
                        if (existed = outFile.exists()) {
                            int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander);
                            if (res == Commander.SKIP) continue;
                            if (res == Commander.REPLACE) {
                                if (outFile.equals(file)) continue; else outFile.delete();
                            }
                            if (res == Commander.ABORT) break;
                        }
                        if (move) {
                            long len = file.length();
                            if (file.renameTo(outFile)) {
                                counter++;
                                totalBytes += len;
                                int so_far = (int) (totalBytes * conv);
                                sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0);
                                continue;
                            }
                        }
                        in = new FileInputStream(file).getChannel();
                        out = new FileOutputStream(outFile).getChannel();
                        long size = in.size();
                        final long max_chunk = 524288;
                        long pos = 0;
                        long chunk = size > max_chunk ? max_chunk : size;
                        long t_chunk = 0;
                        long start_time = 0;
                        int speed = 0;
                        int so_far = (int) (totalBytes * conv);
                        String sz_s = Utils.getHumanSize(size);
                        String rep_s = c.getString(R.string.copying, fn);
                        for (pos = 0; pos < size; ) {
                            if (t_chunk == 0) start_time = System.currentTimeMillis();
                            sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed);
                            long transferred = in.transferTo(pos, chunk, out);
                            pos += transferred;
                            t_chunk += transferred;
                            totalBytes += transferred;
                            if (isStopReq()) {
                                Log.d(TAG, "Interrupted!");
                                error(c.getString(R.string.canceled));
                                return counter;
                            }
                            long time_delta = System.currentTimeMillis() - start_time;
                            if (time_delta > 0) {
                                speed = (int) (1000 * t_chunk / time_delta);
                                t_chunk = 0;
                            }
                        }
                        in.close();
                        out.close();
                        in = null;
                        out = null;
                        if (i >= list.length - 1) sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv));
                        counter++;
                    }
                    if (move) file.delete();
                    outFile.setLastModified(last_modified);
                    final int GINGERBREAD = 9;
                    if (android.os.Build.VERSION.SDK_INT >= GINGERBREAD) ForwardCompat.setFullPermissions(outFile);
                } catch (SecurityException e) {
                    error(c.getString(R.string.sec_err, e.getMessage()));
                } catch (FileNotFoundException e) {
                    error(c.getString(R.string.not_accs, e.getMessage()));
                } catch (ClosedByInterruptException e) {
                    error(c.getString(R.string.canceled));
                } catch (IOException e) {
                    String msg = e.getMessage();
                    error(c.getString(R.string.acc_err, uri, msg != null ? msg : ""));
                } catch (RuntimeException e) {
                    error(c.getString(R.string.rtexcept, uri, e.getMessage()));
                } finally {
                    try {
                        if (in != null) in.close();
                        if (out != null) out.close();
                        if (!move && errMsg != null && outFile != null && !existed) {
                            Log.i(TAG, "Deleting failed output file");
                            outFile.delete();
                        }
                    } catch (IOException e) {
                        error(c.getString(R.string.acc_err, uri, e.getMessage()));
                    }
                }
            }
            return counter;
        }
} </s>
<s>class temp {    private boolean runValidation(PropertyMap map, URL url, URL schema) {
        ValidationDriver vd = new ValidationDriver(map);
        try {
            vd.loadSchema(new InputSource(schema.openStream()));
            return vd.validate(new InputSource(url.openStream()));
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
} </s>
