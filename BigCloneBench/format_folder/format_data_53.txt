<s>class temp {    public Font getFont(String urlToFont) {
        Font testFont = null;
        try {
            InputStream inps = (new URL(urlToFont)).openStream();
            testFont = Font.createFont(Font.TRUETYPE_FONT, inps);
        } catch (FontFormatException ffe) {
            ffe.printStackTrace();
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null, "Could not load font - " + urlToFont, "Unable to load font", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return testFont;
    }
} </s>
<s>class temp {    public static String digestString(String data) {
        String result = null;
        if (data != null) {
            try {
                MessageDigest _md = MessageDigest.getInstance("MD5");
                _md.update(data.getBytes());
                byte[] _digest = _md.digest();
                String _ds = toHexString(_digest, 0, _digest.length);
                result = _ds;
            } catch (NoSuchAlgorithmException e) {
                result = null;
            }
        }
        return result;
    }
} </s>
<s>class temp {    protected List<Datastream> getDatastreams(final DepositCollection pDeposit) throws IOException, SWORDException {
        LOG.debug("copying file");
        String tTempFileName = this.getTempDir() + "uploaded-file.tmp";
        IOUtils.copy(pDeposit.getFile(), new FileOutputStream(tTempFileName));
        Datastream tDatastream = new LocalDatastream(this.getGenericFileName(pDeposit), this.getContentType(), tTempFileName);
        List<Datastream> tDatastreams = new ArrayList<Datastream>();
        tDatastreams.add(tDatastream);
        return tDatastreams;
    }
} </s>
<s>class temp {    public InputStream getResourceAsStream(String name) {
        InputStream is = parent.getResourceAsStream(name);
        if (is == null) {
            URL url = findResource(name);
            if (url != null) {
                try {
                    is = url.openStream();
                } catch (IOException e) {
                    is = null;
                }
            }
        }
        return is;
    }
} </s>
<s>class temp {    protected byte[] generateHashBytes() {
        String s = createString(false);
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException nsa) {
            System.out.println("Can't get MD5 implementation " + nsa);
            throw new RuntimeException("DynanmicAddress2: Can't get MD5 implementation");
        }
        if (m_key != null) md.update(m_key.getBytes(), 0, m_key.length());
        md.update(s.getBytes(), 0, s.length());
        byte[] hash = md.digest();
        return hash;
    }
} </s>
<s>class temp {    @Transient
    private String md5sum(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.reset();
            md.update(text.getBytes());
            byte messageDigest[] = md.digest();
            return bufferToHex(messageDigest, 0, messageDigest.length);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public void run() {
        long starttime = (new Date()).getTime();
        Matcher m = Pattern.compile("(\\S+);(\\d+)").matcher(Destination);
        boolean completed = false;
        if (OutFile.length() > IncommingProcessor.MaxPayload) {
            logger.warn("Payload is too large!");
            close();
        } else {
            if (m.find()) {
                Runnable cl = new Runnable() {

                    public void run() {
                        WaitToClose();
                    }
                };
                Thread t = new Thread(cl);
                t.start();
                S = null;
                try {
                    String ip = m.group(1);
                    int port = Integer.valueOf(m.group(2));
                    SerpentEngine eng = new SerpentEngine();
                    byte[] keybytes = new byte[eng.getBlockSize()];
                    byte[] ivbytes = new byte[eng.getBlockSize()];
                    Random.nextBytes(keybytes);
                    Random.nextBytes(ivbytes);
                    KeyParameter keyparm = new KeyParameter(keybytes);
                    ParametersWithIV keyivparm = new ParametersWithIV(keyparm, ivbytes);
                    byte[] parmbytes = BCUtils.writeParametersWithIV(keyivparm);
                    OAEPEncoding enc = new OAEPEncoding(new ElGamalEngine(), new RIPEMD128Digest());
                    enc.init(true, PublicKey);
                    byte[] encbytes = enc.encodeBlock(parmbytes, 0, parmbytes.length);
                    PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(new SerpentEngine()));
                    cipher.init(true, keyivparm);
                    byte[] inbuffer = new byte[128];
                    byte[] outbuffer = new byte[256];
                    int readlen = 0;
                    int cryptlen = 0;
                    FileInputStream fis = new FileInputStream(OutFile);
                    FileOutputStream fos = new FileOutputStream(TmpFile);
                    readlen = fis.read(inbuffer);
                    while (readlen >= 0) {
                        if (readlen > 0) {
                            cryptlen = cipher.processBytes(inbuffer, 0, readlen, outbuffer, 0);
                            fos.write(outbuffer, 0, cryptlen);
                        }
                        readlen = fis.read(inbuffer);
                    }
                    cryptlen = cipher.doFinal(outbuffer, 0);
                    if (cryptlen > 0) {
                        fos.write(outbuffer, 0, cryptlen);
                    }
                    fos.close();
                    fis.close();
                    S = new Socket(ip, port);
                    DataOutputStream dos = new DataOutputStream(S.getOutputStream());
                    dos.writeInt(encbytes.length);
                    dos.write(encbytes);
                    dos.writeLong(TmpFile.length());
                    fis = new FileInputStream(TmpFile);
                    readlen = fis.read(inbuffer);
                    while (readlen >= 0) {
                        dos.write(inbuffer, 0, readlen);
                        readlen = fis.read(inbuffer);
                    }
                    DataInputStream dis = new DataInputStream(S.getInputStream());
                    byte[] encipbytes = StreamUtils.readBytes(dis);
                    cipher.init(false, keyivparm);
                    byte[] decipbytes = new byte[encipbytes.length];
                    int len = cipher.processBytes(encipbytes, 0, encipbytes.length, decipbytes, 0);
                    len += cipher.doFinal(decipbytes, len);
                    byte[] realbytes = new byte[len];
                    System.arraycopy(decipbytes, 0, realbytes, 0, len);
                    String ipstr = new String(realbytes, "ISO-8859-1");
                    Callback.Success(ipstr);
                    completed = true;
                    dos.write(0);
                    dos.flush();
                    close();
                } catch (Exception e) {
                    close();
                    if (!completed) {
                        e.printStackTrace();
                        Callback.Fail(e.getMessage());
                    }
                }
            } else {
                close();
                logger.warn("Improper destination string. " + Destination);
                Callback.Fail("Improper destination string. " + Destination);
            }
        }
        CloseWait();
        long newtime = (new Date()).getTime();
        long timediff = newtime - starttime;
        logger.debug("Outgoing processor took: " + timediff);
    }
} </s>
<s>class temp {    public static Model downloadModel(String url) {
        Model model = ModelFactory.createDefaultModel();
        try {
            URLConnection connection = new URL(url).openConnection();
            if (connection instanceof HttpURLConnection) {
                HttpURLConnection httpConnection = (HttpURLConnection) connection;
                httpConnection.setRequestProperty("Accept", "application/rdf+xml, */*;q=.1");
                httpConnection.setRequestProperty("Accept-Language", "en");
            }
            InputStream in = connection.getInputStream();
            model.read(in, url);
            in.close();
            return model;
        } catch (MalformedURLException e) {
            cat.debug("Unable to download model from " + url, e);
            throw new RuntimeException(e);
        } catch (IOException e) {
            cat.debug("Unable to download model from " + url, e);
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) {
        FileOutputStream arcFile = null;
        JarOutputStream jout = null;
        DirectoryScanner ds = null;
        ds = new DirectoryScanner();
        ds.setCaseSensitive(true);
        ds.setBasedir(in);
        ds.scan();
        ds.setCaseSensitive(true);
        String[] names = ds.getIncludedFiles();
        ArrayList exName = new ArrayList();
        if (names == null || names.length < 1) return null;
        File tempArc = new File(tempDir, outArc.substring(0, outArc.length()));
        try {
            Manifest mf = null;
            List v = new ArrayList();
            for (int i = 0; i < names.length; i++) {
                if (names[i].toUpperCase().indexOf("MANIFEST.MF") > -1) {
                    FileInputStream fis = new FileInputStream(in.getAbsolutePath() + "/" + names[i].replace('\\', '/'));
                    mf = new Manifest(fis);
                } else v.add(names[i]);
            }
            String[] toJar = new String[v.size()];
            v.toArray(toJar);
            tempArc.createNewFile();
            arcFile = new FileOutputStream(tempArc);
            if (mf == null) jout = new JarOutputStream(arcFile); else jout = new JarOutputStream(arcFile, mf);
            byte[] buffer = new byte[1024];
            for (int i = 0; i < toJar.length; i++) {
                if (conf != null) {
                    if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) {
                        exName.add(toJar[i]);
                        continue;
                    }
                }
                String currentPath = in.getAbsolutePath() + "/" + toJar[i];
                String entryName = toJar[i].replace('\\', '/');
                JarEntry currentEntry = new JarEntry(entryName);
                jout.putNextEntry(currentEntry);
                FileInputStream fis = new FileInputStream(currentPath);
                int len;
                while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len);
                fis.close();
                jout.closeEntry();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            try {
                jout.close();
                arcFile.close();
            } catch (IOException e1) {
                throw new RuntimeException(e1);
            }
        }
        return tempArc;
    }
} </s>
<s>class temp {    private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException {
        try {
            final String providerNamePrefix = providerClass.getName() + ".";
            final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() {

                public int compare(final String key1, final String key2) {
                    return key1.compareTo(key2);
                }
            });
            final File platformProviders = new File(this.getPlatformProviderLocation());
            if (platformProviders.exists()) {
                if (this.isLoggable(Level.FINEST)) {
                    this.log(Level.FINEST, getMessage("processing", platformProviders.getAbsolutePath()), null);
                }
                InputStream in = null;
                boolean suppressExceptionOnClose = true;
                final java.util.Properties p = new java.util.Properties();
                try {
                    in = new FileInputStream(platformProviders);
                    p.load(in);
                    suppressExceptionOnClose = false;
                } finally {
                    try {
                        if (in != null) {
                            in.close();
                        }
                    } catch (final IOException e) {
                        if (suppressExceptionOnClose) {
                            this.log(Level.SEVERE, getMessage(e), e);
                        } else {
                            throw e;
                        }
                    }
                }
                for (Map.Entry<Object, Object> e : p.entrySet()) {
                    if (e.getKey().toString().startsWith(providerNamePrefix)) {
                        final String configuration = e.getValue().toString();
                        if (this.isLoggable(Level.FINEST)) {
                            this.log(Level.FINEST, getMessage("providerInfo", platformProviders.getAbsolutePath(), providerClass.getName(), configuration), null);
                        }
                        providers.put(e.getKey().toString(), this.createProviderObject(providerClass, configuration, platformProviders.toURI().toURL()));
                    }
                }
            }
            final Enumeration<URL> classpathProviders = this.findResources(this.getProviderLocation() + '/' + providerClass.getName());
            int count = 0;
            final long t0 = System.currentTimeMillis();
            while (classpathProviders.hasMoreElements()) {
                count++;
                final URL url = classpathProviders.nextElement();
                if (this.isLoggable(Level.FINEST)) {
                    this.log(Level.FINEST, getMessage("processing", url.toExternalForm()), null);
                }
                BufferedReader reader = null;
                boolean suppressExceptionOnClose = true;
                try {
                    reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));
                    String line = null;
                    while ((line = reader.readLine()) != null) {
                        if (line.contains("#")) {
                            continue;
                        }
                        if (this.isLoggable(Level.FINEST)) {
                            this.log(Level.FINEST, getMessage("providerInfo", url.toExternalForm(), providerClass.getName(), line), null);
                        }
                        providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url));
                    }
                    suppressExceptionOnClose = false;
                } finally {
                    try {
                        if (reader != null) {
                            reader.close();
                        }
                    } catch (final IOException e) {
                        if (suppressExceptionOnClose) {
                            this.log(Level.SEVERE, getMessage(e), e);
                        } else {
                            throw new ModelException(getMessage(e), e);
                        }
                    }
                }
            }
            if (this.isLoggable(Level.FINE)) {
                this.log(Level.FINE, getMessage("contextReport", count, this.getProviderLocation() + '/' + providerClass.getName(), Long.valueOf(System.currentTimeMillis() - t0)), null);
            }
            return providers.values();
        } catch (final IOException e) {
            throw new ModelException(getMessage(e), e);
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        System.out.println("Opening destination cbrout.jizz");
        OutputStream out = new BufferedOutputStream(new FileOutputStream("cbrout.jizz"));
        System.out.println("Opening source output.jizz");
        InputStream in = new CbrLiveStream(new BufferedInputStream(new FileInputStream("output.jizz")), System.currentTimeMillis() + 10000, 128);
        System.out.println("Starting read/write loop");
        boolean started = false;
        int len;
        byte[] buf = new byte[4 * 1024];
        while ((len = in.read(buf)) > -1) {
            if (!started) {
                System.out.println("Starting at " + new Date());
                started = true;
            }
            out.write(buf, 0, len);
        }
        System.out.println("Finished at " + new Date());
        out.close();
        in.close();
    }
} </s>
<s>class temp {    public static Document getDocument(URL url, boolean validate) throws QTIParseException {
        try {
            return getDocument(new InputSource(url.openStream()), validate, null);
        } catch (IOException ex) {
            throw new QTIParseException(ex);
        }
    }
} </s>
<s>class temp {    public static Model loadPrecomputedModel(URL url) {
        ArrayList<Geometry[]> frames = new ArrayList<Geometry[]>();
        if (url.toExternalForm().endsWith(".amo")) {
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String objFileName = reader.readLine();
                objFileName = url.toExternalForm().substring(0, url.toExternalForm().lastIndexOf("/")) + "/" + objFileName;
                Model baseModel = loadOBJFrames(ModelLoader.getInstance(), objFileName, frames);
                ArrayList<ModelAnimation> anims = new ArrayList<ModelAnimation>();
                String line;
                while ((line = reader.readLine()) != null) {
                    StringTokenizer tokenizer = new StringTokenizer(line);
                    String animName = tokenizer.nextToken();
                    int from = Integer.valueOf(tokenizer.nextToken());
                    int to = Integer.valueOf(tokenizer.nextToken());
                    tokenizer.nextToken();
                    int numFrames = to - from + 1;
                    PrecomputedAnimationKeyFrameController[] controllers = new PrecomputedAnimationKeyFrameController[baseModel.getShapesCount()];
                    for (int i = 0; i < baseModel.getShapesCount(); i++) {
                        Shape3D shape = baseModel.getShape(i);
                        PrecomputedAnimationKeyFrame[] keyFrames = new PrecomputedAnimationKeyFrame[numFrames];
                        int k = 0;
                        for (int j = from; j <= to; j++) {
                            keyFrames[k++] = new PrecomputedAnimationKeyFrame(frames.get(j)[i]);
                        }
                        controllers[i] = new PrecomputedAnimationKeyFrameController(keyFrames, shape);
                    }
                    anims.add(new ModelAnimation(animName, numFrames, 25f, controllers));
                }
                baseModel.setAnimations(anims.toArray(new ModelAnimation[anims.size()]));
                return (baseModel);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                return (null);
            } catch (IOException e) {
                e.printStackTrace();
                return (null);
            }
        }
        {
            Model baseModel = loadOBJFrames(ModelLoader.getInstance(), url.toExternalForm(), frames);
            PrecomputedAnimationKeyFrameController[] controllers = new PrecomputedAnimationKeyFrameController[baseModel.getShapesCount()];
            for (int i = 0; i < baseModel.getShapesCount(); i++) {
                Shape3D shape = baseModel.getShape(i);
                PrecomputedAnimationKeyFrame[] keyFrames = new PrecomputedAnimationKeyFrame[frames.size()];
                for (int j = 0; j < frames.size(); j++) {
                    keyFrames[j] = new PrecomputedAnimationKeyFrame(frames.get(j)[i]);
                }
                controllers[i] = new PrecomputedAnimationKeyFrameController(keyFrames, shape);
            }
            ModelAnimation[] anims = new ModelAnimation[] { new ModelAnimation("default", frames.size(), 25f, controllers) };
            baseModel.setAnimations(anims);
            return (baseModel);
        }
    }
} </s>
<s>class temp {    public void run(IAction action) {
        Shell shell = new Shell();
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new GraphicalPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }
} </s>
<s>class temp {    private ExamModel(URL urlQuestions) throws IOException, DataCoherencyException {
        BufferedReader in = new BufferedReader(new InputStreamReader(urlQuestions.openStream()));
        String line;
        questions = new ArrayList<Question>();
        questionsMap = new HashMap<String, Question>();
        in = new BufferedReader(new InputStreamReader(urlQuestions.openStream(), "UTF-8"));
        int questionNumber = 0;
        Question question;
        String questText = "";
        String hash = "";
        int lookingFor = ExamModel.READING_HASH;
        while ((line = in.readLine()) != null) {
            switch(lookingFor) {
                case ExamModel.READING_HASH:
                    if (line.length() == 0 || line.trim().length() == 0) continue;
                    hash = line;
                    questionNumber++;
                    lookingFor = ExamModel.READING_QUESTION;
                    break;
                case ExamModel.READING_QUESTION:
                    if (line.equals("--")) {
                        question = new Question(questionNumber, hash, questText);
                        questions.add(question);
                        questionsMap.put(question.getHash(), question);
                        questText = "";
                        hash = null;
                        lookingFor = ExamModel.READING_HASH;
                    } else {
                        questText = questText.concat(line + Constants.nl);
                    }
                    break;
                default:
                    throw new DataCoherencyException("Neočekávaný konec souboru!");
            }
        }
        questions.trimToSize();
        in.close();
    }
} </s>
<s>class temp {    @Override
    protected int run(CmdLineParser parser) {
        final List<String> args = parser.getRemainingArgs();
        if (args.isEmpty()) {
            System.err.println("summarysort :: WORKDIR not given.");
            return 3;
        }
        if (args.size() == 1) {
            System.err.println("summarysort :: INPATH not given.");
            return 3;
        }
        final String outS = (String) parser.getOptionValue(outputDirOpt);
        final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS);
        final boolean verbose = parser.getBoolean(verboseOpt);
        final Configuration conf = getConf();
        final Timer t = new Timer();
        try {
            @SuppressWarnings("deprecation") final int maxReduceTasks = new JobClient(new JobConf(conf)).getClusterStatus().getMaxReduceTasks();
            conf.setInt("mapred.reduce.tasks", Math.max(1, maxReduceTasks * 9 / 10));
            final Job job = sortOne(conf, in, wrkDir, "summarysort", "");
            System.out.printf("summarysort :: Waiting for job completion...\n");
            t.start();
            if (!job.waitForCompletion(verbose)) {
                System.err.println("summarysort :: Job failed.");
                return 4;
            }
            System.out.printf("summarysort :: Job complete in %d.%03d s.\n", t.stopS(), t.fms());
        } catch (IOException e) {
            System.err.printf("summarysort :: Hadoop error: %s\n", e);
            return 4;
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        if (out != null) try {
            System.out.println("summarysort :: Merging output...");
            t.start();
            final FileSystem srcFS = wrkDir.getFileSystem(conf);
            final FileSystem dstFS = out.getFileSystem(conf);
            final OutputStream outs = dstFS.create(out);
            final FileStatus[] parts = srcFS.globStatus(new Path(wrkDir, in.getName() + "-[0-9][0-9][0-9][0-9][0-9][0-9]*"));
            {
                int i = 0;
                final Timer t2 = new Timer();
                for (final FileStatus part : parts) {
                    t2.start();
                    final InputStream ins = srcFS.open(part.getPath());
                    IOUtils.copyBytes(ins, outs, conf, false);
                    ins.close();
                    System.out.printf("summarysort :: Merged part %d in %d.%03d s.\n", ++i, t2.stopS(), t2.fms());
                }
            }
            for (final FileStatus part : parts) srcFS.delete(part.getPath(), false);
            outs.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
            outs.close();
            System.out.printf("summarysort :: Merging complete in %d.%03d s.\n", t.stopS(), t.fms());
        } catch (IOException e) {
            System.err.printf("summarysort :: Output merging failed: %s\n", e);
            return 5;
        }
        return 0;
    }
} </s>
<s>class temp {    InputStream createInputStream(FileInfo fi) throws IOException, MalformedURLException {
        if (fi.inputStream != null) return fi.inputStream; else if (fi.url != null && !fi.url.equals("")) return new URL(fi.url + fi.fileName).openStream(); else {
            File f = new File(fi.directory + fi.fileName);
            if (f == null || f.isDirectory()) return null; else {
                InputStream is = new FileInputStream(f);
                if (fi.compression >= FileInfo.LZW) is = new RandomAccessStream(is);
                return is;
            }
        }
    }
} </s>
<s>class temp {    public static AudioFileFormat getAudioFileFormat(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream inputStream = null;
        if (useragent != null) {
            URLConnection myCon = url.openConnection();
            myCon.setUseCaches(false);
            myCon.setDoInput(true);
            myCon.setDoOutput(true);
            myCon.setAllowUserInteraction(false);
            myCon.setRequestProperty("User-Agent", useragent);
            myCon.setRequestProperty("Accept", "*/*");
            myCon.setRequestProperty("Icy-Metadata", "1");
            myCon.setRequestProperty("Connection", "close");
            inputStream = new BufferedInputStream(myCon.getInputStream());
        } else {
            inputStream = new BufferedInputStream(url.openStream());
        }
        try {
            if (DEBUG == true) {
                System.err.println("Using AppletVorbisSPIWorkaround to get codec AudioFileFormat(url)");
            }
            return getAudioFileFormat(inputStream);
        } finally {
            inputStream.close();
        }
    }
} </s>
<s>class temp {    public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format("%1$032X", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return "";
    }
} </s>
<s>class temp {    public final String encrypt(String input) throws Exception {
        try {
            MessageDigest messageDigest = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            messageDigest.reset();
            messageDigest.update(input.getBytes());
            String output = convert(messageDigest.digest());
            return output;
        } catch (Throwable ex) {
            if (logger.isDebugEnabled()) {
                logger.debug("Fatal Error while digesting input string", ex);
            }
        }
        return input;
    }
} </s>
<s>class temp {    private String writeInputStreamToString(InputStream stream) {
        StringWriter stringWriter = new StringWriter();
        try {
            IOUtils.copy(stream, stringWriter);
        } catch (IOException e) {
            e.printStackTrace();
        }
        String namespaces = stringWriter.toString().trim();
        return namespaces;
    }
} </s>
<s>class temp {    private void writeInputStreamToFile(InputStream stream, File file) {
        try {
            FileOutputStream fOut = new FileOutputStream(file);
            IOUtils.copy(stream, fOut);
            fOut.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    private int syncCustomers() throws RemoteException, BasicException {
        dlintegration.syncCustomersBefore();
        ArrayList<String> notToSync = new ArrayList<String>();
        int step = 0;
        User[] remoteUsers;
        int cpt = 0;
        do {
            remoteUsers = externalsales.getUsersBySteps(step);
            step++;
            if (remoteUsers == null) {
                throw new BasicException(AppLocal.getIntString("message.returnnull") + " > Customers null");
            }
            if (remoteUsers.length > 0) {
                String perms;
                for (User remoteUser : remoteUsers) {
                    if (notToSync.contains(remoteUser.getLogin())) continue;
                    cpt++;
                    String name = externalsales.encodeString((remoteUser.getFirstname().trim() + " " + remoteUser.getLastname()).trim());
                    String firstname = externalsales.encodeString(remoteUser.getFirstname());
                    String lastname = externalsales.encodeString(remoteUser.getLastname());
                    String description = externalsales.encodeString(remoteUser.getDescription());
                    String address = externalsales.encodeString(remoteUser.getAddress());
                    String address2 = externalsales.encodeString(remoteUser.getAddress2());
                    String city = externalsales.encodeString(remoteUser.getCity());
                    String country = externalsales.encodeString(remoteUser.getCountry());
                    String phone = externalsales.encodeString(remoteUser.getPhone());
                    String mobile = externalsales.encodeString(remoteUser.getMobile());
                    String zipcode = externalsales.encodeString(remoteUser.getZipcode());
                    CustomerSync copyCustomer = new CustomerSync(remoteUser.getId());
                    if (firstname == null || firstname.equals("")) firstname = " ";
                    copyCustomer.setFirstname(firstname.toUpperCase());
                    if (lastname == null || lastname.equals("")) lastname = " ";
                    copyCustomer.setLastname(lastname.toUpperCase());
                    copyCustomer.setTaxid(remoteUser.getLogin());
                    copyCustomer.setSearchkey(remoteUser.getLogin() + name.toUpperCase());
                    if (name == null || name.equals("")) name = " ";
                    copyCustomer.setName(name.toUpperCase());
                    if (description == null || description.equals("")) description = " ";
                    copyCustomer.setNotes(description);
                    copyCustomer.setEmail(remoteUser.getEmail());
                    if (address == null || address.equals("")) address = " ";
                    copyCustomer.setAddress(address);
                    if (address2 == null || address2.equals("")) address2 = " ";
                    copyCustomer.setAddress2(address2);
                    if (city == null || city.equals("")) city = "Brussels";
                    copyCustomer.setCity(city);
                    if (country == null || country.equals("")) country = "Belgium";
                    copyCustomer.setCountry(country);
                    copyCustomer.setMaxdebt(10000.0);
                    if (phone == null || phone.equals("")) phone = " ";
                    copyCustomer.setPhone(phone);
                    if (mobile == null || mobile.equals("")) mobile = " ";
                    copyCustomer.setPhone2(mobile);
                    if (zipcode == null || zipcode.equals("")) zipcode = " ";
                    copyCustomer.setPostal(zipcode);
                    if (TicketInfo.isWS() && TicketInfo.getPayID() == 2 && remoteUser.getEmail().contains("@DONOTSENDME")) {
                        notToSync.add(copyCustomer.getTaxid());
                        continue;
                    }
                    dlintegration.syncCustomer(copyCustomer);
                    notToSync.add(copyCustomer.getTaxid());
                }
            }
        } while (remoteUsers.length > 0);
        List<CustomerSync> localList = dlintegration.getCustomers();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        for (CustomerSync localCustomer : localList) {
            Date now = new Date();
            if (notToSync.contains(localCustomer.getTaxid())) {
                continue;
            }
            cpt++;
            User userAdd = new User();
            userAdd.setLogin(localCustomer.getTaxid());
            userAdd.setId(localCustomer.getTaxid());
            userAdd.setFirstname(" ");
            String tmpName = localCustomer.getName().trim();
            tmpName = tmpName.replace("'", "");
            while (tmpName.charAt(0) == ' ') {
                tmpName = tmpName.substring(1);
            }
            userAdd.setLastname(tmpName);
            char[] pw = new char[8];
            int c = 'A';
            int r1 = 0;
            for (int i = 0; i < 8; i++) {
                r1 = (int) (Math.random() * 3);
                switch(r1) {
                    case 0:
                        c = '0' + (int) (Math.random() * 10);
                        break;
                    case 1:
                        c = 'a' + (int) (Math.random() * 26);
                        break;
                    case 2:
                        c = 'A' + (int) (Math.random() * 26);
                        break;
                }
                pw[i] = (char) c;
            }
            String clave = new String(pw);
            byte[] password = { 00 };
            try {
                MessageDigest md5 = MessageDigest.getInstance("MD5");
                md5.update(clave.getBytes());
                password = md5.digest();
                userAdd.setPassword(password.toString());
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(UsersSync.class.getName()).log(Level.SEVERE, null, ex);
                userAdd.setPassword(clave);
            }
            userAdd.setTitle("M");
            if (localCustomer.getEmail() == null || localCustomer.getEmail().trim().equals("") || localCustomer.getEmail().indexOf('@') <= 0) userAdd.setEmail(localCustomer.getTaxid() + defaultEmail); else userAdd.setEmail(localCustomer.getEmail());
            userAdd.setDescription(localCustomer.getNotes() + "");
            userAdd.setAddress(localCustomer.getAddress() + "");
            userAdd.setAddress2(localCustomer.getAddress2() + "");
            userAdd.setState_region(localCustomer.getRegion() + "");
            userAdd.setCity(localCustomer.getCity() + "");
            userAdd.setCountry(localCustomer.getCountry() + "");
            userAdd.setZipcode(localCustomer.getPostal() + "");
            userAdd.setPhone(localCustomer.getPhone() + "");
            userAdd.setMobile(localCustomer.getPhone2() + "");
            userAdd.setFax(" ");
            try {
                userAdd.setCdate(df.format(localCustomer.getCurdate()));
            } catch (NullPointerException nu) {
                userAdd.setCdate(df.format(now));
            }
            userAdd.setPerms("shopper");
            userAdd.setBank_account_nr("");
            userAdd.setBank_account_holder("");
            userAdd.setBank_account_type("");
            userAdd.setBank_iban("");
            userAdd.setBank_name("");
            userAdd.setBank_sort_code("");
            userAdd.setMdate(df.format(now));
            userAdd.setShopper_group_id("1");
            externalsales.addUser(userAdd);
        }
        return cpt;
    }
} </s>
<s>class temp {    public void createTempFile(String resourceName) throws IOException {
        InputStream input = Log4jImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail("Couldn't resolve resource '" + resourceName + "'!");
        }
        inputFile = File.createTempFile("Import", "test");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
} </s>
<s>class temp {        @Override
        public Class<?> loadClass(final String name) throws ClassNotFoundException {
            final String baseName = StringUtils.substringBefore(name, "$");
            if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) {
                throw new NoClassDefFoundError(name + " is a restricted class for GAE");
            }
            if (!name.startsWith("com.gargoylesoftware")) {
                return super.loadClass(name);
            }
            super.loadClass(name);
            final InputStream is = getResourceAsStream(name.replaceAll("\\.", "/") + ".class");
            final ByteArrayOutputStream bos = new ByteArrayOutputStream();
            try {
                IOUtils.copy(is, bos);
                final byte[] bytes = bos.toByteArray();
                return defineClass(name, bytes, 0, bytes.length);
            } catch (final IOException e) {
                throw new RuntimeException(e);
            }
        }
} </s>
<s>class temp {    public static Dictionary getDefaultConfig(BundleContext bc) {
        final Dictionary config = new Hashtable();
        config.put(HttpConfig.HTTP_ENABLED_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.enabled", "true"));
        config.put(HttpConfig.HTTPS_ENABLED_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.secure.enabled", "true"));
        config.put(HttpConfig.HTTP_PORT_KEY, getPropertyAsInteger(bc, "org.osgi.service.http.port", HTTP_PORT_DEFAULT));
        config.put(HttpConfig.HTTPS_PORT_KEY, getPropertyAsInteger(bc, "org.osgi.service.http.secure.port", HTTPS_PORT_DEFAULT));
        config.put(HttpConfig.HOST_KEY, getPropertyAsString(bc, "org.osgi.service.http.hostname", ""));
        Properties mimeProps = new Properties();
        try {
            mimeProps.load(HttpConfig.class.getResourceAsStream("/mime.default"));
            String propurl = getPropertyAsString(bc, "org.knopflerfish.http.mime.props", "");
            if (propurl.length() > 0) {
                URL url = new URL(propurl);
                Properties userMimeProps = new Properties();
                userMimeProps.load(url.openStream());
                Enumeration e = userMimeProps.keys();
                while (e.hasMoreElements()) {
                    String key = (String) e.nextElement();
                    mimeProps.put(key, userMimeProps.getProperty(key));
                }
            }
        } catch (MalformedURLException ignore) {
        } catch (IOException ignore) {
        }
        Vector mimeVector = new Vector(mimeProps.size());
        Enumeration e = mimeProps.keys();
        while (e.hasMoreElements()) {
            String key = (String) e.nextElement();
            mimeVector.addElement(new String[] { key, mimeProps.getProperty(key) });
        }
        config.put(HttpConfig.MIME_PROPS_KEY, mimeVector);
        config.put(HttpConfig.SESSION_TIMEOUT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.session.timeout.default", 1200));
        config.put(HttpConfig.CONNECTION_TIMEOUT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.connection.timeout", 30));
        config.put(HttpConfig.CONNECTION_MAX_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.connection.max", 50));
        config.put(HttpConfig.DNS_LOOKUP_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.dnslookup", "false"));
        config.put(HttpConfig.RESPONSE_BUFFER_SIZE_DEFAULT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.response.buffer.size.default", 16384));
        config.put(HttpConfig.DEFAULT_CHAR_ENCODING_KEY, getPropertyAsString(bc, HttpConfig.DEFAULT_CHAR_ENCODING_KEY, "ISO-8859-1"));
        config.put(HttpConfig.REQ_CLIENT_AUTH_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.req.client.auth", "false"));
        return config;
    }
} </s>
<s>class temp {    private void importDocument(String path, boolean detectParagraphs, Parser parser, ReadingAnnotationFilter filter, String encoding) {
        try {
            Reader in = null;
            int contentlength = 0;
            if (JGloss.messages.getString("encodings.default").equals(encoding)) encoding = null;
            String title = "";
            try {
                URL url = new URL(path);
                URLConnection c = url.openConnection();
                contentlength = c.getContentLength();
                String enc = c.getContentEncoding();
                InputStream is = new BufferedInputStream(c.getInputStream());
                if (encoding != null) in = new InputStreamReader(is, encoding); else {
                    in = CharacterEncodingDetector.getReader(is, enc);
                    encoding = ((InputStreamReader) in).getEncoding();
                }
                title = url.getFile();
                if (title == null || title.length() == 0) title = path;
            } catch (MalformedURLException ex) {
                File f = new File(path);
                contentlength = (int) f.length();
                title = f.getName();
                if (title.toLowerCase().endsWith("htm") || title.toLowerCase().endsWith("html")) {
                }
                InputStream is = new BufferedInputStream(new FileInputStream(path));
                if (encoding != null) in = new InputStreamReader(is, encoding); else {
                    in = CharacterEncodingDetector.getReader(is);
                    encoding = ((InputStreamReader) in).getEncoding();
                }
            }
            importFromReader(in, detectParagraphs, path, title, filter, parser, CharacterEncodingDetector.guessLength(contentlength, encoding));
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showConfirmDialog(this, JGloss.messages.getString("error.import.exception", new Object[] { path, ex.getClass().getName(), ex.getLocalizedMessage() }), JGloss.messages.getString("error.import.title"), JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            if (model.getDocumentName() == null) this.dispose();
        }
    }
} </s>
<s>class temp {        @Override
        public void testAction(ITestThread testThread) throws Throwable {
            try {
                final InputStream urlIn = new URL("http://jdistunit.sourceforge.net").openStream();
                final int availableBytes = urlIn.available();
                if (0 == availableBytes) {
                    throw new IllegalStateException("Zero bytes on target host.");
                }
                in = new BufferedReader(new InputStreamReader(urlIn));
                String line;
                while (null != (line = in.readLine())) {
                    page.append(line);
                    page.append('\n');
                    if (0 != lineDelay) {
                        OS.sleep(lineDelay);
                    }
                    if (null != testThread && testThread.isActionStopped()) {
                        break;
                    }
                }
            } finally {
                if (null != in) {
                    in.close();
                    in = null;
                }
            }
        }
} </s>
<s>class temp {    private void copy(File sourceFile, File destinationFile) {
        try {
            FileChannel in = new FileInputStream(sourceFile).getChannel();
            FileChannel out = new FileOutputStream(destinationFile).getChannel();
            try {
                in.transferTo(0, in.size(), out);
                in.close();
                out.close();
            } catch (IOException e) {
                GTLogger.getInstance().error(e);
            }
        } catch (FileNotFoundException e) {
            GTLogger.getInstance().error(e);
        }
    }
} </s>
<s>class temp {    @Override
    protected String getRawPage(String url) throws IOException {
        HttpClient httpClient = new HttpClient();
        String proxyHost = config.getString("proxy.host"), proxyPortString = config.getString("proxy.port");
        if (proxyHost != null && proxyPortString != null) {
            int proxyPort = -1;
            try {
                proxyPort = Integer.parseInt(proxyPortString);
            } catch (NumberFormatException e) {
            }
            if (proxyPort != -1) {
                httpClient.getHostConfiguration().setProxy(proxyHost, proxyPort);
            }
        }
        GetMethod urlGet = new GetMethod(url);
        urlGet.setRequestHeader("Accept-Encoding", "");
        urlGet.setRequestHeader("User-Agent", "Mozilla/5.0");
        int retCode;
        if ((retCode = httpClient.executeMethod(urlGet)) != HttpStatus.SC_OK) {
            throw new RuntimeException("Unexpected HTTP code: " + retCode);
        }
        String encoding = null;
        Header contentType = urlGet.getResponseHeader("Content-Type");
        if (contentType != null) {
            String contentTypeString = contentType.toString();
            int i = contentTypeString.indexOf("charset=");
            if (i != -1) {
                encoding = contentTypeString.substring(i + "charset=".length()).trim();
            }
        }
        boolean gzipped = false;
        Header contentEncoding = urlGet.getResponseHeader("Content-Encoding");
        if (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase("gzip")) {
            gzipped = true;
        }
        byte[] htmlData;
        try {
            InputStream in = gzipped ? new GZIPInputStream(urlGet.getResponseBodyAsStream()) : urlGet.getResponseBodyAsStream();
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            IOUtils.copy(in, out);
            htmlData = out.toByteArray();
            in.close();
        } finally {
            urlGet.releaseConnection();
        }
        if (encoding == null) {
            Matcher m = Pattern.compile("(?i)<meta[^>]*charset=(([^\"]+\")|(\"[^\"]+\"))").matcher(new String(htmlData));
            if (m.find()) {
                encoding = m.group(1).trim().replace("\"", "");
            }
        }
        if (encoding == null) {
            encoding = "UTF-8";
        }
        return new String(htmlData, encoding);
    }
} </s>
<s>class temp {    public final void copyFile(final File fromFile, final File toFile) throws IOException {
        this.createParentPathIfNeeded(toFile);
        final FileChannel sourceChannel = new FileInputStream(fromFile).getChannel();
        final FileChannel targetChannel = new FileOutputStream(toFile).getChannel();
        final long sourceFileSize = sourceChannel.size();
        sourceChannel.transferTo(0, sourceFileSize, targetChannel);
    }
} </s>
<s>class temp {    public void writeToStream(String urlString, OutputStream os) {
        BufferedInputStream input = null;
        try {
            URL url = new URL(urlString);
            System.out.println("Opening stream:" + url.toString());
            input = new BufferedInputStream(url.openStream(), 4 * 1024 * 1024);
            byte[] data = new byte[102400];
            int read;
            while ((read = input.read(data)) != -1) {
                os.write(data, 0, read);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        try {
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            sourceChannel.close();
            destinationChannel.close();
        }
    }
} </s>
<s>class temp {    public static String encode(String str) {
        String md5Str = null;
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance("MD5");
            digest.update(str.getBytes("UTF8"));
            byte[] hash = digest.digest();
            md5Str = "";
            for (int i = 0; i < hash.length; i++) {
                md5Str += Integer.toHexString((0x000000ff & hash[i]) | 0xffffff00).substring(6);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return md5Str;
    }
} </s>
<s>class temp {    public static void insertDocumentToURL(String file, String target) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(file);
            final URL url = new URL(target);
            final URLConnection connection = url.openConnection();
            os = connection.getOutputStream();
            TestTools.copyStream(is, os);
        } finally {
            if (is != null) {
                is.close();
            }
            if (os != null) {
                os.close();
            }
        }
    }
} </s>
<s>class temp {    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort("cannot copy on itself: " + from_name);
        if (!fromFile.exists()) abort("no such currentSourcepartName file: " + from_name);
        if (!fromFile.isFile()) abort("can't copy directory: " + from_name);
        if (!fromFile.canRead()) abort("currentSourcepartName file is unreadable: " + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort("destination file is unwriteable: " + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort("destination directory doesn't exist: " + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort("destination directory doesn't exist: " + parent);
            if (dir.isFile()) abort("destination is not a directory: " + parent);
            if (!dir.canWrite()) abort("destination directory is unwriteable: " + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
} </s>
<s>class temp {    public void add(AddInterceptorChain chain, Entry entry, LDAPConstraints constraints) throws LDAPException {
        Connection con = (Connection) chain.getRequest().get(JdbcInsert.MYVD_DB_CON + "LDAPBaseServer");
        if (con == null) {
            throw new LDAPException("Operations Error", LDAPException.OPERATIONS_ERROR, "No Database Connection");
        }
        try {
            con.setAutoCommit(false);
            HashMap<String, String> db2ldap = (HashMap<String, String>) chain.getRequest().get(JdbcInsert.MYVD_DB_DB2LDAP + "LDAPBaseServer");
            PreparedStatement ps = con.prepareStatement("INSERT INTO USERS (id,firstname,lastname,username) VALUES (?,?,?,?)");
            ps.setInt(1, 5);
            ps.setString(2, entry.getEntry().getAttribute(db2ldap.get("firstname")).getStringValue());
            ps.setString(3, entry.getEntry().getAttribute(db2ldap.get("lastname")).getStringValue());
            ps.setString(4, entry.getEntry().getAttribute(db2ldap.get("username")).getStringValue());
            ps.executeUpdate();
            ps.close();
            ps = con.prepareStatement("SELECT id FROM LOCATIONS WHERE name=?");
            PreparedStatement inst = con.prepareStatement("INSERT INTO LOCATIONMAP (person,location) VALUES (?,?)");
            LDAPAttribute l = entry.getEntry().getAttribute(db2ldap.get("name"));
            if (l == null) {
                con.rollback();
                throw new LDAPException("Location is required", LDAPException.OBJECT_CLASS_VIOLATION, "Location is required");
            }
            String[] vals = l.getStringValueArray();
            for (int i = 0; i < vals.length; i++) {
                ps.setString(1, vals[i]);
                ResultSet rs = ps.executeQuery();
                if (!rs.next()) {
                    con.rollback();
                    throw new LDAPException("Location " + vals[i] + " does not exist", LDAPException.OBJECT_CLASS_VIOLATION, "Location " + vals[i] + " does not exist");
                }
                inst.setInt(1, 5);
                inst.setInt(2, rs.getInt("id"));
                inst.executeUpdate();
            }
            ps.close();
            inst.close();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                throw new LDAPException("Could not add entry or rollback transaction", LDAPException.OPERATIONS_ERROR, e.toString(), e);
            }
            throw new LDAPException("Could not add entry", LDAPException.OPERATIONS_ERROR, e.toString(), e);
        }
    }
} </s>
<s>class temp {    public void delete(DeleteInterceptorChain chain, DistinguishedName dn, LDAPConstraints constraints) throws LDAPException {
        Connection con = (Connection) chain.getRequest().get(JdbcInsert.MYVD_DB_CON + "LDAPBaseServer");
        if (con == null) {
            throw new LDAPException("Operations Error", LDAPException.OPERATIONS_ERROR, "No Database Connection");
        }
        try {
            con.setAutoCommit(false);
            int id = getId(dn, con);
            HashMap<String, String> db2ldap = (HashMap<String, String>) chain.getRequest().get(JdbcInsert.MYVD_DB_DB2LDAP + "LDAPBaseServer");
            PreparedStatement ps = con.prepareStatement("DELETE FROM users WHERE id=?");
            ps.setInt(1, id);
            ps.executeUpdate();
            ps = con.prepareStatement("DELETE FROM locationmap WHERE person=?");
            ps.setInt(1, id);
            ps.executeUpdate();
            ps.close();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                throw new LDAPException("Could not delete entry or rollback transaction", LDAPException.OPERATIONS_ERROR, e.toString(), e);
            }
            throw new LDAPException("Could not delete entry", LDAPException.OPERATIONS_ERROR, e.toString(), e);
        }
    }
} </s>
<s>class temp {    public void modify(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, LDAPConstraints constraints) throws LDAPException {
        Connection con = (Connection) chain.getRequest().get(JdbcInsert.MYVD_DB_CON + "LDAPBaseServer");
        if (con == null) {
            throw new LDAPException("Operations Error", LDAPException.OPERATIONS_ERROR, "No Database Connection");
        }
        try {
            con.setAutoCommit(false);
            HashMap<String, String> db2ldap = (HashMap<String, String>) chain.getRequest().get(JdbcInsert.MYVD_DB_DB2LDAP + "LDAPBaseServer");
            Iterator<LDAPModification> it = mods.iterator();
            String uid = ((RDN) dn.getDN().getRDNs().get(0)).getValue();
            int id = this.getId(dn, con);
            while (it.hasNext()) {
                LDAPModification mod = it.next();
                if (mod.getOp() == LDAPModification.REPLACE) {
                    String attributeName = mod.getAttribute().getName();
                    if (attributeName.equals(db2ldap.get("first")) || attributeName.equals(db2ldap.get("last"))) {
                        PreparedStatement ps = con.prepareStatement("UPDATE USERS SET " + (attributeName.equals(db2ldap.get("first")) ? "first" : "last") + "=? WHERE username=?");
                        ps.setString(1, mod.getAttribute().getStringValue());
                        ps.setString(2, uid);
                        ps.executeUpdate();
                        ps.close();
                    } else if (attributeName.equals(db2ldap.get("username"))) {
                        throw new LDAPException("Can not modify the rdn", LDAPException.NOT_ALLOWED_ON_RDN, "Can not perform modify");
                    } else if (attributeName.equals(db2ldap.get("name"))) {
                        PreparedStatement ps = con.prepareStatement("DELETE FROM locationmap WHERE person=?");
                        ps.setInt(1, id);
                        ps.executeUpdate();
                        ps.close();
                        ps = con.prepareStatement("INSERT INTO locationmap (person,location) VALUES (?,?)");
                        PreparedStatement pssel = con.prepareStatement("SELECT id FROM LOCATIONS WHERE name=?");
                        String[] vals = mod.getAttribute().getStringValueArray();
                        for (int i = 0; i < vals.length; i++) {
                            pssel.setString(1, vals[i]);
                            ResultSet rs = pssel.executeQuery();
                            if (!rs.next()) {
                                con.rollback();
                                throw new LDAPException("Location " + vals[i] + " does not exist", LDAPException.OBJECT_CLASS_VIOLATION, "Location " + vals[i] + " does not exist");
                            }
                            int lid = rs.getInt("id");
                            ps.setInt(1, id);
                            ps.setInt(2, lid);
                            ps.executeUpdate();
                        }
                        ps.close();
                        pssel.close();
                    }
                } else if (mod.getOp() == LDAPModification.DELETE) {
                    if (mod.getAttribute().getName().equals(db2ldap.get("name"))) {
                        String[] vals = mod.getAttribute().getStringValueArray();
                        if (vals.length == 0) {
                            PreparedStatement ps = con.prepareStatement("DELETE FROM locationmap WHERE person=?");
                            ps.setInt(1, id);
                            ps.executeUpdate();
                            ps.close();
                        } else {
                            PreparedStatement ps = con.prepareStatement("DELETE FROM locationmap WHERE person=? and location=?");
                            PreparedStatement pssel = con.prepareStatement("SELECT id FROM LOCATIONS WHERE name=?");
                            for (int i = 0; i < vals.length; i++) {
                                pssel.setString(1, vals[i]);
                                ResultSet rs = pssel.executeQuery();
                                if (!rs.next()) {
                                    con.rollback();
                                    throw new LDAPException("Location " + vals[i] + " does not exist", LDAPException.OBJECT_CLASS_VIOLATION, "Location " + vals[i] + " does not exist");
                                }
                                int lid = rs.getInt("id");
                                ps.setInt(1, id);
                                ps.setInt(2, lid);
                                ps.executeUpdate();
                            }
                            ps.close();
                            pssel.close();
                        }
                    } else {
                        throw new LDAPException("Can not delete attribute " + mod.getAttribute().getName(), LDAPException.INVALID_ATTRIBUTE_SYNTAX, "");
                    }
                } else if (mod.getOp() == LDAPModification.ADD) {
                    if (mod.getAttribute().getName().equals(db2ldap.get("name"))) {
                        String[] vals = mod.getAttribute().getStringValueArray();
                        PreparedStatement ps = con.prepareStatement("INSERT INTO locationmap (person,location) VALUES (?,?)");
                        PreparedStatement pssel = con.prepareStatement("SELECT id FROM LOCATIONS WHERE name=?");
                        for (int i = 0; i < vals.length; i++) {
                            pssel.setString(1, vals[i]);
                            ResultSet rs = pssel.executeQuery();
                            if (!rs.next()) {
                                con.rollback();
                                throw new LDAPException("Location " + vals[i] + " does not exist", LDAPException.OBJECT_CLASS_VIOLATION, "Location " + vals[i] + " does not exist");
                            }
                            int lid = rs.getInt("id");
                            ps.setInt(1, id);
                            ps.setInt(2, lid);
                            ps.executeUpdate();
                        }
                        ps.close();
                        pssel.close();
                    } else {
                        throw new LDAPException("Can not delete attribute " + mod.getAttribute().getName(), LDAPException.INVALID_ATTRIBUTE_SYNTAX, "");
                    }
                }
            }
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                throw new LDAPException("Could not delete entry or rollback transaction", LDAPException.OPERATIONS_ERROR, e.toString(), e);
            }
            throw new LDAPException("Could not delete entry", LDAPException.OPERATIONS_ERROR, e.toString(), e);
        }
    }
} </s>
<s>class temp {    public static final void copy(File src, File dest) throws IOException {
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        if (!src.exists()) {
            throw new IOException("Source not found: " + src);
        }
        if (!src.canRead()) {
            throw new IOException("Source is unreadable: " + src);
        }
        if (src.isFile()) {
            if (!dest.exists()) {
                File parentdir = parent(dest);
                if (!parentdir.exists()) {
                    parentdir.mkdir();
                }
            } else if (dest.isDirectory()) {
                dest = new File(dest + File.separator + src);
            }
        } else if (src.isDirectory()) {
            if (dest.isFile()) {
                throw new IOException("Cannot copy directory " + src + " to file " + dest);
            }
            if (!dest.exists()) {
                dest.mkdir();
            }
        }
        if (src.isFile()) {
            try {
                source = new FileInputStream(src);
                destination = new FileOutputStream(dest);
                buffer = new byte[1024];
                while (true) {
                    bytes_read = source.read(buffer);
                    if (bytes_read == -1) {
                        break;
                    }
                    destination.write(buffer, 0, bytes_read);
                }
            } finally {
                if (source != null) {
                    try {
                        source.close();
                    } catch (IOException e) {
                    }
                }
                if (destination != null) {
                    try {
                        destination.close();
                    } catch (IOException e) {
                    }
                }
            }
        } else if (src.isDirectory()) {
            String targetfile, target, targetdest;
            String[] files = src.list();
            for (int i = 0; i < files.length; i++) {
                targetfile = files[i];
                target = src + File.separator + targetfile;
                targetdest = dest + File.separator + targetfile;
                if ((new File(target)).isDirectory()) {
                    copy(new File(target), new File(targetdest));
                } else {
                    try {
                        source = new FileInputStream(target);
                        destination = new FileOutputStream(targetdest);
                        buffer = new byte[1024];
                        while (true) {
                            bytes_read = source.read(buffer);
                            if (bytes_read == -1) {
                                break;
                            }
                            destination.write(buffer, 0, bytes_read);
                        }
                    } finally {
                        if (source != null) {
                            try {
                                source.close();
                            } catch (IOException e) {
                            }
                        }
                        if (destination != null) {
                            try {
                                destination.close();
                            } catch (IOException e) {
                            }
                        }
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    public MytemMaster getMytemMaster(String janCode) throws GaeException {
        HttpClient client = new DefaultHttpClient();
        HttpParams httpParams = client.getParams();
        HttpConnectionParams.setSoTimeout(httpParams, 10000);
        HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
        BufferedReader reader = null;
        StringBuffer request = new StringBuffer(address);
        request.append("api/mytems/show?jan=");
        request.append(janCode);
        try {
            HttpGet httpGet = new HttpGet(request.toString());
            HttpResponse httpResponse = client.execute(httpGet);
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode == NOT_FOUND) {
                return null;
            }
            if (statusCode >= 400) {
                throw new GaeException("Status Error = " + Integer.toString(statusCode));
            }
            reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(), "UTF-8"));
            StringBuilder builder = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            return createMytemMaster(builder.toString());
        } catch (ClientProtocolException e) {
            throw new GaeException(e);
        } catch (SocketTimeoutException e) {
            throw new GaeException(e);
        } catch (IOException exception) {
            throw new GaeException(exception);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    public List<MytemHistory> getMytemHistories(String janCode) throws GaeException {
        HttpClient client = new DefaultHttpClient();
        HttpParams httpParams = client.getParams();
        HttpConnectionParams.setSoTimeout(httpParams, 10000);
        HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
        BufferedReader reader = null;
        StringBuffer request = new StringBuffer(address);
        request.append("api/mytems/history?jan=");
        request.append(janCode);
        try {
            HttpGet httpGet = new HttpGet(request.toString());
            HttpResponse httpResponse = client.execute(httpGet);
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode == NOT_FOUND) {
                return null;
            }
            if (statusCode >= 400) {
                throw new GaeException("Status Error = " + Integer.toString(statusCode));
            }
            reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(), "UTF-8"));
            StringBuilder builder = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            return createMytemHistories(builder.toString());
        } catch (ClientProtocolException e) {
            throw new GaeException(e);
        } catch (SocketTimeoutException e) {
            throw new GaeException(e);
        } catch (IOException exception) {
            throw new GaeException(exception);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    private Bitmap getBitmap(String imageUrl) {
        URL url;
        InputStream input = null;
        try {
            url = new URL(address + imageUrl);
            input = url.openStream();
            return BitmapFactory.decodeStream(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        URL url = new URL("http://localhost:9090/node/Insert/" + args[0] + "?address=blah");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println("done");
    }
} </s>
<s>class temp {    private JButton getButtonImagen() {
        if (buttonImagen == null) {
            buttonImagen = new JButton();
            buttonImagen.setText(Messages.getString("gui.AdministracionResorces.6"));
            buttonImagen.setIcon(new ImageIcon("data/icons/view_sidetree.png"));
            buttonImagen.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString("gui.AdministracionResorces.8"));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty("user.dir") + "/" + rutaDatos + "imagenes/" + file.getName();
                        String rutaRelativa = rutaDatos + "imagenes/" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setImagenURL(rutaRelativa);
                            gui.getEntrenamientoIzquierdaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesIzquierda().getSelectedItem()).getImagenURL()));
                            gui.getEntrenamientoDerechaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesDerecha().getSelectedItem()).getImagenURL()));
                            buttonImagen.setIcon(new ImageIcon("data/icons/view_sidetreeOK.png"));
                            labelImagenPreview.setIcon(gui.getProcesadorDatos().escalaImageIcon(imagen.getImagenURL()));
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonImagen;
    }
} </s>
<s>class temp {                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString("gui.AdministracionResorces.8"));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty("user.dir") + "/" + rutaDatos + "imagenes/" + file.getName();
                        String rutaRelativa = rutaDatos + "imagenes/" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setImagenURL(rutaRelativa);
                            gui.getEntrenamientoIzquierdaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesIzquierda().getSelectedItem()).getImagenURL()));
                            gui.getEntrenamientoDerechaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesDerecha().getSelectedItem()).getImagenURL()));
                            buttonImagen.setIcon(new ImageIcon("data/icons/view_sidetreeOK.png"));
                            labelImagenPreview.setIcon(gui.getProcesadorDatos().escalaImageIcon(imagen.getImagenURL()));
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
} </s>
<s>class temp {    private JButton getButtonSonido() {
        if (buttonSonido == null) {
            buttonSonido = new JButton();
            buttonSonido.setText(Messages.getString("gui.AdministracionResorces.15"));
            buttonSonido.setIcon(new ImageIcon("data/icons/view_sidetree.png"));
            buttonSonido.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new SoundFilter());
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString("gui.AdministracionResorces.17"));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty("user.dir") + "/" + rutaDatos + "sonidos/" + file.getName();
                        String rutaRelativa = rutaDatos + "sonidos/" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setSonidoURL(rutaRelativa);
                            System.out.println(rutaGlobal + " " + rutaRelativa);
                            buttonSonido.setIcon(new ImageIcon("data/icons/view_sidetreeOK.png"));
                            gui.getAudio().reproduceAudio(imagen);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonSonido;
    }
} </s>
<s>class temp {                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new SoundFilter());
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString("gui.AdministracionResorces.17"));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty("user.dir") + "/" + rutaDatos + "sonidos/" + file.getName();
                        String rutaRelativa = rutaDatos + "sonidos/" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setSonidoURL(rutaRelativa);
                            System.out.println(rutaGlobal + " " + rutaRelativa);
                            buttonSonido.setIcon(new ImageIcon("data/icons/view_sidetreeOK.png"));
                            gui.getAudio().reproduceAudio(imagen);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
} </s>
<s>class temp {    public void generate(String urlString, String target) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        BufferedInputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target));
        byte[] buf = new byte[10 * 1024];
        int len;
        while ((len = inputStream.read(buf, 0, buf.length)) != -1) {
            outputStream.write(buf, 0, len);
        }
        inputStream.close();
        outputStream.close();
        urlConnection.disconnect();
    }
} </s>
<s>class temp {        String digest(final UserAccountEntity account) {
            try {
                final MessageDigest digest = MessageDigest.getInstance("SHA-1");
                digest.reset();
                digest.update(account.getUserId().getBytes("UTF-8"));
                digest.update(account.getLastLogin().toString().getBytes("UTF-8"));
                digest.update(account.getPerson().getGivenName().getBytes("UTF-8"));
                digest.update(account.getPerson().getSurname().getBytes("UTF-8"));
                digest.update(account.getPerson().getEmail().getBytes("UTF-8"));
                digest.update(m_random);
                return new String(Base64.altEncode(digest.digest()));
            } catch (final Exception e) {
                LOG.error("Exception", e);
                throw new RuntimeException(e);
            }
        }
} </s>
<s>class temp {    public static String getHash(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA");
            digest.update(password.getBytes());
            return new String(digest.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error("Hashing algorithm not found");
            return password;
        }
    }
} </s>
<s>class temp {    private static void initMagicRules() {
        InputStream in = null;
        try {
            String fname = System.getProperty("magic-mime");
            if (fname != null && fname.length() != 0) {
                in = new FileInputStream(fname);
                if (in != null) {
                    parse("-Dmagic-mime=" + fname, new InputStreamReader(in));
                }
            }
        } catch (Exception e) {
            log.error("Failed to parse custom magic mime file defined by system property -Dmagic-mime [" + System.getProperty("magic-mime") + "]. File will be ignored.", e);
        } finally {
            in = closeStream(in);
        }
        try {
            Enumeration en = MimeUtil.class.getClassLoader().getResources("magic.mime");
            while (en.hasMoreElements()) {
                URL url = (URL) en.nextElement();
                in = url.openStream();
                if (in != null) {
                    try {
                        parse("classpath:[" + url + "]", new InputStreamReader(in));
                    } catch (Exception ex) {
                        log.error("Failed to parse magic.mime rule file [" + url + "] on the classpath. File will be ignored.", ex);
                    }
                }
            }
        } catch (Exception e) {
            log.error("Problem while processing magic.mime files from classpath. Files will be ignored.", e);
        } finally {
            in = closeStream(in);
        }
        try {
            File f = new File(System.getProperty("user.home") + File.separator + ".magic.mime");
            if (f.exists()) {
                in = new FileInputStream(f);
                if (in != null) {
                    try {
                        parse(f.getAbsolutePath(), new InputStreamReader(in));
                    } catch (Exception ex) {
                        log.error("Failed to parse .magic.mime file from the users home directory. File will be ignored.", ex);
                    }
                }
            }
        } catch (Exception e) {
            log.error("Problem while processing .magic.mime file from the users home directory. File will be ignored.", e);
        } finally {
            in = closeStream(in);
        }
        try {
            String name = System.getProperty("MAGIC");
            if (name != null && name.length() != 0) {
                if (name.indexOf('.') < 0) {
                    name = name + ".mime";
                } else {
                    name = name.substring(0, name.indexOf('.') - 1) + "mime";
                }
                File f = new File(name);
                if (f.exists()) {
                    in = new FileInputStream(f);
                    if (in != null) {
                        try {
                            parse(f.getAbsolutePath(), new InputStreamReader(in));
                        } catch (Exception ex) {
                            log.error("Failed to parse magic.mime file from directory located by environment variable MAGIC. File will be ignored.", ex);
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error("Problem while processing magic.mime file from directory located by environment variable MAGIC. File will be ignored.", e);
        } finally {
            in = closeStream(in);
        }
        int mMagicMimeEntriesSizeBeforeReadingOS = mMagicMimeEntries.size();
        Iterator it = magicMimeFileLocations.iterator();
        while (it.hasNext()) {
            parseMagicMimeFileLocation((String) it.next());
        }
        if (mMagicMimeEntriesSizeBeforeReadingOS == mMagicMimeEntries.size()) {
            try {
                String resource = "eu/medsea/mimeutil/magic.mime";
                in = MimeUtil.class.getClassLoader().getResourceAsStream(resource);
                if (in != null) {
                    try {
                        parse("resource:" + resource, new InputStreamReader(in));
                    } catch (Exception ex) {
                        log.error("Failed to parse internal magic.mime file.", ex);
                    }
                }
            } catch (Exception e) {
                log.error("Problem while processing internal magic.mime file.", e);
            } finally {
                in = closeStream(in);
            }
        }
    }
} </s>
<s>class temp {    public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception {
        JCRNodeSource emptySource = loadTestSource();
        assertEquals(false, emptySource.exists());
        OutputStream sourceOut = emptySource.getOutputStream();
        assertNotNull(sourceOut);
        InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE);
        try {
            IOUtils.copy(contentIn, sourceOut);
            sourceOut.flush();
        } finally {
            sourceOut.close();
            contentIn.close();
        }
        InputStream expected = getClass().getResourceAsStream(CONTENT_FILE);
        JCRNodeSource persistentSource = loadTestSource();
        assertEquals(true, persistentSource.exists());
        InputStream actual = persistentSource.getInputStream();
        try {
            assertTrue(isXmlEqual(expected, actual));
        } finally {
            expected.close();
            actual.close();
        }
        JCRNodeSource tmpSrc = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.saar");
        persistentSource.delete();
        tmpSrc.delete();
    }
} </s>
<s>class temp {    public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance("SHA");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes("UTF-8"));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
} </s>
<s>class temp {    private String calculateCredential(Account account) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        try {
            md5.update(account.getUsername().getBytes("UTF-8"));
            md5.update(account.getCryptPassword().getBytes("UTF-8"));
            md5.update(String.valueOf(account.getObjectId()).getBytes("UTF-8"));
            md5.update(account.getUid().getBytes("UTF-8"));
            byte[] digest = md5.digest();
            return TextUtils.calculateMD5(digest);
        } catch (UnsupportedEncodingException e) {
            return null;
        }
    }
} </s>
<s>class temp {    private static HttpURLConnection _getConnection(HttpPrincipal httpPrincipal) throws IOException {
        if (httpPrincipal == null || httpPrincipal.getUrl() == null) {
            return null;
        }
        URL url = null;
        if ((httpPrincipal.getUserId() <= 0) || (httpPrincipal.getPassword() == null)) {
            url = new URL(httpPrincipal.getUrl() + "/tunnel-web/liferay/do");
        } else {
            url = new URL(httpPrincipal.getUrl() + "/tunnel-web/secure/liferay/do");
        }
        HttpURLConnection urlc = (HttpURLConnection) url.openConnection();
        urlc.setDoInput(true);
        urlc.setDoOutput(true);
        urlc.setUseCaches(false);
        urlc.setRequestMethod("POST");
        if ((httpPrincipal.getUserId() > 0) && (httpPrincipal.getPassword() != null)) {
            String userNameAndPassword = httpPrincipal.getUserId() + ":" + httpPrincipal.getPassword();
            urlc.setRequestProperty("Authorization", "Basic " + Base64.encode(userNameAndPassword.getBytes()));
        }
        return urlc;
    }
} </s>
<s>class temp {    public static String postRequest(String url, String content) throws IOException {
        InputStream is = null;
        ByteArrayOutputStream buf = new ByteArrayOutputStream();
        String result = null;
        try {
            Object obj = openConnection(url, content, "POST", "text/xml");
            if (obj instanceof InputStream) {
                is = (InputStream) obj;
            } else {
                return "Cannot open a connection with " + url + " : " + obj.toString();
            }
            int c = is.read();
            while (c != -1) {
                buf.write(c);
                c = is.read();
            }
            result = new String(buf.toByteArray());
        } finally {
            if (is != null) {
                is.close();
            }
            if (buf != null) {
                buf.close();
            }
        }
        return result;
    }
} </s>
<s>class temp {    public void addUser(String name, String unit, String organizeName, int userId, int orgId, String email) {
        Connection connection = null;
        PreparedStatement ps = null;
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            connection = dbo.getConnection();
            ps = connection.prepareStatement(INSERT_USER);
            ps.setInt(1, AddrslistMainDao.getNewID());
            ps.setInt(2, -100);
            ps.setString(3, name.substring(0, 1));
            ps.setString(4, name.substring(1));
            ps.setString(5, unit);
            ps.setString(6, organizeName);
            ps.setString(7, "");
            ps.setString(8, email);
            ps.setString(9, "");
            ps.setString(10, "");
            ps.setString(11, "");
            ps.setString(12, "");
            ps.setString(13, "");
            ps.setString(14, "");
            ps.setString(15, "");
            ps.setString(16, "");
            ps.setString(17, "");
            ps.setString(18, "");
            ps.setInt(19, userId);
            ps.setInt(20, orgId);
            ps.executeUpdate();
            connection.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException e1) {
            }
        } finally {
            try {
                ps.close();
                connection.close();
                dbo.close();
            } catch (Exception e) {
            }
        }
    }
} </s>
<s>class temp {    public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigested = encoder.encode(digestedPassword);
            return prefixKey + encodedDigested;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
} </s>
<s>class temp {    public static String hashJopl(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigestedStr = encoder.encode(digestedPassword);
            return prefixKey + encodedDigestedStr;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
} </s>
<s>class temp {    private void triggerBuild(Properties props, String project, int rev) throws IOException {
        boolean doBld = Boolean.parseBoolean(props.getProperty(project + ".bld"));
        String url = props.getProperty(project + ".url");
        if (!doBld || project == null || project.length() == 0) {
            System.out.println("BuildLauncher: Not configured to build '" + project + "'");
            return;
        } else if (url == null) {
            throw new IOException("Tried to launch build for project '" + project + "' but " + project + ".url property is not defined!");
        }
        SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
        System.out.println(fmt.format(new Date()) + ": Triggering a build via: " + url);
        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
        while (r.readLine() != null) ;
        System.out.println(fmt.format(new Date()) + ": Build triggered!");
        LATEST_BUILD.put(project, rev);
        r.close();
        System.out.println(fmt.format(new Date()) + ": triggerBuild() done!");
    }
} </s>
<s>class temp {    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            if (saltPhrase != null) {
                digest.update(saltPhrase.getBytes(charset));
                byte[] salt = digest.digest();
                digest.reset();
                digest.update(plainTextPassword.getBytes(charset));
                digest.update(salt);
            } else {
                digest.update(plainTextPassword.getBytes(charset));
            }
            byte[] rawHash = digest.digest();
            if (encoding != null && encoding.equals(Encoding.base64)) {
                return Base64.encodeBytes(rawHash);
            } else {
                return new String(Hex.encodeHex(rawHash));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public String md5sum(String toCompute) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(toCompute.getBytes());
        java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
        return hash.toString(16);
    }
} </s>
<s>class temp {    @Override
    public void saveStructure(long userId, TreeStructureInfo info, List<TreeStructureNode> structure) throws DatabaseException {
        if (info == null) throw new NullPointerException("info");
        if (structure == null) throw new NullPointerException("structure");
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException e) {
            LOGGER.warn("Unable to set autocommit off", e);
        }
        PreparedStatement insertInfoSt = null, insSt = null;
        try {
            insertInfoSt = getConnection().prepareStatement(INSERT_INFO);
            insertInfoSt.setLong(1, userId);
            insertInfoSt.setString(2, info.getDescription() != null ? info.getDescription() : "");
            insertInfoSt.setString(3, info.getBarcode());
            insertInfoSt.setString(4, info.getName());
            insertInfoSt.setString(5, info.getInputPath());
            insertInfoSt.setString(6, info.getModel());
            insertInfoSt.executeUpdate();
            PreparedStatement seqSt = getConnection().prepareStatement(INFO_VALUE);
            ResultSet rs = seqSt.executeQuery();
            int key = -1;
            while (rs.next()) {
                key = rs.getInt(1);
            }
            if (key == -1) {
                getConnection().rollback();
                throw new DatabaseException("Unable to obtain new id from DB when executing query: " + insertInfoSt);
            }
            int total = 0;
            for (TreeStructureNode node : structure) {
                insSt = getConnection().prepareStatement(INSERT_NODE);
                insSt.setLong(1, key);
                insSt.setString(2, node.getPropId());
                insSt.setString(3, node.getPropParent());
                insSt.setString(4, node.getPropName());
                insSt.setString(5, node.getPropPicture());
                insSt.setString(6, node.getPropType());
                insSt.setString(7, node.getPropTypeId());
                insSt.setString(8, node.getPropPageType());
                insSt.setString(9, node.getPropDateIssued());
                insSt.setString(10, node.getPropAltoPath());
                insSt.setString(11, node.getPropOcrPath());
                insSt.setBoolean(12, node.getPropExist());
                total += insSt.executeUpdate();
            }
            if (total != structure.size()) {
                getConnection().rollback();
                throw new DatabaseException("Unable to insert _ALL_ nodes: " + total + " nodes were inserted of " + structure.size());
            }
            getConnection().commit();
        } catch (SQLException e) {
            LOGGER.error("Queries: \"" + insertInfoSt + "\" and \"" + insSt + "\"", e);
        } finally {
            closeConnection();
        }
    }
} </s>
<s>class temp {    public static String encrypt(String plainText) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plainText.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
} </s>
<s>class temp {    private static void setup() throws Exception {
        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File jarFile = new File(URLDecoder.decode(path, "UTF-8") + "/Hanasu.jar");
        if (!jarFile.exists()) jarFile = new File("/home/marc/Virtual Machine/Hanasu.jar");
        File f = File.createTempFile("tempabca", "bdfafad");
        f.delete();
        f.mkdir();
        String parent = f.getAbsolutePath() + "/";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));
        zipentry = zipinputstream.getNextEntry();
        while (zipentry != null) {
            String entryName = zipentry.getName();
            if (entryName.startsWith("native")) {
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(parent + entryName);
                if (zipentry.isDirectory()) {
                    newFile.mkdirs();
                    zipentry = zipinputstream.getNextEntry();
                    continue;
                }
                fileoutputstream = new FileOutputStream(newFile);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        String arch = "";
        boolean x64 = false;
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                x64 = (property.indexOf("64") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (x64) arch = "linux-amd64"; else arch = "linux-x86";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println("Arch: " + System.getProperty("sun.arch.data.model"));
            if (x64 && !System.getProperty("sun.arch.data.model").equals("32")) arch = "win64-amd64"; else arch = "win32-x86";
        }
        if (JPTrayIcon.isMac()) arch = "macosx-universal";
        System.out.println("Using native/" + arch + "/");
        addLibraryPath(parent + "native/" + arch + "/");
    }
} </s>
<s>class temp {    private void streamFileFromFileSystem(File file, HttpServletResponse response) throws ServletException, IOException {
        ServletOutputStream out = null;
        InputStream in = null;
        if (file.isDirectory() || !file.canRead()) {
            logger.debug("File does not exist: " + file.getAbsolutePath());
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        String mimeType = getServletContext().getMimeType(file.getAbsolutePath());
        if (mimeType == null) {
            mimeType = WikiFile.UNKNOWN_MIME_TYPE;
        }
        try {
            response.setContentType(mimeType);
            response.setContentLength((int) file.length());
            out = response.getOutputStream();
            in = new FileInputStream(file);
            IOUtils.copy(in, out);
            out.flush();
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
} </s>
<s>class temp {    @Test
    public void test() throws JDOMException, IOException {
        InputStream is = this.getClass().getResourceAsStream("putRegularVehicle.xml");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 3;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60; time += 0.1f) {
            se.step(0.1f);
            System.out.println("*** Time: " + time);
            for (RoadObject roadObject : se.getDynamicObjects()) {
                Vehicle vehicle = (Vehicle) roadObject;
                System.out.println(vehicle.getVehicleId() + ":\tX=" + vehicle.getPosition() + "\tV=" + vehicle.getSpeed());
            }
        }
    }
} </s>
<s>class temp {    protected void init() throws MXQueryException {
        String add = getStringValueOrEmpty(subIters[0]);
        if (add == null) {
            currentToken = BooleanToken.FALSE_TOKEN;
            return;
        }
        URI uri;
        if (!TypeLexicalConstraints.isValidURI(add)) throw new DynamicException(ErrorCodes.F0017_INVALID_ARGUMENT_TO_FN_DOC, "Invalid URI given to fn:doc-available", loc);
        try {
            if (TypeLexicalConstraints.isAbsoluteURI(add)) {
                uri = new URI(add);
            } else {
                uri = new URI(IOLib.convertToAndroid(add));
            }
        } catch (URISyntaxException se) {
            throw new DynamicException(ErrorCodes.F0017_INVALID_ARGUMENT_TO_FN_DOC, "Invalid URI given to fn:doc-available", loc);
        }
        if (add.startsWith("http://")) {
            URL url;
            try {
                url = uri.toURL();
            } catch (MalformedURLException e) {
                throw new DynamicException(ErrorCodes.F0017_INVALID_ARGUMENT_TO_FN_DOC, "Invalid URI given to fn:doc-available", loc);
            }
            try {
                InputStream in = url.openStream();
                in.close();
            } catch (IOException e) {
                currentToken = BooleanToken.FALSE_TOKEN;
                return;
            }
            currentToken = BooleanToken.TRUE_TOKEN;
        } else {
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(MXQuery.getContext().openFileInput(uri.toString())));
                currentToken = BooleanToken.TRUE_TOKEN;
            } catch (FileNotFoundException e) {
                currentToken = BooleanToken.FALSE_TOKEN;
            } catch (IOException e) {
                currentToken = BooleanToken.FALSE_TOKEN;
            }
        }
    }
} </s>
<s>class temp {    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        String command = "java -jar  ";
        String linkerJarPath = "";
        String path = "";
        String osName = System.getProperty("os.name");
        String temp = Launcher.class.getResource("").toString();
        int index = temp.indexOf(".jar");
        int start = index - 1;
        while (Character.isLetter(temp.charAt(start))) {
            start--;
        }
        String jarName = temp.substring(start + 1, index + 4);
        System.out.println(jarName);
        if (osName.startsWith("Linux")) {
            temp = temp.substring(temp.indexOf("/"), temp.indexOf(jarName));
        } else if (osName.startsWith("Windows")) {
            temp = temp.substring(temp.indexOf("file:") + 5, temp.indexOf(jarName));
        } else {
            System.exit(0);
        }
        path = path + temp;
        try {
            path = java.net.URLDecoder.decode(path, "utf-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        File dir = new File(path);
        File[] files = dir.listFiles();
        String exeJarName = null;
        for (File f : files) {
            if (f.getName().endsWith(".jar") && !f.getName().startsWith(jarName)) {
                exeJarName = f.getName();
                break;
            }
        }
        if (exeJarName == null) {
            System.out.println("no exefile");
            System.exit(0);
        }
        linkerJarPath = path + exeJarName;
        String pluginDirPath = path + "plugin" + File.separator;
        File[] plugins = new File(pluginDirPath).listFiles();
        StringBuffer pluginNames = new StringBuffer("");
        for (File plugin : plugins) {
            if (plugin.getAbsolutePath().endsWith(".jar")) {
                pluginNames.append("plugin/" + plugin.getName() + " ");
            }
        }
        String libDirPath = path + "lib" + File.separator;
        File[] libs = new File(libDirPath).listFiles();
        StringBuffer libNames = new StringBuffer("");
        for (File lib : libs) {
            if (lib.getAbsolutePath().endsWith(".jar")) {
                libNames.append("lib/" + lib.getName() + " ");
            }
        }
        try {
            JarFile jarFile = new JarFile(linkerJarPath);
            Manifest manifest = jarFile.getManifest();
            if (manifest == null) {
                manifest = new Manifest();
            }
            Attributes attributes = manifest.getMainAttributes();
            attributes.putValue("Class-Path", pluginNames.toString() + libNames.toString());
            String backupFile = linkerJarPath + "back";
            FileInputStream copyInput = new FileInputStream(linkerJarPath);
            FileOutputStream copyOutput = new FileOutputStream(backupFile);
            byte[] buffer = new byte[4096];
            int s;
            while ((s = copyInput.read(buffer)) > -1) {
                copyOutput.write(buffer, 0, s);
            }
            copyOutput.flush();
            copyOutput.close();
            copyInput.close();
            JarOutputStream jarOut = new JarOutputStream(new FileOutputStream(linkerJarPath), manifest);
            JarInputStream jarIn = new JarInputStream(new FileInputStream(backupFile));
            byte[] buf = new byte[4096];
            JarEntry entry;
            while ((entry = jarIn.getNextJarEntry()) != null) {
                if ("META-INF/MANIFEST.MF".equals(entry.getName())) continue;
                jarOut.putNextEntry(entry);
                int read;
                while ((read = jarIn.read(buf)) != -1) {
                    jarOut.write(buf, 0, read);
                }
                jarOut.closeEntry();
            }
            jarOut.flush();
            jarOut.close();
            jarIn.close();
            File file = new File(backupFile);
            if (file.exists()) {
                file.delete();
            }
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        try {
            if (System.getProperty("os.name").startsWith("Linux")) {
                Runtime runtime = Runtime.getRuntime();
                String[] commands = new String[] { "java", "-jar", path + exeJarName };
                runtime.exec(commands);
            } else {
                path = path.substring(1);
                command = command + "\"" + path + exeJarName + "\"";
                System.out.println(command);
                Runtime.getRuntime().exec(command);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    @Override
    public void start() throws Exception {
        initMetaData();
        Map<String, Set<ONDEXConcept>> accessions = new HashMap<String, Set<ONDEXConcept>>();
        for (ONDEXConcept c : graph.getConcepts()) {
            for (ConceptAccession ca : c.getConceptAccessions()) {
                if (ca.getElementOf().equals(dsCHEMBL) && !accessions.containsKey(ca.getAccession())) accessions.put(ca.getAccession(), new HashSet<ONDEXConcept>());
                accessions.get(ca.getAccession()).add(c);
            }
        }
        System.out.println(accessions);
        int count = 0;
        for (String accession : accessions.keySet()) {
            URL url = new URL("https://www.ebi.ac.uk/chemblws/compounds/" + accession + "/bioactivities");
            HttpURLConnection uc = (HttpURLConnection) url.openConnection();
            int code = uc.getResponseCode();
            if (code != 200) {
                String response = uc.getResponseMessage();
                fireEventOccurred(new ParsingErrorEvent("HTTP/1.x " + code + " " + response, getCurrentMethodName()));
            } else {
                InputStream in = new BufferedInputStream(uc.getInputStream());
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(in);
                doc.getDocumentElement().normalize();
                NodeList nList = doc.getElementsByTagName("bioactivity");
                for (int temp = 0; temp < nList.getLength(); temp++) {
                    Node nNode = nList.item(temp);
                    if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element eElement = (Element) nNode;
                        ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype);
                        activity.createConceptAccession(getTagValue("assay__chemblid", eElement), dsASSAY, false);
                        activity.createAttribute(anRef, getTagValue("reference", eElement), true);
                        activity.createAttribute(anOrg, getTagValue("organism", eElement), true);
                        String type = getTagValue("bioactivity__type", eElement);
                        type = type.replace(" ", "_");
                        if (!anTypes.containsKey(type)) {
                            AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class);
                            String units = getTagValue("units", eElement);
                            if (graph.getMetaData().getUnit(units) == null) graph.getMetaData().getFactory().createUnit(units);
                            an.setUnit(graph.getMetaData().getUnit(units));
                            anTypes.put(type, an);
                        }
                        String value = getTagValue("value", eElement);
                        try {
                            Double d = Double.valueOf(value);
                            activity.createAttribute(anTypes.get(type), d, false);
                        } catch (NumberFormatException nfe) {
                        }
                        String comment = getTagValue("activity__comment", eElement);
                        if (comment != null && comment.trim().length() > 0) {
                            if (mapping.containsKey(comment)) comment = mapping.get(comment);
                            activity.createAttribute(anComment, comment, true);
                        }
                        count++;
                        Set<ONDEXConcept> compounds = accessions.get(accession);
                        for (ONDEXConcept c : compounds) {
                            graph.getFactory().createRelation(c, activity, rtActivity, evidencetype);
                        }
                        String key = getTagValue("target__chemblid", eElement);
                        if (!targets.containsKey(key)) {
                            ONDEXConcept c = graph.getFactory().createConcept(key, dsCHEMBL, ccTarget, evidencetype);
                            c.createConceptName(getTagValue("target__name", eElement), true);
                            c.createConceptAccession(key, dsTARGET, false);
                            targets.put(key, c);
                        }
                        ONDEXConcept target = targets.get(key);
                        ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype);
                        r.createAttribute(anConf, Double.valueOf(getTagValue("target__confidence", eElement)), false);
                    }
                }
            }
        }
        fireEventOccurred(new GeneralOutputEvent("Total assays parsed:" + count, getCurrentMethodName()));
    }
} </s>
<s>class temp {    private void backupOriginalFile(String myFile) {
        Date date = new Date();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd_S");
        String datePortion = format.format(date);
        try {
            FileInputStream fis = new FileInputStream(myFile);
            FileOutputStream fos = new FileOutputStream(myFile + "-" + datePortion + "_UserID" + ".html");
            FileChannel fcin = fis.getChannel();
            FileChannel fcout = fos.getChannel();
            fcin.transferTo(0, fcin.size(), fcout);
            fcin.close();
            fcout.close();
            fis.close();
            fos.close();
            System.out.println("**** Backup of file made.");
        } catch (Exception e) {
            System.out.println(e);
        }
    }
} </s>
<s>class temp {    private static void copy(String srcFilename, String dstFilename, boolean override) throws IOException, XPathFactoryConfigurationException, SAXException, ParserConfigurationException, XPathExpressionException {
        File fileToCopy = new File(rootDir + "test-output/" + srcFilename);
        if (fileToCopy.exists()) {
            File newFile = new File(rootDir + "test-output/" + dstFilename);
            if (!newFile.exists() || override) {
                try {
                    FileChannel srcChannel = new FileInputStream(rootDir + "test-output/" + srcFilename).getChannel();
                    FileChannel dstChannel = new FileOutputStream(rootDir + "test-output/" + dstFilename).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException e) {
                }
            }
        }
    }
} </s>
<s>class temp {    public GridDirectoryList(String gridSource) throws McIDASException {
        try {
            URL url = new URL(gridSource);
            urlc = (AddeURLConnection) url.openConnection();
            inputStream = new DataInputStream(new BufferedInputStream(urlc.getInputStream()));
        } catch (IOException e) {
            throw new McIDASException("Error opening URL for grids:" + e);
        }
        readDirectory();
    }
} </s>
<s>class temp {    public GridDirectoryList(URL url) throws McIDASException {
        try {
            urlc = (AddeURLConnection) url.openConnection();
            inputStream = new DataInputStream(new BufferedInputStream(urlc.getInputStream()));
        } catch (IOException e) {
            throw new McIDASException("Error opening URL for grids:" + e);
        }
        readDirectory();
    }
} </s>
<s>class temp {    private Map fetchAdData(String url) throws ClientProtocolException, IOException {
        String app = "1";
        String owner = "tx";
        String session = "";
        String sdk = "ad1.0";
        String version = "txLove1.0";
        String timestamp = String.valueOf(System.currentTimeMillis());
        String sign = "";
        String appSecret = "test";
        Map<String, String> protocal = new HashMap<String, String>();
        protocal.put(AuthUtils.AUTH_APP, app);
        protocal.put(AuthUtils.AUTH_OWNER, owner);
        protocal.put(AuthUtils.AUTH_SESSION, session);
        protocal.put(AuthUtils.SDK, sdk);
        protocal.put(AuthUtils.VERSION, version);
        protocal.put(AuthUtils.TIMESTAMP, timestamp);
        Map<String, String> parameter = new HashMap<String, String>();
        parameter.put("uid", String.valueOf(user.getUserId()));
        parameter.put("ip", "0");
        parameter.put("imsi", imsi);
        parameter.put("width", "0");
        sign = AuthUtils.sign(protocal, parameter, appSecret);
        HttpClient client = new DefaultHttpClient();
        HttpGet request = new HttpGet(url.toString());
        request.setHeader(AuthUtils.AUTH_APP, app);
        request.setHeader(AuthUtils.AUTH_OWNER, owner);
        request.setHeader(AuthUtils.AUTH_SESSION, session);
        request.setHeader(AuthUtils.SDK, sdk);
        request.setHeader(AuthUtils.VERSION, version);
        request.setHeader(AuthUtils.TIMESTAMP, timestamp);
        request.setHeader(AuthUtils.SIGN, sign);
        HttpResponse response = client.execute(request);
        if (response.getStatusLine().getStatusCode() == 200) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
            String line = reader.readLine();
            JSONObject object;
            Map map = new HashMap();
            try {
                System.out.println("##################### line = " + line);
                object = new JSONObject(line);
                if (object != null) {
                    System.out.println(object.toString());
                    map.put("imgAddress", object.getString("imgurl"));
                    map.put("imgUrl", object.getString("url"));
                    return map;
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
} </s>
<s>class temp {    private byte[] getImage(String urlpath) throws Exception {
        URL url = new URL(urlpath);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setConnectTimeout(6 * 1000);
        if (conn.getResponseCode() == 200) {
            InputStream inputStream = conn.getInputStream();
            return readStream(inputStream);
        }
        return null;
    }
} </s>
<s>class temp {    private NodeList getNodeListForDataFile(String fileName, String dataType) {
        NodeList list = null;
        try {
            URL url = new URL(WEBSITE_PROTOCAL, WEBSITE_HOST, "/" + fileName + ".xml");
            InputStream is = url.openStream();
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = dbf.newDocumentBuilder();
            Document document = builder.parse(is);
            list = document.getElementsByTagName(dataType);
        } catch (SAXException e) {
            log.error("Error reading " + dataType + " data", e);
        } catch (IOException e) {
            log.error("Error reading " + dataType + " data", e);
        } catch (ParserConfigurationException e) {
            log.error("Error reading " + dataType + " data", e);
        }
        return list;
    }
} </s>
<s>class temp {    public int scrapeForIsbns(URL url) {
        int matches = 0;
        Pattern p = Pattern.compile("ISBN-10:</strong>\\s*(\\w{10})");
        Matcher m;
        for (int i = 0; i < RETRIES; i++) {
            try {
                InputStream in = url.openStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String str;
                while ((str = br.readLine()) != null) {
                    m = p.matcher(str);
                    while (m.find()) {
                        matches++;
                        outputIsbns.put(m.group(1));
                        logger.debug("Got ISBN: " + m.group(1));
                    }
                }
                break;
            } catch (ConnectException e) {
                logger.warn("Connection attempt " + i + " failed, trying again. Max retries: " + RETRIES);
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e1) {
                }
            } catch (IOException e) {
                logger.error("Error reading URL stream", e);
            } catch (InterruptedException e) {
                logger.error("Interrupted while calling put(Object E)", e);
            }
        }
        return matches;
    }
} </s>
<s>class temp {    public String getMd5() {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.reset();
            md5.update(string.getBytes());
            byte[] result = md5.digest();
            for (int i = 0; i < result.length; i++) {
                hexString.append(Integer.toHexString((result[i] & 0xFF) | 0x100).toLowerCase().substring(1, 3));
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    static synchronized Person lookup(PhoneNumber number, String siteName) {
        Vector<Person> foundPersons = new Vector<Person>(5);
        if (number.isFreeCall()) {
            Person p = new Person("", "FreeCall");
            p.addNumber(number);
            foundPersons.add(p);
        } else if (number.isSIPNumber() || number.isQuickDial()) {
            Person p = new Person();
            p.addNumber(number);
            foundPersons.add(p);
        } else if (ReverseLookup.rlsMap.containsKey(number.getCountryCode())) {
            nummer = number.getAreaNumber();
            rls_list = ReverseLookup.rlsMap.get(number.getCountryCode());
            Debug.info("Begin reverselookup for: " + nummer);
            if (nummer.startsWith(number.getCountryCode())) nummer = nummer.substring(number.getCountryCode().length());
            city = "";
            for (int i = 0; i < rls_list.size(); i++) {
                yield();
                rls = rls_list.get(i);
                if (!siteName.equals("") && !siteName.equals(rls.getName())) {
                    Debug.warning("This lookup should be done using a specific site, skipping");
                    continue;
                }
                prefix = rls.getPrefix();
                ac_length = rls.getAreaCodeLength();
                if (!nummer.startsWith(prefix)) nummer = prefix + nummer;
                urlstr = rls.getURL();
                if (urlstr.contains("$AREACODE")) {
                    urlstr = urlstr.replaceAll("\\$AREACODE", nummer.substring(prefix.length(), ac_length + prefix.length()));
                    urlstr = urlstr.replaceAll("\\$NUMBER", nummer.substring(prefix.length() + ac_length));
                } else if (urlstr.contains("$PFXAREACODE")) {
                    urlstr = urlstr.replaceAll("\\$PFXAREACODE", nummer.substring(0, prefix.length() + ac_length));
                    urlstr = urlstr.replaceAll("\\$NUMBER", nummer.substring(prefix.length() + ac_length));
                } else urlstr = urlstr.replaceAll("\\$NUMBER", nummer);
                Debug.info("Reverse lookup using: " + urlstr);
                url = null;
                data = new String[dataLength];
                try {
                    url = new URL(urlstr);
                    if (url != null) {
                        try {
                            con = url.openConnection();
                            con.setConnectTimeout(5000);
                            con.setReadTimeout(15000);
                            con.addRequestProperty("User-Agent", userAgent);
                            con.connect();
                            header = "";
                            charSet = "";
                            for (int j = 0; ; j++) {
                                String headerName = con.getHeaderFieldKey(j);
                                String headerValue = con.getHeaderField(j);
                                if (headerName == null && headerValue == null) {
                                    break;
                                }
                                if ("content-type".equalsIgnoreCase(headerName)) {
                                    String[] split = headerValue.split(";", 2);
                                    for (int k = 0; k < split.length; k++) {
                                        if (split[k].trim().toLowerCase().startsWith("charset=")) {
                                            String[] charsetSplit = split[k].split("=");
                                            charSet = charsetSplit[1].trim();
                                        }
                                    }
                                }
                                header += headerName + ": " + headerValue + " | ";
                            }
                            Debug.debug("Header of " + rls.getName() + ":" + header);
                            Debug.debug("CHARSET : " + charSet);
                            BufferedReader d;
                            if (charSet.equals("")) {
                                d = new BufferedReader(new InputStreamReader(con.getInputStream(), "ISO-8859-1"));
                            } else {
                                d = new BufferedReader(new InputStreamReader(con.getInputStream(), charSet));
                            }
                            int lines = 0;
                            while (null != ((str = d.readLine()))) {
                                data[lines] = str;
                                yield();
                                if (lines >= dataLength) {
                                    System.err.println("Result > " + dataLength + " Lines");
                                    break;
                                }
                                lines++;
                            }
                            d.close();
                            Debug.info("Begin processing response from " + rls.getName());
                            for (int j = 0; j < rls.size(); j++) {
                                yield();
                                firstname = "";
                                lastname = "";
                                company = "";
                                street = "";
                                zipcode = "";
                                city = "";
                                Person p = null;
                                patterns = rls.getEntry(j);
                                Pattern namePattern = null;
                                Pattern streetPattern = null;
                                Pattern cityPattern = null;
                                Pattern zipcodePattern = null;
                                Pattern firstnamePattern = null;
                                Pattern lastnamePattern = null;
                                Matcher nameMatcher = null;
                                Matcher streetMatcher = null;
                                Matcher cityMatcher = null;
                                Matcher zipcodeMatcher = null;
                                Matcher firstnameMatcher = null;
                                Matcher lastnameMatcher = null;
                                if (!patterns[ReverseLookupSite.NAME].equals("") && (patterns[ReverseLookupSite.FIRSTNAME].equals("") && patterns[ReverseLookupSite.LASTNAME].equals(""))) {
                                    namePattern = Pattern.compile(patterns[ReverseLookupSite.NAME]);
                                }
                                if (!patterns[ReverseLookupSite.STREET].equals("")) {
                                    streetPattern = Pattern.compile(patterns[ReverseLookupSite.STREET]);
                                }
                                if (!patterns[ReverseLookupSite.CITY].equals("")) {
                                    cityPattern = Pattern.compile(patterns[ReverseLookupSite.CITY]);
                                }
                                if (!patterns[ReverseLookupSite.ZIPCODE].equals("")) {
                                    zipcodePattern = Pattern.compile(patterns[ReverseLookupSite.ZIPCODE]);
                                }
                                if (!patterns[ReverseLookupSite.FIRSTNAME].equals("")) {
                                    firstnamePattern = Pattern.compile(patterns[ReverseLookupSite.FIRSTNAME]);
                                }
                                if (!patterns[ReverseLookupSite.LASTNAME].equals("")) {
                                    lastnamePattern = Pattern.compile(patterns[ReverseLookupSite.LASTNAME]);
                                }
                                for (int line = 0; line < dataLength; line++) {
                                    if (data[line] != null) {
                                        int spaceAlternative = 160;
                                        data[line] = data[line].replaceAll(new Character((char) spaceAlternative).toString(), " ");
                                        if (lastnamePattern != null) {
                                            lastnameMatcher = lastnamePattern.matcher(data[line]);
                                            if (lastnameMatcher.find()) {
                                                str = "";
                                                for (int k = 1; k <= lastnameMatcher.groupCount(); k++) {
                                                    if (lastnameMatcher.group(k) != null) str = str + lastnameMatcher.group(k).trim() + " ";
                                                }
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(str));
                                                lastname = lastname.trim();
                                                lastname = lastname.replaceAll(",", "");
                                                lastname = lastname.replaceAll("%20", " ");
                                                lastname = JFritzUtils.replaceSpecialCharsUTF(lastname);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(lastname));
                                                lastname = JFritzUtils.removeDuplicateWhitespace(lastname);
                                                if ("lastname".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), "home");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setLastName(lastname);
                                                }
                                            }
                                        }
                                        yield();
                                        if (firstnamePattern != null) {
                                            firstnameMatcher = firstnamePattern.matcher(data[line]);
                                            if (firstnameMatcher.find()) {
                                                str = "";
                                                for (int k = 1; k <= firstnameMatcher.groupCount(); k++) {
                                                    if (firstnameMatcher.group(k) != null) str = str + firstnameMatcher.group(k).trim() + " ";
                                                }
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(str));
                                                firstname = firstname.trim();
                                                firstname = firstname.replaceAll(",", "");
                                                firstname = firstname.replaceAll("%20", " ");
                                                firstname = JFritzUtils.replaceSpecialCharsUTF(firstname);
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(firstname));
                                                firstname = JFritzUtils.removeDuplicateWhitespace(firstname);
                                                if ("firstname".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), "home");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setFirstName(firstname);
                                                }
                                            }
                                        }
                                        yield();
                                        if (namePattern != null) {
                                            nameMatcher = namePattern.matcher(data[line]);
                                            if (nameMatcher.find()) {
                                                str = "";
                                                for (int k = 1; k <= nameMatcher.groupCount(); k++) {
                                                    if (nameMatcher.group(k) != null) str = str + nameMatcher.group(k).trim() + " ";
                                                }
                                                String[] split;
                                                split = str.split(" ", 2);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(split[0]));
                                                lastname = lastname.trim();
                                                lastname = lastname.replaceAll(",", "");
                                                lastname = lastname.replaceAll("%20", " ");
                                                lastname = JFritzUtils.replaceSpecialCharsUTF(lastname);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(lastname));
                                                lastname = JFritzUtils.removeDuplicateWhitespace(lastname);
                                                if (split[1].length() > 0) {
                                                    firstname = HTMLUtil.stripEntities(split[1]);
                                                    if ((firstname.indexOf("  ") > -1) && (firstname.indexOf("  u.") == -1)) {
                                                        company = JFritzUtils.removeLeadingSpaces(firstname.substring(firstname.indexOf("  ")).trim());
                                                        firstname = JFritzUtils.removeLeadingSpaces(firstname.substring(0, firstname.indexOf("  ")).trim());
                                                    } else {
                                                        firstname = JFritzUtils.removeLeadingSpaces(firstname.replaceAll("  u. ", " und "));
                                                    }
                                                }
                                                firstname = firstname.replaceAll("%20", " ");
                                                firstname = JFritzUtils.replaceSpecialCharsUTF(firstname);
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(firstname));
                                                firstname = JFritzUtils.removeDuplicateWhitespace(firstname);
                                                firstname = firstname.trim();
                                                company = company.replaceAll("%20", " ");
                                                company = JFritzUtils.replaceSpecialCharsUTF(company);
                                                company = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(company));
                                                company = JFritzUtils.removeDuplicateWhitespace(company);
                                                company = company.trim();
                                                if ("name".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    if (company.length() > 0) {
                                                        p.addNumber(number.getIntNumber(), "business");
                                                    } else {
                                                        p.addNumber(number.getIntNumber(), "home");
                                                    }
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setFirstName(firstname);
                                                    p.setLastName(lastname);
                                                    p.setCompany(company);
                                                }
                                            }
                                        }
                                        yield();
                                        if (streetPattern != null) {
                                            streetMatcher = streetPattern.matcher(data[line]);
                                            if (streetMatcher.find()) {
                                                str = "";
                                                for (int k = 1; k <= streetMatcher.groupCount(); k++) {
                                                    if (streetMatcher.group(k) != null) str = str + streetMatcher.group(k).trim() + " ";
                                                }
                                                street = str.replaceAll("%20", " ");
                                                street = JFritzUtils.replaceSpecialCharsUTF(street);
                                                street = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(street));
                                                street = JFritzUtils.removeDuplicateWhitespace(street);
                                                street = street.trim();
                                                if ("street".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), "home");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setStreet(street);
                                                }
                                            }
                                        }
                                        yield();
                                        if (cityPattern != null) {
                                            cityMatcher = cityPattern.matcher(data[line]);
                                            if (cityMatcher.find()) {
                                                str = "";
                                                for (int k = 1; k <= cityMatcher.groupCount(); k++) {
                                                    if (cityMatcher.group(k) != null) str = str + cityMatcher.group(k).trim() + " ";
                                                }
                                                city = str.replaceAll("%20", " ");
                                                city = JFritzUtils.replaceSpecialCharsUTF(city);
                                                city = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(city));
                                                city = JFritzUtils.removeDuplicateWhitespace(city);
                                                city = city.trim();
                                                if ("city".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), "home");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setCity(city);
                                                }
                                            }
                                        }
                                        yield();
                                        if (zipcodePattern != null) {
                                            zipcodeMatcher = zipcodePattern.matcher(data[line]);
                                            if (zipcodeMatcher.find()) {
                                                str = "";
                                                for (int k = 1; k <= zipcodeMatcher.groupCount(); k++) {
                                                    if (zipcodeMatcher.group(k) != null) str = str + zipcodeMatcher.group(k).trim() + " ";
                                                }
                                                zipcode = str.replaceAll("%20", " ");
                                                zipcode = JFritzUtils.replaceSpecialCharsUTF(zipcode);
                                                zipcode = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(zipcode));
                                                zipcode = JFritzUtils.removeDuplicateWhitespace(zipcode);
                                                zipcode = zipcode.trim();
                                                if ("zipcode".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), "home");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setPostalCode(zipcode);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (!firstname.equals("") || !lastname.equals("") || !company.equals("")) break;
                            }
                            yield();
                            if (!firstname.equals("") || !lastname.equals("") || !company.equals("")) {
                                if (city.equals("")) {
                                    if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(nummer); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(nummer);
                                }
                                return foundPersons.get(0);
                            }
                        } catch (IOException e1) {
                            Debug.error("Error while retrieving " + urlstr);
                        }
                    }
                } catch (MalformedURLException e) {
                    Debug.error("URL invalid: " + urlstr);
                }
            }
            yield();
            Debug.warning("No match for " + nummer + " found");
            if (city.equals("")) {
                if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(nummer); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(nummer);
            }
            Person p = new Person("", "", "", "", "", city, "", "");
            p.addNumber(number.getAreaNumber(), "home");
            return p;
        } else {
            Debug.warning("No reverse lookup sites for: " + number.getCountryCode());
            Person p = new Person();
            p.addNumber(number.getAreaNumber(), "home");
            if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(number.getIntNumber()); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(number.getIntNumber()); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(number.getIntNumber()); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(number.getIntNumber());
            p.setCity(city);
            return p;
        }
        return new Person("not found", "Person");
    }
} </s>
<s>class temp {    public static MessageService getMessageService(String fileId) {
        MessageService ms = null;
        if (serviceCache == null) init();
        if (serviceCache.containsKey(fileId)) return serviceCache.get(fileId);
        Properties p = new Properties();
        try {
            URL url = I18nPlugin.getFileURL(fileId);
            p.load(url.openStream());
            ms = new MessageService(p);
        } catch (Exception e) {
            ms = new MessageService();
        }
        serviceCache.put(fileId, ms);
        return ms;
    }
} </s>
<s>class temp {    protected void sendDoc(File indir, File outdir, File orig, Document doc, ServiceEndpoint ep) {
        ep.setMethod("simpleDocumentTransfer");
        Document response = null;
        try {
            response = protocolHandler.sendMessage(ep, doc);
        } catch (TransportException e) {
            logger.warn("Message was not accepted, will try again later");
            return;
        }
        String serial = String.valueOf(System.currentTimeMillis());
        File origCopy = new File(outdir, orig.getName() + "." + serial);
        File respDrop = new File(outdir, orig.getName() + "." + serial + ".resp");
        FileOutputStream respos = null;
        try {
            respos = new FileOutputStream(respDrop);
            serializeDocument(respos, response);
        } catch (IOException e) {
            logger.warn("Failed to dump response");
            return;
        } finally {
            try {
                respos.close();
            } catch (IOException ignored) {
            }
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        byte[] buffer = new byte[2048];
        try {
            in = new FileInputStream(orig);
            out = new FileOutputStream(origCopy);
            int bytesread = 0;
            while ((bytesread = in.read(buffer)) > 0) {
                out.write(buffer, 0, bytesread);
            }
        } catch (IOException e) {
            logger.warn("Failed to copy original");
            return;
        } finally {
            try {
                in.close();
                out.close();
            } catch (IOException ignored) {
            }
        }
        orig.delete();
        logger.info("File processed: " + orig.getName());
    }
} </s>
<s>class temp {    public static String generate(String source) {
        byte[] SHA = new byte[20];
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-1");
            digest.update(source.getBytes());
            SHA = digest.digest();
        } catch (NoSuchAlgorithmException e) {
            System.out.println("NO SUCH ALGORITHM EXCEPTION: " + e.getMessage());
        }
        CommunicationLogger.warning("SHA1 DIGEST: " + SHA);
        return SHA.toString();
    }
} </s>
<s>class temp {    @Override
    public void call(String soapAction, SoapEnvelope envelope) throws IOException, XmlPullParserException {
        if (soapAction == null) {
            soapAction = "\"\"";
        }
        byte[] requestData = createRequestData(envelope);
        requestDump = debug ? new String(requestData) : null;
        responseDump = null;
        HttpPost method = new HttpPost(url);
        method.addHeader("User-Agent", "kSOAP/2.0-Excilys");
        method.addHeader("SOAPAction", soapAction);
        method.addHeader("Content-Type", "text/xml");
        HttpEntity entity = new ByteArrayEntity(requestData);
        method.setEntity(entity);
        HttpResponse response = httpClient.execute(method);
        InputStream inputStream = response.getEntity().getContent();
        if (debug) {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[256];
            while (true) {
                int rd = inputStream.read(buf, 0, 256);
                if (rd == -1) {
                    break;
                }
                bos.write(buf, 0, rd);
            }
            bos.flush();
            buf = bos.toByteArray();
            responseDump = new String(buf);
            inputStream.close();
            inputStream = new ByteArrayInputStream(buf);
        }
        parseResponse(envelope, inputStream);
        inputStream.close();
    }
} </s>
<s>class temp {    String sendRequest(String[] getVars, String[] postVars, Object[] fileVars, boolean getSessionKey) throws IOException {
        String uri = wikiBaseURI;
        if (getVars != null) for (int i = 0; i + 1 < getVars.length; i += 2) uri += (i == 0 ? '?' : '&') + urlEncode(getVars[i]) + '=' + urlEncode(getVars[i + 1]);
        URL url = new URL(uri);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoInput(true);
        conn.setUseCaches(false);
        if (!getSessionKey) {
            String cookie = "";
            for (String key : cookies.keySet()) cookie += (cookie.length() == 0 ? "" : "; ") + key + "=" + cookies.get(key);
            conn.setRequestProperty("Cookie", cookie);
        }
        if (fileVars != null) {
            conn.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            conn.setDoOutput(true);
            conn.setRequestMethod("POST");
            conn.connect();
            PrintStream ps = new PrintStream(conn.getOutputStream());
            for (int i = 0; fileVars != null && i + 2 < fileVars.length; i += 3) {
                ps.print("--" + boundary + "\r\n");
                postFile(ps, conn, (String) fileVars[i], (String) fileVars[i + 1], (byte[]) fileVars[i + 2]);
            }
            for (int i = 0; postVars != null && i + 1 < postVars.length; i += 2) ps.print("--" + boundary + "\r\n" + "Content-Disposition: " + "form-data; name=\"" + postVars[i] + "\"\r\n\r\n" + postVars[i + 1] + "\r\n");
            ps.println("--" + boundary + "--");
            ps.close();
        } else if (postVars != null) {
            conn.setDoOutput(true);
            conn.setRequestMethod("POST");
            conn.connect();
            PrintStream ps = new PrintStream(conn.getOutputStream());
            for (int i = 0; postVars != null && i + 1 < postVars.length; i += 2) ps.print((i == 0 ? "" : "&") + urlEncode(postVars[i]) + "=" + urlEncode(postVars[i + 1]));
            ps.close();
        }
        int httpCode = conn.getResponseCode();
        if (httpCode != 200) throw new IOException("HTTP code: " + httpCode);
        if (getSessionKey) getCookies(conn.getHeaderFields().get("Set-Cookie"));
        InputStream in = conn.getInputStream();
        response = "";
        byte[] buffer = new byte[1 << 16];
        for (; ; ) {
            int len = in.read(buffer);
            if (len < 0) break;
            response += new String(buffer, 0, len);
        }
        in.close();
        return response;
    }
} </s>
<s>class temp {    public static byte[] readHTTPFile(String url, StringBuffer contentType, StringBuffer encoding) {
        try {
            URL u = new URL(url);
            URLConnection urlConn = u.openConnection();
            urlConn.setReadTimeout(10 * 1000);
            urlConn.setConnectTimeout(10 * 1000);
            urlConn.setDoInput(true);
            urlConn.setDoOutput(false);
            String status = urlConn.getHeaderField(null).toLowerCase();
            String location = urlConn.getHeaderField("Location");
            String cookie = urlConn.getHeaderField("Set-Cookie");
            int times = 0;
            while ((status.indexOf("http/1.1 3") >= 0 || status.indexOf("http/1.0 3") >= 0) && !HelperStd.isEmpty(location)) {
                if (!HelperStd.isEmpty(urlConn.getHeaderField("Set-Cookie"))) cookie = urlConn.getHeaderField("Set-Cookie");
                u = new URL(location);
                urlConn = u.openConnection();
                urlConn.setReadTimeout(10 * 1000);
                urlConn.setConnectTimeout(10 * 1000);
                urlConn.setDoInput(true);
                urlConn.setDoOutput(false);
                urlConn.setRequestProperty("Cookie", cookie);
                status = urlConn.getHeaderField(null).toLowerCase();
                location = urlConn.getHeaderField("Location");
                times++;
                if (times > 10) break;
            }
            System.out.println(urlConn.getHeaderField(null) + ":" + urlConn.getContentLength() + ":" + u);
            if (contentType != null) contentType.append(urlConn.getContentType());
            if (encoding != null) {
                String enc = null, ct = urlConn.getContentType();
                if (ct != null && ct.indexOf("charset=") > 0) {
                    int a = ct.indexOf("charset=") + "charset=".length();
                    enc = ct.substring(a);
                }
                if (enc == null) enc = urlConn.getContentEncoding();
                if (enc == null) enc = "ISO-8859-1";
                encoding.append(enc);
            }
            BufferedInputStream in = new BufferedInputStream(urlConn.getInputStream());
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            byte[] b = new byte[1024];
            int read = 0;
            while (read != -1) {
                read = in.read(b);
                if (read > 0) bout.write(b, 0, read);
            }
            in.close();
            System.out.println(bout.size());
            return bout.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("readHTTPFile:" + e.getMessage() + "," + url);
        }
        return new byte[0];
    }
} </s>
<s>class temp {    public void serveResource(HTTPResource resource, HttpServletRequest request, HttpServletResponse response) throws IOException {
        JavaScriptResource jsr = (JavaScriptResource) resource;
        response.setContentType("text/javascript");
        if (jsr.getScriptText() != null) {
            PrintWriter pw = response.getWriter();
            pw.println(jsr.getScriptText());
        } else if (jsr.getResourceName() != null) {
            URL url = ClassLoaderUtil.getResource(jsr.getResourceName());
            IOUtil.copyData(response.getOutputStream(), url.openStream());
        } else {
            throw new IOException("No Javascript to Serve");
        }
    }
} </s>
<s>class temp {    private void readVersion() {
        URL url = ClassLoader.getSystemResource("version");
        if (url == null) {
            return;
        }
        BufferedReader reader = null;
        String line = null;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("Version=")) {
                    version = (line.split("="))[1];
                }
                if (line.startsWith("Revision=")) {
                    revision = (line.split("="))[1];
                }
                if (line.startsWith("Date=")) {
                    String sSec = (line.split("="))[1];
                    Long lSec = Long.valueOf(sSec);
                    compileDate = new Date(lSec);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return;
    }
} </s>
<s>class temp {    public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {
        Assert.notNull(resourceName, "Resource name must not be null");
        ClassLoader clToUse = classLoader;
        if (clToUse == null) {
            clToUse = ClassUtils.getDefaultClassLoader();
        }
        Properties properties = new Properties();
        Enumeration urls = clToUse.getResources(resourceName);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            InputStream is = null;
            try {
                URLConnection con = url.openConnection();
                con.setUseCaches(false);
                is = con.getInputStream();
                properties.load(is);
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        }
        return properties;
    }
} </s>
<s>class temp {    @Override
    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException {
        String context = request.getContextPath();
        String resource = request.getRequestURI().replace(context, "");
        resource = resource.replaceAll(RESOURCES_PATH + "/", "");
        if ((StringUtils.isEmpty(resource)) || (resource.endsWith("/"))) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        this.getLogger().info("Getting resource: " + resource);
        URL url = ClassLoaderUtils.getResource(resource);
        if (url == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        InputStream input = url.openStream();
        OutputStream output = response.getOutputStream();
        URLConnection connection = url.openConnection();
        String contentEncoding = connection.getContentEncoding();
        int contentLength = connection.getContentLength();
        String contentType = connection.getContentType();
        if (contentEncoding != null) {
            response.setCharacterEncoding(contentEncoding);
        }
        response.setContentLength(contentLength);
        response.setContentType(contentType);
        IOUtils.copy(input, output, true);
    }
} </s>
<s>class temp {    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException("Destination '" + destFile + "' exists but is a directory");
        }
        long time = System.currentTimeMillis();
        FileInputStream fis = null;
        FileOutputStream fos = null;
        FileChannel input = null;
        FileChannel output = null;
        try {
            fis = new FileInputStream(srcFile);
            fos = new FileOutputStream(destFile);
            input = fis.getChannel();
            output = fos.getChannel();
            long size = input.size();
            long pos = 0;
            long count = 0;
            while (pos < size && continueWriting(pos, size)) {
                count = (size - pos) > FIFTY_MB ? FIFTY_MB : (size - pos);
                pos += output.transferFrom(input, pos, count);
            }
        } finally {
            output.close();
            IOUtils.closeQuietly(fos);
            input.close();
            IOUtils.closeQuietly(fis);
        }
        if (srcFile.length() != destFile.length()) {
            if (DiskManager.isLocked()) throw new IOException("Copy stopped since VtM was working"); else throw new IOException("Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");
        } else {
            time = System.currentTimeMillis() - time;
            long speed = (destFile.length() / time) / 1000;
            DiskManager.addDiskSpeed(speed);
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
} </s>
<s>class temp {    public void testFidelity() throws ParserException, IOException {
        Lexer lexer;
        Node node;
        int position;
        StringBuffer buffer;
        String string;
        char[] ref;
        char[] test;
        URL url = new URL("http://sourceforge.net");
        lexer = new Lexer(url.openConnection());
        position = 0;
        buffer = new StringBuffer(80000);
        while (null != (node = lexer.nextNode())) {
            string = node.toHtml();
            if (position != node.getStartPosition()) fail("non-contiguous" + string);
            buffer.append(string);
            position = node.getEndPosition();
            if (buffer.length() != position) fail("text length differed after encountering node " + string);
        }
        ref = lexer.getPage().getText().toCharArray();
        test = new char[buffer.length()];
        buffer.getChars(0, buffer.length(), test, 0);
        assertEquals("different amounts of text", ref.length, test.length);
        for (int i = 0; i < ref.length; i++) if (ref[i] != test[i]) fail("character differs at position " + i + ", expected <" + ref[i] + "> but was <" + test[i] + ">");
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".build")) develBuild = line.substring(6).trim(); else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    public static float medianElement(float[] array, int size) {
        float[] tmpArray = new float[size];
        System.arraycopy(array, 0, tmpArray, 0, size);
        boolean changed = true;
        while (changed) {
            changed = false;
            for (int i = 0; i < size - 1; i++) {
                if (tmpArray[i] > tmpArray[i + 1]) {
                    changed = true;
                    float tmp = tmpArray[i];
                    tmpArray[i] = tmpArray[i + 1];
                    tmpArray[i + 1] = tmp;
                }
            }
        }
        return tmpArray[size / 2];
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    public static String sha1Hash(String input) {
        try {
            MessageDigest sha1Digest = MessageDigest.getInstance("SHA-1");
            sha1Digest.update(input.getBytes());
            return byteArrayToString(sha1Digest.digest());
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
        return "";
    }
} </s>
