<s>class temp {    public Mappings read() {
        Mappings result = null;
        InputStream stream = null;
        try {
            XMLParser parser = new XMLParser();
            stream = url.openStream();
            result = parser.parse(stream);
        } catch (Throwable e) {
            log.error("Error in loading dozer mapping file url: [" + url + "] : " + e);
            MappingUtils.throwMappingException(e);
        } finally {
            try {
                if (stream != null) {
                    stream.close();
                }
            } catch (IOException e) {
                MappingUtils.throwMappingException(e);
            }
        }
        return result;
    }
} </s>
<s>class temp {    public static String encrypt(String txt) throws Exception {
        MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(txt.getBytes("UTF-8"));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
} </s>
<s>class temp {    private static void process(String urlstring) {
        try {
            URL url = new URL(urlstring);
            System.out.println("Connecting to " + url);
            URLConnection connection = url.openConnection();
            connection.connect();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {
                System.out.println(TAG.matcher(line).replaceAll(""));
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println("" + ioe);
        }
    }
} </s>
<s>class temp {    public void exportFile() {
        String expfolder = PropertyHandler.getInstance().getProperty(PropertyHandler.KINDLE_EXPORT_FOLDER_KEY);
        File out = new File(expfolder + File.separator + previewInfo.getTitle() + ".prc");
        File f = new File(absPath);
        try {
            FileOutputStream fout = new FileOutputStream(out);
            FileInputStream fin = new FileInputStream(f);
            int read = 0;
            byte[] buffer = new byte[1024 * 1024];
            while ((read = fin.read(buffer)) > 0) {
                fout.write(buffer, 0, read);
            }
            fin.close();
            fout.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    @Override
    public CheckAvailabilityResult execute(final CheckAvailabilityAction action, final ExecutionContext context) throws ActionException {
        if (LOGGER.isDebugEnabled()) {
            String serverName = null;
            if (action.getServerId() == CheckAvailability.FEDORA_ID) {
                serverName = "fedora";
            } else if (action.getServerId() == CheckAvailability.KRAMERIUS_ID) {
                serverName = "kramerius";
            }
            LOGGER.debug("Processing action: CheckAvailability: " + serverName);
        }
        ServerUtils.checkExpiredSession(httpSessionProvider);
        boolean status = true;
        String url = null;
        String usr = "";
        String pass = "";
        if (action.getServerId() == CheckAvailability.FEDORA_ID) {
            url = configuration.getFedoraHost();
            usr = configuration.getFedoraLogin();
            pass = configuration.getFedoraPassword();
        } else if (action.getServerId() == CheckAvailability.KRAMERIUS_ID) {
            url = configuration.getKrameriusHost() + SOME_STATIC_KRAMERIUS_PAGE;
        } else {
            throw new ActionException("Unknown server id");
        }
        try {
            URLConnection con = RESTHelper.openConnection(url, usr, pass, false);
            if (con instanceof HttpURLConnection) {
                HttpURLConnection httpConnection = (HttpURLConnection) con;
                int resp = httpConnection.getResponseCode();
                if (resp < 200 || resp >= 308) {
                    status = false;
                    LOGGER.info("Server " + url + " answered with HTTP code " + httpConnection.getResponseCode());
                }
            } else {
                status = false;
            }
        } catch (MalformedURLException e) {
            status = false;
            e.printStackTrace();
        } catch (IOException e) {
            status = false;
            e.printStackTrace();
        }
        return new CheckAvailabilityResult(status, url);
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        log.info("Passage param√®tres " + args);
        try {
            URL url = new URL("http://localhost:8082/HomeAutomateCore/ListenerServlet/");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
            out.write("username = JavaWorld \r \n ");
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String reponse = "";
            while ((reponse = in.readLine()) != null) {
                System.out.println(reponse);
            }
            System.out.println("Fin");
            in.close();
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
            System.out.println("Fin1 " + ex.getMessage() + " " + ex.getCause());
        } catch (IOException ex) {
            ex.printStackTrace();
            System.out.println("Fin2 " + ex.getMessage() + " " + ex.getCause());
        }
    }
} </s>
<s>class temp {    protected void writePage(final CacheItem entry, final TranslationResponse response, ModifyTimes times) throws IOException {
        if (entry == null) {
            return;
        }
        Set<ResponseHeader> headers = new TreeSet<ResponseHeader>();
        for (ResponseHeader h : entry.getHeaders()) {
            if (TranslationResponse.ETAG.equals(h.getName())) {
                if (!times.isFileLastModifiedKnown()) {
                    headers.add(new ResponseHeaderImpl(h.getName(), doETagStripWeakMarker(h.getValues())));
                }
            } else {
                headers.add(h);
            }
        }
        response.addHeaders(headers);
        if (!times.isFileLastModifiedKnown()) {
            response.setLastModified(entry.getLastModified());
        }
        response.setTranslationCount(entry.getTranslationCount());
        response.setFailCount(entry.getFailCount());
        OutputStream output = response.getOutputStream();
        try {
            InputStream input = entry.getContentAsStream();
            try {
                IOUtils.copy(input, output);
            } finally {
                input.close();
            }
        } finally {
            response.setEndState(ResponseStateOk.getInstance());
        }
    }
} </s>
<s>class temp {    public static FileChannel getFileChannel(Object o) throws IOException {
        Class c = o.getClass();
        try {
            Method m = c.getMethod("getChannel", null);
            return (FileChannel) m.invoke(o, null);
        } catch (IllegalAccessException x) {
        } catch (NoSuchMethodException x) {
        } catch (InvocationTargetException x) {
            if (x.getTargetException() instanceof IOException) throw (IOException) x.getTargetException();
        }
        if (o instanceof FileInputStream) return new MyFileChannelImpl((FileInputStream) o);
        if (o instanceof FileOutputStream) return new MyFileChannelImpl((FileOutputStream) o);
        if (o instanceof RandomAccessFile) return new MyFileChannelImpl((RandomAccessFile) o);
        Assert.UNREACHABLE(o.getClass().toString());
        return null;
    }
} </s>
<s>class temp {    public static String generatePassword(String userKey, int applicationId, String applicationKey) {
        String nonce = generateNonce();
        String createDate = fmtDate.format(new Date());
        String keyDigest = null;
        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance("SHA1");
            sha1.update(nonce.getBytes("UTF-8"));
            sha1.update(createDate.getBytes("UTF-8"));
            sha1.update(userKey.getBytes("UTF-8"));
            sha1.update(applicationKey.getBytes("UTF-8"));
            keyDigest = getHexaDecimal(sha1.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(applicationId);
        sb.append(',');
        sb.append(nonce);
        sb.append(',');
        sb.append(createDate);
        sb.append(',');
        sb.append(keyDigest);
        return sb.toString();
    }
} </s>
<s>class temp {    static void invalidSlave(String msg, Socket sock) throws IOException {
        BufferedReader _sinp = null;
        PrintWriter _sout = null;
        try {
            _sout = new PrintWriter(sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            _sout.println(msg);
            logger.info("NEW< " + msg);
            String txt = SocketSlaveListener.readLine(_sinp, 30);
            String sname = "";
            String spass = "";
            String shash = "";
            try {
                String[] items = txt.split(" ");
                sname = items[1].trim();
                spass = items[2].trim();
                shash = items[3].trim();
            } catch (Exception e) {
                throw new IOException("Slave Inititalization Faailed");
            }
            String pass = sname + spass + _pass;
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = SocketSlaveListener.hash2hex(md5.digest()).toLowerCase();
            if (!hash.equals(shash)) {
                throw new IOException("Slave Inititalization Faailed");
            }
        } catch (Exception e) {
        }
        throw new IOException("Slave Inititalization Faailed");
    }
} </s>
<s>class temp {    public static void fastBackup(File file) {
        FileChannel in = null;
        FileChannel out = null;
        FileInputStream fin = null;
        FileOutputStream fout = null;
        try {
            in = (fin = new FileInputStream(file)).getChannel();
            out = (fout = new FileOutputStream(file.getAbsolutePath() + ".bak")).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (IOException e) {
            Logging.getErrorLog().reportError("Fast backup failure (" + file.getAbsolutePath() + "): " + e.getMessage());
        } finally {
            if (fin != null) {
                try {
                    fin.close();
                } catch (IOException e) {
                    Logging.getErrorLog().reportException("Failed to close file input stream", e);
                }
            }
            if (fout != null) {
                try {
                    fout.close();
                } catch (IOException e) {
                    Logging.getErrorLog().reportException("Failed to close file output stream", e);
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    Logging.getErrorLog().reportException("Failed to close file channel", e);
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    Logging.getErrorLog().reportException("Failed to close file channel", e);
                }
            }
        }
    }
} </s>
<s>class temp {    private void doLogin(String password) throws LoginFailedException, IncorrectPasswordException {
        long mgr = Constants.MANAGER;
        Data data, response;
        try {
            response = sendAndWait(new Request(mgr)).get(0);
            MessageDigest md;
            try {
                md = MessageDigest.getInstance("MD5");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException("MD5 hash not supported.");
            }
            byte[] challenge = response.getBytes();
            md.update(challenge);
            md.update(password.getBytes(Data.STRING_ENCODING));
            try {
                data = Data.valueOf(md.digest());
                response = sendAndWait(new Request(mgr).add(0, data)).get(0);
            } catch (ExecutionException ex) {
                throw new IncorrectPasswordException();
            }
            loginMessage = response.getString();
            response = sendAndWait(new Request(mgr).add(0, getLoginData())).get(0);
            ID = response.getWord();
        } catch (InterruptedException ex) {
            throw new LoginFailedException(ex);
        } catch (ExecutionException ex) {
            throw new LoginFailedException(ex);
        } catch (IOException ex) {
            throw new LoginFailedException(ex);
        }
    }
} </s>
<s>class temp {    public static String encrypt(String data) throws IOException, NoSuchAlgorithmException {
        Properties props = Configuration.getInstance().getProperties();
        String algorithm = props.getProperty("com.makeabyte.jhosting.server.persistence.security.algorithm");
        String encryptedData = data;
        boolean encrypt = Boolean.parseBoolean(props.getProperty("com.makeabyte.jhosting.server.persistence.security.encrypt"));
        if (encrypt) {
            if (algorithm.equalsIgnoreCase("UTF-16LE")) return encryptActiveDirectory(data);
            MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            md.reset();
            md.update(data.getBytes());
            encryptedData = md.digest().toString();
        }
        return encryptedData;
    }
} </s>
<s>class temp {    public String getDigest(String algorithm, String data) throws IOException, NoSuchAlgorithmException {
        MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
        md.reset();
        md.update(data.getBytes());
        return md.digest().toString();
    }
} </s>
<s>class temp {    private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException {
        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputStream stream = null;
        try {
            stream = new URL(url).openStream();
            return db.parse(stream);
        } finally {
            PetstoreUtil.closeIgnoringException(stream);
        }
    }
} </s>
<s>class temp {    public static String md5(String plainText) {
        String ret = null;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(plainText.getBytes());
            byte b[] = md.digest();
            int i;
            StringBuffer buf = new StringBuffer("");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append("0");
                buf.append(Integer.toHexString(i));
            }
            ret = buf.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return ret;
    }
} </s>
<s>class temp {    public BufferedImage extractUsingCompositor() throws IOException, DjatokaException {
        boolean useRegion = false;
        int left = 0;
        int top = 0;
        int width = 50;
        int height = 50;
        boolean useleftDouble = false;
        Double leftDouble = 0.0;
        boolean usetopDouble = false;
        Double topDouble = 0.0;
        boolean usewidthDouble = false;
        Double widthDouble = 0.0;
        boolean useheightDouble = false;
        Double heightDouble = 0.0;
        if (params.getRegion() != null) {
            StringTokenizer st = new StringTokenizer(params.getRegion(), "{},");
            String token;
            if ((token = st.nextToken()).contains(".")) {
                topDouble = Double.parseDouble(token);
                usetopDouble = true;
            } else top = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(".")) {
                leftDouble = Double.parseDouble(token);
                useleftDouble = true;
            } else left = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(".")) {
                heightDouble = Double.parseDouble(token);
                useheightDouble = true;
            } else height = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(".")) {
                widthDouble = Double.parseDouble(token);
                usewidthDouble = true;
            } else width = Integer.parseInt(token);
            useRegion = true;
        }
        if (is != null) {
            File f = File.createTempFile("tmp", ".jp2");
            f.deleteOnExit();
            FileOutputStream fos = new FileOutputStream(f);
            sourceFile = f.getAbsolutePath();
            IOUtils.copyStream(is, fos);
        }
        Kdu_simple_file_source raw_src = null;
        Jp2_family_src family_src = new Jp2_family_src();
        Jpx_source wrapped_src = new Jpx_source();
        Kdu_region_compositor compositor = null;
        BufferedImage image = null;
        try {
            family_src.Open(sourceFile);
            int success = wrapped_src.Open(family_src, true);
            if (success < 0) {
                family_src.Close();
                wrapped_src.Close();
                raw_src = new Kdu_simple_file_source(sourceFile);
            }
            compositor = new Kdu_region_compositor();
            if (raw_src != null) compositor.Create(raw_src); else compositor.Create(wrapped_src);
            Kdu_dims imageDimensions = new Kdu_dims();
            compositor.Get_total_composition_dims(imageDimensions);
            Kdu_coords imageSize = imageDimensions.Access_size();
            Kdu_coords imagePosition = imageDimensions.Access_pos();
            if (useleftDouble) left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x());
            if (usetopDouble) top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y());
            if (useheightDouble) height = (int) Math.round(heightDouble * imageSize.Get_y());
            if (usewidthDouble) width = (int) Math.round(widthDouble * imageSize.Get_x());
            if (useRegion) {
                imageSize.Set_x(width);
                imageSize.Set_y(height);
                imagePosition.Set_x(left);
                imagePosition.Set_y(top);
            }
            int reduce = 1 << params.getLevelReductionFactor();
            imageSize.Set_x(imageSize.Get_x());
            imageSize.Set_y(imageSize.Get_y());
            imagePosition.Set_x(imagePosition.Get_x() / reduce - (1 / reduce - 1) / 2);
            imagePosition.Set_y(imagePosition.Get_y() / reduce - (1 / reduce - 1) / 2);
            Kdu_dims viewDims = new Kdu_dims();
            viewDims.Assign(imageDimensions);
            viewDims.Access_size().Set_x(imageSize.Get_x());
            viewDims.Access_size().Set_y(imageSize.Get_y());
            compositor.Add_compositing_layer(0, viewDims, viewDims);
            if (params.getRotationDegree() == 90) compositor.Set_scale(true, false, true, 1.0F); else if (params.getRotationDegree() == 180) compositor.Set_scale(false, true, true, 1.0F); else if (params.getRotationDegree() == 270) compositor.Set_scale(true, true, false, 1.0F); else compositor.Set_scale(false, false, false, 1.0F);
            compositor.Get_total_composition_dims(viewDims);
            Kdu_coords viewSize = viewDims.Access_size();
            compositor.Set_buffer_surface(viewDims);
            int[] imgBuffer = new int[viewSize.Get_x() * viewSize.Get_y()];
            Kdu_compositor_buf compositorBuffer = compositor.Get_composition_buffer(viewDims);
            int regionBufferSize = 0;
            int[] kduBuffer = null;
            Kdu_dims newRegion = new Kdu_dims();
            while (compositor.Process(100000, newRegion)) {
                Kdu_coords newOffset = newRegion.Access_pos();
                Kdu_coords newSize = newRegion.Access_size();
                newOffset.Subtract(viewDims.Access_pos());
                int newPixels = newSize.Get_x() * newSize.Get_y();
                if (newPixels == 0) continue;
                if (newPixels > regionBufferSize) {
                    regionBufferSize = newPixels;
                    kduBuffer = new int[regionBufferSize];
                }
                compositorBuffer.Get_region(newRegion, kduBuffer);
                int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x();
                int kduBufferIdx = 0;
                int xDiff = viewSize.Get_x() - newSize.Get_x();
                for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) {
                    for (int i = 0; i < newSize.Get_x(); i++) {
                        imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++];
                    }
                }
            }
            if (params.getRotationDegree() == 90 || params.getRotationDegree() == 270) image = new BufferedImage(imageSize.Get_y(), imageSize.Get_x(), BufferedImage.TYPE_INT_RGB); else image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB);
            image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x());
            if (compositor != null) compositor.Native_destroy();
            wrapped_src.Native_destroy();
            family_src.Native_destroy();
            if (raw_src != null) raw_src.Native_destroy();
            return image;
        } catch (KduException e) {
            e.printStackTrace();
            throw new DjatokaException(e);
        } catch (Exception e) {
            e.printStackTrace();
            throw new DjatokaException(e);
        }
    }
} </s>
<s>class temp {    public BufferedImage extract() throws DjatokaException {
        boolean useRegion = false;
        int left = 0;
        int top = 0;
        int width = 50;
        int height = 50;
        boolean useleftDouble = false;
        Double leftDouble = 0.0;
        boolean usetopDouble = false;
        Double topDouble = 0.0;
        boolean usewidthDouble = false;
        Double widthDouble = 0.0;
        boolean useheightDouble = false;
        Double heightDouble = 0.0;
        if (params.getRegion() != null) {
            StringTokenizer st = new StringTokenizer(params.getRegion(), "{},");
            String token;
            if ((token = st.nextToken()).contains(".")) {
                topDouble = Double.parseDouble(token);
                usetopDouble = true;
            } else top = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(".")) {
                leftDouble = Double.parseDouble(token);
                useleftDouble = true;
            } else left = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(".")) {
                heightDouble = Double.parseDouble(token);
                useheightDouble = true;
            } else height = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(".")) {
                widthDouble = Double.parseDouble(token);
                usewidthDouble = true;
            } else width = Integer.parseInt(token);
            useRegion = true;
        }
        try {
            if (is != null) {
                File f = File.createTempFile("tmp", ".jp2");
                f.deleteOnExit();
                FileOutputStream fos = new FileOutputStream(f);
                sourceFile = f.getAbsolutePath();
                IOUtils.copyStream(is, fos);
                is.close();
                fos.close();
            }
        } catch (IOException e) {
            throw new DjatokaException(e);
        }
        try {
            Jp2_source inputSource = new Jp2_source();
            Kdu_compressed_source input = null;
            Jp2_family_src jp2_family_in = new Jp2_family_src();
            Jp2_locator loc = new Jp2_locator();
            jp2_family_in.Open(sourceFile, true);
            inputSource.Open(jp2_family_in, loc);
            inputSource.Read_header();
            input = inputSource;
            Kdu_codestream codestream = new Kdu_codestream();
            codestream.Create(input);
            Kdu_channel_mapping channels = new Kdu_channel_mapping();
            if (inputSource.Exists()) channels.Configure(inputSource, false); else channels.Configure(codestream);
            int ref_component = channels.Get_source_component(0);
            Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream);
            Kdu_dims image_dims = new Kdu_dims();
            codestream.Get_dims(ref_component, image_dims);
            Kdu_coords imageSize = image_dims.Access_size();
            Kdu_coords imagePosition = image_dims.Access_pos();
            if (useleftDouble) left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x());
            if (usetopDouble) top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y());
            if (useheightDouble) height = (int) Math.round(heightDouble * imageSize.Get_y());
            if (usewidthDouble) width = (int) Math.round(widthDouble * imageSize.Get_x());
            if (useRegion) {
                imageSize.Set_x(width);
                imageSize.Set_y(height);
                imagePosition.Set_x(left);
                imagePosition.Set_y(top);
            }
            int reduce = 1 << params.getLevelReductionFactor();
            imageSize.Set_x(imageSize.Get_x() * ref_expansion.Get_x());
            imageSize.Set_y(imageSize.Get_y() * ref_expansion.Get_y());
            imagePosition.Set_x(imagePosition.Get_x() * ref_expansion.Get_x() / reduce - ((ref_expansion.Get_x() / reduce - 1) / 2));
            imagePosition.Set_y(imagePosition.Get_y() * ref_expansion.Get_y() / reduce - ((ref_expansion.Get_y() / reduce - 1) / 2));
            Kdu_dims view_dims = new Kdu_dims();
            view_dims.Assign(image_dims);
            view_dims.Access_size().Set_x(imageSize.Get_x());
            view_dims.Access_size().Set_y(imageSize.Get_y());
            int region_buf_size = imageSize.Get_x() * imageSize.Get_y();
            int[] region_buf = new int[region_buf_size];
            Kdu_region_decompressor decompressor = new Kdu_region_decompressor();
            decompressor.Start(codestream, channels, -1, params.getLevelReductionFactor(), 16384, image_dims, ref_expansion, new Kdu_coords(1, 1), false, Kdu_global.KDU_WANT_OUTPUT_COMPONENTS);
            Kdu_dims new_region = new Kdu_dims();
            Kdu_dims incomplete_region = new Kdu_dims();
            Kdu_coords viewSize = view_dims.Access_size();
            incomplete_region.Assign(image_dims);
            int[] imgBuffer = new int[viewSize.Get_x() * viewSize.Get_y()];
            int[] kduBuffer = null;
            while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) {
                Kdu_coords newOffset = new_region.Access_pos();
                Kdu_coords newSize = new_region.Access_size();
                newOffset.Subtract(view_dims.Access_pos());
                kduBuffer = region_buf;
                int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x();
                int kduBufferIdx = 0;
                int xDiff = viewSize.Get_x() - newSize.Get_x();
                for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) {
                    for (int i = 0; i < newSize.Get_x(); i++) {
                        imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++];
                    }
                }
            }
            BufferedImage image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB);
            image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x());
            if (params.getRotationDegree() > 0) {
                image = ImageProcessingUtils.rotate(image, params.getRotationDegree());
            }
            decompressor.Native_destroy();
            channels.Native_destroy();
            if (codestream.Exists()) codestream.Destroy();
            inputSource.Native_destroy();
            input.Native_destroy();
            jp2_family_in.Native_destroy();
            return image;
        } catch (KduException e) {
            e.printStackTrace();
            throw new DjatokaException(e);
        } catch (Exception e) {
            e.printStackTrace();
            throw new DjatokaException(e);
        }
    }
} </s>
<s>class temp {        private String findTitle(URL url) {
            HTMLEditorKit.ParserCallback callback;
            try {
                URLConnection conn = url.openConnection();
                Reader rd = new InputStreamReader(conn.getInputStream());
                ParserDelegator parser = new ParserDelegator();
                callback = new Callback();
                parser.parse(rd, callback, true);
            } catch (Exception exp) {
                System.err.println(exp);
            }
            return title;
        }
} </s>
<s>class temp {        public MobileAgentProperties(Class declaringClass, String propertyFile) throws IOException {
            this.defaults = (MobileAgent) AnnotationElement.getAnyAnnotation(declaringClass, MobileAgent.class);
            URL url = getClass().getClassLoader().getResource(propertyFile);
            if (url != null) {
                props.load(url.openStream());
                log.info("MobileAgent parameters loaded from file " + url);
            }
        }
} </s>
<s>class temp {    private static boolean initLOG4JProperties(String homeDir) {
        String Log4jURL = homeDir + LOG4J_URL;
        try {
            URL log4jurl = getURL(Log4jURL);
            InputStream inStreamLog4j = log4jurl.openStream();
            Properties propertiesLog4j = new Properties();
            try {
                propertiesLog4j.load(inStreamLog4j);
                PropertyConfigurator.configure(propertiesLog4j);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            logger.info("Failed to initialize LOG4J with properties file.");
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    public static String getURLContent(String href) throws BuildException {
        URL url = null;
        String content;
        try {
            URL context = new URL("file:" + System.getProperty("user.dir") + "/");
            url = new URL(context, href);
            InputStream is = url.openStream();
            InputStreamReader isr = new InputStreamReader(is);
            StringBuffer stringBuffer = new StringBuffer();
            char[] buffer = new char[1024];
            int len;
            while ((len = isr.read(buffer, 0, 1024)) > 0) stringBuffer.append(buffer, 0, len);
            content = stringBuffer.toString();
            isr.close();
        } catch (Exception ex) {
            throw new BuildException("Cannot get content of URL " + href + ": " + ex);
        }
        return content;
    }
} </s>
<s>class temp {    private void sendFile(File file, HttpServletResponse response) throws IOException {
        response.setContentLength((int) file.length());
        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(file);
            IOUtils.copy(inputStream, response.getOutputStream());
        } finally {
            IOUtils.closeQuietly(inputStream);
        }
    }
} </s>
<s>class temp {    @Override
    protected Integer doInBackground() throws Exception {
        int numOfRows = 0;
        combinationMap = new HashMap<AnsweredQuestion, Integer>();
        combinationMapReverse = new HashMap<Integer, AnsweredQuestion>();
        LinkedHashSet<AnsweredQuestion> answeredQuestionSet = new LinkedHashSet<AnsweredQuestion>();
        LinkedHashSet<Integer> studentSet = new LinkedHashSet<Integer>();
        final String delimiter = ";";
        final String typeToProcess = "F";
        String line;
        String[] chunks = new String[9];
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"));
            in.readLine();
            while ((line = in.readLine()) != null) {
                chunks = line.split(delimiter);
                numOfRows++;
                if (chunks[2].equals(typeToProcess)) {
                    answeredQuestionSet.add(new AnsweredQuestion(chunks[4], chunks[5]));
                    studentSet.add(new Integer(chunks[0]));
                }
            }
            in.close();
            int i = 0;
            Integer I;
            for (AnsweredQuestion pair : answeredQuestionSet) {
                I = new Integer(i++);
                combinationMap.put(pair, I);
                combinationMapReverse.put(I, pair);
            }
            matrix = new SparseObjectMatrix2D(answeredQuestionSet.size(), studentSet.size());
            int lastStudentNumber = -1;
            AnsweredQuestion pair;
            in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"));
            in.readLine();
            while ((line = in.readLine()) != null) {
                chunks = line.split(delimiter);
                pair = null;
                if (chunks[2].equals(typeToProcess)) {
                    if (Integer.parseInt(chunks[0]) != lastStudentNumber) {
                        lastStudentNumber++;
                    }
                    pair = new AnsweredQuestion(chunks[4], chunks[5]);
                    if (combinationMap.containsKey(pair)) {
                        matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE);
                    }
                }
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        supportVector = new int[combinationMap.size()];
        ObjectMatrix1D row = null;
        for (int i = 0; i < combinationMap.size(); i++) {
            row = matrix.viewRow(i);
            int sum = 0;
            for (int k = 0; k < row.size(); k++) {
                if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) {
                    sum++;
                }
            }
            supportVector[i] = sum;
        }
        applet.combinationMap = this.combinationMap;
        applet.combinationMapReverse = this.combinationMapReverse;
        applet.matrix = this.matrix;
        applet.supportVector = supportVector;
        System.out.println("data loaded.");
        return null;
    }
} </s>
<s>class temp {    private static String md5(String input) {
        String res = "";
        try {
            MessageDigest cript = MessageDigest.getInstance("MD5");
            cript.reset();
            cript.update(input.getBytes());
            byte[] md5 = cript.digest();
            String tmp = "";
            for (int i = 0; i < md5.length; i++) {
                tmp = (Integer.toHexString(0xFF & md5[i]));
                if (tmp.length() == 1) {
                    res += "0" + tmp;
                } else {
                    res += tmp;
                }
            }
        } catch (NoSuchAlgorithmException ex) {
            Log4k.error(pdfPrinter.class.getName(), ex.getMessage());
        }
        return res;
    }
} </s>
<s>class temp {    @Test
    public void test_validate_tag_getTopAlbums() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
            File schemaLocation = new File("tes.xsd");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL("http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse("File not found", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse("Schema did not validate", true);
        }
        assertTrue(true);
    }
} </s>
<s>class temp {    public String getMD5(String data) {
        try {
            MessageDigest md5Algorithm = MessageDigest.getInstance("MD5");
            md5Algorithm.update(data.getBytes(), 0, data.length());
            byte[] digest = md5Algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            String hexDigit = null;
            for (int i = 0; i < digest.length; i++) {
                hexDigit = Integer.toHexString(0xFF & digest[i]);
                if (hexDigit.length() < 2) {
                    hexDigit = "0" + hexDigit;
                }
                hexString.append(hexDigit);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException ne) {
            return data;
        }
    }
} </s>
<s>class temp {    protected String getGraphPath(String name) throws ServletException {
        String hash;
        try {
            MessageDigest md = MessageDigest.getInstance(m_messagedigest_algorithm);
            md.update(name.getBytes());
            hash = bytesToHex(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new ServletException("NoSuchAlgorithmException while " + "attempting to hash file name: " + e);
        }
        File tempDir = (File) getServletContext().getAttribute("javax.servlet.context.tempdir");
        return tempDir.getAbsolutePath() + File.separatorChar + hash;
    }
} </s>
<s>class temp {    protected String insertCommand(String command) throws ServletException {
        String digest;
        try {
            MessageDigest md = MessageDigest.getInstance(m_messagedigest_algorithm);
            md.update(command.getBytes());
            byte bytes[] = new byte[20];
            m_random.nextBytes(bytes);
            md.update(bytes);
            digest = bytesToHex(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new ServletException("NoSuchAlgorithmException while " + "attempting to generate graph ID: " + e);
        }
        String id = System.currentTimeMillis() + "-" + digest;
        m_map.put(id, command);
        return id;
    }
} </s>
<s>class temp {    ServerInfo getServerInfo(String key, String protocol) throws InvalidKeyException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, IOException, ClassNotFoundException, IllegalBlockSizeException, BadPaddingException {
        DESedeKeySpec ks = new DESedeKeySpec(Base64.decode(key));
        SecretKeyFactory skf = SecretKeyFactory.getInstance("DESede");
        SecretKey sk = skf.generateSecret(ks);
        Cipher cipher = Cipher.getInstance("DESede");
        cipher.init(Cipher.DECRYPT_MODE, sk);
        ClassLoader cl = this.getClass().getClassLoader();
        URL url = cl.getResource(protocol + ".sobj");
        JarURLConnection jc = (JarURLConnection) url.openConnection();
        ObjectInputStream os = new ObjectInputStream(jc.getInputStream());
        SealedObject so = (SealedObject) os.readObject();
        return (ServerInfo) so.getObject(cipher);
    }
} </s>
<s>class temp {    public PhoneSetImpl(URL url) throws IOException {
        BufferedReader reader;
        String line;
        phonesetMap = new HashMap();
        reader = new BufferedReader(new InputStreamReader(url.openStream()));
        line = reader.readLine();
        lineCount++;
        while (line != null) {
            if (!line.startsWith("***")) {
                parseAndAdd(line);
            }
            line = reader.readLine();
        }
        reader.close();
    }
} </s>
<s>class temp {    private void createWikiPages(WikiContext context) throws PluginException {
        OntologyWikiPageName owpn = new OntologyWikiPageName(omemo.getFormDataAlias().toUpperCase(), omemo.getFormDataVersionDate());
        String wikiPageFullFileName = WikiPageName2FullFileName(context, owpn.toString());
        String rdfFileNameWithPath = getWorkDir(context) + File.separator + owpn.toFileName();
        FileOutputStream fos = null;
        FileInputStream fis = null;
        try {
            fos = new FileOutputStream(wikiPageFullFileName);
            fis = new FileInputStream(rdfFileNameWithPath);
            InfoExtractor infoe = new InfoExtractor(fis, omemo.getFormDataNS(), omemo.getFormDataOntLang());
            infoe.writePage(getWorkDir(context), owpn, Omemo.checksWikiPageName);
            fis.close();
            fos.close();
        } catch (Exception e) {
            log.error("Can not read local rdf file or can not write wiki page");
            throw new PluginException("Error creating wiki pages. See logs");
        }
    }
} </s>
<s>class temp {    public static String getSignature(String s) {
        try {
            final AsciiEncoder coder = new AsciiEncoder();
            final MessageDigest msgDigest = MessageDigest.getInstance("MD5");
            msgDigest.update(s.getBytes("UTF-8"));
            final byte[] digest = msgDigest.digest();
            return coder.encode(digest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            throw new IllegalStateException();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            throw new IllegalStateException();
        }
    }
} </s>
<s>class temp {    public static byte[] request(String remoteUrl, boolean keepalive) throws Exception {
        Log.d(TAG, String.format("started request(remote=%s)", remoteUrl));
        Process.setThreadPriority(Process.THREAD_PRIORITY_LOWEST);
        byte[] buffer = new byte[1024];
        URL url = new URL(remoteUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setAllowUserInteraction(false);
        connection.setRequestProperty("Viewer-Only-Client", "1");
        connection.setRequestProperty("Client-Daap-Version", "3.10");
        connection.setRequestProperty("Accept-Encoding", "gzip, deflate");
        if (!keepalive) {
            connection.setConnectTimeout(1200000);
            connection.setReadTimeout(1200000);
        } else {
            connection.setReadTimeout(0);
        }
        connection.connect();
        if (connection.getResponseCode() >= HttpURLConnection.HTTP_UNAUTHORIZED) throw new RequestException("HTTP Error Response Code: " + connection.getResponseCode(), connection.getResponseCode());
        String encoding = connection.getContentEncoding();
        InputStream inputStream = null;
        if (encoding != null && encoding.equalsIgnoreCase("gzip")) {
            inputStream = new GZIPInputStream(connection.getInputStream());
        } else if (encoding != null && encoding.equalsIgnoreCase("deflate")) {
            inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true));
        } else {
            inputStream = connection.getInputStream();
        }
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try {
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                os.write(buffer, 0, bytesRead);
            }
        } finally {
            if (os != null) {
                os.flush();
                os.close();
            }
            if (inputStream != null) {
                inputStream.close();
            }
        }
        return os.toByteArray();
    }
} </s>
<s>class temp {    @Override
    public void doHandler(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String directURL = request.getRequestURL().toString();
        response.setCharacterEncoding("gbk");
        PrintWriter out = response.getWriter();
        try {
            directURL = urlTools.urlFilter(directURL, true);
            URL url = new URL(directURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), "gbk"));
            String line;
            while ((line = in.readLine()) != null) {
                out.println(line);
            }
            in.close();
        } catch (Exception e) {
            out.println("file not find");
        }
        out.flush();
    }
} </s>
<s>class temp {    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!sourceFile.exists()) {
            return;
        }
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        source = new FileInputStream(sourceFile).getChannel();
        destination = new FileOutputStream(destFile).getChannel();
        if (destination != null && source != null) {
            destination.transferFrom(source, 0, source.size());
        }
        if (source != null) {
            source.close();
        }
        if (destination != null) {
            destination.close();
        }
    }
} </s>
<s>class temp {    public static int sendButton(String url, String id, String command) throws ClientProtocolException, IOException {
        String connectString = url + "/rest/button/" + id + "/" + command;
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost(connectString);
        HttpResponse response = client.execute(post);
        int code = response.getStatusLine().getStatusCode();
        return code;
    }
} </s>
<s>class temp {    private void readFromStorableInput(String filename) {
        try {
            URL url = new URL(getCodeBase(), filename);
            InputStream stream = url.openStream();
            StorableInput input = new StorableInput(stream);
            fDrawing.release();
            fDrawing = (Drawing) input.readStorable();
            view().setDrawing(fDrawing);
        } catch (IOException e) {
            initDrawing();
            showStatus("Error:" + e);
        }
    }
} </s>
<s>class temp {    private void readFromObjectInput(String filename) {
        try {
            URL url = new URL(getCodeBase(), filename);
            InputStream stream = url.openStream();
            ObjectInput input = new ObjectInputStream(stream);
            fDrawing.release();
            fDrawing = (Drawing) input.readObject();
            view().setDrawing(fDrawing);
        } catch (IOException e) {
            initDrawing();
            showStatus("Error: " + e);
        } catch (ClassNotFoundException e) {
            initDrawing();
            showStatus("Class not found: " + e);
        }
    }
} </s>
<s>class temp {    private synchronized void persist() {
        Connection conn = null;
        try {
            PoolManager pm = PoolManager.getInstance();
            conn = pm.getConnection(JukeXTrackStore.DB_NAME);
            conn.setAutoCommit(false);
            Statement state = conn.createStatement();
            state.executeUpdate("DELETE FROM PlaylistEntry WHERE playlistid=" + this.id);
            if (this.size() > 0) {
                StringBuffer sql = new StringBuffer();
                sql.append("INSERT INTO PlaylistEntry ( playlistid , trackid , position ) VALUES ");
                int location = 0;
                Iterator i = ll.iterator();
                while (i.hasNext()) {
                    long currTrackID = ((DatabaseObject) i.next()).getId();
                    sql.append('(').append(this.id).append(',').append(currTrackID).append(',').append(location++).append(')');
                    if (i.hasNext()) sql.append(',');
                }
                state.executeUpdate(sql.toString());
            }
            conn.commit();
            conn.setAutoCommit(true);
            state.close();
        } catch (SQLException se) {
            try {
                conn.rollback();
            } catch (SQLException ignore) {
            }
            log.error("Encountered an error persisting a playlist", se);
        } finally {
            try {
                conn.close();
            } catch (SQLException ignore) {
            }
        }
    }
} </s>
<s>class temp {    public void render(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {
        response.setContentType(s_contentType);
        response.setHeader("Cache-control", "no-cache");
        InputStream graphStream = getGraphStream(request);
        OutputStream out = getOutputStream(response);
        IOUtils.copy(graphStream, out);
        out.flush();
    }
} </s>
<s>class temp {    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException("Could not load configuration from " + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
} </s>
<s>class temp {    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, "a.tbcdn.cn");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
} </s>
<s>class temp {    public int procesar() {
        int mas = 0;
        String uriOntologia = "", source = "", uri = "";
        String fichOrigenHTML = "", fichOrigenLN = "";
        String ficheroOutOWL = "";
        md5 firma = null;
        StringTokenV2 entra = null, entra2 = null, entra3 = null;
        FileInputStream lengNat = null;
        BufferedInputStream lengNat2 = null;
        DataInputStream entradaLenguajeNatural = null;
        FileWriter salOWL = null;
        BufferedWriter salOWL2 = null;
        PrintWriter salidaOWL = null;
        String sujeto = "", verbo = "", CD = "", CI = "", fraseOrigen = "";
        StringTokenV2 token2;
        boolean bandera = false;
        OntClass c = null;
        OntClass cBak = null;
        String claseTrabajo = "";
        String nombreClase = "", nombrePropiedad = "", variasPalabras = "";
        int incre = 0, emergencia = 0;
        String lineaSalida = "";
        String[] ontologia = new String[5];
        ontologia[0] = "http://www.criado.info/owl/vertebrados_es.owl#";
        ontologia[1] = "http://www.w3.org/2001/sw/WebOnt/guide-src/wine#";
        ontologia[2] = "http://www.co-ode.org/ontologies/pizza/2005/10/18/pizza.owl#";
        ontologia[3] = "http://www.w3.org/2001/sw/WebOnt/guide-src/food#";
        ontologia[4] = "http://www.daml.org/2001/01/gedcom/gedcom#";
        String[] ontologiaSource = new String[5];
        ontologiaSource[0] = this.directorioMapeo + "\\" + "mapeo_vertebrados_es.xml";
        ontologiaSource[1] = this.directorioMapeo + "\\" + "mapeo_wine_es.xml";
        ontologiaSource[2] = this.directorioMapeo + "\\" + "mapeo_pizza_es.xml";
        ontologiaSource[3] = this.directorioMapeo + "\\" + "mapeo_food_es.xml";
        ontologiaSource[4] = this.directorioMapeo + "\\" + "mapeo_parentesco_es.xml";
        mapeoIdiomas clasesOntologias;
        try {
            if ((entrada = entradaFichero.readLine()) != null) {
                if (entrada.trim().length() > 10) {
                    entrada2 = new StringTokenV2(entrada.trim(), "\"");
                    if (entrada2.isIncluidaSubcadena("<fichero ontologia=")) {
                        ontologiaOrigen = entrada2.getToken(2);
                        fichOrigenHTML = entrada2.getToken(4);
                        fichOrigenLN = entrada2.getToken(6);
                        if (ontologiaOrigen.equals("VERTEBRADOS")) {
                            source = ontologiaSource[0];
                            uriOntologia = ontologia[0];
                        }
                        if (ontologiaOrigen.equals("WINE")) {
                            source = ontologiaSource[1];
                            uriOntologia = ontologia[1];
                        }
                        if (ontologiaOrigen.equals("PIZZA")) {
                            source = ontologiaSource[2];
                            uriOntologia = ontologia[2];
                        }
                        if (ontologiaOrigen.equals("FOOD")) {
                            source = ontologiaSource[3];
                            uriOntologia = ontologia[3];
                        }
                        if (ontologiaOrigen.equals("PARENTESCOS")) {
                            source = ontologiaSource[4];
                            uriOntologia = ontologia[4];
                        }
                        firma = new md5(uriOntologia, false);
                        clasesOntologias = new mapeoIdiomas(source);
                        uri = "";
                        ficheroOutOWL = "";
                        entra2 = new StringTokenV2(fichOrigenHTML, "\\");
                        int numToken = entra2.getNumeroTokenTotales();
                        entra = new StringTokenV2(fichOrigenHTML, " ");
                        if (entra.isIncluidaSubcadena(directorioLocal)) {
                            entra = new StringTokenV2(entra.getQuitar(directorioLocal) + "", " ");
                            uri = entra.getCambiar("\\", "/");
                            uri = entra.getQuitar(entra2.getToken(numToken)) + "";
                            entra3 = new StringTokenV2(entra2.getToken(numToken), ".");
                            ficheroOutOWL = entra3.getToken(1) + "_" + firma.toString() + ".owl";
                            uri = urlPatron + uri + ficheroOutOWL;
                        }
                        entra3 = new StringTokenV2(fichOrigenHTML, ".");
                        ficheroOutOWL = entra3.getToken(1) + "_" + firma.toString() + ".owl";
                        lineaSalida = "<vistasemantica origen=\"" + fichOrigenLN + "\" destino=\"" + uri + "\" />";
                        lengNat = new FileInputStream(fichOrigenLN);
                        lengNat2 = new BufferedInputStream(lengNat);
                        entradaLenguajeNatural = new DataInputStream(lengNat2);
                        salOWL = new FileWriter(ficheroOutOWL);
                        salOWL2 = new BufferedWriter(salOWL);
                        salidaOWL = new PrintWriter(salOWL2);
                        while ((entradaInstancias = entradaLenguajeNatural.readLine()) != null) {
                            sujeto = "";
                            verbo = "";
                            CD = "";
                            CI = "";
                            fraseOrigen = "";
                            if (entradaInstancias.trim().length() > 10) {
                                entrada2 = new StringTokenV2(entradaInstancias.trim(), "\"");
                                if (entrada2.isIncluidaSubcadena("<oracion sujeto=")) {
                                    sujeto = entrada2.getToken(2).trim();
                                    verbo = entrada2.getToken(4).trim();
                                    CD = entrada2.getToken(6).trim();
                                    CI = entrada2.getToken(8).trim();
                                    fraseOrigen = entrada2.getToken(10).trim();
                                    if (sujeto.length() > 0 & verbo.length() > 0 & CD.length() > 0) {
                                        bandera = false;
                                        c = null;
                                        cBak = null;
                                        nombreClase = clasesOntologias.getClaseInstancia(CD);
                                        if (nombreClase.length() > 0) {
                                            bandera = true;
                                        }
                                        if (bandera) {
                                            if (incre == 0) {
                                                salidaOWL.write(" <rdf:RDF        " + "\n");
                                                salidaOWL.write("     xmlns:j.0=\"" + uriOntologia + "\"" + "\n");
                                                salidaOWL.write("     xmlns:protege=\"http://protege.stanford.edu/plugins/owl/protege#\"" + "\n");
                                                salidaOWL.write("     xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"" + "\n");
                                                salidaOWL.write("     xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\"" + "\n");
                                                salidaOWL.write("     xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"" + "\n");
                                                salidaOWL.write("     xmlns:owl=\"http://www.w3.org/2002/07/owl#\"    " + "\n");
                                                salidaOWL.write("     xmlns=\"" + uri + "#\"" + "\n");
                                                salidaOWL.write("   xml:base=\"" + uri + "\">" + "\n");
                                                salidaOWL.write("   <owl:Ontology rdf:about=\"\">" + "\n");
                                                salidaOWL.write("     <owl:imports rdf:resource=\"" + uriOntologia + "\"/>" + "\n");
                                                salidaOWL.write("   </owl:Ontology>" + "\n");
                                                salidaOWL.flush();
                                                salida.write(lineaSalida + "\n");
                                                salida.flush();
                                                incre = 1;
                                            }
                                            salidaOWL.write("    <j.0:" + nombreClase + " rdf:ID=\"" + sujeto.toUpperCase() + "\"/>" + "\n");
                                            salidaOWL.write("    <owl:AllDifferent>" + "\n");
                                            salidaOWL.write("      <owl:distinctMembers rdf:parseType=\"Collection\">" + "\n");
                                            salidaOWL.write("        <" + nombreClase + " rdf:about=\"#" + sujeto.toUpperCase() + "\"/>" + "\n");
                                            salidaOWL.write("      </owl:distinctMembers>" + "\n");
                                            salidaOWL.write("    </owl:AllDifferent>" + "\n");
                                            salidaOWL.flush();
                                            bandera = false;
                                        }
                                    }
                                }
                            }
                        }
                        salidaOWL.write(" </rdf:RDF>" + "\n" + "\n");
                        salidaOWL.write("<!-- Creado por [html2ws]  http://www.luis.criado.org -->" + "\n");
                        salidaOWL.flush();
                    }
                }
                mas = 1;
            } else {
                salida.write("</listaVistasSemanticas>\n");
                salida.flush();
                salida.close();
                bw2.close();
                fw2.close();
                salidaOWL.close();
                entradaFichero.close();
                ent2.close();
                ent1.close();
                mas = -1;
            }
        } catch (Exception e) {
            mas = -2;
            salida.write("No se encuentra: " + fichOrigen + "\n");
            salida.flush();
        }
        return mas;
    }
} </s>
<s>class temp {    private void downloadImage(final String sImgName) {
        if (sImgName != null && sImgName.length() > 0) {
            File f = new File(m_sTargetDir);
            if (f.canWrite()) {
                f = new File(f, sImgName);
                if (!f.exists()) {
                    try {
                        URL url = new URL(m_sCodeBase + '/' + sImgName);
                        BufferedInputStream is = new BufferedInputStream(url.openStream());
                        BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(f));
                        int c;
                        while ((c = is.read()) != -1) {
                            os.write(c);
                        }
                        is.close();
                        os.close();
                    } catch (Exception exc) {
                        System.out.println("TestImagesHelper::downloadImage(): " + exc);
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    private String readDataFromUrl(URL url) throws IOException {
        InputStream inputStream = null;
        InputStreamReader streamReader = null;
        BufferedReader in = null;
        StringBuffer data = new StringBuffer();
        try {
            inputStream = url.openStream();
            streamReader = new InputStreamReader(inputStream);
            in = new BufferedReader(streamReader);
            String inputLine;
            while ((inputLine = in.readLine()) != null) data.append(inputLine);
        } finally {
            if (in != null) {
                in.close();
            }
            if (streamReader != null) {
                streamReader.close();
            }
            if (inputStream != null) {
                inputStream.close();
            }
        }
        return data.toString();
    }
} </s>
<s>class temp {    public void command() {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(dir));
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            filename = chooser.getSelectedFile().getAbsolutePath();
            String f2 = "";
            for (int i = 0; i < filename.length(); ++i) {
                if (filename.charAt(i) != '\\') {
                    f2 = f2 + filename.charAt(i);
                } else f2 = f2 + '/';
            }
            filename = f2;
            if (filename.contains(dir)) {
                filename = filename.substring(dir.length());
            } else {
                try {
                    FileChannel srcFile = new FileInputStream(filename).getChannel();
                    FileChannel dstFile;
                    filename = "ueditor_files/" + chooser.getSelectedFile().getName();
                    File newFile;
                    if (!(newFile = new File(dir + filename)).createNewFile()) {
                        dstFile = new FileInputStream(dir + filename).getChannel();
                        newFile = null;
                    } else {
                        dstFile = new FileOutputStream(newFile).getChannel();
                    }
                    dstFile.transferFrom(srcFile, 0, srcFile.size());
                    srcFile.close();
                    dstFile.close();
                    System.out.println("file copyed to: " + dir + filename);
                } catch (Exception e) {
                    e.printStackTrace();
                    label.setIcon(InputText.iconX);
                    filename = null;
                    for (Group g : groups) {
                        g.updateValidity(true);
                    }
                    return;
                }
            }
            label.setIcon(InputText.iconV);
            for (Group g : groups) {
                g.updateValidity(true);
            }
        }
    }
} </s>
<s>class temp {    private void insertContent(ImageData imageData, Element element) {
        URL url = getClass().getResource(imageData.getURL());
        try {
            File imageFileRead = new File(url.toURI());
            FileInputStream inputStream = new FileInputStream(imageFileRead);
            String imageFileWritePath = "htmlReportFiles" + "/" + imageData.getURL();
            File imageFileWrite = new File(imageFileWritePath);
            String[] filePathTokens = imageFileWritePath.split("/");
            String directoryPathCreate = filePathTokens[0];
            int i = 1;
            while (i < filePathTokens.length - 1) {
                directoryPathCreate = directoryPathCreate + "/" + filePathTokens[i];
                i++;
            }
            File fileDirectoryPathCreate = new File(directoryPathCreate);
            if (!fileDirectoryPathCreate.exists()) {
                boolean successfulFileCreation = fileDirectoryPathCreate.mkdirs();
                if (successfulFileCreation == false) {
                    throw new ExplanationException("Unable to create folders in path " + directoryPathCreate);
                }
            }
            FileOutputStream fileOutputStream = new FileOutputStream(imageFileWrite);
            byte[] data = new byte[1024];
            int readDataNumberOfBytes = 0;
            while (readDataNumberOfBytes != -1) {
                readDataNumberOfBytes = inputStream.read(data, 0, data.length);
                if (readDataNumberOfBytes != -1) {
                    fileOutputStream.write(data, 0, readDataNumberOfBytes);
                }
            }
            inputStream.close();
            fileOutputStream.close();
        } catch (Exception ex) {
            throw new ExplanationException(ex.getMessage());
        }
        String caption = imageData.getCaption();
        Element imageElement = element.addElement("img");
        if (imageData.getURL().charAt(0) != '/') imageElement.addAttribute("src", "htmlReportFiles" + "/" + imageData.getURL()); else imageElement.addAttribute("src", "htmlReportFiles" + imageData.getURL());
        imageElement.addAttribute("alt", "image not available");
        if (caption != null) {
            element.addElement("br");
            element.addText(caption);
        }
    }
} </s>
<s>class temp {    public static void get_PK_data() {
        try {
            FileWriter file_writer = new FileWriter("xml_data/PK_data_dump.xml");
            BufferedWriter file_buffered_writer = new BufferedWriter(file_writer);
            URL fdt = new URL("http://opendata.5t.torino.it/get_pk");
            URLConnection url_connection = fdt.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String input_line;
            int num_lines = 0;
            while ((input_line = in.readLine()) != null) {
                file_buffered_writer.write(input_line + "\n");
                num_lines++;
            }
            System.out.println("Parking :: Writed " + num_lines + " lines.");
            in.close();
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
} </s>
<s>class temp {    private static String makeMD5(String str) {
        byte[] bytes = new byte[32];
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(str.getBytes("iso-8859-1"), 0, str.length());
            bytes = md.digest();
        } catch (Exception e) {
            return null;
        }
        return convertToHex(bytes);
    }
} </s>
<s>class temp {    public int addDecisionInstruction(int condition, String frameSlot, String linkName, int objectId, String attribute, int positive, int negative) throws FidoDatabaseException, ObjectNotFoundException, InstructionNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                if ((condition == ConditionalOperatorTable.CONTAINS_LINK) || (condition == ConditionalOperatorTable.NOT_CONTAINS_LINK)) {
                    ObjectTable ot = new ObjectTable();
                    if (ot.contains(objectId) == false) throw new ObjectNotFoundException(objectId);
                }
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (contains(stmt, positive) == false) throw new InstructionNotFoundException(positive);
                if (contains(stmt, negative) == false) throw new InstructionNotFoundException(negative);
                String sql = "insert into Instructions (Type, Operator, FrameSlot, LinkName, ObjectId, AttributeName) " + "values (2, " + condition + ", '" + frameSlot + "', '" + linkName + "', " + objectId + ", '" + attribute + "')";
                stmt.executeUpdate(sql);
                int id = getCurrentId(stmt);
                InstructionGroupTable groupTable = new InstructionGroupTable();
                groupTable.deleteInstruction(stmt, id);
                if (positive != -1) groupTable.addInstructionAt(stmt, id, 1, positive);
                if (negative != -1) groupTable.addInstructionAt(stmt, id, 2, negative);
                conn.commit();
                return id;
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {    public void modifyDecisionInstruction(int id, int condition, String frameSlot, String linkName, int objectId, String attribute, int positive, int negative) throws FidoDatabaseException, ObjectNotFoundException, InstructionNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                if ((condition == ConditionalOperatorTable.CONTAINS_LINK) || (condition == ConditionalOperatorTable.NOT_CONTAINS_LINK)) {
                    ObjectTable ot = new ObjectTable();
                    if (ot.contains(objectId) == false) throw new ObjectNotFoundException(objectId);
                }
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (contains(stmt, positive) == false) throw new InstructionNotFoundException(positive);
                if (contains(stmt, negative) == false) throw new InstructionNotFoundException(negative);
                String sql = "update Instructions set Operator = " + condition + ", " + "                        FrameSlot = '" + frameSlot + "', " + "                        LinkName = '" + linkName + "', " + "                        ObjectId = " + objectId + ", " + "                        AttributeName = '" + attribute + "' " + "where InstructionId = " + id;
                stmt.executeUpdate(sql);
                InstructionGroupTable groupTable = new InstructionGroupTable();
                groupTable.deleteInstruction(stmt, id);
                if (positive != -1) groupTable.addInstructionAt(stmt, id, 1, positive);
                if (negative != -1) groupTable.addInstructionAt(stmt, id, 2, negative);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {    public int addCollectionInstruction() throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                String sql = "insert into Instructions (Type, Operator) " + "values (1, 0)";
                conn = fido.util.FidoDataSource.getConnection();
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);
                return getCurrentId(stmt);
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {    public void delete(int id) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                String sql = "delete from Instructions where InstructionId = " + id;
                stmt.executeUpdate(sql);
                sql = "delete from InstructionGroups where InstructionId = " + id;
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {    public ChatClient registerPlayer(int playerId, String playerLogin) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.reset();
        md.update(playerLogin.getBytes("UTF-8"), 0, playerLogin.length());
        byte[] accountToken = md.digest();
        byte[] token = generateToken(accountToken);
        ChatClient chatClient = new ChatClient(playerId, token);
        players.put(playerId, chatClient);
        return chatClient;
    }
} </s>
<s>class temp {    private String encryptPassword(String password) {
        String result = password;
        if (password != null) {
            try {
                MessageDigest md5 = MessageDigest.getInstance("MD5");
                md5.reset();
                md5.update(password.getBytes());
                BigInteger hash = new BigInteger(1, md5.digest());
                result = hash.toString(16);
                if ((result.length() % 2) != 0) {
                    result = "0" + result;
                }
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                getLogger().error("Cannot generate MD5", e);
            }
        }
        return result;
    }
} </s>
<s>class temp {    private int saveToTempTable(ArrayList cons, String tempTableName, boolean truncateFirst) throws SQLException {
        if (truncateFirst) {
            this.executeUpdate("TRUNCATE TABLE " + tempTableName);
            Categories.dataDb().debug("TABLE " + tempTableName + " TRUNCATED.");
        }
        PreparedStatement ps = null;
        int rows = 0;
        try {
            String insert = "INSERT INTO " + tempTableName + " VALUES (?)";
            ps = this.conn.prepareStatement(insert);
            for (int i = 0; i < cons.size(); i++) {
                ps.setLong(1, ((Long) cons.get(i)).longValue());
                rows = ps.executeUpdate();
                if ((i % 500) == 0) {
                    this.conn.commit();
                }
            }
            this.conn.commit();
        } catch (SQLException sqle) {
            this.conn.rollback();
            throw sqle;
        } finally {
            if (ps != null) {
                ps.close();
            }
        }
        return rows;
    }
} </s>
<s>class temp {    public static void copyFile(File sourceFile, File destFile, boolean overwrite) throws IOException, DirNotFoundException, FileNotFoundException, FileExistsAlreadyException {
        File destDir = new File(destFile.getParent());
        if (!destDir.exists()) {
            throw new DirNotFoundException(destDir.getAbsolutePath());
        }
        if (!sourceFile.exists()) {
            throw new FileNotFoundException(sourceFile.getAbsolutePath());
        }
        if (!overwrite && destFile.exists()) {
            throw new FileExistsAlreadyException(destFile.getAbsolutePath());
        }
        FileInputStream in = new FileInputStream(sourceFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[8 * 1024];
        int count = 0;
        do {
            out.write(buffer, 0, count);
            count = in.read(buffer, 0, buffer.length);
        } while (count != -1);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    private boolean verifyPassword(String password, byte[] hash) {
        boolean returnValue = false;
        try {
            MessageDigest msgDigest = MessageDigest.getInstance("SHA-1");
            msgDigest.update(password.getBytes("UTF-8"));
            byte[] digest = msgDigest.digest();
            returnValue = Arrays.equals(hash, digest);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(AuthentificationState.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(AuthentificationState.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnValue;
    }
} </s>
<s>class temp {    @Override
    public void doExecute(String[] args) {
        if (args.length != 2) {
            printUsage();
        } else {
            int fileNo = 0;
            try {
                fileNo = Integer.parseInt(args[1]) - 1;
            } catch (NumberFormatException e) {
                printUsage();
                return;
            }
            if (fileNo < 0) {
                printUsage();
                return;
            }
            StorageFile[] files = (StorageFile[]) ctx.getRemoteDir().listFiles();
            try {
                StorageFile file = files[fileNo];
                File outFile = getOutFile(file);
                FileOutputStream out = new FileOutputStream(outFile);
                InputStream in = file.openStream();
                IOUtils.copy(in, out);
                IOUtils.closeQuietly(out);
                afterSave(outFile);
                if (outFile.exists()) {
                    print("File written to: " + outFile.getAbsolutePath());
                }
            } catch (IOException e) {
                printError("Failed to load file. " + e.getMessage());
            } catch (Exception e) {
                printUsage();
                return;
            }
        }
    }
} </s>
<s>class temp {    static InputStream getUrlStream(String url) throws IOException {
        System.out.print("getting : " + url + " ... ");
        long start = System.currentTimeMillis();
        URLConnection c = new URL(url).openConnection();
        InputStream is = c.getInputStream();
        System.out.print((System.currentTimeMillis() - start) + "ms\n");
        return is;
    }
} </s>
<s>class temp {    public static void copy(FileInputStream in, File destination) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = in.getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            if (srcChannel != null) {
                srcChannel.close();
            }
            if (dstChannel != null) {
                dstChannel.close();
            }
        }
    }
} </s>
<s>class temp {    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error: " + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
} </s>
<s>class temp {    public static void copyFile(String fromFile, String toFile) {
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
} </s>
<s>class temp {    public boolean executeUpdate(String strSql) throws SQLException {
        getConnection();
        boolean flag = false;
        stmt = con.createStatement();
        logger.info("###############::ÊâßË°åSQLËØ≠Âè•Êìç‰Ωú(Êõ¥Êñ∞Êï∞ÊçÆ Êó†ÂèÇÊï∞):" + strSql);
        try {
            if (0 < stmt.executeUpdate(strSql)) {
                close_DB_Object();
                flag = true;
                con.commit();
            }
        } catch (SQLException ex) {
            logger.info("###############Error DBManager Line126::ÊâßË°åSQLËØ≠Âè•Êìç‰Ωú(Êõ¥Êñ∞Êï∞ÊçÆ Êó†ÂèÇÊï∞):" + strSql + "Â§±Ë¥•!");
            flag = false;
            con.rollback();
            throw ex;
        }
        return flag;
    }
} </s>
<s>class temp {    public boolean executeUpdate(String strSql, HashMap<Integer, Object> prams) throws SQLException, ClassNotFoundException {
        getConnection();
        boolean flag = false;
        try {
            pstmt = con.prepareStatement(strSql);
            setParamet(pstmt, prams);
            logger.info("###############::ÊâßË°åSQLËØ≠Âè•Êìç‰Ωú(Êõ¥Êñ∞Êï∞ÊçÆ ÊúâÂèÇÊï∞):" + strSql);
            if (0 < pstmt.executeUpdate()) {
                close_DB_Object();
                flag = true;
                con.commit();
            }
        } catch (SQLException ex) {
            logger.info("###############Error DBManager Line121::ÊâßË°åSQLËØ≠Âè•Êìç‰Ωú(Êõ¥Êñ∞Êï∞ÊçÆ Êó†ÂèÇÊï∞):" + strSql + "Â§±Ë¥•!");
            flag = false;
            con.rollback();
            throw ex;
        } catch (ClassNotFoundException ex) {
            logger.info("###############Error DBManager Line152::ÊâßË°åSQLËØ≠Âè•Êìç‰Ωú(Êõ¥Êñ∞Êï∞ÊçÆ Êó†ÂèÇÊï∞):" + strSql + "Â§±Ë¥•! ÂèÇÊï∞ËÆæÁΩÆÁ±ªÂûãÈîôËØØ!");
            con.rollback();
            throw ex;
        }
        return flag;
    }
} </s>
<s>class temp {    public void run() {
        FileInputStream src;
        FileOutputStream dest;
        try {
            dest = new FileOutputStream(srcName);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return;
        }
        FileChannel destC = dest.getChannel();
        FileChannel srcC;
        ByteBuffer buf = ByteBuffer.allocateDirect(BUFFER_SIZE);
        try {
            int fileNo = 0;
            while (true) {
                int i = 1;
                String destName = srcName + "_" + fileNo;
                src = new FileInputStream(destName);
                srcC = src.getChannel();
                while ((i > 0)) {
                    i = srcC.read(buf);
                    buf.flip();
                    destC.write(buf);
                    buf.compact();
                }
                srcC.close();
                src.close();
                fileNo++;
            }
        } catch (IOException e1) {
            e1.printStackTrace();
            return;
        }
    }
} </s>
<s>class temp {    @Override
    public List<SheetFullName> importSheets(INetxiliaSystem workbookProcessor, WorkbookId workbookName, URL url, IProcessingConsole console) throws ImportException {
        try {
            return importSheets(workbookProcessor, workbookName, url.openStream(), console);
        } catch (Exception e) {
            throw new ImportException(url, "Cannot open workbook:" + e, e);
        }
    }
} </s>
<s>class temp {    public void copy(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream srcStream = new FileInputStream(src);
        FileOutputStream destStream = new FileOutputStream(dest);
        FileChannel srcChannel = srcStream.getChannel();
        FileChannel destChannel = destStream.getChannel();
        srcChannel.transferTo(0, srcChannel.size(), destChannel);
        destChannel.close();
        srcChannel.close();
        destStream.close();
        srcStream.close();
    }
} </s>
<s>class temp {    public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException {
        List<Class<?>> classes = new LinkedList<Class<?>>();
        for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) {
            Log.verbose("Checking classpath item " + url);
            if (!url.getPath().toLowerCase().endsWith("/")) {
                try {
                    JarInputStream jis = new JarInputStream(url.openStream());
                    JarEntry je;
                    while ((je = jis.getNextJarEntry()) != null) {
                        Log.verbose("Checking resource " + je.getName());
                        try {
                            if (je.getName().endsWith(".class")) {
                                Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""));
                                if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) {
                                    Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName());
                                    classes.add(c);
                                }
                            }
                        } catch (Error e) {
                        } catch (RuntimeException re) {
                        } catch (Exception e) {
                        }
                    }
                } catch (Exception e) {
                    Log.error(e);
                }
            } else if (url.getPath().endsWith("/")) {
                File root = new File(url.getPath());
                for (File file : FileFunctions.getFileTree(root)) {
                    try {
                        if (file.getName().toLowerCase().endsWith(".class")) {
                            Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""));
                            if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) {
                                Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName());
                                classes.add(c);
                            }
                        }
                    } catch (Exception e) {
                        Log.error(e);
                    }
                }
            }
        }
        return classes;
    }
} </s>
<s>class temp {    public String htmlContentSimple(String urlStr, String charset) {
        StringBuffer html = new StringBuffer();
        URL url = null;
        BufferedReader reader = null;
        try {
            url = new URL(urlStr);
            reader = new BufferedReader(new InputStreamReader(url.openStream(), charset));
            String line;
            while ((line = reader.readLine()) != null) {
                html.append(line).append("\r\n");
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) try {
                reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return html.toString();
    }
} </s>
<s>class temp {    public static String encryptPassword(String password) {
        String hash = null;
        try {
            MessageDigest md = null;
            md = MessageDigest.getInstance("SHA");
            md.update(password.getBytes("UTF-8"));
            byte raw[] = md.digest();
            hash = Base64.encode(raw, false);
        } catch (Exception e) {
        }
        return hash;
    }
} </s>
<s>class temp {    @Override
    protected Map<String, Definition> loadDefinitionsFromURL(URL url) {
        Map<String, Definition> defsMap = null;
        try {
            URLConnection connection = url.openConnection();
            connection.connect();
            lastModifiedDates.put(url.toExternalForm(), connection.getLastModified());
            defsMap = reader.read(connection.getInputStream());
        } catch (IOException e) {
            if (log.isDebugEnabled()) {
                log.debug("File " + null + " not found, continue [" + e.getMessage() + "]");
            }
        }
        return defsMap;
    }
} </s>
<s>class temp {    public String getScenarioData(String urlForSalesData) throws IOException, Exception {
        InputStream inputStream = null;
        BufferedReader bufferedReader = null;
        DataInputStream input = null;
        StringBuffer sBuf = new StringBuffer();
        Proxy proxy;
        if (httpWebProxyServer != null && Integer.toString(httpWebProxyPort) != null) {
            SocketAddress address = new InetSocketAddress(httpWebProxyServer, httpWebProxyPort);
            proxy = new Proxy(Proxy.Type.HTTP, address);
        } else {
            proxy = null;
        }
        proxy = null;
        URL url;
        try {
            url = new URL(urlForSalesData);
            HttpURLConnection httpUrlConnection;
            if (proxy != null) httpUrlConnection = (HttpURLConnection) url.openConnection(proxy); else httpUrlConnection = (HttpURLConnection) url.openConnection();
            httpUrlConnection.setDoInput(true);
            httpUrlConnection.setRequestMethod("GET");
            String name = rb.getString("WRAP_NAME");
            String password = rb.getString("WRAP_PASSWORD");
            Credentials simpleAuthCrentials = new Credentials(TOKEN_TYPE.SimpleApiAuthToken, name, password);
            ACSTokenProvider tokenProvider = new ACSTokenProvider(httpWebProxyServer, httpWebProxyPort, simpleAuthCrentials);
            String requestUriStr1 = "https://" + solutionName + "." + acmHostName + "/" + serviceName;
            String appliesTo1 = rb.getString("SIMPLEAPI_APPLIES_TO");
            String token = tokenProvider.getACSToken(requestUriStr1, appliesTo1);
            httpUrlConnection.addRequestProperty("token", "WRAPv0.9 " + token);
            httpUrlConnection.addRequestProperty("solutionName", solutionName);
            httpUrlConnection.connect();
            if (httpUrlConnection.getResponseCode() == HttpServletResponse.SC_UNAUTHORIZED) {
                List<TestSalesOrderService> salesOrderServiceBean = new ArrayList<TestSalesOrderService>();
                TestSalesOrderService response = new TestSalesOrderService();
                response.setResponseCode(HttpServletResponse.SC_UNAUTHORIZED);
                response.setResponseMessage(httpUrlConnection.getResponseMessage());
                salesOrderServiceBean.add(response);
            }
            inputStream = httpUrlConnection.getInputStream();
            input = new DataInputStream(inputStream);
            bufferedReader = new BufferedReader(new InputStreamReader(input));
            String str;
            while (null != ((str = bufferedReader.readLine()))) {
                sBuf.append(str);
            }
            String responseString = sBuf.toString();
            return responseString;
        } catch (MalformedURLException e) {
            throw e;
        } catch (IOException e) {
            throw e;
        }
    }
} </s>
<s>class temp {    @HttpAction(name = "map.saveOrUpdate", method = { HttpAction.Method.post }, responseType = "text/plain")
    @HttpAuthentication(method = { HttpAuthentication.Method.WSSE })
    public String saveOrUpdate(FileItem file, User user, MapOriginal map) throws HttpRpcException {
        File tmpFile;
        GenericDAO<MapOriginal> mapDao = DAOFactory.createDAO(MapOriginal.class);
        try {
            assert (file != null);
            String jobid = null;
            if (file.getContentType().startsWith("image/")) {
                tmpFile = File.createTempFile("gmap", "img");
                OutputStream out = new FileOutputStream(tmpFile);
                IOUtils.copy(file.getInputStream(), out);
                out.flush();
                out.close();
                map.setState(MapOriginal.MapState.UPLOAD);
                map.setUser(user);
                map.setMapPath(tmpFile.getPath());
                map.setThumbnailUrl("/map/inproc.gif");
                map.setMimeType(file.getContentType());
                mapDao.saveOrUpdate(map);
                jobid = PoolFactory.getClientPool().put(map, TaskState.STATE_MO_FINISH, MapOverrideStrategy.class);
            }
            return jobid;
        } catch (IOException e) {
            logger.error(e);
            throw ERROR_INTERNAL;
        } catch (DAOException e) {
            logger.error(e);
            throw ERROR_INTERNAL;
        }
    }
} </s>
<s>class temp {    public PhoneDurationsImpl(URL url) throws IOException {
        BufferedReader reader;
        String line;
        phoneDurations = new HashMap();
        reader = new BufferedReader(new InputStreamReader(url.openStream()));
        line = reader.readLine();
        while (line != null) {
            if (!line.startsWith("***")) {
                parseAndAdd(line);
            }
            line = reader.readLine();
        }
        reader.close();
    }
} </s>
<s>class temp {    protected String getPasswordHash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            log.error("MD5 algorithm not found", e);
            throw new ServiceException(e);
        }
        md.update(password.getBytes());
        byte[] hash = md.digest();
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < hash.length; i++) {
            buf.append(Integer.toHexString(hash[i] & 0xff));
        }
        return buf.toString();
    }
} </s>
<s>class temp {    public static Node carregaModeloJME(String caminho) {
        try {
            URL urlModelo = ModelUtils.class.getClassLoader().getResource(caminho);
            BufferedInputStream leitorBinario = new BufferedInputStream(urlModelo.openStream());
            Node modelo = (Node) BinaryImporter.getInstance().load(leitorBinario);
            modelo.setModelBound(new BoundingBox());
            modelo.updateModelBound();
            return modelo;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public void prepareOutput(HttpServletRequest req) {
        EaasyStreet.logTrace(METHOD_IN + className + OUTPUT_METHOD);
        super.prepareOutput(req);
        String content = Constants.EMPTY_STRING;
        String rawContent = null;
        List parts = null;
        try {
            URL url = new URL(sourceUrl);
            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = "";
            StringBuffer buffer = new StringBuffer();
            while ((line = input.readLine()) != null) {
                buffer.append(line);
                buffer.append(Constants.LF);
            }
            rawContent = buffer.toString();
        } catch (FileNotFoundException nf) {
            req.setAttribute(Constants.RAK_SYSTEM_ACTION, Constants.SYSTEM_ACTION_BACK);
            EaasyStreet.handleSafeEvent(req, new Event(Constants.EAA0012I, new String[] { "URL", nf.getMessage(), nf.toString() }));
        } catch (Exception e) {
            req.setAttribute(Constants.RAK_SYSTEM_ACTION, Constants.SYSTEM_ACTION_BACK);
            EaasyStreet.handleSafeEvent(req, new Event(Constants.EAA0012I, new String[] { "URL", e.getMessage(), e.toString() }));
        }
        if (rawContent != null) {
            if (startDelimiter != null) {
                parts = StringUtils.split(rawContent, startDelimiter);
                if (parts != null && parts.size() > 1) {
                    rawContent = (String) parts.get(1);
                    if (parts.size() > 2) {
                        for (int x = 2; x < parts.size(); x++) {
                            rawContent += startDelimiter;
                            rawContent += parts.get(x);
                        }
                    }
                } else {
                    rawContent = null;
                }
            }
        }
        if (rawContent != null) {
            if (endDelimiter != null) {
                parts = StringUtils.split(rawContent, endDelimiter);
                if (parts != null && parts.size() > 0) {
                    rawContent = (String) parts.get(0);
                } else {
                    rawContent = null;
                }
            }
        }
        if (rawContent != null) {
            if (replacementValues != null && !replacementValues.isEmpty()) {
                for (int x = 0; x < replacementValues.size(); x++) {
                    LabelValueBean bean = (LabelValueBean) replacementValues.get(x);
                    rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue());
                }
            }
        }
        if (rawContent != null) {
            content = rawContent;
        }
        req.setAttribute(getFormName(), content);
        EaasyStreet.logTrace(METHOD_OUT + className + OUTPUT_METHOD);
    }
} </s>
<s>class temp {    public static boolean downFile(String url, String username, String password, String remotePath, Date DBLastestDate, String localPath) {
        File dFile = new File(localPath);
        if (!dFile.exists()) {
            dFile.mkdir();
        }
        boolean success = false;
        FTPClient ftp = new FTPClient();
        ftp.setConnectTimeout(connectTimeout);
        System.out.println("FTP begin!!");
        try {
            int reply;
            ftp.connect(url);
            ftp.login(username, password);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                return success;
            }
            ftp.changeWorkingDirectory(remotePath);
            String[] filesName = ftp.listNames();
            if (DBLastestDate == null) {
                System.out.println(" ÂàùÊ¨°‰∏ãËΩΩÔºåÂÖ®ÈÉ®‰∏ãËΩΩ ");
                for (String string : filesName) {
                    if (!string.matches("[0-9]{12}")) {
                        continue;
                    }
                    File localFile = new File(localPath + "/" + string);
                    OutputStream is = new FileOutputStream(localFile);
                    ftp.retrieveFile(string, is);
                    is.close();
                }
            } else {
                System.out.println(" Âä†‰∏Ä‰∏ãËΩΩ ");
                Date date = DBLastestDate;
                long ldate = date.getTime();
                Date nowDate = new Date();
                String nowDateStr = Constants.DatetoString(nowDate, Constants.Time_template_LONG);
                String fileName;
                do {
                    ldate += 60 * 1000;
                    Date converterDate = new Date(ldate);
                    fileName = Constants.DatetoString(converterDate, Constants.Time_template_LONG);
                    File localFile = new File(localPath + "/" + fileName);
                    OutputStream is = new FileOutputStream(localFile);
                    if (!ftp.retrieveFile(fileName, is)) {
                        localFile.delete();
                    }
                    is.close();
                } while (fileName.compareTo(nowDateStr) < 0);
            }
            ftp.logout();
            success = true;
        } catch (IOException e) {
            System.out.println("FTP timeout return");
            e.printStackTrace();
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                }
            }
        }
        return success;
    }
} </s>
<s>class temp {    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
} </s>
<s>class temp {    public static String CreateHash(String s) {
        String str = s.toString();
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException("String cannot be null or empty");
        }
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append("0" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return (hexString.toString());
    }
} </s>
<s>class temp {    public static String getHash(String uri) throws NoSuchAlgorithmException {
        MessageDigest mDigest = MessageDigest.getInstance("MD5");
        mDigest.update(uri.getBytes());
        byte d[] = mDigest.digest();
        StringBuffer hash = new StringBuffer();
        for (int i = 0; i < d.length; i++) {
            hash.append(Integer.toHexString(0xFF & d[i]));
        }
        return hash.toString();
    }
} </s>
<s>class temp {    public DoSearch(String searchType, String searchString) {
        String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerDoSearch";
        String rvalue = "";
        String filename = dms_home + FS + "temp" + FS + username + "search.xml";
        try {
            String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + key + "&search=" + URLEncoder.encode(searchString, "UTF-8") + "&searchtype=" + URLEncoder.encode(searchType, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "search.xml";
            ;
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName("entry");
            int num = nodelist.getLength();
            searchDocs = new String[num][3];
            searchDocImageName = new String[num];
            searchDocsToolTip = new String[num];
            for (int i = 0; i < num; i++) {
                searchDocs[i][0] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), "filename");
                searchDocs[i][1] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), "project");
                searchDocs[i][2] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), "documentid");
                searchDocImageName[i] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), "imagename");
                searchDocsToolTip[i] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), "description");
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (Exception ex) {
            System.out.println(ex);
        }
        System.out.println(rvalue);
        if (rvalue.equalsIgnoreCase("yes")) {
        }
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public String getUser() {
        try {
            HttpGet get = new HttpGet("http://twemoi.status.net/api/account/verify_credentials.xml");
            consumer.sign(get);
            HttpClient client = new DefaultHttpClient();
            HttpResponse response = client.execute(get);
            if (response != null) {
                int statusCode = response.getStatusLine().getStatusCode();
                if (statusCode != 200) {
                    this.enviarMensaje("Error: Usuario no autenticado en la red de Status");
                    return "";
                }
                StringBuffer sBuf = new StringBuffer();
                String linea;
                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), "UTF-8"));
                while ((linea = reader.readLine()) != null) {
                    sBuf.append(linea);
                }
                reader.close();
                response.getEntity().consumeContent();
                get.abort();
                String salida = sBuf.toString();
                String user_name = salida.split("</screen_name>")[0].split("<screen_name>")[1];
                return user_name;
            }
        } catch (UnsupportedEncodingException e) {
            this.enviarMensaje("Error: Usuario no autenticado en la red de Status");
        } catch (IOException e) {
            this.enviarMensaje("Error: Usuario no autenticado en la red de Status");
        } catch (OAuthMessageSignerException e) {
            this.enviarMensaje("Error: Usuario no autenticado en la red de Status");
        } catch (OAuthExpectationFailedException e) {
            this.enviarMensaje("Error: Usuario no autenticado en la red de Status");
        } catch (OAuthCommunicationException e) {
            this.enviarMensaje("Error: Usuario no autenticado en la red de Status");
        }
        return null;
    }
} </s>
<s>class temp {    protected String getOldHash(String text) {
        String hash = null;
        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(text.getBytes("UTF-8"));
            byte[] digestedBytes = md.digest();
            hash = HexUtils.convert(digestedBytes);
        } catch (NoSuchAlgorithmException e) {
            log.log(Level.SEVERE, "Error creating SHA password hash:" + e.getMessage());
            hash = text;
        } catch (UnsupportedEncodingException e) {
            log.log(Level.SEVERE, "UTF-8 not supported!?!");
        }
        return hash;
    }
} </s>
<s>class temp {        public void viewFile(int file_nx) {
            FTPClient ftp = new FTPClient();
            boolean error = false;
            try {
                int reply;
                ftp.connect("tgftp.nws.noaa.gov");
                ftp.login("anonymous", "");
                Log.d("WXDroid", "Connected to tgftp.nws.noaa.gov.");
                Log.d("WXDroid", ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    System.err.println("FTP server refused connection.");
                    System.exit(1);
                }
                ftp.changeWorkingDirectory("fax");
                Log.d("WXDroid", "working directory: " + ftp.printWorkingDirectory());
                ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
                InputStream img_file = ftp.retrieveFileStream("PYAA10.gif");
                Intent intent = new Intent();
                intent.setClass(WXdroid.this, showProgressFTP.class);
                startActivity(intent);
                String storage_state = Environment.getExternalStorageState();
                if (storage_state.contains("mounted")) {
                    String filepath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/NOAAWX/";
                    File imageDirectory = new File(filepath);
                    File local_file = new File(filepath + "PYAA10.gif");
                    OutputStream out = new FileOutputStream(local_file);
                    byte[] buffer = new byte[1024];
                    int count;
                    while ((count = img_file.read(buffer)) != -1) {
                        if (Thread.interrupted() == true) {
                            String functionName = Thread.currentThread().getStackTrace()[2].getMethodName() + "()";
                            throw new InterruptedException("The function " + functionName + " was interrupted.");
                        }
                        out.write(buffer, 0, count);
                    }
                    showImage();
                    out.flush();
                    out.close();
                    img_file.close();
                    Log.d("WXDroid", "file saved: " + filepath + " " + local_file);
                } else {
                    Log.d("WXDroid", "The SD card is not mounted");
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                error = true;
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                if (ftp.isConnected()) {
                    try {
                        ftp.disconnect();
                    } catch (IOException ioe) {
                    }
                }
            }
        }
} </s>
<s>class temp {    public String getImageURL(String text) {
        String imgURL = "";
        try {
            URL url = new URL("http://images.search.yahoo.com/search/images?p=" + URLEncoder.encode(text));
            URLConnection connection = url.openConnection();
            DataInputStream in = new DataInputStream(connection.getInputStream());
            String line;
            Pattern imgPattern = Pattern.compile("isrc=\"([^\"]*)\"");
            while ((line = in.readLine()) != null) {
                Matcher match = imgPattern.matcher(line);
                if (match.find()) {
                    imgURL = match.group(1);
                    break;
                }
            }
            in.close();
        } catch (Exception e) {
        }
        return imgURL;
    }
} </s>
<s>class temp {    @Override
    public void vote(String urlString, Map<String, String> headData, Map<String, String> paramData) {
        HttpURLConnection httpConn = null;
        try {
            URL url = new URL(urlString);
            httpConn = (HttpURLConnection) url.openConnection();
            String cookies = getCookies(httpConn);
            System.out.println(cookies);
            BufferedReader post = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), "GB2312"));
            String text = null;
            while ((text = post.readLine()) != null) {
                System.out.println(text);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new VoteBeanException("ÁΩëÂùÄ‰∏çÊ≠£Á°Æ", e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new VoteBeanException("‰∏çËÉΩÊâìÂºÄÁΩëÂùÄ", e);
        }
    }
} </s>
<s>class temp {    public List<SatelliteElementSet> parseTLE(String urlString) throws IOException {
        List<SatelliteElementSet> elementSets = new ArrayList<SatelliteElementSet>();
        BufferedReader reader = null;
        try {
            String line = null;
            int i = 0;
            URL url = new URL(urlString);
            String[] lines = new String[3];
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) {
                i++;
                switch(i) {
                    case 1:
                        {
                            lines[0] = line;
                            break;
                        }
                    case 2:
                        {
                            lines[1] = line;
                            break;
                        }
                    case 3:
                        {
                            lines[2] = line;
                            Long catnum = Long.parseLong(StringUtils.strip(lines[1].substring(2, 7)));
                            long setnum = Long.parseLong(StringUtils.strip(lines[1].substring(64, 68)));
                            elementSets.add(new SatelliteElementSet(catnum, lines, setnum, Calendar.getInstance(TZ).getTime()));
                            i = 0;
                            break;
                        }
                    default:
                        {
                            throw new IOException("TLE string did not contain three elements");
                        }
                }
            }
        } finally {
            if (null != reader) {
                reader.close();
            }
        }
        return elementSets;
    }
} </s>
<s>class temp {    public FlickrObject perform(boolean chkResponse) throws FlickrException {
        validate();
        String data = getRequestData();
        OutputStream os = null;
        InputStream is = null;
        try {
            URL url = null;
            try {
                url = new URL(m_url);
            } catch (MalformedURLException mux) {
                IllegalStateException iax = new IllegalStateException();
                iax.initCause(mux);
                throw iax;
            }
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setDoOutput(true);
            con.setRequestMethod("POST");
            os = con.getOutputStream();
            OutputStreamWriter osw = new OutputStreamWriter(os);
            osw.write(data);
            osw.flush();
            is = con.getInputStream();
            return processRespons(is, chkResponse);
        } catch (FlickrException fx) {
            throw fx;
        } catch (IOException iox) {
            throw new FlickrException(iox);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException _) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException _) {
            }
        }
    }
} </s>
<s>class temp {    private final void saveCopy(String source, String destination) {
        BufferedInputStream from = null;
        BufferedOutputStream to = null;
        try {
            from = new BufferedInputStream(new FileInputStream(source));
            to = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[65535];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } catch (Exception e) {
            LogWriter.writeLog("Exception " + e + " copying file");
        }
        try {
            to.close();
            from.close();
        } catch (Exception e) {
            LogWriter.writeLog("Exception " + e + " closing files");
        }
        to = null;
        from = null;
    }
} </s>
<s>class temp {    public final void saveAsCopy(String current_image, String destination) {
        BufferedInputStream from = null;
        BufferedOutputStream to = null;
        String source = temp_dir + key + current_image;
        try {
            from = new BufferedInputStream(new FileInputStream(source));
            to = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[65535];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } catch (Exception e) {
            LogWriter.writeLog("Exception " + e + " copying file");
        }
        try {
            to.close();
            from.close();
        } catch (Exception e) {
            LogWriter.writeLog("Exception " + e + " closing files");
        }
    }
} </s>
<s>class temp {    public static final void copy(String source, String destination) {
        BufferedInputStream from = null;
        BufferedOutputStream to = null;
        try {
            from = new BufferedInputStream(new FileInputStream(source));
            to = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[65535];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } catch (Exception e) {
            LogWriter.writeLog("Exception " + e + " copying file");
        }
        try {
            to.close();
            from.close();
        } catch (Exception e) {
            LogWriter.writeLog("Exception " + e + " closing files");
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".build")) develBuild = line.substring(6).trim(); else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
} </s>
<s>class temp {    public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);
            try {
                length = IOUtils.copyLarge(input, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                System.out.println("new file name: " + file.getName());
                File parent = file.getParentFile();
                System.out.println("parent file: " + file.getParentFile().getName());
                if (!parent.isDirectory()) {
                    parent.mkdirs();
                }
                if (!file.exists()) {
                    temporary.renameTo(file);
                    if (!file.exists()) {
                        throw new IOException("Can not rename " + temporary.getAbsolutePath() + " to " + file.getAbsolutePath() + " (media read only?)");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (file.lastModified() < now) {
                        file.setLastModified(now);
                    }
                }
                if (!file.isFile()) {
                    throw new IOException("Not a file: " + file);
                }
                if (file.length() != length) {
                    throw new IOException(DIGEST + " collision: " + file);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + " not available", e);
        } catch (IOException e) {
            throw new DataStoreException("Could not add record", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
} </s>
<s>class temp {    public static String MD5Digest(String source) {
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance("MD5");
            digest.update(source.getBytes("UTF8"));
            byte[] hash = digest.digest();
            String strHash = byteArrayToHexString(hash);
            return strHash;
        } catch (NoSuchAlgorithmException e) {
            String msg = "%s: %s";
            msg = String.format(msg, e.getClass().getName(), e.getMessage());
            logger.error(msg);
            return null;
        } catch (UnsupportedEncodingException e) {
            String msg = "%s: %s";
            msg = String.format(msg, e.getClass().getName(), e.getMessage());
            logger.error(msg);
            return null;
        }
    }
} </s>
