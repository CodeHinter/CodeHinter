<s>class temp {    @Override
    public void loadTest(StoryCardModel story) {
        String strUrl = story.getStoryCard().getAcceptanceTestUrl();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder loader;
        try {
            URL url = new URL(strUrl);
            loader = factory.newDocumentBuilder();
            Document document;
            document = loader.parse(url.openStream());
            this.numPass = Integer.parseInt(((Element) document.getElementsByTagName("num-pass").item(0)).getFirstChild().getNodeValue());
            this.numFail = Integer.parseInt(((Element) document.getElementsByTagName("num-fail").item(0)).getFirstChild().getNodeValue());
            this.numRuns = Integer.parseInt(((Element) document.getElementsByTagName("num-runs").item(0)).getFirstChild().getNodeValue());
            this.numExceptions = Integer.parseInt(((Element) document.getElementsByTagName("num-exceptions").item(0)).getFirstChild().getNodeValue());
            this.wikiText = ((Element) document.getElementsByTagName("wiki").item(0)).getFirstChild().getNodeValue();
        } catch (Exception e) {
            util.Logger.singleton().error(e);
        }
    }
} </s>
<s>class temp {        public void run() {
            if (data.length() > 0) {
                String method = getMethod();
                String action = getAction();
                URL url;
                try {
                    URL actionURL;
                    URL baseURL = hdoc.getBase();
                    if (action == null) {
                        String file = baseURL.getFile();
                        actionURL = new URL(baseURL.getProtocol(), baseURL.getHost(), baseURL.getPort(), file);
                    } else actionURL = new URL(baseURL, action);
                    URLConnection connection;
                    if ("post".equalsIgnoreCase(method)) {
                        url = actionURL;
                        connection = url.openConnection();
                        ((HttpURLConnection) connection).setFollowRedirects(false);
                        XRendererSupport.setCookies(url, connection);
                        connection.setRequestProperty("Accept-Language", "en-us");
                        connection.setRequestProperty("User-Agent", XRendererSupport.getContext().getUserAgent());
                        postData(connection, data);
                        XRendererSupport.getContext().getLogger().message(this, "Posted data: {" + data + "}");
                    } else {
                        url = new URL(actionURL + "?" + data);
                        connection = url.openConnection();
                        XRendererSupport.setCookies(url, connection);
                    }
                    connection.connect();
                    in = connection.getInputStream();
                    URL base = connection.getURL();
                    XRendererSupport.getCookies(base, connection);
                    XRendererSupport.getContext().getLogger().message(this, "Stream got ok.");
                    JEditorPane c = (JEditorPane) getContainer();
                    HTMLEditorKit kit = (HTMLEditorKit) c.getEditorKit();
                    newDoc = (HTMLDocument) kit.createDefaultDocument();
                    newDoc.putProperty(Document.StreamDescriptionProperty, base);
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            XRendererSupport.getContext().getLogger().message(this, "loading...");
                            loadDocument();
                            XRendererSupport.getContext().getLogger().message(this, "document loaded...");
                        }
                    });
                } catch (MalformedURLException m) {
                } catch (IOException e) {
                }
            }
        }
} </s>
<s>class temp {    public HttpResponse navigateTo(URI url) {
        log.debug("navigateTo: " + url.toString());
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            log.debug(response.getStatusLine());
            return response;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
} </s>
<s>class temp {    private static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {    @Test
    public void mockingURLWorks() throws Exception {
        URL url = mock(URL.class);
        URLConnection urlConnectionMock = mock(URLConnection.class);
        when(url.openConnection()).thenReturn(urlConnectionMock);
        URLConnection openConnection = url.openConnection();
        assertSame(openConnection, urlConnectionMock);
    }
} </s>
<s>class temp {    public void readDocument(URL url) {
        stopTiming();
        try {
            String xmlData = "";
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = "";
            boolean cont = true;
            while (cont) {
                line = in.readLine();
                if (line == null) {
                    break;
                }
                line = line.trim();
                if (line.length() > 0 && line.charAt(0) != '%') {
                    xmlData = xmlData + line + System.getProperty("line.separator");
                }
                if (line.length() > 1 && line.charAt(0) == '%' && line.charAt(1) == '=') {
                    cont = false;
                }
            }
            XmlDataAdaptor readAdp = null;
            readAdp = XmlDataAdaptor.adaptorForString(xmlData, false);
            if (readAdp != null) {
                XmlDataAdaptor mpsfileData_Adaptor = readAdp.childAdaptor(dataRootName);
                if (mpsfileData_Adaptor != null) {
                    setTitle(mpsfileData_Adaptor.stringValue("title"));
                    java.util.Iterator<XmlDataAdaptor> plotIt = mpsfileData_Adaptor.childAdaptorIterator("Plot");
                    while (plotIt.hasNext()) {
                        XmlDataAdaptor pvDA = plotIt.next();
                        String name = pvDA.stringValue("name");
                        String xMin = pvDA.stringValue("xmin");
                        String xMax = pvDA.stringValue("xmax");
                        String step = pvDA.stringValue("step");
                        System.out.println(name + " " + xMax + " " + xMin + " " + step);
                        bModel.setPlotAxes(name, xMin, xMax, step);
                    }
                    java.util.Iterator<XmlDataAdaptor> timingIt = mpsfileData_Adaptor.childAdaptorIterator("TimingPV");
                    while (timingIt.hasNext()) {
                        XmlDataAdaptor pvDA = timingIt.next();
                        String name = pvDA.stringValue("name");
                        bModel.setTimingPVName(name);
                    }
                    java.util.Iterator<XmlDataAdaptor> trigIt = mpsfileData_Adaptor.childAdaptorIterator("Trigger");
                    while (trigIt.hasNext()) {
                        XmlDataAdaptor pvDA = trigIt.next();
                        String name = pvDA.stringValue("name");
                        String type = pvDA.stringValue("type");
                        bModel.addTrigger(name, type);
                    }
                    java.util.Iterator<XmlDataAdaptor> blmIt = mpsfileData_Adaptor.childAdaptorIterator("BLMdevice");
                    while (blmIt.hasNext()) {
                        XmlDataAdaptor pvDA = blmIt.next();
                        String name = pvDA.stringValue("name");
                        String section = pvDA.stringValue("section");
                        String mpschan = pvDA.stringValue("mpschan");
                        String devType = pvDA.stringValue("devicetype");
                        String location = pvDA.stringValue("locationz");
                        double locz = 0;
                        try {
                            locz = Double.parseDouble(location);
                        } catch (NumberFormatException e) {
                            locz = 0.0;
                        }
                        if (devType == null) bModel.addBLM(new IonizationChamber(name, section, mpschan, locz)); else if (devType.equals("ND")) bModel.addBLM(new NeutronDetector(name, section, mpschan, locz)); else if (devType.equals("IC")) bModel.addBLM(new IonizationChamber(name, section, mpschan, locz));
                    }
                }
            }
            in.close();
        } catch (IOException exception) {
            System.out.println("Fatal error. Something wrong with input file. Stop.");
        }
        startTiming();
    }
} </s>
<s>class temp {    public String getResource(String resourceName) throws IOException {
        InputStream resourceStream = resourceClass.getResourceAsStream(resourceName);
        ByteArrayOutputStream baos = new ByteArrayOutputStream(2048);
        IOUtils.copyAndClose(resourceStream, baos);
        String expected = new String(baos.toByteArray());
        return expected;
    }
} </s>
<s>class temp {    public static void copy(File source, File destination) {
        try {
            FileInputStream fileInputStream = new FileInputStream(source);
            FileOutputStream fileOutputStream = new FileOutputStream(destination);
            FileChannel inputChannel = fileInputStream.getChannel();
            FileChannel outputChannel = fileOutputStream.getChannel();
            transfer(inputChannel, outputChannel, source.length(), 1024 * 1024 * 32, true, true);
            fileInputStream.close();
            fileOutputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile("diff", ".htm");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write("<html><head><title>LOC Differences</title>\n" + SCRIPT + "</head>\n" + "<body bgcolor='#ffffff'>\n" + "<div onMouseOver=\"window.defaultStatus='Metrics'\">\n");
        if (addedTable.length() > 0) {
            out.write("<table border><tr><th>Files Added:</th>" + "<th>Add</th><th>Type</th></tr>");
            out.write(addedTable.toString());
            out.write("</table><br><br>");
        }
        if (modifiedTable.length() > 0) {
            out.write("<table border><tr><th>Files Modified:</th>" + "<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>" + "<th>Total</th><th>Type</th></tr>");
            out.write(modifiedTable.toString());
            out.write("</table><br><br>");
        }
        if (deletedTable.length() > 0) {
            out.write("<table border><tr><th>Files Deleted:</th>" + "<th>Del</th><th>Type</th></tr>");
            out.write(deletedTable.toString());
            out.write("</table><br><br>");
        }
        out.write("<table name=METRICS BORDER>\n");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write("<tr><td>Base:&nbsp;</td><td>");
            out.write(Long.toString(base));
            out.write("</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>");
            out.write(Long.toString(deleted));
            out.write("</td></tr>\n<tr><td>Modified:&nbsp;</td><td>");
            out.write(Long.toString(modified));
            out.write("</td></tr>\n<tr><td>Added:&nbsp;</td><td>");
            out.write(Long.toString(added));
            out.write("</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>");
            out.write(Long.toString(added + modified));
            out.write("</td></tr>\n");
        }
        out.write("<tr><td>Total:&nbsp;</td><td>");
        out.write(Long.toString(total));
        out.write("</td></tr>\n</table></div>");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write("</BODY></HTML>".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
} </s>
<s>class temp {    public static BufferedReader getReader(int license) {
        URL url = getResource(license);
        if (url == null) return null;
        InputStream inStream;
        try {
            inStream = url.openStream();
        } catch (IOException e) {
            return null;
        }
        return new BufferedReader(new InputStreamReader(inStream));
    }
} </s>
<s>class temp {    public int visitStatement(String statement) throws SQLException {
        mySQLLogger.info(statement);
        if (getConnection() == null) {
            throw new JdbcException("cannot exec: " + statement + ", because 'not connected to database'");
        }
        Statement stmt = getConnection().createStatement();
        try {
            return stmt.executeUpdate(statement);
        } catch (SQLException ex) {
            getConnection().rollback();
            throw ex;
        } finally {
            stmt.close();
        }
    }
} </s>
<s>class temp {    public AudioInputStream getAudioInputStream(URL url, String userAgent) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out("MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): begin");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        URLConnection conn = url.openConnection();
        boolean isShout = false;
        int toRead = 4;
        byte[] head = new byte[toRead];
        if (userAgent != null) conn.setRequestProperty("User-Agent", userAgent);
        conn.setRequestProperty("Accept", "*/*");
        conn.setRequestProperty("Icy-Metadata", "1");
        conn.setRequestProperty("Connection", "close");
        BufferedInputStream bInputStream = new BufferedInputStream(conn.getInputStream());
        bInputStream.mark(toRead);
        int read = bInputStream.read(head, 0, toRead);
        if ((read > 2) && (((head[0] == 'I') | (head[0] == 'i')) && ((head[1] == 'C') | (head[1] == 'c')) && ((head[2] == 'Y') | (head[2] == 'y')))) {
            isShout = true;
        }
        bInputStream.reset();
        InputStream inputStream = null;
        if (isShout == true) {
            IcyInputStream icyStream = new IcyInputStream(bInputStream);
            icyStream.addTagParseListener(IcyListener.getInstance());
            inputStream = icyStream;
        } else {
            String metaint = conn.getHeaderField("icy-metaint");
            if (metaint != null) {
                IcyInputStream icyStream = new IcyInputStream(bInputStream, metaint);
                icyStream.addTagParseListener(IcyListener.getInstance());
                inputStream = icyStream;
            } else {
                inputStream = bInputStream;
            }
        }
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out("MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): end");
        }
        return audioInputStream;
    }
} </s>
<s>class temp {    public void setTypeRefs(Connection conn) {
        log.traceln("\tProcessing " + table + " references..");
        try {
            String query = " select distinct c.id, c.qualifiedname from " + table + ", CLASSTYPE c " + " where " + table + "." + reffield + " is null and " + table + "." + classnamefield + " = c.qualifiedname";
            PreparedStatement pstmt = conn.prepareStatement(query);
            long start = new Date().getTime();
            ResultSet rset = pstmt.executeQuery();
            long queryTime = new Date().getTime() - start;
            log.debug("query time: " + queryTime + " ms");
            String update = "update " + table + " set " + reffield + "=? where " + classnamefield + "=? and " + reffield + " is null";
            PreparedStatement pstmt2 = conn.prepareStatement(update);
            int n = 0;
            start = new Date().getTime();
            while (rset.next()) {
                n++;
                pstmt2.setInt(1, rset.getInt(1));
                pstmt2.setString(2, rset.getString(2));
                pstmt2.executeUpdate();
            }
            queryTime = new Date().getTime() - start;
            log.debug("total update time: " + queryTime + " ms");
            log.debug("number of times through loop: " + n);
            if (n > 0) log.debug("avg update time: " + (queryTime / n) + " ms");
            pstmt2.close();
            rset.close();
            pstmt.close();
            conn.commit();
            log.verbose("Updated (committed) " + table + " references");
        } catch (SQLException ex) {
            log.error("Internal Reference Update Failed!");
            DBUtils.logSQLException(ex);
            log.error("Rolling back..");
            try {
                conn.rollback();
            } catch (SQLException inner_ex) {
                log.error("rollback failed!");
            }
        }
    }
} </s>
<s>class temp {    public InputStream openFileInputStream(String fileName) throws IOException {
        if (fileName.indexOf(':') > 1) {
            URL url = new URL(fileName);
            InputStream in = url.openStream();
            return in;
        }
        fileName = translateFileName(fileName);
        FileInputStream in = new FileInputStream(fileName);
        trace("openFileInputStream", fileName, in);
        return in;
    }
} </s>
<s>class temp {    private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException {
        StringBuilder contents = new StringBuilder();
        StringOutputStream s = new StringOutputStream();
        IOUtils.copy(SeleniumConfiguration.class.getResourceAsStream("default-user-extensions.js"), s);
        contents.append(s.toString());
        File providedUserExtensions = seleniumConfiguration.getFile(ConfigurationPropertyKeys.SELENIUM_USER_EXTENSIONS, seleniumConfiguration.getDirectoryConfiguration().getInput(), false);
        if (providedUserExtensions != null) {
            contents.append(FileUtils.readFileToString(providedUserExtensions, null));
        }
        seleniumUserExtensions = new File(seleniumConfiguration.getDirectoryConfiguration().getInput(), "user-extensions.js");
        FileUtils.forceMkdir(seleniumUserExtensions.getParentFile());
        FileUtils.writeStringToFile(seleniumUserExtensions, contents.toString(), null);
    }
} </s>
<s>class temp {    private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception {
        String jobDir = nodeDir + File.separator + "job_" + zer.getUri();
        if (!WorkDirectory.isWorkingDirectoryValid(jobDir)) {
            throw new Exception("Cannot acces to " + jobDir);
        }
        File f = new File(jobDir + File.separator + "result.xml");
        if (!f.exists() || !f.isFile() || !f.canRead()) {
            throw new Exception("Cannot acces to result file " + f.getAbsolutePath());
        }
        String fcopyName = reportDir + File.separator + zer.getName() + ".xml";
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fcopyName));
        IOUtils.copy(bis, bos);
        bis.close();
        bos.close();
        zer.setUri(fcopyName);
        f = new File(jobDir + File.separator + "status.xml");
        if (!f.exists() || !f.isFile() || !f.canRead()) {
            throw new Exception("Cannot acces to status file " + f.getAbsolutePath());
        }
        fcopyName = reportDir + File.separator + zer.getName() + "_status.xml";
        bis = new BufferedInputStream(new FileInputStream(f));
        bos = new BufferedOutputStream(new FileOutputStream(fcopyName));
        IOUtils.copy(bis, bos);
        bis.close();
        bos.close();
        statusZers.add(new ZipEntryRef(ZipEntryRef.SINGLE_FILE, zer.getName(), fcopyName, ZipEntryRef.WITH_REL));
    }
} </s>
<s>class temp {    public void loadSourceCode() {
        if (getResourceName() != null) {
            String filename = getResourceName() + ".java";
            sourceCode = new String("<html><body bgcolor=\"#ffffff\"><pre>");
            InputStream is;
            InputStreamReader isr;
            CodeViewer cv = new CodeViewer();
            URL url;
            try {
                url = getClass().getResource(filename);
                is = url.openStream();
                isr = new InputStreamReader(is);
                BufferedReader reader = new BufferedReader(isr);
                String line = reader.readLine();
                while (line != null) {
                    sourceCode += cv.syntaxHighlight(line) + " \n ";
                    line = reader.readLine();
                }
                sourceCode += new String("</pre></body></html>");
            } catch (Exception ex) {
                sourceCode = "Could not load file: " + filename;
            }
        }
    }
} </s>
<s>class temp {    public static void copyTo(java.io.File source, java.io.File dest) throws Exception {
        java.io.FileInputStream inputStream = null;
        java.nio.channels.FileChannel sourceChannel = null;
        java.io.FileOutputStream outputStream = null;
        java.nio.channels.FileChannel destChannel = null;
        long size = source.length();
        long bufferSize = 1024;
        long count = 0;
        if (size < bufferSize) bufferSize = size;
        Exception exception = null;
        try {
            if (dest.exists() == false) dest.createNewFile();
            inputStream = new java.io.FileInputStream(source);
            sourceChannel = inputStream.getChannel();
            outputStream = new java.io.FileOutputStream(dest);
            destChannel = outputStream.getChannel();
            while (count < size) count += sourceChannel.transferTo(count, bufferSize, destChannel);
        } catch (Exception e) {
            exception = e;
        } finally {
            closeFileChannel(sourceChannel);
            closeFileChannel(destChannel);
        }
        if (exception != null) throw exception;
    }
} </s>
<s>class temp {    @Override
    public void Start() {
        try {
            Enumeration<URL> resources = Configurator.class.getClassLoader().getResources(IOCContainer.GetApplicationName() + ".config");
            while (resources.hasMoreElements()) {
                URL url = resources.nextElement();
                if (Logger.logger.isDebugEnabled()) {
                    Logger.logger.debug("Loading '" + url + "'");
                }
                JSONValue configFileContents = JSONValue.Decode(url.openStream(), url.toString());
                if (configFileContents instanceof JSONObjectValue) {
                    for (Configurable configurable : IOCContainer.LookupAll(Configurable.class)) {
                        JSONValue jsonData = ((JSONObjectValue) configFileContents).GetProperty(configurable.GetConfigSectionName());
                        if (jsonData != null) {
                            if (Logger.logger.isDebugEnabled()) {
                                Logger.logger.debug("Configurging " + configurable.getClass() + " with '" + jsonData.Encode());
                            }
                            try {
                                configurable.Configure(jsonData);
                            } catch (Throwable th1) {
                                Logger.logger.error("Caught throwable while configuring " + configurable.getClass() + ":" + th1.getMessage() + ". IGNORED.", th1);
                                Logger.logger.error("[Continued]. Config Data was:" + jsonData.Encode());
                            }
                        }
                    }
                } else {
                    Logger.logger.error("'" + url + "' does not contain a json object. Skipping and looking for other applciation.config files in classpath ...");
                }
            }
        } catch (Throwable th) {
            throw new RuntimeException("Exception while attempting to load application.config:'" + th.getMessage() + "'", th);
        }
    }
} </s>
<s>class temp {    private static String completeGet(String encodedURLStr) throws IOException {
        URL url = new URL(encodedURLStr);
        HttpURLConnection connection = initConnection(url);
        String result = getReply(url.openStream());
        connection.disconnect();
        return result;
    }
} </s>
<s>class temp {    protected static int[] sort(int[] arr) {
        for (int i = arr.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }
} </s>
<s>class temp {    private ByteBuffer readProgram(URL url) throws IOException {
        StringBuilder program = new StringBuilder();
        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = in.readLine()) != null) {
                program.append(line).append("\n");
            }
        } finally {
            if (in != null) in.close();
        }
        ByteBuffer buffer = BufferUtils.createByteBuffer(program.length());
        for (int i = 0; i < program.length(); i++) {
            buffer.put((byte) (program.charAt(i) & 0xFF));
        }
        buffer.flip();
        return buffer;
    }
} </s>
<s>class temp {    public WebHttpResponse execute(HttpRequest request) throws Exception {
        WebHttpResponse response = new WebHttpResponse(request);
        if (iSSLClassesAvailable == -1) {
            try {
                Class.forName("javax.net.ssl.SSLSocket");
                iSSLClassesAvailable = 1;
            } catch (ClassNotFoundException cnf) {
                iSSLClassesAvailable = 0;
            }
        }
        try {
            request.getClass().getMethod("getThinkTime", null);
            long thinkTime = request.getThinkTime();
            if (thinkTime > 0) Thread.sleep(thinkTime);
        } catch (Exception e) {
        }
        if (httpRequestHandler == null) {
            httpRequestHandler = new WebHttpRequestHandler();
        }
        currentPageNumber = request.getPageNumber();
        currentPageOrder = request.getPageOrder();
        long start = System.currentTimeMillis();
        if ((currentPageOrder == HttpRequest.PAGE_START) || (currentPageOrder == HttpRequest.PAGE_ONLY)) {
            pageStart = start;
            currentPageName = request.getURL();
        }
        if (iSSLClassesAvailable == 1 && request.getSecure() == true) {
            SSLHttpExecutor ssl = null;
            if (sslExecutor == null) sslExecutor = new WebSSLHttpExecutor(httpRequestHandler);
            ssl = (SSLHttpExecutor) sslExecutor;
            ssl.execute(request, response);
            setResponseEndingData(request, response, start);
            return response;
        } else if (iSSLClassesAvailable == 0 && request.getSecure() == true) {
            System.out.println(HttpResourceBundle.SSL_NOTSUPPORTED);
        }
        String strHost = request.getHost();
        int port = request.getPort();
        if (port != iLastPort || strLastHost == null || strHost.regionMatches(0, strLastHost, 0, strLastHost.length()) != true) {
            if ((connectToServer(response, strHost, port)) == false) {
                response.setCode(-1);
                return response;
            }
        }
        if (httpRequestHandler.sendRequest(request, to_server) == false) {
            if (connectToServer(response, strHost, port) == false) {
                response.setCode(-1);
                return response;
            } else {
                if (httpRequestHandler.sendRequest(request, to_server) == false) {
                    response.setCode(-1);
                    return response;
                }
            }
        }
        httpRequestHandler.getServerResponse(request, response, from_server, socketBufSize);
        if (response.getCode() == 0) {
            if (connectToServer(response, strHost, port) == true) {
                if (httpRequestHandler.sendRequest(request, to_server) == true) {
                    httpRequestHandler.getServerResponse(request, response, from_server, socketBufSize);
                }
            }
        }
        if (response.getShouldCloseSocket() == true) strLastHost = null;
        setResponseEndingData(request, response, start);
        return response;
    }
} </s>
<s>class temp {    public static byte[] computeMD5(String s) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.reset();
            md.update(s.getBytes());
            return md.digest();
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        File directory = new File(args[0]);
        File[] files = directory.listFiles();
        try {
            PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(args[1])));
            for (int i = 0; i < files.length; i++) {
                BufferedReader reader = new BufferedReader(new FileReader(files[i]));
                while (reader.ready()) writer.println(reader.readLine());
                reader.close();
            }
            writer.flush();
            writer.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private void copy(File srouceFile, File destinationFile) throws IOException {
        FileChannel sourceChannel = new FileInputStream(srouceFile).getChannel();
        FileChannel destinationChannel = new FileOutputStream(destinationFile).getChannel();
        destinationChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {        protected URLConnection openConnection(URL url) throws IOException {
            URLConnection con = url.openConnection();
            if ("HTTPS".equalsIgnoreCase(url.getProtocol())) {
                HttpsURLConnection scon = (HttpsURLConnection) con;
                try {
                    scon.setSSLSocketFactory(SSLUtil.getSSLSocketFactory(ks, password, alias));
                    scon.setHostnameVerifier(SSLUtil.getHostnameVerifier(SSLUtil.HOSTCERT_MIN_CHECK));
                } catch (GeneralException e) {
                    throw new IOException(e.getMessage());
                } catch (GeneralSecurityException e) {
                    throw new IOException(e.getMessage());
                }
            }
            return con;
        }
} </s>
<s>class temp {    private void prepareDigestFromTextArea() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        log.println("\nCalculating digest ...\n");
        java.security.MessageDigest md5 = java.security.MessageDigest.getInstance("MD5");
        md5.update(dataArea.getText().getBytes("UTF8"));
        byte[] digest = md5.digest();
        log.println("digest:\n" + formatAsHexString(digest));
        log.println("Done.");
        setEncodedDigest(encodeFromBytes(digest));
    }
} </s>
<s>class temp {    public RandomAccessFileOrArray(URL url) throws IOException {
        InputStream is = url.openStream();
        try {
            this.arrayIn = InputStreamToArray(is);
        } finally {
            try {
                is.close();
            } catch (IOException ioe) {
            }
        }
    }
} </s>
<s>class temp {    public void uploadFile(ActionEvent event) throws IOException {
        InputFile inputFile = (InputFile) event.getSource();
        synchronized (inputFile) {
            ServletContext context = (ServletContext) FacesContext.getCurrentInstance().getExternalContext().getContext();
            String fileNewPath = arrangeUplodedFilePath(context.getRealPath(""), inputFile.getFile().getName());
            File file = new File(fileNewPath);
            System.out.println(fileNewPath);
            DataInputStream inStream = new DataInputStream(new FileInputStream(inputFile.getFile()));
            DataOutputStream outStream = new DataOutputStream(new FileOutputStream(file));
            int i = 0;
            byte[] buffer = new byte[512];
            while ((i = inStream.read(buffer, 0, 512)) != -1) outStream.write(buffer, 0, i);
        }
    }
} </s>
<s>class temp {    public static String MD5(String text) throws ProducteevSignatureException {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(ALGORITHM);
            byte[] md5hash;
            md.update(text.getBytes("utf-8"), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException nsae) {
            throw new ProducteevSignatureException("No such algorithm : " + ALGORITHM, nsae);
        } catch (UnsupportedEncodingException e) {
            throw new ProducteevSignatureException("No such algorithm : " + ALGORITHM, e);
        }
    }
} </s>
<s>class temp {    public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(".") || children[i].getName().equals("..")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
} </s>
<s>class temp {    void openTextFile(String urlString, boolean install) {
        StringBuffer sb = null;
        try {
            URL url = new URL(urlString);
            InputStream in = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) sb.append(line + "\n");
            in.close();
        } catch (IOException e) {
            if (!(install && urlString.endsWith("StartupMacros.txt"))) IJ.error("URL Opener", "" + e);
            sb = null;
        }
        if (sb != null) {
            if (install) (new MacroInstaller()).install(new String(sb)); else {
                int index = urlString.lastIndexOf("/");
                if (index != -1 && index <= urlString.length() - 1) urlString = urlString.substring(index + 1);
                (new Editor()).create(urlString, new String(sb));
            }
        }
    }
} </s>
<s>class temp {    public void validateXml(InputStream inputData, ErrorHandler errorHandler) throws SAXException, IOException, Exception {
        SAXParserFactory spf = SAXParserFactory.newInstance();
        spf.setValidating(false);
        spf.setNamespaceAware(true);
        try {
            SchemaFactory schemaFactory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
            URL schemaURL = new URL(schemeUrl);
            InputStream urlStream = null;
            try {
                urlStream = schemaURL.openStream();
            } catch (IOException ex) {
                if (defaultUrl != null) {
                    schemaURL = new URL(defaultUrl);
                    urlStream = schemaURL.openStream();
                } else {
                    throw ex;
                }
            }
            LOGGER.debug("Uses schema url : " + schemaURL);
            StreamSource sss = new StreamSource(urlStream);
            Schema schema = schemaFactory.newSchema(sss);
            spf.setSchema(schema);
            SAXParser parser = spf.newSAXParser();
            XMLReader reader = parser.getXMLReader();
            reader.setErrorHandler(errorHandler);
            reader.parse(new InputSource(inputData));
        } catch (ParserConfigurationException e) {
            throw new SAXException(e);
        }
    }
} </s>
<s>class temp {    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) destFile.createNewFile();
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) source.close();
            if (destination != null) destination.close();
        }
    }
} </s>
<s>class temp {    private void writeToDisk(byte[] download) throws IOException {
        File target = new File(TARGET_FILENAME);
        InputStream downloadedFromNetwork = new ByteArrayInputStream(download);
        FileOutputStream fileOnDisk = null;
        try {
            try {
                fileOnDisk = new FileOutputStream(target);
                fileOnDisk.write("test".getBytes());
            } catch (Exception e) {
                target = new File(PMS.getConfiguration().getTempFolder(), TARGET_FILENAME);
            } finally {
                fileOnDisk.close();
            }
            fileOnDisk = new FileOutputStream(target);
            int bytesSaved = IOUtils.copy(downloadedFromNetwork, fileOnDisk);
            logger.info("Wrote " + bytesSaved + " bytes to " + target.getAbsolutePath());
        } finally {
            IOUtils.closeQuietly(downloadedFromNetwork);
            IOUtils.closeQuietly(fileOnDisk);
        }
    }
} </s>
<s>class temp {    public void copyToZip(ZipOutputStream zout, String entryName) throws IOException {
        close();
        ZipEntry entry = new ZipEntry(entryName);
        zout.putNextEntry(entry);
        if (!isEmpty() && this.tmpFile.exists()) {
            InputStream in = new FileInputStream(this.tmpFile);
            IOUtils.copyTo(in, zout);
            in.close();
        }
        zout.flush();
        zout.closeEntry();
        delete();
    }
} </s>
<s>class temp {    public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException {
        logger.info("MapTileChacheTask:process");
        PublishRequest req = context.getItem().getEntity();
        if (StringUtils.isEmpty(req.getBackMap())) return TaskState.STATE_TILE_CACHED;
        final PublicMapPost post;
        final GenericDAO<PublicMapPost> postDao = DAOFactory.createDAO(PublicMapPost.class);
        try {
            ReadOnlyTransaction.beginTransaction();
        } catch (DatabaseException e) {
            logger.error("error", e);
            throw new ProcessorException(e);
        }
        int numCachedTiles = 0;
        try {
            List<MapTile> backTiles = new ArrayList<MapTile>();
            post = postDao.findUniqueByCriteria(Expression.eq("guid", req.getPostGuid()));
            final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(post.getSWLat(), post.getSWLon()), new LatLngPoint(post.getNELat(), post.getNELon()));
            final String backMapGuid = "gst";
            final XFile dstDir = new XFile(new XFile(Configuration.getInstance().getPublicMapStorage().toString()), backMapGuid);
            dstDir.mkdir();
            for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) {
                final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z);
                final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z);
                for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) {
                    NASAMapTile tile = new NASAMapTile((int) x, (int) y, z);
                    XFile file = new XFile(dstDir, tile.toKeyString());
                    if (file.exists() && file.isFile()) continue;
                    backTiles.add(tile);
                }
            }
            try {
                for (MapTile tile : backTiles) {
                    InputStream in = null;
                    OutputStream out = null;
                    final URL url = new URL(tile.getPath());
                    try {
                        final XFile outFile = new XFile(dstDir, tile.toKeyString());
                        final URLConnection conn = url.openConnection();
                        if (conn == null || !conn.getContentType().startsWith("image")) throw new IllegalAccessException("onearth.jpl.nasa.gov service returns non-image file, " + "content-type='" + conn.getContentType() + "'");
                        in = conn.getInputStream();
                        if (in != null) {
                            out = new XFileOutputStream(outFile);
                            IOUtils.copy(in, out);
                        } else throw new IllegalStateException("opened stream is null");
                    } finally {
                        if (out != null) {
                            out.flush();
                            out.close();
                        }
                        if (in != null) in.close();
                    }
                    if (++numCachedTiles % 100 == 0) {
                        logger.info(numCachedTiles + " tiles cached");
                    }
                }
            } catch (Throwable e) {
                logger.error("map tile caching has failed: ", e);
                throw new ProcessorException(e);
            }
        } catch (ProcessorException e) {
            logger.error("map tile caching has failed: ", e);
            throw e;
        } catch (Throwable e) {
            logger.error("map tile caching has failed: ", e);
            throw new ProcessorException(e);
        } finally {
            ReadOnlyTransaction.closeTransaction();
            logger.info(numCachedTiles + " tiles cached");
        }
        return TaskState.STATE_TILE_CACHED;
    }
} </s>
<s>class temp {    public HttpResponse executeHttp(final HttpUriRequest request, final int expectedCode) throws ClientProtocolException, IOException, HttpException {
        final HttpResponse response = httpClient.execute(request);
        if (response.getStatusLine().getStatusCode() != expectedCode) {
            throw newHttpException(request, response);
        }
        return response;
    }
} </s>
<s>class temp {    public HttpResponse executeHttp(final HttpUriRequest request, final int beginExpectedCode, final int endExpectedCode) throws ClientProtocolException, IOException, HttpException {
        final HttpResponse response = httpClient.execute(request);
        final int statusCode = response.getStatusLine().getStatusCode();
        if (statusCode < beginExpectedCode || statusCode >= endExpectedCode) {
            throw newHttpException(request, response);
        }
        return response;
    }
} </s>
<s>class temp {    public static int getContentLength(URL urlFileLocation) {
        HttpURLConnection connFile = null;
        int iFileSize = -1;
        try {
            connFile = (HttpURLConnection) urlFileLocation.openConnection();
            connFile.setDoInput(true);
            InputStream is = connFile.getInputStream();
            iFileSize = connFile.getContentLength();
            is.close();
            connFile.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return iFileSize;
    }
} </s>
<s>class temp {    private void writeResponse(final Collection<? extends Resource> resources, final HttpServletResponse response) throws IOException {
        for (final Resource resource : resources) {
            InputStream in = null;
            try {
                in = resource.getInputStream();
                final OutputStream out = response.getOutputStream();
                final long bytesCopied = IOUtils.copyLarge(in, out);
                if (bytesCopied < 0L) throw new StreamCorruptedException("Bad number of copied bytes (" + bytesCopied + ") for resource=" + resource.getFilename());
                if (logger.isDebugEnabled()) logger.debug("writeResponse(" + resource.getFile() + ") copied " + bytesCopied + " bytes");
            } finally {
                if (in != null) in.close();
            }
        }
    }
} </s>
<s>class temp {    public void setPilot(PilotData pilotData) throws UsernameNotValidException {
        try {
            if (pilotData.username.trim().equals("") || pilotData.password.trim().equals("")) throw new UsernameNotValidException(1, "Username or password missing");
            PreparedStatement psta;
            if (pilotData.id == 0) {
                psta = jdbc.prepareStatement("INSERT INTO pilot " + "(name, address1, address2, zip, city, state, country, birthdate, " + "pft_theory, pft, medical, passenger, instructor, loc_language, " + "loc_country, loc_variant, username, password, id) " + "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                pilotData.id = Sequence.nextVal("pilot_id", jdbc);
            } else {
                psta = jdbc.prepareStatement("UPDATE pilot SET " + "name = ?, address1 = ?, address2 = ?, " + "zip = ?, city = ?, state = ?, country = ?, birthdate = ?, pft_theory = ?," + "pft = ?, medical = ?, passenger = ?, instructor = ?, loc_language = ?, " + "loc_country = ?, loc_variant = ?, username = ?, password = ? " + "WHERE id = ?");
            }
            psta.setString(1, pilotData.name);
            psta.setString(2, pilotData.address1);
            psta.setString(3, pilotData.address2);
            psta.setString(4, pilotData.zip);
            psta.setString(5, pilotData.city);
            psta.setString(6, pilotData.state);
            psta.setString(7, pilotData.country);
            if (pilotData.birthdate != null) psta.setLong(8, pilotData.birthdate.getTime()); else psta.setNull(8, java.sql.Types.INTEGER);
            if (pilotData.pft_theory != null) psta.setLong(9, pilotData.pft_theory.getTime()); else psta.setNull(9, java.sql.Types.INTEGER);
            if (pilotData.pft != null) psta.setLong(10, pilotData.pft.getTime()); else psta.setNull(10, java.sql.Types.INTEGER);
            if (pilotData.medical != null) psta.setLong(11, pilotData.medical.getTime()); else psta.setNull(11, java.sql.Types.INTEGER);
            if (pilotData.passenger) psta.setString(12, "Y"); else psta.setString(12, "N");
            if (pilotData.instructor) psta.setString(13, "Y"); else psta.setString(13, "N");
            psta.setString(14, pilotData.loc_language);
            psta.setString(15, pilotData.loc_country);
            psta.setString(16, pilotData.loc_variant);
            psta.setString(17, pilotData.username);
            psta.setString(18, pilotData.password);
            psta.setInt(19, pilotData.id);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException sql) {
            jdbc.rollback();
            sql.printStackTrace();
            throw new UsernameNotValidException(2, "Username allready exist");
        }
    }
} </s>
<s>class temp {    ServiceDescription getServiceDescription() throws ConfigurationException {
        final XPath pathsXPath = this.xPathFactory.newXPath();
        try {
            final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE);
            final String title = getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.TITLE_ELEMENT);
            ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName());
            Property[] serviceProperties = getServiceProperties(serviceDescriptionNode);
            builder.author(getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.CREATOR_ELEMENT));
            builder.classname(this.canonicalServiceName);
            builder.description(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.DESCRIPTION_ELEMENT));
            final String serviceVersion = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.VERSION_ELEMENT);
            final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode);
            String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT);
            if (identifier == null || "".equals(identifier)) {
                try {
                    final MessageDigest identDigest = MessageDigest.getInstance("MD5");
                    identDigest.update(this.canonicalServiceName.getBytes());
                    final String versionInfo = (serviceVersion != null) ? serviceVersion : "";
                    identDigest.update(versionInfo.getBytes());
                    final URI toolIDURI = toolDescription.getIdentifier();
                    final String toolIdentifier = toolIDURI == null ? "" : toolIDURI.toString();
                    identDigest.update(toolIdentifier.getBytes());
                    final BigInteger md5hash = new BigInteger(identDigest.digest());
                    identifier = md5hash.toString(16);
                } catch (NoSuchAlgorithmException nsae) {
                    throw new RuntimeException(nsae);
                }
            }
            builder.identifier(identifier);
            builder.version(serviceVersion);
            builder.tool(toolDescription);
            builder.instructions(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.INSTRUCTIONS_ELEMENT));
            builder.furtherInfo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.FURTHER_INFO_ELEMENT));
            builder.logo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.LOGO_ELEMENT));
            builder.serviceProvider(this.serviceProvider);
            final DBMigrationPathFactory migrationPathFactory = new DBMigrationPathFactory(this.configuration);
            final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths();
            builder.paths(MigrationPathConverter.toPlanetsPaths(migrationPaths));
            builder.inputFormats(migrationPaths.getInputFormatURIs().toArray(new URI[0]));
            builder.parameters(getUniqueParameters(migrationPaths));
            builder.properties(serviceProperties);
            return builder.build();
        } catch (XPathExpressionException xPathExpressionException) {
            throw new ConfigurationException(String.format("Failed parsing the '%s' element in the '%s' element.", ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration.getNodeName()), xPathExpressionException);
        } catch (NullPointerException nullPointerException) {
            throw new ConfigurationException(String.format("Failed parsing the '%s' element in the '%s' element.", ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration.getNodeName()), nullPointerException);
        }
    }
} </s>
<s>class temp {    public static String generateHash(String key) {
        key += "use_your_key_here";
        MessageDigest md;
        try {
            md = java.security.MessageDigest.getInstance("MD5");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            StringBuffer buff = new StringBuffer();
            for (int l = 0; l < bytes.length; l++) {
                String hx = Integer.toHexString(0xFF & bytes[l]);
                if (hx.length() == 1) buff.append("0");
                buff.append(hx);
            }
            return buff.toString().trim();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public HttpEntity execute(final HttpRequestBase request) throws IOException, ClientProtocolException {
        final HttpResponse response = mClient.execute(request);
        final int statusCode = response.getStatusLine().getStatusCode();
        if (statusCode == HttpStatus.SC_OK | statusCode == HttpStatus.SC_CREATED) {
            return response.getEntity();
        }
        return null;
    }
} </s>
<s>class temp {    protected synchronized AbstractBaseObject insert(AbstractBaseObject obj) throws ApplicationException {
        PreparedStatement preStat = null;
        StringBuffer sqlStat = new StringBuffer();
        DmsRelationalWord tmpDmsRelationalWord = (DmsRelationalWord) ((DmsRelationalWord) obj).clone();
        synchronized (dbConn) {
            try {
                Integer nextID = getNextPrimaryID();
                Timestamp currTime = Utility.getCurrentTimestamp();
                sqlStat.append("INSERT ");
                sqlStat.append("INTO   DMS_RELATIONAL_WORD(ID, RECORD_STATUS, UPDATE_COUNT, CREATOR_ID, CREATE_DATE, UPDATER_ID, UPDATE_DATE, WORD, PARENT_ID, TYPE) ");
                sqlStat.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ");
                preStat = dbConn.prepareStatement(sqlStat.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                setPrepareStatement(preStat, 1, nextID);
                setPrepareStatement(preStat, 2, tmpDmsRelationalWord.getRecordStatus());
                setPrepareStatement(preStat, 3, new Integer(0));
                setPrepareStatement(preStat, 4, tmpDmsRelationalWord.getCreatorID());
                setPrepareStatement(preStat, 5, currTime);
                setPrepareStatement(preStat, 6, tmpDmsRelationalWord.getUpdaterID());
                setPrepareStatement(preStat, 7, currTime);
                if (tmpDmsRelationalWord.getWord() == null || "".equals(tmpDmsRelationalWord.getWord().trim())) {
                    return null;
                }
                setPrepareStatement(preStat, 8, tmpDmsRelationalWord.getWord());
                setPrepareStatement(preStat, 9, tmpDmsRelationalWord.getParentID());
                setPrepareStatement(preStat, 10, tmpDmsRelationalWord.getType());
                preStat.executeUpdate();
                tmpDmsRelationalWord.setID(nextID);
                tmpDmsRelationalWord.setCreatorID(tmpDmsRelationalWord.getCreatorID());
                tmpDmsRelationalWord.setCreateDate(currTime);
                tmpDmsRelationalWord.setUpdaterID(tmpDmsRelationalWord.getUpdaterID());
                tmpDmsRelationalWord.setUpdateDate(currTime);
                tmpDmsRelationalWord.setUpdateCount(new Integer(0));
                tmpDmsRelationalWord.setCreatorName(UserInfoFactory.getUserFullName(tmpDmsRelationalWord.getCreatorID()));
                tmpDmsRelationalWord.setUpdaterName(UserInfoFactory.getUserFullName(tmpDmsRelationalWord.getUpdaterID()));
                dbConn.commit();
                return (tmpDmsRelationalWord);
            } catch (Exception e) {
                try {
                    dbConn.rollback();
                } catch (Exception ee) {
                }
                log.error(e, e);
                throw new ApplicationException(ErrorConstant.DB_INSERT_ERROR, e);
            } finally {
                try {
                    preStat.close();
                } catch (Exception ignore) {
                } finally {
                    preStat = null;
                }
            }
        }
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fIn;
        FileOutputStream fOut;
        FileChannel fIChan, fOChan;
        long fSize;
        MappedByteBuffer mBuf;
        fIn = new FileInputStream(src);
        fOut = new FileOutputStream(dest);
        fIChan = fIn.getChannel();
        fOChan = fOut.getChannel();
        fSize = fIChan.size();
        mBuf = fIChan.map(FileChannel.MapMode.READ_ONLY, 0, fSize);
        fOChan.write(mBuf);
        fIChan.close();
        fIn.close();
        fOChan.close();
        fOut.close();
    }
} </s>
<s>class temp {    public static Test suite() throws Exception {
        java.net.URL url = ClassLoader.getSystemResource("host0.jndi.properties");
        java.util.Properties host0JndiProps = new java.util.Properties();
        host0JndiProps.load(url.openStream());
        java.util.Properties systemProps = System.getProperties();
        systemProps.putAll(host0JndiProps);
        System.setProperties(systemProps);
        TestSuite suite = new TestSuite();
        suite.addTest(new TestSuite(T05DTMInterpositionUnitTestCase.class));
        TestSetup wrapper = new JBossTestSetup(suite) {

            protected void setUp() throws Exception {
                super.setUp();
                deploy("dtmpassthrough2dtm.jar");
            }

            protected void tearDown() throws Exception {
                undeploy("dtmpassthrough2dtm.jar");
                super.tearDown();
            }
        };
        return wrapper;
    }
} </s>
<s>class temp {        private void open() throws IOException {
            if (in != null) return;
            try {
                con = url.openConnection();
                in = con.getInputStream();
            } catch (IOException e) {
                if (cached.exists()) {
                    LOG.fine("Falling back to cached copy of wiki file " + url);
                    in = new FileInputStream(cached);
                    con = null;
                    return;
                }
                throw e;
            }
            try {
                tmp = new File(cached.getAbsolutePath() + ".tmp");
                tmp.getParentFile().mkdirs();
                out = new FileOutputStream(tmp);
            } catch (IOException e) {
                LOG.fine("can't write cached copy of wiki file " + url);
            }
        }
} </s>
<s>class temp {    public static void uploadFile(String localPath, String hostname, String username, String password, String remotePath) {
        FTPClient ftpClient = new FTPClient();
        try {
            ftpClient.connect(hostname);
            int reply = ftpClient.getReplyCode();
            boolean success = false;
            if (FTPReply.isPositiveCompletion(reply)) {
                success = ftpClient.login(username, password);
                if (!success) {
                    Output.error("Failed to login with username/password " + username + "/" + password);
                    return;
                }
                ftpClient.enterLocalPassiveMode();
                ftpClient.setFileType(FTP.ASCII_FILE_TYPE);
            }
            FileInputStream in = new FileInputStream(localPath);
            boolean result = ftpClient.storeFile(remotePath, in);
            if (!result) {
                Output.error("Logged in but failed to upload " + localPath + " to " + remotePath + "\nPerhaps one of the paths was wrong.");
            }
            in.close();
            ftpClient.disconnect();
        } catch (IOException ioe) {
            Output.error("Error ftp'ing using " + "\nlocalPath: " + localPath + "\nhostname: " + hostname + "\nusername: " + username + "\npassword: " + password + "\nremotePath: " + remotePath, ioe);
        }
    }
} </s>
<s>class temp {    private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                if (url != null) properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    @Override
    protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        if (beforeServingFile(req, resp)) {
            String pathInfo = req.getPathInfo();
            Validate.notNull(pathInfo, "the path info is null -> the sevlet should be mapped with /<mapping>/*");
            String resurouce = pathInfo.substring(1);
            if (log.isDebugEnabled()) {
                log.debug("resource to expose: " + resurouce);
            }
            String extension = resurouce.substring(resurouce.lastIndexOf('.') + 1);
            MimeType mimeType = MimeTypeRegistry.getByExtension(extension);
            Validate.notNull(mimeType, "no mimetype found for extension: " + extension);
            if (log.isDebugEnabled()) {
                log.debug("the mime type to set: " + mimeType.getMimeType());
            }
            File f = new File(mappedFolder, resurouce);
            Validate.isTrue(f.exists(), "file: " + f + " does not exist");
            Validate.isTrue(f.canRead(), "can not read the file: " + f);
            if (log.isDebugEnabled()) {
                log.debug("exposing the file: " + f);
            }
            resp.setContentType(mimeType.getMimeType());
            FileInputStream fis = new FileInputStream(f);
            ServletOutputStream os = resp.getOutputStream();
            IOUtils.copy(fis, os);
            os.flush();
            IOUtils.closeQuietly(fis);
            IOUtils.closeQuietly(os);
        }
    }
} </s>
<s>class temp {    @Override
    public DataTable generateDataTable(Query query, HttpServletRequest request) throws DataSourceException {
        String url = request.getParameter(URL_PARAM_NAME);
        if (StringUtils.isEmpty(url)) {
            log.error("url parameter not provided.");
            throw new DataSourceException(ReasonType.INVALID_REQUEST, "url parameter not provided");
        }
        Reader reader;
        try {
            reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
        } catch (MalformedURLException e) {
            log.error("url is malformed: " + url);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, "url is malformed: " + url);
        } catch (IOException e) {
            log.error("Couldn't read from url: " + url, e);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, "Couldn't read from url: " + url);
        }
        DataTable dataTable = null;
        ULocale requestLocale = DataSourceHelper.getLocaleFromRequest(request);
        try {
            dataTable = CsvDataSourceHelper.read(reader, null, true, requestLocale);
        } catch (IOException e) {
            log.error("Couldn't read from url: " + url, e);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, "Couldn't read from url: " + url);
        }
        return dataTable;
    }
} </s>
<s>class temp {    public static String rename_file(String sessionid, String key, String newFileName) {
        String jsonstring = "";
        try {
            Log.d("current running function name:", "rename_file");
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost("https://mt0-app.cloud.cm/rpc/json");
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
            nameValuePairs.add(new BasicNameValuePair("c", "Storage"));
            nameValuePairs.add(new BasicNameValuePair("m", "rename_file"));
            nameValuePairs.add(new BasicNameValuePair("new_name", newFileName));
            nameValuePairs.add(new BasicNameValuePair("key", key));
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            httppost.setHeader("Cookie", "PHPSESSID=" + sessionid);
            HttpResponse response = httpclient.execute(httppost);
            jsonstring = EntityUtils.toString(response.getEntity());
            Log.d("jsonStringReturned:", jsonstring);
            return jsonstring;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonstring;
    }
} </s>
<s>class temp {    public static String rename_tag(String sessionid, String originalTag, String newTagName) {
        String jsonstring = "";
        try {
            Log.d("current running function name:", "rename_tag");
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost("https://mt0-app.cloud.cm/rpc/json");
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
            nameValuePairs.add(new BasicNameValuePair("c", "Storage"));
            nameValuePairs.add(new BasicNameValuePair("m", "rename_tag"));
            nameValuePairs.add(new BasicNameValuePair("new_tag_name", newTagName));
            nameValuePairs.add(new BasicNameValuePair("absolute_tag", originalTag));
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            httppost.setHeader("Cookie", "PHPSESSID=" + sessionid);
            HttpResponse response = httpclient.execute(httppost);
            jsonstring = EntityUtils.toString(response.getEntity());
            Log.d("jsonStringReturned:", jsonstring);
            return jsonstring;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonstring;
    }
} </s>
<s>class temp {    public static String upload_file(String sessionid, String localFilePath, String remoteTagPath) {
        String jsonstring = "If you see this message, there is some problem inside the function:upload_file()";
        String srcPath = localFilePath;
        String uploadUrl = "https://s2.cloud.cm/rpc/json/?session_id=" + sessionid + "&c=Storage&m=upload_file&tag=" + remoteTagPath;
        String end = "\r\n";
        String twoHyphens = "--";
        String boundary = "******";
        try {
            URL url = new URL(uploadUrl);
            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setRequestMethod("POST");
            httpURLConnection.setRequestProperty("Connection", "Keep-Alive");
            httpURLConnection.setRequestProperty("Charset", "UTF-8");
            httpURLConnection.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
            DataOutputStream dos = new DataOutputStream(httpURLConnection.getOutputStream());
            dos.writeBytes(twoHyphens + boundary + end);
            dos.writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\"" + srcPath.substring(srcPath.lastIndexOf("/") + 1) + "\"" + end);
            dos.writeBytes(end);
            FileInputStream fis = new FileInputStream(srcPath);
            byte[] buffer = new byte[8192];
            int count = 0;
            while ((count = fis.read(buffer)) != -1) {
                dos.write(buffer, 0, count);
            }
            fis.close();
            dos.writeBytes(end);
            dos.writeBytes(twoHyphens + boundary + twoHyphens + end);
            dos.flush();
            InputStream is = httpURLConnection.getInputStream();
            InputStreamReader isr = new InputStreamReader(is, "utf-8");
            BufferedReader br = new BufferedReader(isr);
            jsonstring = br.readLine();
            dos.close();
            is.close();
            return jsonstring;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonstring;
    }
} </s>
<s>class temp {    @Override
    public void run() {
        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
        final String url = service.streamUrl.toString();
        InputStream stream = null;
        try {
            final URLConnection con = new URL(url).openConnection();
            con.setRequestProperty("Icy-MetaData", "1");
            con.setRequestProperty("Connection", "close");
            con.setRequestProperty("Accept", null);
            con.connect();
            stream = con.getInputStream();
            int metaDataOffset = -1;
            final Map<String, List<String>> headers = con.getHeaderFields();
            if (headers.containsKey("icy-metaint")) {
                metaDataOffset = Integer.parseInt(headers.get("icy-metaint").get(0));
            } else {
                final StringBuilder strHeaders = new StringBuilder();
                char c;
                while ((c = (char) stream.read()) != -1) {
                    strHeaders.append(c);
                    final int c5 = 5, c4 = 4;
                    if (strHeaders.length() > c5 && "\r\n\r\n".equals(strHeaders.substring((strHeaders.length() - c4), strHeaders.length()))) {
                        break;
                    }
                }
                final Matcher m = PATTERN.matcher(strHeaders.toString());
                if (m.find()) {
                    metaDataOffset = Integer.parseInt(m.group(2));
                }
            }
            if (metaDataOffset == -1) {
                throw new RuntimeException("no data");
            }
            final int bufSize = 4096;
            final byte[] buffer = new byte[bufSize];
            final int initialMetaLength = 1024;
            final StringBuilder metaData = new StringBuilder(initialMetaLength);
            int leftToSkip = metaDataOffset;
            while (true) {
                if (Thread.interrupted()) {
                    throw new RuntimeException("interrtupted");
                }
                while (leftToSkip > 0) {
                    final long actual = stream.skip(leftToSkip);
                    leftToSkip -= actual;
                }
                int count = 0;
                int metaDataLength = 0;
                metaData.delete(0, metaData.length());
                int lastReadCount;
                while ((lastReadCount = stream.read(buffer)) != -1) {
                    if (Thread.interrupted()) {
                        throw new RuntimeException("interrtupted");
                    }
                    if (lastReadCount == 0) {
                        continue;
                    }
                    if (count == 0) {
                        final int paragraph = 16;
                        metaDataLength = buffer[0] * paragraph;
                    }
                    final int startIndex = count == 0 ? 1 : 0;
                    int length = count == 0 ? lastReadCount - 1 : lastReadCount;
                    count += lastReadCount;
                    if (count > metaDataLength) {
                        length -= count - metaDataLength;
                        if (count == lastReadCount) {
                            length++;
                        }
                    }
                    if (length > 0) {
                        metaData.append(new String(buffer, startIndex, length, "UTF-8"));
                    }
                    if (count > metaDataLength) {
                        break;
                    }
                }
                if (lastReadCount == -1) {
                    break;
                }
                leftToSkip = metaDataOffset - (count - metaDataLength - 1);
                if (metaData.length() > 0) {
                    service.updateAudioInfo(metaData.toString());
                }
            }
        } catch (final IOException e) {
            Log.e(TAG, "IO error", e);
        } catch (final RuntimeException e) {
            if (DEBUG) {
                Log.i(TAG, e.getMessage());
            }
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (final IOException e) {
                    Log.e(TAG, "Cannot close stream", e);
                }
            }
        }
    }
} </s>
<s>class temp {    private void refreshCacheFile(RepositoryFile file, File cacheFile) throws FileNotFoundException, IOException {
        FileOutputStream fos = new FileOutputStream(cacheFile);
        InputStream is = file.getInputStream();
        int count = IOUtils.copy(is, fos);
        logger.debug("===========================================================> wrote bytes to cache " + count);
        fos.flush();
        IOUtils.closeQuietly(fos);
        IOUtils.closeQuietly(file.getInputStream());
    }
} </s>
<s>class temp {    protected InputStream[] getInputStreams(List<URL> files) throws ResourceException {
        InputStream[] result = new InputStream[files.size()];
        int i = 0;
        try {
            for (URL url : files) {
                result[i++] = url.openStream();
            }
        } catch (IOException e) {
            for (int j = 0; j < i; j++) {
                try {
                    if (UtilLog.LOG.isDebugEnabled()) {
                        UtilLog.LOG.debug("Closing " + files.get(j));
                    }
                    result[j].close();
                } catch (IOException e1) {
                    if (UtilLog.LOG.isDebugEnabled()) {
                        UtilLog.LOG.debug(e1.getMessage(), e1);
                    }
                }
            }
            if (UtilLog.LOG.isDebugEnabled()) {
                UtilLog.LOG.debug(e.getMessage(), e);
            }
            throw new ResourceException(e);
        }
        return result;
    }
} </s>
<s>class temp {    private void copy(File sourceFile, File destinationFile) {
        try {
            FileChannel in = new FileInputStream(sourceFile).getChannel();
            FileChannel out = new FileOutputStream(destinationFile).getChannel();
            try {
                in.transferTo(0, in.size(), out);
                in.close();
                out.close();
            } catch (IOException e) {
                GTLogger.getInstance().error(e);
            }
        } catch (FileNotFoundException e) {
            GTLogger.getInstance().error(e);
        }
    }
} </s>
<s>class temp {    public boolean backup() {
        try {
            File sd = Environment.getExternalStorageDirectory();
            File data = Environment.getDataDirectory();
            if (sd.canWrite()) {
                String currentDBPath = "/data/android.bluebox/databases/bluebox.db";
                String backupDBPath = "/Android/bluebox.bak";
                File currentDB = new File(data, currentDBPath);
                File backupDB = new File(sd, backupDBPath);
                if (currentDB.exists()) {
                    FileChannel src = new FileInputStream(currentDB).getChannel();
                    FileChannel dst = new FileOutputStream(backupDB).getChannel();
                    dst.transferFrom(src, 0, src.size());
                    src.close();
                    dst.close();
                    return true;
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
} </s>
<s>class temp {    public boolean restore() {
        try {
            File sd = Environment.getExternalStorageDirectory();
            File data = Environment.getDataDirectory();
            if (sd.canWrite()) {
                String currentDBPath = "/Android/bluebox.bak";
                String backupDBPath = "/data/android.bluebox/databases/bluebox.db";
                File currentDB = new File(sd, currentDBPath);
                File backupDB = new File(data, backupDBPath);
                if (currentDB.exists()) {
                    FileChannel src = new FileInputStream(currentDB).getChannel();
                    FileChannel dst = new FileOutputStream(backupDB).getChannel();
                    dst.transferFrom(src, 0, src.size());
                    src.close();
                    dst.close();
                    return true;
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
} </s>
<s>class temp {    @Override
    public void run() {
        try {
            FTPClient ftp = new FTPClient();
            try {
                ftp.connect("localhost", 21);
                ftp.login("ftpuser", "ftpuser123");
                System.out.println("Current: " + ftp.printWorkingDirectory());
                System.out.println("Dir status: " + ftp.makeDirectory(DIR));
                ftp.changeWorkingDirectory(DIR);
                System.out.println("File status: " + ftp.storeFile(FILE_PREFIX + this.getName(), getByteInputStream()));
            } finally {
                ftp.disconnect();
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    public static void copyFile(File source, File dest) throws Exception {
        FileInputStream fis = new FileInputStream(source);
        try {
            FileOutputStream fos = new FileOutputStream(dest);
            try {
                int read = fis.read();
                while (read != -1) {
                    fos.write(read);
                    read = fis.read();
                }
            } finally {
                fos.close();
            }
        } finally {
            fis.close();
        }
    }
} </s>
<s>class temp {    public void init() {
        String filename = getParameter("filename");
        if (filename == null) {
            Error("Illegal filename");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int w = Integer.parseInt(getParameter("width"));
            int h = Integer.parseInt(getParameter("height"));
            dim = new Dimension(w, h);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL url = new URL(filename);
                in = url.openStream();
            } catch (Exception e) {
                Error("Graph viewer: Failed to open: " + filename + "\n" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
} </s>
<s>class temp {public void parseFile(String filespec, URL documentBase) {
        DataInputStream in = null;
        if (filespec == null || filespec.length() == 0) {
            in = new DataInputStream(System.in);
        } else {
            try {
                URL url = null;
                if (documentBase == null && _documentBase != null) {
                    documentBase = _documentBase;
                }
                if (documentBase == null) {
                    url = new URL(filespec);
                } else {
                    try {
                        url = new URL(documentBase, filespec);
                    } catch (NullPointerException e) {
                        url = new URL(filespec);
                    }
                }
                in = new DataInputStream(url.openStream());
            } catch (MalformedURLException e) {
                try {
                    in = new DataInputStream(new FileInputStream(filespec));
                } catch (FileNotFoundException me) {
                    _errorMsg = new String[2];
                    _errorMsg[0] = "File not found: " + filespec;
                    _errorMsg[1] = me.getMessage();
                    return;
                } catch (SecurityException me) {
                    _errorMsg = new String[2];
                    _errorMsg[0] = "Security Exception: " + filespec;
                    _errorMsg[1] = me.getMessage();
                    return;
                }
            } catch (IOException ioe) {
                _errorMsg = new String[3];
                _errorMsg[0] = "Failure opening URL: ";
                _errorMsg[1] = " " + filespec;
                _errorMsg[2] = ioe.getMessage();
                return;
            }
        }
        try {
            BufferedReader din = new BufferedReader(new InputStreamReader(in));
            String line = din.readLine();
            while (line != null) {
                _parseLine(line);
                line = din.readLine();
            }
        } catch (MalformedURLException e) {
            _errorMsg = new String[2];
            _errorMsg[0] = "Malformed URL: " + filespec;
            _errorMsg[1] = e.getMessage();
            return;
        } catch (IOException e) {
            _errorMsg = new String[2];
            _errorMsg[0] = "Failure reading data: " + filespec;
            _errorMsg[1] = e.getMessage();
            _errorMsg[1] = e.getMessage();
        } finally {
            try {
                in.close();
            } catch (IOException me) {
            }
        }
    }} </s>
<s>class temp {    public boolean parseResults(URL url, String analysis_type, CurationI curation, Date analysis_date, String regexp) throws OutputMalFormatException {
        boolean parsed = false;
        try {
            InputStream data_stream = url.openStream();
            parsed = parseResults(data_stream, analysis_type, curation, analysis_date, regexp);
        } catch (OutputMalFormatException ex) {
            throw new OutputMalFormatException(ex.getMessage(), ex);
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return parsed;
    }
} </s>
<s>class temp {    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error: " + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0L;
            if (secure) rand = mySecureRand.nextLong(); else rand = myRand.nextLong();
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte array[] = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; j++) {
                int b = array[j] & 0xff;
                if (b < 16) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
} </s>
<s>class temp {    private void loadServers() {
        try {
            URL url = new URL(VirtualDeckConfig.SERVERS_URL);
            cmbServer.addItem("Local");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            if (in.readLine().equals("[list]")) {
                while ((str = in.readLine()) != null) {
                    String[] host_line = str.split(";");
                    Host h = new Host();
                    h.setIp(host_line[0]);
                    h.setPort(Integer.parseInt(host_line[1]));
                    h.setName(host_line[2]);
                    getServers().add(h);
                    cmbServer.addItem(h.getName());
                }
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
} </s>
<s>class temp {    public static String encodePassword(String _originalPassword) {
        MessageDigest md = null;
        String encodedPassword = null;
        try {
            md = MessageDigest.getInstance("SHA-1");
            md.update(_originalPassword.getBytes("UTF-8"));
            encodedPassword = (new BASE64Encoder()).encode(md.digest());
        } catch (NoSuchAlgorithmException _e) {
            _e.printStackTrace();
        } catch (UnsupportedEncodingException _e) {
            _e.printStackTrace();
        }
        return encodedPassword;
    }
} </s>
<s>class temp {    public String login(String nUsuario, String contrasena) {
        String responce = "";
        String request = conf.Conf.login;
        OutputStreamWriter wr = null;
        BufferedReader rd = null;
        try {
            URL url = new URL(request);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write("nUsuario=" + nUsuario + "&contrasena=" + contrasena);
            wr.flush();
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                responce += line;
            }
        } catch (Exception e) {
        }
        return responce;
    }
} </s>
<s>class temp {    public String buscarArchivos(String nUsuario) {
        String responce = "";
        String request = conf.Conf.buscarArchivo;
        OutputStreamWriter wr = null;
        BufferedReader rd = null;
        try {
            URL url = new URL(request);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write("nUsuario=" + nUsuario);
            wr.flush();
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                responce += line;
            }
        } catch (Exception e) {
        }
        return responce;
    }
} </s>
<s>class temp {    public String descargarArchivo(String miArchivo, String nUsuario) {
        try {
            URL url = new URL(conf.Conf.descarga + nUsuario + "/" + miArchivo);
            URLConnection urlCon = url.openConnection();
            System.out.println(urlCon.getContentType());
            InputStream is = urlCon.getInputStream();
            FileOutputStream fos = new FileOutputStream("D:/" + miArchivo);
            byte[] array = new byte[1000];
            int leido = is.read(array);
            while (leido > 0) {
                fos.write(array, 0, leido);
                leido = is.read(array);
            }
            is.close();
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "llego";
    }
} </s>
<s>class temp {        public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException {
            String bundleName = toBundleName(baseName, locale);
            String resourceName = toResourceName(bundleName, "properties");
            ResourceBundle bundle = null;
            InputStream stream = null;
            if (reload) {
                URL url = loader.getResource(resourceName);
                if (url != null) {
                    URLConnection connection = url.openConnection();
                    if (connection != null) {
                        connection.setUseCaches(false);
                        stream = connection.getInputStream();
                    }
                }
            } else {
                stream = loader.getResourceAsStream(resourceName);
            }
            if (stream != null) {
                try {
                    bundle = new PropertyResourceBundle(new InputStreamReader(stream, "UTF-8"));
                } finally {
                    stream.close();
                }
            }
            return bundle;
        }
} </s>
<s>class temp {    public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println("Download dir local");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + " is not a directory.");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
} </s>
<s>class temp {    public InputStream openAsStream() throws IOException {
        ClassLoader cl = _preferredClassLoader;
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        final URL url = (cl == null) ? null : cl.getResource(_path);
        return (url == null) ? null : url.openStream();
    }
} </s>
<s>class temp {        private void importExample(boolean server) throws IOException, XMLStreamException, FactoryConfigurationError {
            InputStream example = null;
            if (server) {
                monitor.setNote(Messages.getString("ImportExampleDialog.Cont"));
                monitor.setProgress(0);
                String page = engine.getConfiguration().getProperty("example.url");
                URL url = new URL(page);
                BufferedReader rr = new BufferedReader(new InputStreamReader(url.openStream()));
                try {
                    sleep(3000);
                } catch (InterruptedException e1) {
                    Logger.getLogger(this.getClass()).debug("Internal error.", e1);
                }
                if (monitor.isCanceled()) {
                    return;
                }
                try {
                    while (rr.ready()) {
                        if (monitor.isCanceled()) {
                            return;
                        }
                        String l = rr.readLine();
                        if (example == null) {
                            int i = l.indexOf("id=\"example\"");
                            if (i > 0) {
                                l = l.substring(i + 19);
                                l = l.substring(0, l.indexOf('"'));
                                url = new URL(l);
                                example = url.openStream();
                            }
                        }
                    }
                } catch (IOException ex) {
                    throw ex;
                } finally {
                    if (rr != null) {
                        try {
                            rr.close();
                        } catch (Exception e) {
                            Logger.getLogger(this.getClass()).debug("Internal error.", e);
                        }
                    }
                }
            } else {
                InputStream is = ApplicationHelper.class.getClassLoader().getResourceAsStream("gtd-free-example.xml");
                if (is != null) {
                    example = is;
                }
            }
            if (example != null) {
                if (monitor.isCanceled()) {
                    try {
                        example.close();
                    } catch (IOException e) {
                        Logger.getLogger(this.getClass()).debug("Internal error.", e);
                    }
                    return;
                }
                monitor.setNote(Messages.getString("ImportExampleDialog.Read"));
                monitor.setProgress(1);
                model = new GTDModel(null);
                GTDDataXMLTools.importFile(model, example);
                try {
                    example.close();
                } catch (IOException e) {
                    Logger.getLogger(this.getClass()).debug("Internal error.", e);
                }
                if (monitor.isCanceled()) {
                    return;
                }
                monitor.setNote(Messages.getString("ImportExampleDialog.Imp.File"));
                monitor.setProgress(2);
                try {
                    SwingUtilities.invokeAndWait(new Runnable() {

                        @Override
                        public void run() {
                            if (monitor.isCanceled()) {
                                return;
                            }
                            engine.getGTDModel().importData(model);
                        }
                    });
                } catch (InterruptedException e1) {
                    Logger.getLogger(this.getClass()).debug("Internal error.", e1);
                } catch (InvocationTargetException e1) {
                    Logger.getLogger(this.getClass()).debug("Internal error.", e1);
                }
            } else {
                throw new IOException("Failed to obtain remote example file.");
            }
        }
} </s>
<s>class temp {    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (log.isTraceEnabled()) {
            log.trace("doGet(requestURI=" + request.getRequestURI() + ")");
        }
        ServletConfig sc = getServletConfig();
        String uriPrefix = request.getContextPath() + "/" + request.getServletPath();
        String resUri = request.getRequestURI().substring(uriPrefix.length());
        if (log.isTraceEnabled()) {
            log.trace("Request for resource '" + resUri + "'");
        }
        boolean allowAccess = true;
        String prefixesSpec = sc.getInitParameter(PARAM_ALLOWED_PREFIXES);
        if (null != prefixesSpec && prefixesSpec.length() > 0) {
            String[] prefixes = prefixesSpec.split(";");
            allowAccess = false;
            if (log.isTraceEnabled()) {
                log.trace("allowedPrefixes specified; checking access");
            }
            for (String prefix : prefixes) {
                if (log.isTraceEnabled()) {
                    log.trace("Checking resource URI '" + resUri + "' against allowed prefix '" + prefix + "'");
                }
                if (resUri.startsWith(prefix)) {
                    if (log.isTraceEnabled()) {
                        log.trace("Found matching prefix for resource URI '" + resUri + "': '" + prefix + "'");
                    }
                    allowAccess = true;
                    break;
                }
            }
        }
        if (!allowAccess) {
            if (log.isWarnEnabled()) {
                log.warn("Requested for resource that does not match with" + " allowed prefixes: " + resUri);
            }
            response.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        String resPrefix = sc.getInitParameter(PARAM_RESOURCE_PREFIX);
        if (null != resPrefix && resPrefix.length() > 0) {
            if (log.isTraceEnabled()) {
                log.trace("resourcePrefix specified: " + resPrefix);
            }
            if (resPrefix.endsWith("/")) {
                resUri = resPrefix + resUri;
            } else {
                resUri = resPrefix + "/" + resUri;
            }
        }
        resUri = resUri.replaceAll("\\/\\/+", "/");
        if (log.isTraceEnabled()) {
            log.trace("Qualified (prefixed) resource URI: " + resUri);
        }
        String baseClassName = sc.getInitParameter(PARAM_BASE_CLASS);
        if (null == baseClassName || 0 == baseClassName.length()) {
            if (log.isTraceEnabled()) {
                log.trace("No baseClass initialization parameter specified; using default: " + ResourceLoaderServlet.class.getName());
            }
            baseClassName = ResourceLoaderServlet.class.getName();
        } else {
            if (log.isTraceEnabled()) {
                log.trace("Using baseClass: " + baseClassName);
            }
        }
        Class baseClass;
        try {
            baseClass = Class.forName(baseClassName);
        } catch (ClassNotFoundException ex) {
            throw new ServletException("Base class '" + baseClassName + "' not found", ex);
        }
        URL resUrl = baseClass.getResource(resUri);
        if (null != resUrl) {
            if (log.isTraceEnabled()) {
                log.trace("Sending resource: " + resUrl);
            }
            URLConnection urlc = resUrl.openConnection();
            response.setContentType(urlc.getContentType());
            response.setContentLength(urlc.getContentLength());
            response.setStatus(HttpServletResponse.SC_OK);
            final byte[] buf = new byte[255];
            int r = 0;
            InputStream in = new BufferedInputStream(urlc.getInputStream());
            OutputStream out = new BufferedOutputStream(response.getOutputStream());
            do {
                r = in.read(buf, 0, 255);
                if (r > 0) {
                    out.write(buf, 0, r);
                }
            } while (r > 0);
            in.close();
            out.flush();
            out.close();
        } else {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "Resource not found");
        }
    }
} </s>
<s>class temp {    public void install(Session session) throws Exception {
        String cfgPath = ConfigurationFactory.getConfigSonInstance().getConfigurationPath();
        File setupKson = new File(cfgPath, "setup.kson");
        InputStream is = null;
        if (setupKson.exists()) {
            log.debug("Reagind kson from " + setupKson.getAbsolutePath());
            is = new FileInputStream(setupKson);
        } else {
            String ksonCp = "/org/chon/cms/core/setup/setup.kson";
            is = Setup.class.getResourceAsStream(ksonCp);
            log.info("Creating initial setup.kson in " + setupKson.getAbsolutePath());
            IOUtils.copy(is, new FileOutputStream(setupKson));
            is = new FileInputStream(setupKson);
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
        List<String> lines = new ArrayList<String>();
        while (true) {
            String line = br.readLine();
            if (line == null) break;
            lines.add(line);
        }
        List<NodeCreation> ncList = readKSon(lines.toArray(new String[lines.size()]));
        for (NodeCreation nc : ncList) {
            try {
                createNode(session, nc);
            } catch (Exception e) {
                System.err.println("error crating node " + nc.path + " -> " + e.getMessage());
            }
        }
        session.save();
    }
} </s>
<s>class temp {    public byte[] getXQueryForWorkflow(String workflowURI, Log4JLogger log) throws MalformedURLException, IOException, InstantiationException, IllegalAccessException, ClassNotFoundException {
        if (workflowURI == null) {
            throw new XQGeneratorException("Null workflow URI");
        }
        URL url = new URL(workflowURI);
        URLConnection urlconn = url.openConnection();
        urlconn.setAllowUserInteraction(false);
        urlconn.setDoInput(true);
        urlconn.setDoOutput(false);
        urlconn.setUseCaches(true);
        urlconn.connect();
        InputStream is = urlconn.getInputStream();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        TavXQueryGenerator generator = (TavXQueryGenerator) Class.forName(generatorClass).newInstance();
        generator.setLogger(log);
        generator.setInputStream(is);
        generator.setOutputStream(baos);
        generator.generateXQuery();
        is.close();
        return baos.toByteArray();
    }
} </s>
<s>class temp {    public byte[] loadClassFirst(final String className) {
        if (className.equals("com.sun.sgs.impl.kernel.AppKernelAppContext")) {
            final URL url = Thread.currentThread().getContextClassLoader().getResource("com/sun/sgs/impl/kernel/AppKernelAppContext.0.9.5.1.class.bin");
            if (url != null) {
                try {
                    return StreamUtil.read(url.openStream());
                } catch (IOException e) {
                }
            }
            throw new IllegalStateException("Unable to load AppKernelAppContext.0.9.5.1.class.bin");
        }
        return null;
    }
} </s>
<s>class temp {    public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim();
            if (name.indexOf("://") > 0) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
} </s>
<s>class temp {    public boolean copyFile(File destinationFolder, File fromFile) {
        boolean result = false;
        String toFileName = destinationFolder.getAbsolutePath() + "/" + fromFile.getName();
        File toFile = new File(toFileName);
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
                if (to != null) {
                    try {
                        to.close();
                        result = true;
                    } catch (IOException e3) {
                        e3.printStackTrace();
                    }
                }
            }
        }
        return result;
    }
} </s>
<s>class temp {    private void generateSchema() {
        ConsoleOutputWindow console = DefaultXPontusWindowImpl.getInstance().getConsole();
        MessagesWindowDockable mconsole = (MessagesWindowDockable) console.getDockableById(MessagesWindowDockable.DOCKABLE_ID);
        ByteArrayOutputStream bao = new ByteArrayOutputStream();
        IDocumentContainer container = (IDocumentContainer) DefaultXPontusWindowImpl.getInstance().getDocumentTabContainer().getCurrentDockable();
        try {
            SchemaGenerationModel model = view.getModel();
            boolean isValid = transformationIsValid(model);
            if (!isValid) {
                return;
            }
            DefaultXPontusWindowImpl.getInstance().getStatusBar().setMessage("Generating schema...");
            view.setVisible(false);
            InputFormat inFormat = null;
            OutputFormat of = null;
            if (model.getInputType().equalsIgnoreCase("RELAX NG Grammar")) {
                inFormat = new SAXParseInputFormat();
            } else if (model.getInputType().equalsIgnoreCase("RELAX NG Compact Grammar")) {
                inFormat = new CompactParseInputFormat();
            } else if (model.getInputType().equalsIgnoreCase("DTD")) {
                inFormat = new DtdInputFormat();
            } else if (model.getInputType().equalsIgnoreCase("XML")) {
                inFormat = new XmlInputFormat();
            }
            if (model.getOutputType().equalsIgnoreCase("DTD")) {
                of = new DtdOutputFormat();
            } else if (model.getOutputType().equalsIgnoreCase("Relax NG Grammar")) {
                of = new RngOutputFormat();
            } else if (model.getOutputType().equalsIgnoreCase("XML Schema")) {
                of = new XsdOutputFormat();
            } else if (model.getOutputType().equalsIgnoreCase("Relax NG Compact Grammar")) {
                of = new RncOutputFormat();
            }
            ErrorHandlerImpl eh = new ErrorHandlerImpl(bao);
            SchemaCollection sc = null;
            if (!view.getModel().isUseExternalDocument()) {
                JTextComponent jtc = DefaultXPontusWindowImpl.getInstance().getDocumentTabContainer().getCurrentEditor();
                if (jtc == null) {
                    XPontusComponentsUtils.showErrorMessage("No document opened!!!");
                    DefaultXPontusWindowImpl.getInstance().getStatusBar().setMessage("Error generating schema, Please see the messages window!");
                    return;
                }
                String suffixe = model.getOutputType().toLowerCase();
                File tmp = File.createTempFile("schemageneratorhandler", +System.currentTimeMillis() + "." + suffixe);
                OutputStream m_outputStream = new FileOutputStream(tmp);
                CharsetDetector detector = new CharsetDetector();
                detector.setText(jtc.getText().getBytes());
                Writer m_writer = new OutputStreamWriter(m_outputStream, "UTF-8");
                IOUtils.copy(detector.detect().getReader(), m_writer);
                IOUtils.closeQuietly(m_writer);
                try {
                    sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh);
                } catch (Exception ife) {
                    ife.printStackTrace();
                    StrBuilder stb = new StrBuilder();
                    stb.append("\nError loading input document!\n");
                    stb.append("Maybe the input type is invalid?\n");
                    stb.append("Please check again the input type list or trying validating your document\n");
                    throw new Exception(stb.toString());
                }
                tmp.deleteOnExit();
            } else {
                try {
                    sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh);
                } catch (Exception ife) {
                    StrBuilder stb = new StrBuilder();
                    stb.append("\nError loading input document!\n");
                    stb.append("Maybe the input type is invalid?\n");
                    stb.append("Please check again the input type list or trying validating your document\n");
                    throw new Exception(stb.toString());
                }
            }
            OutputDirectory od = new LocalOutputDirectory(sc.getMainUri(), new File(view.getModel().getOutputURI()), model.getOutputType().toLowerCase(), DEFAULT_OUTPUT_ENCODING, DEFAULT_LINE_LENGTH, DEFAULT_INDENT);
            of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh);
            mconsole.println("Schema generated sucessfully!");
            DefaultXPontusWindowImpl.getInstance().getStatusBar().setMessage("Schema generated sucessfully!");
            if (model.isOpenInEditor()) {
                XPontusComponentsUtils.showWarningMessage("The document will NOT be opened in the editor sorry for that!\n You need to open it yourself.");
            }
        } catch (Exception ex) {
            DefaultXPontusWindowImpl.getInstance().getStatusBar().setMessage("Error generating schema, Please see the messages window!");
            StringWriter sw = new StringWriter();
            PrintWriter ps = new PrintWriter(sw);
            ex.printStackTrace(ps);
            StrBuilder sb = new StrBuilder();
            sb.append("Error generating schema");
            sb.appendNewLine();
            sb.append(new String(bao.toByteArray()));
            sb.appendNewLine();
            if (ex instanceof SAXParseException) {
                SAXParseException spe = (SAXParseException) ex;
                sb.append("Error around line " + spe.getLineNumber());
                sb.append(", column " + spe.getColumnNumber());
                sb.appendNewLine();
            }
            sb.append(sw.toString());
            mconsole.println(sb.toString(), OutputDockable.RED_STYLE);
            logger.error(sb.toString());
            try {
                ps.flush();
                ps.close();
                sw.flush();
                sw.close();
            } catch (IOException ioe) {
                logger.error(ioe.getMessage());
            }
        } finally {
            console.setFocus(MessagesWindowDockable.DOCKABLE_ID);
            Toolkit.getDefaultToolkit().beep();
        }
    }
} </s>
<s>class temp {    public static Result checkLink(String theUrl) throws MalformedURLException {
        URL url = new URL(theUrl);
        HttpURLConnection urlConnection = null;
        try {
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(5000);
            urlConnection.setRequestMethod("GET");
            urlConnection.connect();
            return new Result(urlConnection.getResponseCode(), false);
        } catch (IOException e) {
            return new Result(0, true);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
    }
} </s>
<s>class temp {    public static void compress(File srcFile, File destFile) throws IOException {
        InputStream input = null;
        OutputStream output = null;
        try {
            input = new BufferedInputStream(new FileInputStream(srcFile));
            output = new GZIPOutputStream(new FileOutputStream(destFile));
            IOUtils.copyLarge(input, output);
        } finally {
            IOUtils.closeQuietly(output);
            IOUtils.closeQuietly(input);
        }
    }
} </s>
<s>class temp {    public static void uncompress(File srcFile, File destFile) throws IOException {
        InputStream input = null;
        OutputStream output = null;
        try {
            input = new GZIPInputStream(new FileInputStream(srcFile));
            output = new BufferedOutputStream(new FileOutputStream(destFile));
            IOUtils.copyLarge(input, output);
        } finally {
            IOUtils.closeQuietly(output);
            IOUtils.closeQuietly(input);
        }
    }
} </s>
<s>class temp {    @Test
    public void testTrainingDefault() throws IOException {
        File temp = File.createTempFile("fannj_", ".tmp");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("" + mse, mse <= desiredError);
    }
} </s>
<s>class temp {    @Test
    public void testTrainingQuickprop() throws IOException {
        File temp = File.createTempFile("fannj_", ".tmp");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_QUICKPROP);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("" + mse, mse <= desiredError);
    }
} </s>
<s>class temp {    @Test
    public void testTrainingBackprop() throws IOException {
        File temp = File.createTempFile("fannj_", ".tmp");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("" + mse, mse <= desiredError);
    }
} </s>
<s>class temp {    @Test
    public void testCascadeTraining() throws IOException {
        File temp = File.createTempFile("fannj_", ".tmp");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream("parity8.train"), new FileOutputStream(temp));
        Fann fann = new FannShortcut(8, 1);
        Trainer trainer = new Trainer(fann);
        float desiredError = .00f;
        float mse = trainer.cascadeTrain(temp.getPath(), 30, 1, desiredError);
        assertTrue("" + mse, mse <= desiredError);
    }
} </s>
<s>class temp {    public static String SHA(String s) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(s.getBytes(), 0, s.getBytes().length);
            byte[] hash = md.digest();
            StringBuilder sb = new StringBuilder();
            int msb;
            int lsb = 0;
            int i;
            for (i = 0; i < hash.length; i++) {
                msb = ((int) hash[i] & 0x000000FF) / 16;
                lsb = ((int) hash[i] & 0x000000FF) % 16;
                sb.append(hexChars[msb]);
                sb.append(hexChars[lsb]);
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    private void sendRemoteFiles() throws Exception {
        if (validParameters()) {
            URL url = new URL(storageUrlString);
            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            RequestUtils requestUtils = new RequestUtils();
            requestUtils.preRequestAddParameter("senderObj", "FileSender");
            requestUtils.preRequestAddParameter("wfiType", "zen");
            requestUtils.preRequestAddParameter("portalID", this.portalID);
            requestUtils.preRequestAddParameter("userID", this.userID);
            requestUtils.preRequestAddParameter("workflowID", this.workflowID);
            requestUtils.preRequestAddParameter("jobID", this.jobID);
            requestUtils.preRequestAddParameter("pidID", this.pidID);
            requestUtils.preRequestAddParameter("runtimeID", this.runtimeID);
            requestUtils.preRequestAddParameter("copyhash", getCopyHashStr());
            String zipFileName = ZipUtils.getInstance().getUniqueZipFileName();
            requestUtils.preRequestAddFile("zipFileName", zipFileName);
            requestUtils.createPostRequest();
            httpURLConnection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + requestUtils.getBoundary());
            httpURLConnection.setRequestMethod("POST");
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setDoInput(true);
            try {
                httpURLConnection.connect();
                OutputStream out = httpURLConnection.getOutputStream();
                byte[] preBytes = requestUtils.getPreRequestStringBytes();
                out.write(preBytes);
                out.flush();
                ZipUtils.getInstance().sendDirAllFilesToStream(sendFilesDir, out);
                byte[] postBytes = requestUtils.getPostRequestStringBytes();
                out.write(postBytes);
                out.flush();
                out.close();
                BufferedReader in = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()));
                in.readLine();
                in.close();
                if (HttpURLConnection.HTTP_OK != httpURLConnection.getResponseCode()) {
                    throw new Exception("response not HTTP_OK !");
                }
            } catch (Exception e) {
                e.printStackTrace();
                throw new Exception("Cannot connect to: " + storageUrlString, e);
            }
        } else {
            throw new Exception("FilesDir not exist ! or not valid parameters: portalID, userID, workflowID, jobID, pidID, runtimeID !");
        }
    }
} </s>
<s>class temp {    @SuppressWarnings("static-access")
    @RequestMapping(value = "/upload/upload.html", method = RequestMethod.POST)
    protected void save(HttpServletRequest request, HttpServletResponse response) throws ServletException {
        UPLOAD_DIRECTORY = uploadDiretory();
        File diretorioUsuario = new File(UPLOAD_DIRECTORY);
        boolean diretorioCriado = false;
        if (!diretorioUsuario.exists()) {
            diretorioCriado = diretorioUsuario.mkdir();
            if (!diretorioCriado) throw new RuntimeException("Não foi possível criar o diretório do usuário");
        }
        PrintWriter writer = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            writer = response.getWriter();
        } catch (IOException ex) {
            System.err.println(FileUploadController.class.getName() + "has thrown an exception: " + ex.getMessage());
        }
        String filename = request.getHeader("X-File-Name");
        try {
            is = request.getInputStream();
            fos = new FileOutputStream(new File(UPLOAD_DIRECTORY + filename));
            IOUtils.copy(is, fos);
            response.setStatus(response.SC_OK);
            writer.print("{success: true}");
        } catch (FileNotFoundException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print("{success: false}");
            System.err.println(FileUploadController.class.getName() + "has thrown an exception: " + ex.getMessage());
        } catch (IOException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print("{success: false}");
            System.err.println(FileUploadController.class.getName() + "has thrown an exception: " + ex.getMessage());
        } finally {
            try {
                fos.close();
                is.close();
            } catch (IOException ignored) {
            }
        }
        writer.flush();
        writer.close();
    }
} </s>
<s>class temp {    public String md5(String phrase) {
        MessageDigest m;
        String coded = new String();
        try {
            m = MessageDigest.getInstance("MD5");
            m.update(phrase.getBytes(), 0, phrase.length());
            coded = (new BigInteger(1, m.digest()).toString(16)).toString();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return coded;
    }
} </s>
<s>class temp {    public void serviceDocument(final TranslationRequest request, final TranslationResponse response, final Document document) throws Exception {
        response.addHeaders(document.getResponseHeaders());
        try {
            IOUtils.copy(document.getInputStream(), response.getOutputStream());
            response.setEndState(ResponseStateOk.getInstance());
        } catch (Exception e) {
            response.setEndState(new ResponseStateException(e));
            log.warn("Error parsing XML of " + document, e);
        }
    }
} </s>
<s>class temp {    public JavaCodeAnalyzer(String filenameIn, String filenameOut, String lineLength) {
        try {
            File tmp = File.createTempFile("JavaCodeAnalyzer", "tmp");
            BufferedReader br = new BufferedReader(new FileReader(filenameIn));
            BufferedWriter out = new BufferedWriter(new FileWriter(tmp));
            while (br.ready()) {
                out.write(br.read());
            }
            br.close();
            out.close();
            jco = new JavaCodeOutput(tmp, filenameOut, lineLength);
            SourceCodeParser p = new JavaCCParserFactory().createParser(new FileReader(tmp), null);
            List statements = p.parseCompilationUnit();
            ListIterator it = statements.listIterator();
            eh = new ExpressionHelper(this, jco);
            Node n;
            printLog("Parsed file " + filenameIn + "\n");
            while (it.hasNext()) {
                n = (Node) it.next();
                parseObject(n);
            }
            tmp.delete();
        } catch (Exception e) {
            System.err.println(getClass() + ": " + e);
        }
    }
} </s>
<s>class temp {    private void populateSessionId() throws IOException, java.net.MalformedURLException {
        String general_search_url = "http://agricola.nal.usda.gov/cgi-bin/Pwebrecon.cgi?" + "DB=local&CNT=1&Search_Arg=RNAi&Search_Code=GKEY&STARTDB=AGRIDB";
        String sidString = "", inputLine;
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(general_search_url)).openStream()));
        while ((inputLine = in.readLine()) != null) {
            if (inputLine.startsWith("<INPUT TYPE=HIDDEN NAME=PID VALUE=")) {
                sidString = (inputLine.substring(inputLine.indexOf("PID VALUE=") + 11, inputLine.indexOf(">") - 1));
            }
        }
        sessionId = Integer.parseInt(sidString.trim());
    }
} </s>
