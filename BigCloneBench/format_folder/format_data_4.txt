<s>class temp {    public static void copy(FileInputStream source, FileOutputStream target) throws IOException {
        FileChannel sourceChannel = source.getChannel();
        FileChannel targetChannel = target.getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
        sourceChannel.close();
        targetChannel.close();
    }
} </s>
<s>class temp {    public final InputStream getStreamFromUrl(final URL url) {
        try {
            if (listener != null) {
                listener.openedStream(url);
            }
            return url.openStream();
        } catch (IOException e) {
            listener.exceptionThrown(e);
            return null;
        }
    }
} </s>
<s>class temp {    public static void copyFile(File fromFile, File toFile) throws OWFileCopyException {
        try {
            FileChannel src = new FileInputStream(fromFile).getChannel();
            FileChannel dest = new FileOutputStream(toFile).getChannel();
            dest.transferFrom(src, 0, src.size());
            src.close();
            dest.close();
        } catch (IOException e) {
            throw (new OWFileCopyException("An error occurred while copying a file", e));
        }
    }
} </s>
<s>class temp {    private static void readData() {
        StringTokenizer sTok;
        topSet = new HashSet();
        sTok = new StringTokenizer(tops, ",");
        while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());
        leftSet = new HashSet();
        sTok = new StringTokenizer(lefts, ",");
        while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());
        rightSet = new HashSet();
        sTok = new StringTokenizer(rights, ",");
        while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());
        farRightSet = new HashSet();
        sTok = new StringTokenizer(farrights, ",");
        while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());
        vowelSet = new HashSet();
        sTok = new StringTokenizer(vowels, ",");
        while (sTok.hasMoreTokens()) {
            String ntk;
            vowelSet.add(ntk = sTok.nextToken());
            if (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        puncSet = new HashSet();
        sTok = new StringTokenizer(others, ",");
        while (sTok.hasMoreTokens()) {
            String ntk;
            puncSet.add(ntk = sTok.nextToken());
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        charSet = new HashSet();
        tibSet = new HashSet();
        sTok = new StringTokenizer(tibetanConsonants, ",");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            tibSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        sanskritStackSet = new HashSet();
        sTok = new StringTokenizer(otherConsonants, ",");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            sanskritStackSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        numberSet = new HashSet();
        sTok = new StringTokenizer(numbers, ",");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            numberSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        charSet.add("Y");
        charSet.add("R");
        charSet.add("W");
        validInputSequences.put("Y", anyOldObjectWillDo);
        validInputSequences.put("R", anyOldObjectWillDo);
        validInputSequences.put("W", anyOldObjectWillDo);
        sTok = null;
        top_vowels = new HashSet();
        top_vowels.add(i_VOWEL);
        top_vowels.add(e_VOWEL);
        top_vowels.add(o_VOWEL);
        top_vowels.add(ai_VOWEL);
        top_vowels.add(au_VOWEL);
        top_vowels.add(reverse_i_VOWEL);
        try {
            URL url = TibetanMachineWeb.class.getResource(fileName);
            if (url == null) {
                System.err.println("Cannot find " + fileName + "; aborting.");
                System.exit(1);
            }
            InputStreamReader isr = new InputStreamReader(url.openStream());
            BufferedReader in = new BufferedReader(isr);
            System.out.println("Reading Tibetan Machine Web code table " + fileName);
            String line;
            boolean hashOn = false;
            boolean isTibetan = false;
            boolean isSanskrit = false;
            boolean ignore = false;
            while ((line = in.readLine()) != null) {
                if (line.startsWith("<?")) {
                    if (line.equalsIgnoreCase("<?Consonants?>")) {
                        isSanskrit = false;
                        isTibetan = true;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith("//") || line.equals(""));
                    } else if (line.equalsIgnoreCase("<?Numbers?>")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith("//") || line.equals(""));
                    } else if (line.equalsIgnoreCase("<?Vowels?>")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith("//") || line.equals(""));
                    } else if (line.equalsIgnoreCase("<?Other?>")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith("//") || line.equals(""));
                    } else if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase("<?Input:Tibetan?>")) {
                        isSanskrit = false;
                        isTibetan = true;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase("<?Input:Numbers?>")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) {
                        isSanskrit = true;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase("<?ToWylie?>")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                    } else if (line.equalsIgnoreCase("<?Ignore?>")) {
                        isSanskrit = false;
                        ignore = true;
                    }
                } else if (line.startsWith("//")) {
                    ;
                } else if (line.equals("")) {
                    ;
                } else {
                    StringTokenizer st = new StringTokenizer(line, DELIMITER, true);
                    String wylie = null;
                    DuffCode[] duffCodes;
                    duffCodes = new DuffCode[11];
                    int k = 0;
                    StringBuffer escapedToken = new StringBuffer("");
                    ThdlDebug.verify(escapedToken.length() == 0);
                    while (st.hasMoreTokens()) {
                        String val = getEscapedToken(st, escapedToken);
                        if (val.equals(DELIMITER) && escapedToken.length() == 0) {
                            k++;
                        } else if (!val.equals("")) {
                            if (escapedToken.length() != 0) {
                                escapedToken = new StringBuffer("");
                                ThdlDebug.verify(escapedToken.length() == 0);
                            }
                            switch(k) {
                                case 0:
                                    wylie = val;
                                    break;
                                case 1:
                                    duffCodes[TM] = new DuffCode(val, false);
                                    break;
                                case 2:
                                    if (!ignore) {
                                        duffCodes[REDUCED_C] = new DuffCode(val, true);
                                    }
                                    break;
                                case 3:
                                    duffCodes[TMW] = new DuffCode(val, true);
                                    if (null != duffCodes[TM]) {
                                        TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];
                                    }
                                    if (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error("tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but " + val + " appears two or more times.");
                                    TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];
                                    if (wylie.toLowerCase().startsWith("\\uf0")) {
                                        int x = Integer.parseInt(wylie.substring("\\u".length()), 16);
                                        ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));
                                        NonUnicodeToTMW[x - ''] = new DuffCode[] { duffCodes[TMW] };
                                    }
                                    break;
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                    if (!ignore) {
                                        try {
                                            duffCodes[k - 1] = new DuffCode(val, true);
                                        } catch (Exception e) {
                                            System.err.println("Couldn't make a DuffCode out of " + val + "; line is " + line + "; k is " + k);
                                        }
                                    }
                                    break;
                                case 10:
                                    if (!val.equals("none")) {
                                        StringBuffer unicodeBuffer = new StringBuffer();
                                        StringTokenizer uTok = new StringTokenizer(val, ",");
                                        while (uTok.hasMoreTokens()) {
                                            String subval = uTok.nextToken();
                                            ThdlDebug.verify(subval.length() == 4 || subval.length() == 3);
                                            try {
                                                int x = Integer.parseInt(subval, 16);
                                                ThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);
                                                unicodeBuffer.append((char) x);
                                            } catch (NumberFormatException e) {
                                                ThdlDebug.verify(false);
                                            }
                                        }
                                        TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();
                                        char ch;
                                        if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {
                                            if (null != UnicodeToTMW[ch - 'ༀ'][0] && 'ༀ' != ch && '༂' != ch && '༃' != ch && '་' != ch && '༎' != ch && 'ཀ' != ch && 'ག' != ch && 'ཉ' != ch && 'ཏ' != ch && 'ད' != ch && 'ན' != ch && 'ཞ' != ch && 'ར' != ch && 'ཤ' != ch && 'ཧ' != ch && 'ཪ' != ch && 'ཱ' != ch && 'ི' != ch && 'ཱི' != ch && 'ུ' != ch && 'ཱུ' != ch && 'ྲྀ' != ch && 'ཷ' != ch && 'ླྀ' != ch && 'ཹ' != ch && 'ེ' != ch && 'ོ' != ch && 'ཾ' != ch && 'ཱྀ' != ch) {
                                                throw new Error("tibwn.ini has more than one TMW fellow listed that has the Unicode " + val + ", but it's not on the list of specially handled glyphs");
                                            }
                                            UnicodeToTMW[ch - 'ༀ'][0] = duffCodes[TMW];
                                        }
                                    }
                                    break;
                                case 11:
                                    if (!ignore) {
                                        duffCodes[HALF_C] = new DuffCode(val, true);
                                    }
                                    break;
                                case 12:
                                    if (!ignore) {
                                        DuffCode binduCode = new DuffCode(val, true);
                                        binduMap.put(duffCodes[TMW], binduCode);
                                    }
                                    break;
                                case 13:
                                    throw new Error("tibwn.ini has only 13 columns, you tried to use a 14th column.");
                            }
                        } else {
                            if (k == 10) {
                                throw new Error("needed none or some unicode; line is " + line);
                            }
                        }
                    }
                    if (k < 10) {
                        throw new Error("needed none or some unicode; line is " + line);
                    }
                    if (!ignore) {
                        if (null == wylie) throw new Error(fileName + " has a line ^" + DELIMITER + " which means that no Wylie is assigned.  That isn't supported.");
                        if (hashOn) {
                            tibHash.put(Manipulate.unescape(wylie), duffCodes);
                        }
                        if (isTibetan) {
                            StringBuffer wylieWithoutDashes = new StringBuffer(wylie);
                            for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) {
                                if (wylieWithoutDashes.charAt(wl) == '-') {
                                    wylieWithoutDashes.deleteCharAt(wl);
                                    --wl;
                                }
                            }
                            tibSet.add(wylieWithoutDashes.toString());
                        }
                        if (isSanskrit) {
                            sanskritStackSet.add(wylie);
                        }
                        if (null == duffCodes[TMW]) throw new Error(fileName + " has a line with wylie " + wylie + " but no TMW; that's not allowed");
                        int font = duffCodes[TMW].getFontNum();
                        int code = duffCodes[TMW].getCharNum() - 32;
                        toHashKey[font][code] = Manipulate.unescape(wylie);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("file Disappeared");
            ThdlDebug.noteIffyCode();
        }
    }
} </s>
<s>class temp {    private void addMaintainerScripts(TarOutputStream tar, PackageInfo info) throws IOException, ScriptDataTooLargeException {
        for (final MaintainerScript script : info.getMaintainerScripts().values()) {
            if (script.getSize() > Integer.MAX_VALUE) {
                throw new ScriptDataTooLargeException("The script data is too large for the tar file. script=[" + script.getType().getFilename() + "].");
            }
            final TarEntry entry = standardEntry(script.getType().getFilename(), UnixStandardPermissions.EXECUTABLE_FILE_MODE, (int) script.getSize());
            tar.putNextEntry(entry);
            IOUtils.copy(script.getStream(), tar);
            tar.closeEntry();
        }
    }
} </s>
<s>class temp {    public boolean config(URL url, boolean throwsException) throws IllegalArgumentException {
        try {
            final MetaRoot conf = UjoManagerXML.getInstance().parseXML(new BufferedInputStream(url.openStream()), MetaRoot.class, this);
            config(conf);
            return true;
        } catch (Exception e) {
            if (throwsException) {
                throw new IllegalArgumentException("Configuration file is not valid ", e);
            } else {
                return false;
            }
        }
    }
} </s>
<s>class temp {    private void getPage(final String path, final String dataToSend, final GetPageCallback callback) {
        runner.add(new Runnable() {

            @Override
            public void run() {
                String url = "http://" + resources.getString(R.string.host) + path;
                HttpUriRequest req;
                if (dataToSend == null) {
                    req = new HttpGet(url);
                } else {
                    req = new HttpPost(url);
                    try {
                        ((HttpPost) req).setEntity(new StringEntity(dataToSend));
                    } catch (UnsupportedEncodingException e) {
                        Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, "Unsupported encoding.", e);
                    }
                }
                req.addHeader("Cookie", getAuthCookie(false));
                try {
                    HttpResponse response = httpclient.execute(req);
                    Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, "Response status is '" + response.getStatusLine() + "'.");
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        InputStream instream = entity.getContent();
                        try {
                            BufferedReader in = new BufferedReader(new InputStreamReader(instream));
                            StringBuilder b = new StringBuilder();
                            String line;
                            boolean first = true;
                            while ((line = in.readLine()) != null) {
                                b.append(line);
                                if (first) {
                                    first = false;
                                } else {
                                    b.append("\r\n");
                                }
                            }
                            in.close();
                            callback.success(b.toString());
                            return;
                        } catch (RuntimeException ex) {
                            throw ex;
                        } finally {
                            instream.close();
                        }
                    }
                } catch (ClientProtocolException e) {
                    Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, "HTTP protocol violated.", e);
                } catch (IOException e) {
                    Logger.getLogger(JSBridge.class.getName()).log(Level.WARNING, "Could not load '" + path + "'.", e);
                }
                Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, "Calling error from JSBridge.getPage because of previous errors.");
                callback.error();
            }
        });
    }
} </s>
<s>class temp {            @Override
            public void run() {
                String url = "http://" + resources.getString(R.string.host) + path;
                HttpUriRequest req;
                if (dataToSend == null) {
                    req = new HttpGet(url);
                } else {
                    req = new HttpPost(url);
                    try {
                        ((HttpPost) req).setEntity(new StringEntity(dataToSend));
                    } catch (UnsupportedEncodingException e) {
                        Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, "Unsupported encoding.", e);
                    }
                }
                req.addHeader("Cookie", getAuthCookie(false));
                try {
                    HttpResponse response = httpclient.execute(req);
                    Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, "Response status is '" + response.getStatusLine() + "'.");
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        InputStream instream = entity.getContent();
                        try {
                            BufferedReader in = new BufferedReader(new InputStreamReader(instream));
                            StringBuilder b = new StringBuilder();
                            String line;
                            boolean first = true;
                            while ((line = in.readLine()) != null) {
                                b.append(line);
                                if (first) {
                                    first = false;
                                } else {
                                    b.append("\r\n");
                                }
                            }
                            in.close();
                            callback.success(b.toString());
                            return;
                        } catch (RuntimeException ex) {
                            throw ex;
                        } finally {
                            instream.close();
                        }
                    }
                } catch (ClientProtocolException e) {
                    Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, "HTTP protocol violated.", e);
                } catch (IOException e) {
                    Logger.getLogger(JSBridge.class.getName()).log(Level.WARNING, "Could not load '" + path + "'.", e);
                }
                Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, "Calling error from JSBridge.getPage because of previous errors.");
                callback.error();
            }
} </s>
<s>class temp {    private String getAuthCookie(boolean invalidate) {
        if (resources.getBoolean(R.bool.dev)) {
            return "dev_appserver_login=get_view@localhost.devel:false:18580476422013912411";
        } else {
            try {
                Account[] accounts = accountsManager.getAccountsByType("com.google");
                Account account = null;
                while (!(accounts.length > 0)) {
                    accountsManager.addAccount("com.google", "ah", null, null, act, null, null).getResult();
                    accounts = accountsManager.getAccountsByType("com.google");
                }
                if (account == null) {
                    account = accounts[0];
                }
                String authToken = accountsManager.getAuthToken(account, "ah", null, act, null, null).getResult().get(AccountManager.KEY_AUTHTOKEN).toString();
                if (invalidate || authToken == null) {
                    Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, "Invalidating auth token.");
                    accountsManager.invalidateAuthToken("com.google", authToken);
                    return getAuthCookie(false);
                }
                HttpGet httpget = new HttpGet("http://" + resources.getString(R.string.host) + "/_ah/login?auth=" + authToken);
                HttpResponse response = httpclient.execute(httpget);
                for (Header c : response.getHeaders("Set-Cookie")) {
                    if (c.getValue().startsWith("ACSID=")) {
                        return c.getValue();
                    }
                }
                return getAuthCookie(false);
            } catch (ClientProtocolException e) {
                Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, "HTTP protocol violated.", e);
            } catch (OperationCanceledException e) {
                Logger.getLogger(JSBridge.class.getName()).log(Level.WARNING, "Login canceled.", e);
            } catch (AuthenticatorException e) {
                Logger.getLogger(JSBridge.class.getName()).log(Level.WARNING, "Authentication failed.", e);
            } catch (IOException e) {
                Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, "Login failed.", e);
            }
            return getAuthCookie(true);
        }
    }
} </s>
<s>class temp {    public static void copyFileNIO(File in, File out) throws IOException {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(in);
            fos = new FileOutputStream(out);
            FileChannel sourceChannel = fis.getChannel();
            FileChannel targetChannel = fos.getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        } catch (IOException e) {
            throw e;
        } finally {
            try {
                if (fos != null) {
                    fos.close();
                }
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }
            try {
                if (fis != null) {
                    fis.close();
                }
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }
        }
    }
} </s>
<s>class temp {    public static boolean unzip_and_merge(String infile, String outfile) {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(infile);
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            FileOutputStream fos = new FileOutputStream(outfile);
            dest = new BufferedOutputStream(fos, BUFFER);
            while (zis.getNextEntry() != null) {
                int count;
                byte data[] = new byte[BUFFER];
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
            }
            dest.close();
            zis.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    public static synchronized String toMD5(String str) {
        Nulls.failIfNull(str, "Cannot create an MD5 encryption form a NULL string");
        String hashword = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance(MD5);
            md5.update(str.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashword = hash.toString(16);
            return Strings.padLeft(hashword, 32, "0");
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return hashword;
    }
} </s>
<s>class temp {    public static synchronized String toSHA1(String str) {
        Nulls.failIfNull(str, "Cannot create an SHA1 encryption form a NULL string");
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(SHA1);
            byte[] sha1hash = new byte[40];
            md.update(str.getBytes(ISO_CHARSET), 0, str.length());
            sha1hash = md.digest();
            return convertToHex(sha1hash);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public void run() {
        StringBuffer xml;
        String tabName;
        Element guiElement;
        setBold(monitor.getReading());
        setBold(monitor.getReadingStatus());
        monitor.getReadingStatus().setText("      Working");
        HttpMethod method = null;
        xml = new StringBuffer();
        File tempfile = new File(url);
        if (tempfile.exists()) {
            try {
                InputStream in = new FileInputStream(tempfile);
                int temp;
                while ((temp = in.read()) != -1) {
                    xml.append((char) temp);
                }
                in.close();
            } catch (IOException e) {
                System.out.println("Loading Monitor Failed, error while reading XML file from local file");
                e.printStackTrace(System.err);
                return;
            }
        } else {
            try {
                HttpClient client = new HttpClient();
                method = new GetMethod(url);
                int response = client.executeMethod(method);
                if (response == 200) {
                    InputStream in = method.getResponseBodyAsStream();
                    int temp;
                    while ((temp = in.read()) != -1) {
                        xml.append((char) temp);
                    }
                    in.close();
                } else {
                    if (method != null) {
                        method.releaseConnection();
                    }
                    System.out.println("Loading Monitor Failed. Incorrect response from HTTP Server " + response);
                    return;
                }
            } catch (IOException e) {
                if (method != null) {
                    method.releaseConnection();
                }
                System.out.println("Loading Monitor Failed, error while reading XML file from HTTP Server");
                e.printStackTrace(System.err);
                return;
            }
        }
        setPlain(monitor.getReading());
        setPlain(monitor.getReadingStatus());
        monitor.getReadingStatus().setText("      Done");
        setBold(monitor.getValidating());
        setBold(monitor.getValidatingStatus());
        monitor.getValidatingStatus().setText("      Working");
        DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl();
        try {
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()));
            if (method != null) {
                method.releaseConnection();
            }
            Element root = document.getDocumentElement();
            NodeList temp = root.getElementsByTagName("resource");
            for (int j = 0; j < temp.getLength(); j++) {
                Element resource = (Element) temp.item(j);
                resources.add(new URL(resource.getAttribute("url")));
            }
            NodeList connections = root.getElementsByTagName("jmxserver");
            for (int j = 0; j < connections.getLength(); j++) {
                Element connection = (Element) connections.item(j);
                String name = connection.getAttribute("name");
                String tempUrl = connection.getAttribute("url");
                if (tempUrl.indexOf("${host}") != -1) {
                    HostDialog dialog = new HostDialog(Config.getHosts());
                    String host = dialog.showDialog();
                    if (host == null) {
                        System.out.println("Host can not be null, unable to create panel.");
                        return;
                    }
                    tempUrl = tempUrl.replaceAll("\\$\\{host\\}", host);
                    Config.addHost(host);
                }
                JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl);
                JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false));
                servers.put(name, server);
                NodeList listeners = connection.getElementsByTagName("listener");
                for (int i = 0; i < listeners.getLength(); i++) {
                    Element attribute = (Element) listeners.item(i);
                    String taskname = attribute.getAttribute("taskname");
                    MBean mbean = new MBean(attribute.getAttribute("mbean"), null);
                    String filtertype = attribute.getAttribute("filterType");
                    TaskNotificationListener listener = new TaskNotificationListener();
                    NotificationFilterSupport filter = new NotificationFilterSupport();
                    if (filtertype == null || "".equals(filtertype)) {
                        filter = null;
                    } else {
                        filter.enableType(filtertype);
                    }
                    Task task = new Task(-1, Task.LISTEN, server);
                    task.setMbean(mbean);
                    task.setListener(listener);
                    task.setFilter(filter);
                    server.getWorker().addTask(task);
                    if (tasks.get(taskname) != null) {
                        System.out.println("Task " + taskname + " already exists.");
                        return;
                    }
                    List<Task> hashTempList = new ArrayList<Task>();
                    hashTempList.add(task);
                    tasks.put(taskname, hashTempList);
                }
                NodeList attributes = connection.getElementsByTagName("attribute");
                for (int i = 0; i < attributes.getLength(); i++) {
                    Element attribute = (Element) attributes.item(i);
                    String taskname = attribute.getAttribute("taskname");
                    MBean mbean = new MBean(attribute.getAttribute("mbean"), null);
                    String attributename = attribute.getAttribute("attributename");
                    String frequency = attribute.getAttribute("frequency");
                    String onEvent = attribute.getAttribute("onEvent");
                    if (frequency.equalsIgnoreCase("onchange")) {
                        TaskNotificationListener listener = new TaskNotificationListener();
                        AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();
                        filter.enableAttribute(attributename);
                        Task task = new Task(-1, Task.LISTEN, server);
                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);
                        task.setAttribute(att);
                        task.setMbean(mbean);
                        task.setListener(listener);
                        task.setFilter(filter);
                        server.getWorker().addTask(task);
                        if (tasks.get(taskname) != null) {
                            System.out.println("Task " + taskname + " already exists.");
                            return;
                        }
                        Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server);
                        task2.setAttribute(att);
                        task2.setMbean(mbean);
                        server.getWorker().addTask(task2);
                        List<Task> hashTempList = new ArrayList<Task>();
                        hashTempList.add(task);
                        hashTempList.add(task2);
                        tasks.put(taskname, hashTempList);
                    } else {
                        int frequency2 = Integer.parseInt(frequency);
                        Task task = new Task(frequency2, Task.GET_ATTRIBUTE, server);
                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);
                        task.setAttribute(att);
                        task.setMbean(mbean);
                        if (tasks.get(taskname) != null) {
                            System.out.println("Task " + taskname + " already exists.");
                            return;
                        }
                        List<Task> hashTempList = new ArrayList<Task>();
                        hashTempList.add(task);
                        tasks.put(taskname, hashTempList);
                        TaskNotificationListener listener = null;
                        if (onEvent != null && !"".equals(onEvent)) {
                            Task tempTask = tasks.get(onEvent).get(0);
                            if (tempTask == null) {
                                System.out.println(onEvent + " was not found.");
                                return;
                            } else {
                                listener = (TaskNotificationListener) tempTask.getListener();
                            }
                        }
                        if (listener == null) {
                            server.getWorker().addTask(task);
                        } else {
                            listener.addTask(task);
                        }
                    }
                }
            }
            NodeList guiTemp = root.getElementsByTagName("gui");
            guiElement = (Element) guiTemp.item(0);
            tabName = guiElement.getAttribute("name");
            if (MonitorServer.contains(tabName)) {
                JOptionPane.showMessageDialog(null, "This panel is already open, stoping creating of panel.", "Panel already exists", JOptionPane.ERROR_MESSAGE);
                return;
            }
            for (int i = 0; i < monitor.getTab().getTabCount(); i++) {
                if (monitor.getTab().getComponent(i).equals(monitor)) {
                    monitor.getTab().setTitleAt(i, tabName);
                    break;
                }
            }
            NodeList tempBindings = root.getElementsByTagName("binding");
            for (int i = 0; i < tempBindings.getLength(); i++) {
                Element binding = (Element) tempBindings.item(i);
                String guiname = binding.getAttribute("guiname");
                String tmethod = binding.getAttribute("method");
                String taskname = binding.getAttribute("taskname");
                String formater = binding.getAttribute("formater");
                BindingContainer tempBinding;
                if (formater == null || (formater != null && formater.equals(""))) {
                    tempBinding = new BindingContainer(guiname, tmethod, taskname);
                } else {
                    tempBinding = new BindingContainer(guiname, tmethod, taskname, formater);
                }
                bindings.add(tempBinding);
            }
        } catch (Exception e) {
            System.err.println("Exception message: " + e.getMessage());
            System.out.println("Loading Monitor Failed, couldnt parse XML file.");
            e.printStackTrace(System.err);
            return;
        }
        setPlain(monitor.getValidating());
        setPlain(monitor.getValidatingStatus());
        monitor.getValidatingStatus().setText("      Done");
        setBold(monitor.getDownload());
        setBold(monitor.getDownloadStatus());
        monitor.getDownloadStatus().setText("      Working");
        List<File> jarFiles = new ArrayList<File>();
        File cacheDir = new File(Config.getCacheDir());
        if (!cacheDir.exists()) {
            cacheDir.mkdir();
        }
        for (URL resUrl : resources) {
            try {
                HttpClient client = new HttpClient();
                HttpMethod methodRes = new GetMethod(resUrl.toString());
                int response = client.executeMethod(methodRes);
                if (response == 200) {
                    int index = resUrl.toString().lastIndexOf("/") + 1;
                    File file = new File(Config.getCacheDir() + resUrl.toString().substring(index));
                    FileOutputStream out = new FileOutputStream(file);
                    InputStream in = methodRes.getResponseBodyAsStream();
                    int readTemp = 0;
                    while ((readTemp = in.read()) != -1) {
                        out.write(readTemp);
                    }
                    System.out.println(file.getName() + " downloaded.");
                    methodRes.releaseConnection();
                    if (file.getName().endsWith(".jar")) {
                        jarFiles.add(file);
                    }
                } else {
                    methodRes.releaseConnection();
                    System.out.println("Loading Monitor Failed. Unable to get resource " + url);
                    return;
                }
            } catch (IOException e) {
                System.out.println("Loading Monitor Failed, error while reading resource file from HTTP Server");
                e.printStackTrace(System.err);
                return;
            }
        }
        URL[] urls = new URL[jarFiles.size()];
        try {
            for (int i = 0; i < jarFiles.size(); i++) {
                File file = jarFiles.get(i);
                File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName());
                FileInputStream in = new FileInputStream(file);
                FileOutputStream out = new FileOutputStream(newFile);
                int n = 0;
                byte[] buf = new byte[1024];
                while ((n = in.read(buf, 0, 1024)) > -1) {
                    out.write(buf, 0, n);
                }
                out.close();
                out.close();
                in.close();
                urls[i] = new URL("file:" + newFile.getAbsolutePath());
            }
        } catch (Exception e1) {
            System.out.println("Unable to load jar files.");
            e1.printStackTrace();
        }
        URLClassLoader loader = new URLClassLoader(urls);
        engine.setClassLoader(loader);
        setPlain(monitor.getDownload());
        setPlain(monitor.getDownloadStatus());
        monitor.getDownloadStatus().setText("      Done");
        setBold(monitor.getGui());
        setBold(monitor.getGuiStatus());
        monitor.getGuiStatus().setText("      Working");
        Container container;
        try {
            String tempXml = xml.toString();
            int start = tempXml.indexOf("<gui");
            start = tempXml.indexOf('>', start) + 1;
            int end = tempXml.indexOf("</gui>");
            container = engine.render(new StringReader(tempXml.substring(start, end)));
        } catch (Exception e) {
            e.printStackTrace(System.err);
            System.err.println("Exception msg: " + e.getMessage());
            System.out.println("Loading Monitor Failed, error creating gui.");
            return;
        }
        for (BindingContainer bcon : bindings) {
            for (Task task : tasks.get(bcon.getTask())) {
                if (task != null) {
                    Object comp = engine.find(bcon.getComponent());
                    if (comp != null) {
                        if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) {
                            TaskNotificationListener listener = (TaskNotificationListener) task.getListener();
                            if (bcon.getFormater() == null) {
                                listener.addResultListener(new Binding(comp, bcon.getMethod()));
                            } else {
                                listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));
                            }
                        } else {
                            if (bcon.getFormater() == null) {
                                task.addResultListener(new Binding(comp, bcon.getMethod()));
                            } else {
                                task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));
                            }
                        }
                    } else {
                        System.out.println("Refering to gui name, " + bcon.getComponent() + ", that doesnt exist. Unable to create monitor.");
                        return;
                    }
                } else {
                    System.out.println("Refering to task name, " + bcon.getTask() + ", that doesnt exist. Unable to create monitor.");
                    return;
                }
            }
        }
        for (int i = 0; i < monitor.getTab().getTabCount(); i++) {
            if (monitor.getTab().getComponent(i).equals(monitor)) {
                monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this));
                break;
            }
        }
        System.out.println("Connecting to server(s).");
        Enumeration<JmxServerGraph> e = servers.elements();
        List<JmxWorker> list = new ArrayList<JmxWorker>();
        while (e.hasMoreElements()) {
            JmxWorker worker = e.nextElement().getWorker();
            worker.setRunning(true);
            worker.start();
            list.add(worker);
        }
        MonitorServer.add(tabName, list);
        Config.addUrl(url);
    }
} </s>
<s>class temp {    public void update() {
        if (url == null) {
            throw new IllegalArgumentException("URL cannot be null!");
        }
        try {
            URLConnection urlConnection = url.openConnection();
            urlConnection.setRequestProperty("User-Agent", Settings.INSTANCE.getUserAgent());
            SyndFeedInput input = new SyndFeedInput();
            SyndFeed syndFeed = input.build(new XmlReader(url));
            Channel channel = (Channel) syndFeed.createWireFeed(syndFeed.getFeedType());
            long lastModified = urlConnection.getLastModified();
            if (feed.getLastModified() != lastModified) {
                Server.print("Updating: " + feed.getName());
                feed.setLastModified(lastModified);
                ArrayList<String> cachedItems = getCachedItems();
                List<Item> items = channel.getItems();
                if (items.isEmpty()) {
                    return;
                }
                if (cachedItems.isEmpty()) {
                    Database.INSTANCE.addItems(feed, items);
                } else {
                    for (Item item : items) {
                        if (!cachedItems.contains(item.getTitle())) {
                            Database.INSTANCE.addItem(feed, item);
                        }
                    }
                }
                cacheItems(items);
                Settings.INSTANCE.persist();
                Server.print("Done updating: " + feed.getName());
            }
        } catch (ConnectException e) {
            Server.print("Could not connect to \"" + feed.getName() + "\"");
        } catch (SocketException e) {
            Server.print("Could not connect to \"" + feed.getName() + "\"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public String connect(String host, int port, String init) {
        HttpURLConnection c = null;
        String ret = "";
        int response;
        URL url = null;
        try {
            url = new URL("http://" + gwhost + ":" + gwport + "/connect?host=" + Utils.URLEncode(host.getBytes()) + "&port=" + Utils.URLEncode(("" + port).getBytes()) + "&passwd=" + Utils.URLEncode(gwpasswd.getBytes()) + "&data=" + Utils.URLEncode(stringToByteArray(init, encoding, utf8output)));
        } catch (MalformedURLException me) {
            ret += "Exception: " + me.getMessage();
        }
        try {
            c = (HttpURLConnection) url.openConnection();
            response = c.getResponseCode();
            identifier = c.getHeaderField("X-Identifier");
            if (c != null) c.disconnect();
        } catch (Exception e) {
            ret += "Error trying to connect to HTTP proxy server, aborting... ";
            ret += "Exception: " + e.getMessage();
            return ret;
        }
        if (response != HttpStatus.SC_OK) {
            ret += "Error trying to connect to IRC server, reason: ";
            switch(response) {
                case HttpStatus.SC_FORBIDDEN:
                    ret += "Wrong password";
                    break;
                case HttpStatus.SC_BAD_GATEWAY:
                    ret += "Bad gateway";
                    break;
                case HttpStatus.SC_NOT_FOUND:
                    ret += "IRC connection not found";
                    break;
                default:
                    ret += "HTTP response code: " + response;
                    break;
            }
            return ret;
        } else {
            connected = true;
            return null;
        }
    }
} </s>
<s>class temp {    private String handleRequest(String url, boolean get) {
        HttpURLConnection c = null;
        InputStream is = null;
        ByteArrayInputStream bais;
        byte[] buf;
        String temp, ret = "";
        int response, len, i;
        try {
            c = (HttpURLConnection) new URL(url).openConnection();
            if (get) c.setRequestMethod("GET"); else c.setRequestMethod("HEAD");
            response = c.getResponseCode();
            if (get) {
                is = c.getInputStream();
                len = (int) c.getContentLength();
                if (len > 0) {
                    byte[] data = new byte[len];
                    for (i = 0; i < len; i++) {
                        data[i] = (byte) is.read();
                    }
                    bytein += data.length;
                    bais = new ByteArrayInputStream(data);
                    while (bais.available() > 0) {
                        buf = Utils.readLine(bais);
                        if (buf != null) {
                            temp = byteArrayToString(buf, encoding, utf8detect);
                            inqueue.addElement(temp);
                        }
                    }
                }
            }
            if (is != null) is.close();
            if (c != null) c.disconnect();
        } catch (Exception e) {
            ret += "Request failed, continuing...";
            return ret;
        }
        if (response != HttpStatus.SC_OK) {
            if (response != HttpStatus.SC_NOT_FOUND) {
                ret += "Error in connection to IRC server, aborting... ";
                ret += "Error: HTTP response code: " + response;
            }
            connected = false;
            return ret;
        } else return null;
    }
} </s>
<s>class temp {    protected Context getResource3ServerInitialContext() throws Exception {
        if (resource3ServerJndiProps == null) {
            URL url = ClassLoader.getSystemResource("jndi.properties");
            resource3ServerJndiProps = new java.util.Properties();
            resource3ServerJndiProps.load(url.openStream());
            String jndiHost = System.getProperty("jbosstest.resource3.server.host", "localhost");
            String jndiUrl = "jnp://" + jndiHost + ":1099";
            resource3ServerJndiProps.setProperty("java.naming.provider.url", jndiUrl);
        }
        return new InitialContext(resource3ServerJndiProps);
    }
} </s>
<s>class temp {    private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("SHA-1");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
} </s>
<s>class temp {    public HttpURLConnection getTileUrlConnection(int zoom, int tilex, int tiley) throws IOException {
        String url = getTileUrl(zoom, tilex, tiley);
        if (url == null) return null;
        return (HttpURLConnection) new URL(url).openConnection();
    }
} </s>
<s>class temp {    public static byte[] getBytes(URL url) throws IOException {
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        int contentLength = connection.getContentLength();
        ByteArrayOutputStream tmpOut;
        if (contentLength != -1) {
            tmpOut = new ByteArrayOutputStream(contentLength);
        } else {
            tmpOut = new ByteArrayOutputStream(16384);
        }
        byte[] buf = new byte[512];
        while (true) {
            int len = in.read(buf);
            if (len == -1) {
                break;
            }
            tmpOut.write(buf, 0, len);
        }
        in.close();
        tmpOut.close();
        byte[] array = tmpOut.toByteArray();
        return array;
    }
} </s>
<s>class temp {    public static String md5(String string) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException exception) {
            LOGGER.warn(exception.getMessage());
        }
        byte[] md5hash = new byte[32];
        try {
            md.update(string.getBytes("iso-8859-1"), 0, string.length());
        } catch (UnsupportedEncodingException exception) {
            LOGGER.warn(exception.getMessage());
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    private PropertiesLoader(String masterFileLocation, String extraFileLocation) throws IOException {
        List propertiesList = new ArrayList();
        ClassLoader classLoader = this.getClass().getClassLoader();
        try {
            InputStream is = classLoader.getResourceAsStream(masterFileLocation);
            Properties p = new Properties();
            p.load(is);
            is.close();
            propertiesList.add(p);
        } catch (IOException ioex) {
            IOException ex = new IOException("could not load ROME master plugins file [" + masterFileLocation + "], " + ioex.getMessage());
            ex.setStackTrace(ioex.getStackTrace());
            throw ex;
        }
        Enumeration urls = classLoader.getResources(extraFileLocation);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            Properties p = new Properties();
            try {
                InputStream is = url.openStream();
                p.load(is);
                is.close();
            } catch (IOException ioex) {
                IOException ex = new IOException("could not load ROME extensions plugins file [" + url.toString() + "], " + ioex.getMessage());
                ex.setStackTrace(ioex.getStackTrace());
                throw ex;
            }
            propertiesList.add(p);
        }
        _properties = new Properties[propertiesList.size()];
        propertiesList.toArray(_properties);
    }
} </s>
<s>class temp {    public static String MD5(String text) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(text.getBytes());
        byte[] md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    public static Document send(String address, Document request) throws MalformedURLException, IOException {
        if (logger.isDebugEnabled()) {
            logger.debug("Sending request to " + address);
            String requestString = XMLUtil.transformToString(request);
            logger.debug("Sending Request " + requestString);
        }
        URL url = new URL(address);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestProperty("Content-Type", "text/xml");
        connection.setDoOutput(true);
        connection.setDefaultUseCaches(false);
        connection.setRequestMethod("POST");
        connection.connect();
        OutputStream os = connection.getOutputStream();
        XMLUtil.transformToStream(request, os);
        os.flush();
        os.close();
        if (connection.getResponseCode() != connection.HTTP_OK) {
            logger.error("Was expecting HTTP_OK (200) but received response code: " + connection.getResponseCode());
            logger.error("Message: " + connection.getResponseMessage());
            throw new LibraryException(LibraryException.Code.REQUEST_FAILURE, connection.getResponseCode() + " - " + connection.getResponseMessage());
        }
        BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        rd.close();
        if (logger.isDebugEnabled()) {
            logger.debug("Received Response" + sb.toString());
        }
        try {
            return XMLUtil.parseString(sb.toString());
        } catch (SAXException ex) {
            logger.error("Error parsing XML Response", ex);
            throw new LibraryException(LibraryException.Code.INVALID_XML, ex);
        }
    }
} </s>
<s>class temp {    public static URL getIconURLForUser(String id) {
        try {
            URL url = new URL("http://profiles.yahoo.com/" + id);
            BufferedReader r = new BufferedReader(new InputStreamReader(url.openStream()));
            String input = null;
            while ((input = r.readLine()) != null) {
                if (input.indexOf("<a href=\"") < 0) continue;
                if (input.indexOf("<img src=\"") < 0) continue;
                if (input.indexOf("<a href=\"") > input.indexOf("<img src=\"")) continue;
                String href = input.substring(input.indexOf("<a href=\"") + 9);
                String src = input.substring(input.indexOf("<img src=\"") + 10);
                if (href.indexOf("\"") < 0) continue;
                if (src.indexOf("\"") < 0) continue;
                href = href.substring(0, href.indexOf("\""));
                src = src.substring(0, src.indexOf("\""));
                if (href.equals(src)) {
                    return new URL(href);
                }
            }
        } catch (IOException e) {
        }
        URL toReturn = null;
        try {
            toReturn = new URL("http://us.i1.yimg.com/us.yimg.com/i/ppl/no_photo.gif");
        } catch (MalformedURLException e) {
            Debug.assrt(false);
        }
        return toReturn;
    }
} </s>
<s>class temp {    public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);
                AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();
                prepTable.deleteLinkType(stmt, name);
                ObjectLinkTable objectLinkTable = new ObjectLinkTable();
                objectLinkTable.deleteLinkType(stmt, name);
                String sql = "delete from ClassLinkTypes where LinkName = '" + name + "'";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
} </s>
<s>class temp {    public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException {
        ByteArrayInputStream bais = null;
        FileOutputStream fos = null;
        try {
            if ((files == null) || (files.size() <= 0)) {
                return;
            }
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            Users user = getUser(hsession, repositoryName);
            Identity identity = getDefaultIdentity(hsession, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress _to = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            for (int i = 0; i < files.size(); i++) {
                MultiPartEmail email = email = new MultiPartEmail();
                email.setCharset(charset);
                if (_from != null) {
                    email.setFrom(_from.getAddress(), _from.getPersonal());
                }
                if (_returnPath != null) {
                    email.addHeader("Return-Path", _returnPath.getAddress());
                    email.addHeader("Errors-To", _returnPath.getAddress());
                    email.addHeader("X-Errors-To", _returnPath.getAddress());
                }
                if (_replyTo != null) {
                    email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
                }
                if (_to != null) {
                    email.addTo(_to.getAddress(), _to.getPersonal());
                }
                MailPartObj obj = (MailPartObj) files.get(i);
                email.setSubject("Files-System " + obj.getName());
                Date now = new Date();
                email.setSentDate(now);
                File dir = new File(System.getProperty("user.home") + File.separator + "tmp");
                if (!dir.exists()) {
                    dir.mkdir();
                }
                File file = new File(dir, obj.getName());
                bais = new ByteArrayInputStream(obj.getAttachent());
                fos = new FileOutputStream(file);
                IOUtils.copy(bais, fos);
                IOUtils.closeQuietly(bais);
                IOUtils.closeQuietly(fos);
                EmailAttachment attachment = new EmailAttachment();
                attachment.setPath(file.getPath());
                attachment.setDisposition(EmailAttachment.ATTACHMENT);
                attachment.setDescription("File Attachment: " + file.getName());
                attachment.setName(file.getName());
                email.attach(attachment);
                String mid = getId();
                email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">");
                email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">");
                email.addHeader("X-DBox", "FILES");
                email.addHeader("X-DRecent", "false");
                email.setMailSession(session);
                email.buildMimeMessage();
                MimeMessage mime = email.getMimeMessage();
                int size = MessageUtilities.getMessageSize(mime);
                if (!controlQuota(hsession, user, size)) {
                    throw new MailException("ErrorMessages.mail.quota.exceded");
                }
                messageable.storeMessage(mid, mime, user);
            }
        } catch (FilesException e) {
            throw e;
        } catch (Exception e) {
            throw new FilesException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new FilesException(ex);
        } catch (Throwable e) {
            throw new FilesException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
            IOUtils.closeQuietly(bais);
            IOUtils.closeQuietly(fos);
        }
    }
} </s>
<s>class temp {    public String plainStringToMD5(String input) {
        MessageDigest md = null;
        byte[] byteHash = null;
        StringBuffer resultString = new StringBuffer();
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            logger.throwing(getClass().getName(), "plainStringToMD5", e);
        }
        md.reset();
        try {
            md.update(input.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
        }
        byteHash = md.digest();
        for (int i = 0; i < byteHash.length; i++) {
            resultString.append(Integer.toHexString(0xF0 & byteHash[i]).charAt(0));
            resultString.append(Integer.toHexString(0x0F & byteHash[i]));
        }
        return (resultString.toString());
    }
} </s>
<s>class temp {    public AudioInputStream getAudioInputStream(URL url, String userAgent) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out("MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): begin");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        URLConnection conn = url.openConnection();
        boolean isShout = false;
        int toRead = 4;
        byte[] head = new byte[toRead];
        if (userAgent != null) conn.setRequestProperty("User-Agent", userAgent);
        conn.setRequestProperty("Accept", "*/*");
        conn.setRequestProperty("Icy-Metadata", "1");
        conn.setRequestProperty("Connection", "close");
        BufferedInputStream bInputStream = new BufferedInputStream(conn.getInputStream());
        bInputStream.mark(toRead);
        int read = bInputStream.read(head, 0, toRead);
        if ((read > 2) && (((head[0] == 'I') | (head[0] == 'i')) && ((head[1] == 'C') | (head[1] == 'c')) && ((head[2] == 'Y') | (head[2] == 'y')))) {
            isShout = true;
        }
        bInputStream.reset();
        InputStream inputStream = null;
        if (isShout == true) {
            IcyInputStream icyStream = new IcyInputStream(bInputStream);
            icyStream.addTagParseListener(IcyListener.getInstance());
            inputStream = icyStream;
        } else {
            String metaint = conn.getHeaderField("icy-metaint");
            if (metaint != null) {
                IcyInputStream icyStream = new IcyInputStream(bInputStream, metaint);
                icyStream.addTagParseListener(IcyListener.getInstance());
                inputStream = icyStream;
            } else {
                inputStream = bInputStream;
            }
        }
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out("MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): end");
        }
        return audioInputStream;
    }
} </s>
<s>class temp {    public static String crypt(String strPassword, String strSalt) {
        try {
            StringTokenizer st = new StringTokenizer(strSalt, "$");
            st.nextToken();
            byte[] abyPassword = strPassword.getBytes();
            byte[] abySalt = st.nextToken().getBytes();
            MessageDigest _md = MessageDigest.getInstance("MD5");
            _md.update(abyPassword);
            _md.update(MAGIC.getBytes());
            _md.update(abySalt);
            MessageDigest md2 = MessageDigest.getInstance("MD5");
            md2.update(abyPassword);
            md2.update(abySalt);
            md2.update(abyPassword);
            byte[] abyFinal = md2.digest();
            for (int n = abyPassword.length; n > 0; n -= 16) {
                _md.update(abyFinal, 0, n > 16 ? 16 : n);
            }
            abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            for (int j = 0, i = abyPassword.length; i != 0; i >>>= 1) {
                if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(abyPassword, j, 1);
            }
            StringBuffer sbPasswd = new StringBuffer();
            sbPasswd.append(MAGIC);
            sbPasswd.append(new String(abySalt));
            sbPasswd.append('$');
            abyFinal = _md.digest();
            for (int n = 0; n < 1000; n++) {
                MessageDigest md3 = MessageDigest.getInstance("MD5");
                if ((n & 1) != 0) md3.update(abyPassword); else md3.update(abyFinal);
                if ((n % 3) != 0) md3.update(abySalt);
                if ((n % 7) != 0) md3.update(abyPassword);
                if ((n & 1) != 0) md3.update(abyFinal); else md3.update(abyPassword);
                abyFinal = md3.digest();
            }
            int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };
            to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);
            to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);
            to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);
            to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);
            to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);
            to64(sbPasswd, anFinal[11], 2);
            return sbPasswd.toString();
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
} </s>
<s>class temp {    public void writeData(String name, int items, int mznum, int mzscale, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + ".txt");
        file.println("999 9999");
        file.println("Doe, John");
        file.println("TEST Lab");
        if (mzscale == 1) file.println("PALMS Positive Ion Data"); else if (mzscale == -1) file.println("PALMS Negative Ion Data"); else file.println("PALMS GJIFJIGJ Ion Data");
        file.println("TEST Mission");
        file.println("1 1");
        file.println("1970 01 01 2008 07 09");
        file.println("0");
        file.println("TIME (UT SECONDS)");
        file.println(mznum + 4);
        for (int i = 0; i < mznum + 4; i++) file.println("1.0");
        for (int i = 0; i < mznum + 4; i++) file.println("9.9E29");
        file.println("TOTION total MCP signal (electron units)");
        file.println("HMASS high mass integral (fraction)");
        file.println("UNLIST (unlisted low mass peaks (fraction)");
        file.println("UFO unidentified peaks (fraction)");
        for (int i = 1; i <= mznum; i++) file.println("MS" + i + " (fraction)");
        int header2length = 13;
        file.println(header2length);
        for (int i = 0; i < header2length; i++) file.println("1.0");
        for (int i = 0; i < header2length; i++) file.println("9.9E29");
        file.println("AirCraftTime aircraft time (s)");
        file.println("INDEX index ()");
        file.println("SCAT scatter (V)");
        file.println("JMETER joule meter ()");
        file.println("ND neutral density (fraction)");
        file.println("SCALEA Mass scale intercept (us)");
        file.println("SCALEB mass scale slope (us)");
        file.println("NUMPKS number of peaks ()");
        file.println("CONF confidence (coded)");
        file.println("CAT preliminary category ()");
        file.println("AeroDiam aerodynamic diameter (um)");
        file.println("AeroDiam1p7 aero diam if density=1.7 (um)");
        file.println("TOTBACK total background subtracted (electron units)");
        file.println("0");
        file.println("0");
        String nothing = "0.000000";
        for (int i = 0; i < items; i++) {
            file.println(tstart + (tdelta * i));
            file.println(tstart + (tdelta * i) - 3);
            file.println(i + 1);
            for (int j = 0; j < 15; j++) file.println(Math.random());
            boolean peaked = false;
            for (int k = 1; k <= mznum; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) if (k == peaks[j]) {
                    double randData = (int) (1000000 * (j + 1));
                    file.println(randData / 1000000);
                    peaked = true;
                }
                if (!peaked) file.println(nothing);
                peaked = false;
            }
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println("test");
        } catch (Exception e) {
        }
        file.close();
    }
} </s>
<s>class temp {    public static InputStream getPropertyFileInputStream(String propertyFileURLStr) {
        InputStream in = null;
        String errmsg = "Fatal error: Unable to open specified properties file: " + propertyFileURLStr;
        try {
            URL url = new URL(propertyFileURLStr);
            in = url.openStream();
        } catch (IOException e) {
            throw new IllegalArgumentException(errmsg);
        }
        return (in);
    }
} </s>
<s>class temp {    private void createPropertyName(String objectID, String value, String propertyName, Long userID) throws JspTagException {
        rObject object = new rObject(new Long(objectID), userID);
        ClassProperty classProperty = new ClassProperty(propertyName, object.getClassName());
        String newValue = value;
        if (classProperty.getName().equals("Password")) {
            try {
                MessageDigest crypt = MessageDigest.getInstance("MD5");
                crypt.update(value.getBytes());
                byte digest[] = crypt.digest();
                StringBuffer hexString = new StringBuffer();
                for (int i = 0; i < digest.length; i++) {
                    hexString.append(hexDigit(digest[i]));
                }
                newValue = hexString.toString();
                crypt.reset();
            } catch (NoSuchAlgorithmException e) {
                System.err.println("jspShop: Could not get instance of MD5 algorithm. Please fix this!" + e.getMessage());
                e.printStackTrace();
                throw new JspTagException("Error crypting password!: " + e.getMessage());
            }
        }
        Properties properties = new Properties(new Long(objectID), userID);
        try {
            Property property = properties.create(classProperty.getID(), newValue);
            pageContext.setAttribute(getId(), property);
        } catch (CreateException e) {
            throw new JspTagException("Could not create PropertyValue, CreateException: " + e.getMessage());
        }
    }
} </s>
<s>class temp {    private void createProperty(String objectID, String value, String propertyID, Long userID) throws JspTagException {
        ClassProperty classProperty = new ClassProperty(new Long(propertyID));
        String newValue = value;
        if (classProperty.getName().equals("Password")) {
            try {
                MessageDigest crypt = MessageDigest.getInstance("MD5");
                crypt.update(value.getBytes());
                byte digest[] = crypt.digest();
                StringBuffer hexString = new StringBuffer();
                for (int i = 0; i < digest.length; i++) {
                    hexString.append(hexDigit(digest[i]));
                }
                newValue = hexString.toString();
                crypt.reset();
            } catch (NoSuchAlgorithmException e) {
                System.err.println("jspShop: Could not get instance of MD5 algorithm. Please fix this!" + e.getMessage());
                e.printStackTrace();
                throw new JspTagException("Error crypting password!: " + e.getMessage());
            }
        }
        Properties properties = new Properties(new Long(objectID), userID);
        try {
            Property property = properties.create(new Long(propertyID), newValue);
            pageContext.setAttribute(getId(), property);
        } catch (CreateException e) {
            throw new JspTagException("Could not create PropertyValue, CreateException: " + e.getMessage());
        }
    }
} </s>
<s>class temp {    public List<Datastream> getFiles(final String pFile) throws IOException {
        List<Datastream> tDatastreams = new ArrayList<Datastream>();
        new File(this.getTmpExtractDirName()).mkdir();
        ZipFile tZipFile = new ZipFile(pFile);
        Enumeration tEntries = tZipFile.entries();
        ZipEntry tEntry = null;
        File tFile = null;
        String tFileLocation = "";
        LocalDatastream tLocalDs = null;
        while (tEntries.hasMoreElements()) {
            tEntry = (ZipEntry) tEntries.nextElement();
            if (tEntry.isDirectory()) {
                continue;
            }
            tFileLocation = this.getTmpExtractDirName() + System.getProperty("file.separator") + tEntry.getName();
            tFile = new File(tFileLocation);
            LOG.debug("Saving " + tEntry.getName() + " to " + tFile.getPath());
            tFile.getParentFile().mkdirs();
            IOUtils.copy(tZipFile.getInputStream(tEntry), new FileOutputStream(tFile));
            tLocalDs = new LocalDatastream(tFile.getName().split("\\.")[0], FindMimeType.getMimeType(tFile.getName().split("\\.")[1]), tFileLocation);
            tLocalDs.setLabel(tEntry.getName());
            tDatastreams.add(tLocalDs);
        }
        return tDatastreams;
    }
} </s>
<s>class temp {    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
} </s>
<s>class temp {    public String getRec(String attribute, String url) {
        String arr[] = new String[3];
        String[] subarr = new String[6];
        String mdPrefix = "";
        String mdPrefixValue = "";
        String iden = "";
        String idenValue = "";
        String s = "";
        String arguments = attribute.substring(attribute.indexOf("?") + 1);
        System.out.println("attributes" + arguments);
        java.util.StringTokenizer st = new java.util.StringTokenizer(arguments, "&");
        int i = 0;
        int j = 0;
        int count = 0;
        int argCount = 0;
        java.util.Vector v1 = new java.util.Vector(1, 1);
        java.util.Vector v901 = new java.util.Vector(1, 1);
        java.util.Vector v902 = new java.util.Vector(1, 1);
        java.util.Vector v903 = new java.util.Vector(1, 1);
        java.util.Vector v904 = new java.util.Vector(1, 1);
        java.util.Vector v905 = new java.util.Vector(1, 1);
        java.util.Vector v906 = new java.util.Vector(1, 1);
        java.util.Vector v907 = new java.util.Vector(1, 1);
        java.util.Vector v908 = new java.util.Vector(1, 1);
        java.util.Vector v3 = new java.util.Vector(1, 1);
        java.util.Vector vData = new java.util.Vector(1, 1);
        java.util.Vector vSet = new java.util.Vector(1, 1);
        java.util.Vector v856 = new java.util.Vector(1, 1);
        Resdate dt = new Resdate();
        try {
            while (st.hasMoreElements()) {
                arr[i] = st.nextElement().toString();
                java.util.StringTokenizer subSt = new java.util.StringTokenizer(arr[i], "=");
                while (subSt.hasMoreElements()) {
                    subarr[j] = subSt.nextElement().toString();
                    System.out.println(" arga are... " + subarr[j]);
                    j++;
                }
                i++;
                count++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        Namespace oains = Namespace.getNamespace("http://www.openarchives.org/OAI/2.0/");
        Element root = new Element("OAI-PMH", oains);
        Namespace xsi = Namespace.getNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
        Attribute schemaLocation = new Attribute("schemaLocation", "http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd", xsi);
        root.setAttribute(schemaLocation);
        root.addNamespaceDeclaration(xsi);
        Document doc = new Document(root);
        Element responseDate = new Element("responseDate", oains);
        root.addContent(responseDate);
        responseDate.setText(dt.getDate());
        Element request = new Element("request", oains);
        request.setAttribute("verb", "GetRecord");
        int idenCount = 0, mdfCount = 0;
        for (int k = 2; k < j; k += 2) {
            System.out.println(" arg key " + subarr[k]);
            if (subarr[k].equals("metadataPrefix")) {
                mdPrefix = "metadataPrefix";
                mdfCount++;
                mdPrefixValue = subarr[k + 1];
                request.setAttribute(mdPrefix, mdPrefixValue);
                System.out.println(subarr[k] + "=");
                System.out.println(mdPrefixValue);
                argCount++;
            } else if (subarr[k].equals("identifier")) {
                iden = "identifier";
                idenCount++;
                idenValue = subarr[k + 1];
                request.setAttribute(iden, idenValue);
                System.out.println(subarr[k] + "=");
                System.out.println(idenValue);
                argCount++;
            }
        }
        request.setText(url);
        root.addContent(request);
        System.out.println("count" + argCount);
        if (mdfCount == 1 && idenCount == 1 && (mdPrefixValue.equals("marc21") || mdPrefixValue.equals("oai_dc") || mdPrefixValue.equals("mods"))) {
            try {
                v1 = ((ejb.bprocess.OAIPMH.ListGetRecordsHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome("ListGetRecords")).create().getRecord(idenValue, mdPrefixValue);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            if (v1.size() == 0) {
                System.out.println("vector size is empty");
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(3, attribute, url, "GetRecord");
                root.addContent(errorXML);
            } else {
                Element GetRecord = new Element("GetRecord", oains);
                root.addContent(GetRecord);
                Element Record = new Element("record", oains);
                Element metadata = new Element("metadata", oains);
                Element head = new Element("header", oains);
                System.out.println("size i  s " + v1.size());
                for (int v = 0; v < v1.size(); v = v + 13) {
                    vSet = (java.util.Vector) v1.elementAt(v + 1);
                    Element ident = new Element("identifier", oains);
                    ident.setText(idenValue);
                    head.addContent(ident);
                    Element dates = new Element("datestamp", oains);
                    dates.setText(v1.elementAt(v).toString().substring(0, 10));
                    head.addContent(dates);
                    for (int t = 0; t < vSet.size(); t++) {
                        Element setSpec = new Element("setSpec", oains);
                        System.out.println("set elem" + vSet.elementAt(t).toString());
                        setSpec.setText(vSet.elementAt(t).toString());
                        head.addContent(setSpec);
                    }
                    Element marcroot = new Element("record", "marc", "http://www.loc.gov/MARC21/slim");
                    Namespace xsimarc = Namespace.getNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                    marcroot.addNamespaceDeclaration(xsimarc);
                    Attribute schemaLocationmarc = new Attribute("schemaLocation", "http://www.loc.gov/MARC21/slim http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd", xsimarc);
                    marcroot.setAttribute(schemaLocationmarc);
                    marcroot.setAttribute("type", "Bibliographic");
                    v3 = (java.util.Vector) v1.elementAt(v + 10);
                    java.util.Vector vL = (java.util.Vector) v3.elementAt(0);
                    org.jdom.Element lead = new org.jdom.Element("leader", "marc", "http://www.loc.gov/MARC21/slim");
                    lead.setText(vL.elementAt(0).toString());
                    marcroot.addContent(lead);
                    java.util.Vector vC = (java.util.Vector) v3.elementAt(1);
                    for (int u = 0; u < vC.size(); u = u + 2) {
                        org.jdom.Element ct = new org.jdom.Element("controlfield", "marc", "http://www.loc.gov/MARC21/slim");
                        ct.setAttribute("tag", vC.elementAt(u).toString());
                        ct.setText(vC.elementAt(u + 1).toString());
                        marcroot.addContent(ct);
                    }
                    v901 = (java.util.Vector) v1.elementAt(v + 2);
                    for (int k = 0; k < v901.size(); k++) {
                        org.jdom.Element datafield = new org.jdom.Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                        datafield.setAttribute("tag", "901");
                        datafield.setAttribute("ind1", "0");
                        datafield.setAttribute("ind2", "0");
                        java.util.Vector vecSub = new java.util.Vector(1, 1);
                        vecSub = (java.util.Vector) v901.elementAt(k);
                        System.out.println("in getrec sub ");
                        System.out.println("sub 901 size" + vecSub.size());
                        for (int k1 = 0; k1 < vecSub.size(); k1 = k1 + 2) {
                            org.jdom.Element subfield = new org.jdom.Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                            subfield.setAttribute("code", vecSub.elementAt(k1).toString());
                            subfield.setText(vecSub.elementAt(k1 + 1).toString());
                            datafield.addContent(subfield);
                        }
                        marcroot.addContent(datafield);
                    }
                    v902 = (java.util.Vector) v1.elementAt(v + 3);
                    for (int l = 0; l < v902.size(); l++) {
                        Element datafield1 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                        datafield1.setAttribute("tag", "902");
                        datafield1.setAttribute("ind1", "0");
                        datafield1.setAttribute("ind2", "0");
                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);
                        vecSub1 = (java.util.Vector) v902.elementAt(l);
                        for (int b = 0; b < vecSub1.size(); b = b + 2) {
                            Element subfield = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                            subfield.setAttribute("code", vecSub1.elementAt(b).toString());
                            subfield.setText(vecSub1.elementAt(b + 1).toString());
                            datafield1.addContent(subfield);
                        }
                        marcroot.addContent(datafield1);
                    }
                    v903 = (java.util.Vector) v1.elementAt(v + 4);
                    Element datafield1 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                    datafield1.setAttribute("tag", "903");
                    datafield1.setAttribute("ind1", "0");
                    datafield1.setAttribute("ind2", "0");
                    for (int l = 0; l < v903.size(); l++) {
                        Element subfield = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                        subfield.setAttribute("code", "a");
                        subfield.setText(v903.elementAt(l).toString());
                        datafield1.addContent(subfield);
                    }
                    marcroot.addContent(datafield1);
                    v904 = (java.util.Vector) v1.elementAt(v + 5);
                    Element datafield21 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                    datafield21.setAttribute("tag", "904");
                    datafield21.setAttribute("ind1", "0");
                    datafield21.setAttribute("ind2", "0");
                    for (int l = 0; l < v904.size(); l++) {
                        Element subfield = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                        subfield.setAttribute("code", "a");
                        subfield.setText(v904.elementAt(l).toString());
                        datafield21.addContent(subfield);
                    }
                    marcroot.addContent(datafield21);
                    v905 = (java.util.Vector) v1.elementAt(v + 6);
                    Element datafield31 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                    datafield31.setAttribute("tag", "905");
                    datafield31.setAttribute("ind1", "0");
                    datafield31.setAttribute("ind2", "0");
                    for (int l = 0; l < v905.size(); l++) {
                        Element subfield = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                        subfield.setAttribute("code", "a");
                        subfield.setText(v905.elementAt(l).toString());
                        datafield31.addContent(subfield);
                    }
                    marcroot.addContent(datafield31);
                    v906 = (java.util.Vector) v1.elementAt(v + 7);
                    Element datafield4 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                    datafield4.setAttribute("tag", "906");
                    datafield4.setAttribute("ind1", "0");
                    datafield4.setAttribute("ind2", "0");
                    for (int l = 0; l < v906.size(); l++) {
                        Element subfield = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                        subfield.setAttribute("code", "a");
                        subfield.setText(v906.elementAt(l).toString());
                        datafield4.addContent(subfield);
                    }
                    marcroot.addContent(datafield4);
                    v907 = (java.util.Vector) v1.elementAt(v + 8);
                    for (int l = 0; l < v907.size(); l++) {
                        Element datafield5 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                        datafield5.setAttribute("tag", "907");
                        datafield5.setAttribute("ind1", "0");
                        datafield5.setAttribute("ind2", "0");
                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);
                        vecSub1 = (java.util.Vector) v907.elementAt(l);
                        for (int b = 0; b < vecSub1.size(); b = b + 2) {
                            Element subfield = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                            subfield.setAttribute("code", vecSub1.elementAt(b).toString());
                            subfield.setText(vecSub1.elementAt(b + 1).toString());
                            datafield5.addContent(subfield);
                        }
                        marcroot.addContent(datafield5);
                    }
                    v908 = (java.util.Vector) v1.elementAt(v + 9);
                    for (int l = 0; l < v908.size(); l++) {
                        Element datafield6 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                        datafield6.setAttribute("tag", "908");
                        datafield6.setAttribute("ind1", "0");
                        datafield6.setAttribute("ind2", "0");
                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);
                        vecSub1 = (java.util.Vector) v908.elementAt(l);
                        for (int b = 0; b < vecSub1.size(); b = b + 2) {
                            Element subfield = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                            subfield.setAttribute("code", vecSub1.elementAt(b).toString());
                            subfield.setText(vecSub1.elementAt(b + 1).toString());
                            datafield6.addContent(subfield);
                        }
                        marcroot.addContent(datafield6);
                    }
                    vData = (java.util.Vector) v1.elementAt(v + 11);
                    for (int m = 0; m < vData.size(); m = m + 2) {
                        Element datafield2 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                        datafield2.setAttribute("tag", vData.elementAt(m).toString());
                        datafield2.setAttribute("ind1", "0");
                        datafield2.setAttribute("ind2", "0");
                        java.util.Vector vSub = new java.util.Vector(1, 1);
                        vSub = (java.util.Vector) vData.elementAt(m + 1);
                        for (int n = 0; n < vSub.size(); n = n + 2) {
                            Element subfield = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                            subfield.setAttribute("code", vSub.elementAt(n).toString());
                            subfield.setText(vSub.elementAt(n + 1).toString());
                            datafield2.addContent(subfield);
                        }
                        marcroot.addContent(datafield2);
                    }
                    v856 = (java.util.Vector) v1.elementAt(v + 12);
                    for (int l = 0; l < v856.size(); l = l + 2) {
                        Element datafield3 = new Element("datafield", "marc", "http://www.loc.gov/MARC21/slim");
                        datafield3.setAttribute("tag", "856");
                        datafield3.setAttribute("ind1", "0");
                        datafield3.setAttribute("ind2", "0");
                        Element subfield1 = new Element("subfield", "marc", "http://www.loc.gov/MARC21/slim");
                        subfield1.setAttribute("code", v856.elementAt(l).toString());
                        subfield1.setText(v856.elementAt(l + 1).toString());
                        datafield3.addContent(subfield1);
                        marcroot.addContent(datafield3);
                    }
                    if (mdPrefixValue.equals("oai_dc")) {
                        try {
                            Transformer transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + "StyleSheets" + java.io.File.separator + "MARC21slim2OAIDC.xsl"));
                            Document docmarc = new Document(marcroot);
                            JDOMSource in = new JDOMSource(docmarc);
                            JDOMResult out = new JDOMResult();
                            transformer.transform(in, out);
                            Document doc2 = out.getDocument();
                            org.jdom.output.XMLOutputter out1 = new org.jdom.output.XMLOutputter();
                            out1.setTextTrim(true);
                            out1.setIndent("  ");
                            out1.setNewlines(true);
                            String s1 = out1.outputString(doc2);
                            System.out.println("dublin core is" + s1);
                            Element dcroot1 = doc2.getRootElement();
                            Namespace xsi1 = Namespace.getNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                            Namespace oainsdc = Namespace.getNamespace("http://www.openarchives.org/OAI/2.0/oai_dc/");
                            Element dcroot = new Element("dc", "oai_dc", "http://www.openarchives.org/OAI/2.0/oai_dc/");
                            Namespace dcns = Namespace.getNamespace("dc", "http://purl.org/dc/elements/1.1/");
                            dcroot.addNamespaceDeclaration(dcns);
                            dcroot.addNamespaceDeclaration(xsi1);
                            Attribute schemaLocationdc = new Attribute("schemaLocation", "http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd", xsi1);
                            dcroot.setAttribute(schemaLocationdc);
                            java.util.List dcList = doc2.getRootElement().getChildren();
                            for (int g = 0; g < dcList.size(); g++) {
                                Element dcElem1 = (org.jdom.Element) dcList.get(g);
                                Element dcElem = new Element(dcElem1.getName(), "dc", "http://purl.org/dc/elements/1.1/");
                                dcElem.setText(dcElem1.getText());
                                dcroot.addContent(dcElem);
                            }
                            metadata.addContent(dcroot);
                        } catch (TransformerException e) {
                            e.printStackTrace();
                        }
                    } else if (mdPrefixValue.equals("mods")) {
                        try {
                            java.util.Properties systemSettings = System.getProperties();
                            java.util.prefs.Preferences prefs = java.util.prefs.Preferences.systemRoot();
                            if (prefs.getBoolean("useproxy", false)) {
                                systemSettings.put("proxySet", "true");
                                systemSettings.put("proxyHost", prefs.get("proxyservername", ""));
                                systemSettings.put("proxyPort", prefs.get("proxyport", ""));
                                systemSettings.put("http.proxyHost", prefs.get("proxyservername", ""));
                                systemSettings.put("http.proxyPort", prefs.get("proxyport", ""));
                            }
                            String urltext = "";
                            Transformer transformer = null;
                            urltext = "http://www.loc.gov/standards/mods/v3/MARC21slim2MODS3.xsl";
                            java.net.URL url1 = new java.net.URL(urltext);
                            java.net.URLConnection urlconn = url1.openConnection();
                            urlconn.setDoInput(true);
                            transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(urlconn.getInputStream()));
                            Document docmarc = new Document(marcroot);
                            JDOMSource in = new JDOMSource(docmarc);
                            JDOMResult out = new JDOMResult();
                            transformer.transform(in, out);
                            Document doc2 = out.getDocument();
                            org.jdom.output.XMLOutputter out1 = new org.jdom.output.XMLOutputter();
                            out1.setTextTrim(true);
                            out1.setIndent("  ");
                            out1.setNewlines(true);
                            String s1 = out1.outputString(doc2);
                            Namespace xsi1 = Namespace.getNamespace("xlink", "http://www.w3.org/1999/xlink");
                            Namespace oainsdc = Namespace.getNamespace("http://www.openarchives.org/OAI/2.0/oai_dc/");
                            Element mroot = new Element("mods", "http://www.loc.gov/mods/v3");
                            Namespace dcns = Namespace.getNamespace("http://www.loc.gov/mods/v3");
                            mroot.addNamespaceDeclaration(xsi1);
                            Attribute schemaLocationdc = new Attribute("schemaLocation", "http://www.loc.gov/mods/v3 http://www.loc.gov/standards/mods/v3/mods-3-0.xsd", xsi1);
                            mroot.setAttribute(schemaLocationdc);
                            java.util.List dcList = doc2.getRootElement().getChildren();
                            for (int g = 0; g < dcList.size(); g++) {
                                Element mElem1 = (org.jdom.Element) dcList.get(g);
                                Element mElem = new Element(mElem1.getName(), "http://www.loc.gov/mods/v3");
                                if (mElem1.hasChildren()) {
                                    java.util.List mList1 = mElem1.getChildren();
                                    for (int f = 0; f < mList1.size(); f++) {
                                        Element mElem2 = (org.jdom.Element) mList1.get(f);
                                        Element mElem3 = new Element(mElem2.getName(), "http://www.loc.gov/mods/v3");
                                        if (mElem2.hasChildren()) {
                                            java.util.List mList2 = mElem2.getChildren();
                                            for (int h = 0; h < mList2.size(); h++) {
                                                Element mElem4 = (org.jdom.Element) mList1.get(h);
                                                Element mElem5 = new Element(mElem4.getName(), "http://www.loc.gov/mods/v3");
                                                mElem5.setText(mElem4.getText());
                                                mElem3.addContent(mElem5);
                                            }
                                        }
                                        if (mElem2.hasChildren() == false) {
                                            mElem3.setText(mElem2.getText());
                                        }
                                        mElem.addContent(mElem3);
                                    }
                                }
                                if (mElem1.hasChildren() == false) {
                                    mElem.setText(mElem1.getText());
                                }
                                mroot.addContent(mElem);
                            }
                            metadata.addContent(mroot);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (mdPrefixValue.equals("marc21")) {
                        metadata.addContent(marcroot);
                    } else if (mdPrefixValue.equals("oai_dc")) {
                    }
                }
                Record.addContent(head);
                Record.addContent(metadata);
                GetRecord.addContent(Record);
            }
        } else if (argCount <= 2) {
            if (idenCount < 1 && mdfCount < 1) {
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(2, "missing arguments: identifier,metadataprefix", url, "GetRecord");
                root.addContent(errorXML);
            } else if (idenCount < 1) {
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(2, "missing argument: identifier", url, "GetRecord");
                root.addContent(errorXML);
            } else if (mdfCount < 1) {
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(2, "missing argument: metadataprefix", url, "GetRecord");
                root.addContent(errorXML);
            } else if (argCount > 2) {
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(2, "more number of arguments", url, "GetRecord");
                root.addContent(errorXML);
            } else {
                System.out.println("no format");
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(6, "", url, "GetRecord");
                root.addContent(errorXML);
            }
        }
        XMLOutputter out = new XMLOutputter();
        out.setIndent(" ");
        out.setNewlines(true);
        s = out.outputString(doc);
        return s;
    }
} </s>
<s>class temp {    protected void configure() {
        Enumeration<URL> resources = null;
        try {
            resources = classLoader.getResources(resourceName);
        } catch (IOException e) {
            binder().addError(e.getMessage(), e);
            return;
        }
        int resourceCount = 0;
        while (resources.hasMoreElements()) {
            URL url = resources.nextElement();
            log.debug(url + " ...");
            try {
                InputStream stream = url.openStream();
                Properties props = new Properties();
                props.load(stream);
                resourceCount++;
                addComponentsFromProperties(props, classLoader);
            } catch (IOException e) {
                binder().addError(e.getMessage(), e);
            }
        }
        log.info("Added components from " + resourceCount + " resources.");
    }
} </s>
<s>class temp {    public String upload() {
        System.out.println(imgFile);
        String destDir = "E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "show";
    }
} </s>
<s>class temp {    private static void copy(File in, File out) throws IOException {
        if (!out.getParentFile().isDirectory()) out.getParentFile().mkdirs();
        FileChannel ic = new FileInputStream(in).getChannel();
        FileChannel oc = new FileOutputStream(out).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }
} </s>
<s>class temp {    public static String readFromUrl(String url) {
        URL url_ = null;
        URLConnection uc = null;
        BufferedReader in = null;
        StringBuilder str = new StringBuilder();
        try {
            url_ = new URL(url);
            uc = url_.openConnection();
            in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) str.append(inputLine);
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str.toString();
    }
} </s>
<s>class temp {    private boolean handlePart(Part p) throws MessagingException, GetterException {
        String filename = p.getFileName();
        if (!p.isMimeType("multipart/*")) {
            String disp = p.getDisposition();
            if (disp == null || disp.equalsIgnoreCase(Part.ATTACHMENT)) {
                if (checkCriteria(p)) {
                    if (filename == null) filename = "Attachment" + attnum++;
                    if (result == null) {
                        try {
                            File f = File.createTempFile("amorph_pop3-", ".tmp");
                            f.deleteOnExit();
                            OutputStream os = new BufferedOutputStream(new FileOutputStream(f));
                            InputStream is = p.getInputStream();
                            int c;
                            while ((c = is.read()) != -1) os.write(c);
                            os.close();
                            result = new FileInputStream(f);
                            System.out.println("saved attachment to file: " + f.getAbsolutePath());
                            return true;
                        } catch (IOException ex) {
                            throw new GetterException(ex, "Failed to save attachment: " + ex);
                        }
                    }
                }
            }
        }
        return false;
    }
} </s>
<s>class temp {    public final Matrix3D<E> read(final URL url) throws IOException {
        if (url == null) {
            throw new IllegalArgumentException("url must not be null");
        }
        InputStream inputStream = null;
        try {
            inputStream = url.openStream();
            return read(inputStream);
        } catch (IOException e) {
            throw e;
        } finally {
            MatrixIOUtils.closeQuietly(inputStream);
        }
    }
} </s>
<s>class temp {    @Override
    public void sendData(String serverUrl, String fileName, String type, InputStream is) throws IOException {
        ClientSession clientSession = null;
        try {
            if (logger.isDebugEnabled()) {
                logger.debug("Connecting to " + serverUrl);
            }
            clientSession = (ClientSession) Connector.open(serverUrl);
            HeaderSet hsConnectReply = clientSession.connect(clientSession.createHeaderSet());
            if (hsConnectReply.getResponseCode() != ResponseCodes.OBEX_HTTP_OK) {
                throw new IOException("Connect Error " + hsConnectReply.getResponseCode());
            }
            HeaderSet hsOperation = clientSession.createHeaderSet();
            hsOperation.setHeader(HeaderSet.NAME, fileName);
            if (type != null) {
                hsOperation.setHeader(HeaderSet.TYPE, type);
            }
            hsOperation.setHeader(HeaderSet.LENGTH, new Long(is.available()));
            Operation po = clientSession.put(hsOperation);
            OutputStream os = po.openOutputStream();
            IOUtils.copy(is, os);
            os.flush();
            os.close();
            if (logger.isDebugEnabled()) {
                logger.debug("put responseCode " + po.getResponseCode());
            }
            po.close();
            HeaderSet hsDisconnect = clientSession.disconnect(null);
            if (logger.isDebugEnabled()) {
                logger.debug("disconnect responseCode " + hsDisconnect.getResponseCode());
            }
            if (hsDisconnect.getResponseCode() != ResponseCodes.OBEX_HTTP_OK) {
                throw new IOException("Send Error " + hsConnectReply.getResponseCode());
            }
        } finally {
            if (clientSession != null) {
                try {
                    clientSession.close();
                } catch (IOException ignore) {
                    if (logger.isDebugEnabled()) {
                        logger.debug("IOException during clientSession.close()", ignore);
                    }
                }
            }
            clientSession = null;
        }
    }
} </s>
<s>class temp {    public static String md5(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        StringBuffer result = new StringBuffer();
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(input.getBytes("utf-8"));
        byte[] digest = md.digest();
        for (byte b : digest) {
            result.append(String.format("%02X ", b & 0xff));
        }
        return result.toString();
    }
} </s>
<s>class temp {    protected Object getMethodKey(String methodName, Object[] args) {
        StringBuffer key = new StringBuffer(methodName.trim().replace(" ", ".")).append(".");
        for (Object o : args) {
            if (o != null) key.append(o.hashCode());
        }
        LOGGER.info("Generation key ->" + key.toString());
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
            messageDigest.reset();
            messageDigest.update(key.toString().getBytes(Charset.forName("UTF8")));
            final byte[] resultByte = messageDigest.digest();
            String hex = null;
            for (int i = 0; i < resultByte.length; i++) {
                hex = Integer.toHexString(0xFF & resultByte[i]);
                if (hex.length() < 2) {
                    key.append("0");
                }
                key.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
            LOGGER.severe("No hash generated for method key! " + StackTraceUtil.getStackTrace(e));
        }
        LOGGER.info("Generation key ->" + key.toString());
        return new String(key);
    }
} </s>
<s>class temp {    private void extractByParsingHtml(String refererURL, String requestURL) throws MalformedURLException, IOException {
        URL url = new URL(refererURL);
        InputStream is = url.openStream();
        mRefererURL = refererURL;
        if (requestURL.startsWith("http://www.")) {
            mRequestURLWWW = requestURL;
            mRequestURL = "http://" + mRequestURLWWW.substring(11);
        } else {
            mRequestURL = requestURL;
            mRequestURLWWW = "http://www." + mRequestURL.substring(7);
        }
        Parser parser = (new HTMLEditorKit() {

            public Parser getParser() {
                return super.getParser();
            }
        }).getParser();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        String line = null;
        StringBuffer sb = new StringBuffer();
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }
        StringReader sr = new StringReader(sb.toString());
        parser.parse(sr, new LinkbackCallback(), true);
        if (mStart != 0 && mEnd != 0 && mEnd > mStart) {
            mExcerpt = sb.toString().substring(mStart, mEnd);
            mExcerpt = Utilities.removeHTML(mExcerpt);
            if (mExcerpt.length() > mMaxExcerpt) {
                mExcerpt = mExcerpt.substring(0, mMaxExcerpt) + "...";
            }
        }
        if (mTitle.startsWith(">") && mTitle.length() > 1) {
            mTitle = mTitle.substring(1);
        }
    }
} </s>
<s>class temp {    public String insertBuilding() {
        homeMap = homeMapDao.getHomeMapById(homeMap.getId());
        homeBuilding.setHomeMap(homeMap);
        Integer id = homeBuildingDao.saveHomeBuilding(homeBuilding);
        String dir = "E:\\ganymede_workspace\\training01\\web\\user_buildings\\";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(dir + id);
            IOUtils.copy(new FileInputStream(imageFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return execute();
    }
} </s>
<s>class temp {    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[8192];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws EnhancedException {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (Exception e) {
            throw new EnhancedException("Could not copy file " + in.getAbsolutePath() + " to " + out.getAbsolutePath() + ".", e);
        }
    }
} </s>
<s>class temp {    public static String loadURLToString(String url, String EOL) throws FileNotFoundException, IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
        String result = "";
        String str;
        while ((str = in.readLine()) != null) {
            result += str + EOL;
        }
        in.close();
        return result;
    }
} </s>
<s>class temp {    public static String generate(String presentity, String eventPackage) {
        if (presentity == null || eventPackage == null) {
            return null;
        }
        String date = Long.toString(System.currentTimeMillis());
        try {
            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);
            md.update(presentity.getBytes());
            md.update(eventPackage.getBytes());
            md.update(date.getBytes());
            byte[] digest = md.digest();
            return toHexString(digest);
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        LogFrame.getInstance();
        for (int i = 0; i < args.length; i++) {
            String arg = args[i];
            if (arg.trim().startsWith(DEBUG_PARAMETER_NAME + "=")) {
                properties.put(DEBUG_PARAMETER_NAME, arg.trim().substring(DEBUG_PARAMETER_NAME.length() + 1).trim());
                if (properties.getProperty(DEBUG_PARAMETER_NAME).toLowerCase().equals(DEBUG_TRUE)) {
                    DEBUG = true;
                }
            } else if (arg.trim().startsWith(AUTOCONNECT_PARAMETER_NAME + "=")) {
                properties.put(AUTOCONNECT_PARAMETER_NAME, arg.trim().substring(AUTOCONNECT_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(SITE_CONFIG_URL_PARAMETER_NAME + "=")) {
                properties.put(SITE_CONFIG_URL_PARAMETER_NAME, arg.trim().substring(SITE_CONFIG_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(LOAD_PLUGINS_PARAMETER_NAME + "=")) {
                properties.put(LOAD_PLUGINS_PARAMETER_NAME, arg.trim().substring(LOAD_PLUGINS_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_URL_PARAMETER_NAME + "=")) {
                properties.put(DOCSERVICE_URL_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(CORPUS_ID_PARAMETER_NAME + "=")) {
                properties.put(CORPUS_ID_PARAMETER_NAME, arg.trim().substring(CORPUS_ID_PARAMETER_NAME.length() + 1).trim());
            } else {
                System.out.println("WARNING! Unknown or undefined parameter: '" + arg.trim() + "'");
            }
        }
        System.out.println("Annic GUI startup parameters:");
        System.out.println("------------------------------");
        for (Object propName : properties.keySet()) {
            System.out.println(propName.toString() + "=" + properties.getProperty((String) propName));
        }
        System.out.println("------------------------------");
        if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) == null || properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() == 0) {
            String err = "Mandatory parameter '" + SITE_CONFIG_URL_PARAMETER_NAME + "' is missing.\n\nApplication will exit.";
            System.out.println(err);
            JOptionPane.showMessageDialog(new JFrame(), err, "Error!", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
        try {
            String context = System.getProperty(CONTEXT);
            if (context == null || "".equals(context)) {
                context = DEFAULT_CONTEXT;
            }
            String s = System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                File f = File.createTempFile("foo", "");
                String gateHome = f.getParent().toString() + context;
                f.delete();
                System.setProperty(GateConstants.GATE_HOME_PROPERTY_NAME, gateHome);
                f = new File(System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + "/plugins");
                File f = new File(System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + "/gate.xml");
            }
            if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) != null && properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() > 0) {
                File f = new File(System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME));
                if (f.exists()) {
                    f.delete();
                }
                f.getParentFile().mkdirs();
                f.createNewFile();
                URL url = new URL(properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME));
                InputStream is = url.openStream();
                FileOutputStream fos = new FileOutputStream(f);
                int i = is.read();
                while (i != -1) {
                    fos.write(i);
                    i = is.read();
                }
                fos.close();
                is.close();
            }
            try {
                Gate.init();
                gate.Main.applyUserPreferences();
            } catch (Exception e) {
                e.printStackTrace();
            }
            s = BASE_PLUGIN_NAME + "," + properties.getProperty(LOAD_PLUGINS_PARAMETER_NAME);
            System.out.println("Loading plugins: " + s);
            loadPlugins(s, true);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        MainFrame.getInstance().setVisible(true);
        MainFrame.getInstance().pack();
        if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, "").toLowerCase().equals(AUTOCONNECT_TRUE)) {
            if (properties.getProperty(CORPUS_ID_PARAMETER_NAME) == null || properties.getProperty(CORPUS_ID_PARAMETER_NAME).length() == 0) {
                String err = "Can't autoconnect. A parameter '" + CORPUS_ID_PARAMETER_NAME + "' is missing.";
                System.out.println(err);
                JOptionPane.showMessageDialog(MainFrame.getInstance(), err, "Error!", JOptionPane.ERROR_MESSAGE);
                ActionShowAnnicConnectDialog.getInstance().actionPerformed(null);
            } else {
                ActionConnectToAnnicGUI.getInstance().actionPerformed(null);
            }
        } else {
            ActionShowAnnicConnectDialog.getInstance().actionPerformed(null);
        }
    }
} </s>
<s>class temp {    public static String getWebContent(String remoteUrl) {
        StringBuffer sb = new StringBuffer();
        try {
            java.net.URL url = new java.net.URL(remoteUrl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            in.close();
        } catch (Exception e) {
            logger.error("获取远程网址内容失败 - " + remoteUrl, e);
        }
        return sb.toString();
    }
} </s>
<s>class temp {    public static String getWebContent(String remoteUrl, String encoding) {
        StringBuffer sb = new StringBuffer();
        try {
            java.net.URL url = new java.net.URL(remoteUrl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            in.close();
        } catch (Exception e) {
            logger.error("获取远程网址内容失败 - " + remoteUrl, e);
        }
        return sb.toString();
    }
} </s>
<s>class temp {    public void copy(String sourcePath, String targetPath) throws IOException {
        File sourceFile = new File(sourcePath);
        File targetFile = new File(targetPath);
        FileInputStream fileInputStream = null;
        FileOutputStream fileOutputStream = null;
        try {
            fileInputStream = new FileInputStream(sourceFile);
            fileOutputStream = new FileOutputStream(targetFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = fileInputStream.read(buffer)) != -1) fileOutputStream.write(buffer, 0, bytesRead);
        } finally {
            if (fileInputStream != null) try {
                fileInputStream.close();
            } catch (IOException exception) {
                JOptionPane.showMessageDialog(null, AcideLanguageManager.getInstance().getLabels().getString("s265") + sourcePath, AcideLanguageManager.getInstance().getLabels().getString("s266"), JOptionPane.ERROR_MESSAGE);
                AcideLog.getLog().error(exception.getMessage());
            }
            if (fileOutputStream != null) try {
                fileOutputStream.close();
            } catch (IOException exception) {
                JOptionPane.showMessageDialog(null, AcideLanguageManager.getInstance().getLabels().getString("s267") + targetPath, AcideLanguageManager.getInstance().getLabels().getString("268"), JOptionPane.ERROR_MESSAGE);
                AcideLog.getLog().error(exception.getMessage());
            }
        }
    }
} </s>
<s>class temp {        private DataFileType[] getDataFiles(Collection<ContentToSend> contentsToSend) {
            DataFileType[] files = new DataFileType[contentsToSend.size()];
            int fileIndex = 0;
            for (ContentToSend contentToSend : contentsToSend) {
                DataFileType dataFile = DataFileType.Factory.newInstance();
                dataFile.setFilename(contentToSend.getFileName());
                dataFile.setId("D" + fileIndex);
                dataFile.setMimeType(contentToSend.getMimeType());
                dataFile.setContentType(DataFileType.ContentType.EMBEDDED_BASE_64);
                final StringWriter stringWriter = new StringWriter();
                final OutputStream encodeStream = Base64.newEncoder(stringWriter, 0, null);
                final InputStream is = contentToSend.getInputStream();
                try {
                    long sizeCopied = IOUtils.copyLarge(is, encodeStream);
                    dataFile.setSize(BigDecimal.valueOf(sizeCopied));
                } catch (IOException e) {
                    throw new RuntimeException("Failed to get input to the file to be sent", e);
                } finally {
                    IOUtils.closeQuietly(encodeStream);
                    IOUtils.closeQuietly(is);
                }
                dataFile.setStringValue(stringWriter.toString());
                files[fileIndex++] = dataFile;
            }
            return files;
        }
} </s>
<s>class temp {    private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) {
        final PipedOutputStream pipedOutputStream = new PipedOutputStream();
        final List<Throwable> ungzipThreadThrowableList = new LinkedList<Throwable>();
        Writer decoderWriter = null;
        Thread ungzipThread = null;
        try {
            final PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream);
            ungzipThread = new Thread(new Runnable() {

                public void run() {
                    GZIPInputStream gzipInputStream = null;
                    try {
                        gzipInputStream = new GZIPInputStream(pipedInputStream);
                        IOUtils.copy(gzipInputStream, outputStream);
                    } catch (Throwable t) {
                        ungzipThreadThrowableList.add(t);
                    } finally {
                        IOUtils.closeQuietly(gzipInputStream);
                        IOUtils.closeQuietly(pipedInputStream);
                    }
                }
            });
            decoderWriter = Base64.newDecoder(pipedOutputStream);
            ungzipThread.start();
            IOUtils.copy(inputStream, decoderWriter, DVK_MESSAGE_CHARSET);
            decoderWriter.flush();
            pipedOutputStream.flush();
        } catch (IOException e) {
            throw new RuntimeException("failed to unzip and decode input", e);
        } finally {
            IOUtils.closeQuietly(decoderWriter);
            IOUtils.closeQuietly(pipedOutputStream);
            if (ungzipThread != null) {
                try {
                    ungzipThread.join();
                } catch (InterruptedException ie) {
                    throw new RuntimeException("thread interrupted while for ungzip thread to finish", ie);
                }
            }
        }
        if (!ungzipThreadThrowableList.isEmpty()) {
            throw new RuntimeException("ungzip failed", ungzipThreadThrowableList.get(0));
        }
        return outputStream;
    }
} </s>
<s>class temp {                public void run() {
                    GZIPInputStream gzipInputStream = null;
                    try {
                        gzipInputStream = new GZIPInputStream(pipedInputStream);
                        IOUtils.copy(gzipInputStream, outputStream);
                    } catch (Throwable t) {
                        ungzipThreadThrowableList.add(t);
                    } finally {
                        IOUtils.closeQuietly(gzipInputStream);
                        IOUtils.closeQuietly(pipedInputStream);
                    }
                }
} </s>
<s>class temp {    private static void main(String mp3Path) throws IOException {
        String convPath = "http://android.adinterest.biz/wav2mp3.php?k=";
        String uri = convPath + mp3Path;
        URL rssurl = new URL(uri);
        InputStream is = rssurl.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
        String buf = "";
        while ((buf = br.readLine()) != null) {
        }
        is.close();
        br.close();
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        final StringBuilder sbValueBeforeMD5 = new StringBuilder();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            logger.fatal("", e);
            return;
        }
        try {
            final long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(sId);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            final byte[] array = md5.digest();
            final StringBuilder sb = new StringBuilder();
            for (int j = 0; j < array.length; ++j) {
                final int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.fatal("", e);
        }
    }
} </s>
<s>class temp {    public static final String getUniqueId() {
        String digest = "";
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            String timeVal = "" + (System.currentTimeMillis() + 1);
            String localHost = "";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                throw new RuntimeException("Error trying to get localhost" + e.getMessage());
            }
            String randVal = "" + new Random().nextInt();
            String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("NoSuchAlgorithmException : " + e.getMessage());
        }
        return digest;
    }
} </s>
<s>class temp {    public static void copy(File source, File dest) throws Exception {
        FileInputStream in = new FileInputStream(source);
        FileOutputStream out = new FileOutputStream(dest);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    public void notifyIterationEnds(final IterationEndsEvent event) {
        log.info("moving files...");
        File source = new File("deqsim.log");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename("deqsim.log"));
            if (!IOUtils.renameFile(source, destination)) {
                log.info("WARNING: Could not move deqsim.log to its iteration directory.");
            }
        }
        int parallelCnt = 0;
        source = new File("deqsim.log." + parallelCnt);
        while (source.exists()) {
            File destination = new File(Controler.getIterationFilename("deqsim.log." + parallelCnt));
            if (!IOUtils.renameFile(source, destination)) {
                log.info("WARNING: Could not move deqsim.log." + parallelCnt + " to its iteration directory.");
            }
            parallelCnt++;
            source = new File("deqsim.log." + parallelCnt);
        }
        source = new File("loads_out.txt");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename("loads_out.txt"));
            try {
                IOUtils.copyFile(source, destination);
            } catch (FileNotFoundException e) {
                log.info("WARNING: Could not copy loads_out.txt to its iteration directory.");
            } catch (IOException e) {
                log.info("WARNING: Could not copy loads_out.txt to its iteration directory.");
            }
            destination = new File("loads_in.txt");
            if (!IOUtils.renameFile(source, destination)) {
                log.info("WARNING: Could not move loads_out.txt to loads_in.txt.");
            }
        }
        source = new File("linkprocs.txt");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename("linkprocs.txt"));
            if (!IOUtils.renameFile(source, destination)) {
                log.info("WARNING: Could not move linkprocs.txt to its iteration directory.");
            }
        }
    }
} </s>
<s>class temp {    @Override
    public final boolean delete() throws RecordException {
        if (frozen) {
            throw new RecordException("The object is frozen.");
        }
        Connection conn = ConnectionManager.getConnection();
        LoggableStatement pStat = null;
        Class<? extends Record> actualClass = this.getClass();
        StatementBuilder builder = null;
        try {
            builder = new StatementBuilder("delete from " + TableNameResolver.getTableName(actualClass) + " where id = :id");
            Field f = FieldHandler.findField(this.getClass(), "id");
            builder.set("id", FieldHandler.getValue(f, this));
            pStat = builder.getPreparedStatement(conn);
            log.log(pStat.getQueryString());
            int i = pStat.executeUpdate();
            return i == 1;
        } catch (Exception e) {
            try {
                conn.rollback();
            } catch (SQLException e1) {
                throw new RecordException("Error executing rollback");
            }
            throw new RecordException(e);
        } finally {
            try {
                if (pStat != null) {
                    pStat.close();
                }
                conn.commit();
                conn.close();
            } catch (SQLException e) {
                throw new RecordException("Error closing connection");
            }
        }
    }
} </s>
<s>class temp {    @Override
    public final boolean save() throws RecordException, RecordValidationException, RecordValidationSyntax {
        if (frozen) {
            throw new RecordException("The object is frozen.");
        }
        boolean toReturn = false;
        Class<? extends Record> actualClass = this.getClass();
        HashMap<String, Integer> columns = getColumns(TableNameResolver.getTableName(actualClass));
        Connection conn = ConnectionManager.getConnection();
        LoggableStatement pStat = null;
        try {
            if (exists()) {
                doValidations(true);
                StatementBuilder builder = new StatementBuilder("update " + TableNameResolver.getTableName(actualClass) + " set");
                String updates = "";
                for (String key : columns.keySet()) {
                    if (!key.equals("id")) {
                        Field f = null;
                        try {
                            f = FieldHandler.findField(actualClass, key);
                        } catch (FieldOrMethodNotFoundException e) {
                            throw new RecordException("Database column name >" + key + "< not found in class " + actualClass.getCanonicalName());
                        }
                        updates += key + " = :" + key + ", ";
                        builder.set(key, FieldHandler.getValue(f, this));
                    }
                }
                builder.append(updates.substring(0, updates.length() - 2));
                builder.append("where id = :id");
                builder.set(":id", FieldHandler.getValue(FieldHandler.findField(actualClass, "id"), this));
                pStat = builder.getPreparedStatement(conn);
                log.log(pStat.getQueryString());
                int i = pStat.executeUpdate();
                toReturn = i == 1;
            } else {
                doValidations(false);
                StatementBuilder builder = new StatementBuilder("insert into " + TableNameResolver.getTableName(actualClass) + " ");
                String names = "";
                String values = "";
                for (String key : columns.keySet()) {
                    Field f = null;
                    try {
                        f = FieldHandler.findField(actualClass, key);
                    } catch (FieldOrMethodNotFoundException e) {
                        throw new RecordException("Database column name >" + key + "< not found in class " + actualClass.getCanonicalName());
                    }
                    if (key.equals("id") && (Integer) FieldHandler.getValue(f, this) == 0) {
                        continue;
                    }
                    names += key + ", ";
                    values += ":" + key + ", ";
                    builder.set(key, f.get(this));
                }
                names = names.substring(0, names.length() - 2);
                values = values.substring(0, values.length() - 2);
                builder.append("(" + names + ")");
                builder.append("values");
                builder.append("(" + values + ")");
                pStat = builder.getPreparedStatement(conn);
                log.log(pStat.getQueryString());
                int i = pStat.executeUpdate();
                toReturn = i == 1;
            }
            if (childList != null) {
                if (childObjects == null) {
                    childObjects = new HashMap<Class<? extends Record>, Record>();
                }
                for (Class<? extends Record> c : childList.keySet()) {
                    if (childObjects.get(c) != null) {
                        childObjects.get(c).save();
                    }
                }
            }
            if (childrenList != null) {
                if (childrenObjects == null) {
                    childrenObjects = new HashMap<Class<? extends Record>, List<? extends Record>>();
                }
                for (Class<? extends Record> c : childrenList.keySet()) {
                    if (childrenObjects.get(c) != null) {
                        for (Record r : childrenObjects.get(c)) {
                            r.save();
                        }
                    }
                }
            }
            if (relatedList != null) {
                if (childrenObjects == null) {
                    childrenObjects = new HashMap<Class<? extends Record>, List<? extends Record>>();
                }
                for (Class<? extends Record> c : relatedList.keySet()) {
                    if (childrenObjects.get(c) != null) {
                        for (Record r : childrenObjects.get(c)) {
                            r.save();
                        }
                    }
                }
            }
            return toReturn;
        } catch (Exception e) {
            if (e instanceof RecordValidationException) {
                throw (RecordValidationException) e;
            }
            if (e instanceof RecordValidationSyntax) {
                throw (RecordValidationSyntax) e;
            }
            try {
                conn.rollback();
            } catch (SQLException e1) {
                throw new RecordException("Error executing rollback");
            }
            throw new RecordException(e);
        } finally {
            try {
                if (pStat != null) {
                    pStat.close();
                }
                conn.commit();
                conn.close();
            } catch (SQLException e) {
                throw new RecordException("Error closing connection");
            }
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".version")) version = line.substring(8).trim(); else if (line.startsWith(".build")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    public static Image getPluginImage(Object plugin, String name) {
        try {
            try {
                URL url = getPluginImageURL(plugin, name);
                if (m_URLImageMap.containsKey(url)) return m_URLImageMap.get(url);
                InputStream is = url.openStream();
                Image image;
                try {
                    image = getImage(is);
                    m_URLImageMap.put(url, image);
                } finally {
                    is.close();
                }
                return image;
            } catch (Throwable e) {
            }
        } catch (Throwable e) {
        }
        return null;
    }
} </s>
<s>class temp {    private Document saveFile(Document document, File file) throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATEFORMAT_YYYYMMDD);
        List<Preference> preferences = prefService.findAll();
        if (preferences != null && !preferences.isEmpty()) {
            Preference preference = preferences.get(0);
            String repo = preference.getRepository();
            StringBuffer sbRepo = new StringBuffer(repo);
            sbRepo.append(File.separator);
            StringBuffer sbFolder = new StringBuffer(document.getLocation());
            File folder = new File(sbRepo.append(sbFolder).toString());
            log.info("Check in file ID [" + document.getId() + "] to " + folder.getAbsolutePath());
            if (!folder.exists()) {
                folder.mkdirs();
            }
            FileChannel fcSource = null, fcDest = null, fcVersionDest = null;
            try {
                StringBuffer sbFile = new StringBuffer(folder.getAbsolutePath()).append(File.separator).append(document.getId()).append(".").append(document.getExt());
                StringBuffer sbVersionFile = new StringBuffer(folder.getAbsolutePath()).append(File.separator).append(document.getId()).append("_").append(document.getVersion().toString()).append(".").append(document.getExt());
                fcSource = new FileInputStream(file).getChannel();
                fcDest = new FileOutputStream(sbFile.toString()).getChannel();
                fcVersionDest = new FileOutputStream(sbVersionFile.toString()).getChannel();
                fcDest.transferFrom(fcSource, 0, fcSource.size());
                fcSource = new FileInputStream(file).getChannel();
                fcVersionDest.transferFrom(fcSource, 0, fcSource.size());
                document.setLocation(sbFolder.toString());
                documentService.save(document);
            } catch (FileNotFoundException notFoundEx) {
                log.error("saveFile file not found: " + document.getName(), notFoundEx);
            } catch (IOException ioEx) {
                log.error("saveFile IOException: " + document.getName(), ioEx);
            } finally {
                try {
                    if (fcSource != null) {
                        fcSource.close();
                    }
                    if (fcDest != null) {
                        fcDest.close();
                    }
                    if (fcVersionDest != null) {
                        fcVersionDest.close();
                    }
                } catch (Exception e) {
                    log.error(e.getMessage(), e);
                }
            }
        }
        return document;
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        try {
            FileReader inf = new FileReader(in);
            OutputStreamWriter outf = new OutputStreamWriter(new FileOutputStream(out), "UTF-8");
            int c;
            while ((c = inf.read()) != -1) outf.write(c);
            inf.close();
            outf.close();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private DefaultMutableTreeNode parseTree() {
        try {
            DefaultMutableTreeNode root;
            URL url = RebusHelp.class.getResource("/org/olga/rebus/gui/help/html/content.xml");
            InputStream is = url.openStream();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(is);
            NodeList elements = document.getElementsByTagName("help");
            Element element = (Element) elements.item(0);
            root = createTreeContent(element);
            is.close();
            return root;
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return null;
        } catch (ParserConfigurationException e1) {
            System.out.println(e1.getMessage());
            return null;
        } catch (org.xml.sax.SAXException e2) {
            System.out.println(e2.getMessage());
            return null;
        }
    }
} </s>
<s>class temp {    private HttpResponse executePutPost(HttpEntityEnclosingRequestBase request, String content) {
        try {
            if (LOG.isTraceEnabled()) {
                LOG.trace("Content: {}", content);
            }
            StringEntity e = new StringEntity(content, "UTF-8");
            e.setContentType("application/json");
            request.setEntity(e);
            return executeRequest(request);
        } catch (Exception e) {
            throw Exceptions.propagate(e);
        }
    }
} </s>
<s>class temp {    public void copy(File in, File out) throws Exception {
        FileChannel src = new FileInputStream(in).getChannel();
        FileChannel dest = new FileOutputStream(out).getChannel();
        src.transferTo(0, src.size(), dest);
        src.close();
        dest.close();
    }
} </s>
<s>class temp {    private synchronized void awaitResponse() throws BOSHException {
        HttpEntity entity = null;
        try {
            HttpResponse httpResp = client.execute(post, context);
            entity = httpResp.getEntity();
            byte[] data = EntityUtils.toByteArray(entity);
            String encoding = entity.getContentEncoding() != null ? entity.getContentEncoding().getValue() : null;
            if (ZLIBCodec.getID().equalsIgnoreCase(encoding)) {
                data = ZLIBCodec.decode(data);
            } else if (GZIPCodec.getID().equalsIgnoreCase(encoding)) {
                data = GZIPCodec.decode(data);
            }
            body = StaticBody.fromString(new String(data, CHARSET));
            statusCode = httpResp.getStatusLine().getStatusCode();
            sent = true;
        } catch (IOException iox) {
            abort();
            toThrow = new BOSHException("Could not obtain response", iox);
            throw (toThrow);
        } catch (RuntimeException ex) {
            abort();
            throw (ex);
        }
    }
} </s>
<s>class temp {    protected int insertRecord(PutMetadataRequest request, PutMetadataInfo info) throws ImsServiceException, SQLException {
        Connection con = null;
        boolean autoCommit = true;
        PreparedStatement st = null;
        ResultSet rs = null;
        int nRows = 0;
        String sXml = info.getXml();
        String sUuid = info.getUuid();
        String sName = info.getName();
        String sThumbnailBinary = info.getThumbnailBinary();
        String sTable = this.getResourceTableName();
        String sDataTable = this.getResourceDataTableName();
        long id = doesRecordExist(sTable, sUuid);
        try {
            ManagedConnection mc = returnConnection();
            con = mc.getJdbcConnection();
            autoCommit = con.getAutoCommit();
            con.setAutoCommit(false);
            if (id < 0) {
                StringBuffer sql = new StringBuffer();
                sql.append("INSERT INTO ").append(sTable);
                sql.append(" (");
                sql.append("DOCUUID,");
                sql.append("TITLE,");
                sql.append("OWNER");
                sql.append(")");
                sql.append(" VALUES(?,?,?)");
                logExpression(sql.toString());
                st = con.prepareStatement(sql.toString());
                int n = 1;
                st.setString(n++, sUuid);
                st.setString(n++, sName);
                st.setInt(n++, this.publisher.getLocalID());
                nRows = st.executeUpdate();
                closeStatement(st);
                if (nRows > 0) {
                    if (getIsDbCaseSensitive(this.getRequestContext())) {
                        st = con.prepareStatement("SELECT id FROM " + sTable + " WHERE UPPER(docuuid)=?");
                    } else {
                        st = con.prepareStatement("SELECT id FROM " + sTable + " WHERE docuuid=?");
                    }
                    st.setString(1, sUuid.toUpperCase());
                    rs = st.executeQuery();
                    rs.next();
                    id = rs.getLong(1);
                    closeStatement(st);
                    request.setActionStatus(ImsRequest.ACTION_STATUS_OK);
                    sql = new StringBuffer();
                    sql.append("INSERT INTO ").append(sDataTable);
                    sql.append(" (DOCUUID,ID,XML)");
                    sql.append(" VALUES(?,?,?)");
                    logExpression(sql.toString());
                    st = con.prepareStatement(sql.toString());
                    st.setString(1, sUuid);
                    st.setLong(2, id);
                    st.setString(3, sXml);
                    st.executeUpdate();
                }
            } else {
                this.authorize(request, sUuid);
                StringBuffer sql = new StringBuffer();
                sql.append("UPDATE ").append(sTable);
                sql.append(" SET ");
                if (!request.getLockTitle()) {
                    sql.append("TITLE=?, ");
                }
                sql.append("OWNER=?, ");
                sql.append("UPDATEDATE=?");
                sql.append(" WHERE DOCUUID=?");
                logExpression(sql.toString());
                st = con.prepareStatement(sql.toString());
                int n = 1;
                if (!request.getLockTitle()) {
                    st.setString(n++, sName);
                }
                st.setInt(n++, this.publisher.getLocalID());
                st.setTimestamp(n++, new Timestamp(System.currentTimeMillis()));
                st.setString(n++, sUuid);
                nRows = st.executeUpdate();
                if (nRows > 0) {
                    request.setActionStatus(ImsRequest.ACTION_STATUS_REPLACED);
                }
                closeStatement(st);
                sql = new StringBuffer();
                if (doesRecordExist(sDataTable, sUuid) >= 0) {
                    sql.append("UPDATE ").append(sDataTable);
                    sql.append(" SET DOCUUID=?, XML=?, THUMBNAIL=?");
                    sql.append(" WHERE ID=?");
                } else {
                    sql.append("INSERT INTO ").append(sDataTable);
                    sql.append(" (DOCUUID, XML,THUMBNAIL,ID)");
                    sql.append(" VALUES(?,?,?,?)");
                }
                logExpression(sql.toString());
                st = con.prepareStatement(sql.toString());
                st.setString(1, sUuid);
                st.setString(2, sXml);
                st.setBytes(3, null);
                st.setLong(4, id);
                st.executeUpdate();
            }
            con.commit();
        } catch (ImsServiceException ex) {
            if (con != null) {
                con.rollback();
            }
            throw ex;
        } catch (SQLException ex) {
            if (con != null) {
                con.rollback();
            }
            throw ex;
        } finally {
            closeResultSet(rs);
            closeStatement(st);
            if (con != null) {
                con.setAutoCommit(autoCommit);
            }
        }
        if ((sThumbnailBinary != null) && (sThumbnailBinary.length() > 0)) {
            this.updateThumbnail(sThumbnailBinary, sUuid);
        }
        return nRows;
    }
} </s>
<s>class temp {    public void deployDir(File srcDir, String destDir) {
        File[] dirFiles = srcDir.listFiles();
        for (int k = 0; dirFiles != null && k < dirFiles.length; k++) {
            if (!dirFiles[k].getName().startsWith(".")) {
                if (dirFiles[k].isFile()) {
                    File deployFile = new File(destDir + File.separator + dirFiles[k].getName());
                    if (dirFiles[k].lastModified() != deployFile.lastModified() || dirFiles[k].length() != deployFile.length()) {
                        IOUtils.copy(dirFiles[k], deployFile);
                    }
                } else if (dirFiles[k].isDirectory()) {
                    String newDestDir = destDir + File.separator + dirFiles[k].getName();
                    deployDir(dirFiles[k], newDestDir);
                }
            }
        }
    }
} </s>
<s>class temp {    public void guardarRecordatorio() {
        try {
            if (espaciosLlenos()) {
                guardarCantidad();
                String dat = "";
                String filenametxt = String.valueOf("recordatorio" + cantidadArchivos + ".txt");
                String filenamezip = String.valueOf("recordatorio" + cantidadArchivos + ".zip");
                cantidadArchivos++;
                dat += identificarDato(datoSeleccionado) + "\n";
                dat += String.valueOf(mesTemporal) + "\n";
                dat += String.valueOf(anoTemporal) + "\n";
                dat += horaT.getText() + "\n";
                dat += lugarT.getText() + "\n";
                dat += actividadT.getText() + "\n";
                File archivo = new File(filenametxt);
                FileWriter fw = new FileWriter(archivo);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter salida = new PrintWriter(bw);
                salida.print(dat);
                salida.close();
                BufferedInputStream origin = null;
                FileOutputStream dest = new FileOutputStream(filenamezip);
                ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
                byte data[] = new byte[buffer];
                File f = new File(filenametxt);
                FileInputStream fi = new FileInputStream(f);
                origin = new BufferedInputStream(fi, buffer);
                ZipEntry entry = new ZipEntry(filenametxt);
                out.putNextEntry(entry);
                int count;
                while ((count = origin.read(data, 0, buffer)) != -1) out.write(data, 0, count);
                out.close();
                JOptionPane.showMessageDialog(null, "El recordatorio ha sido guardado con exito", "Recordatorio Guardado", JOptionPane.INFORMATION_MESSAGE);
                marco.hide();
                marco.dispose();
                establecerMarca();
                table.clearSelection();
            } else JOptionPane.showMessageDialog(null, "Debe llenar los espacios de Hora, Lugar y Actividad", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en: " + e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
} </s>
<s>class temp {    public void guardarCantidad() {
        try {
            String can = String.valueOf(cantidadArchivos);
            File archivo = new File("cantidadArchivos.txt");
            FileWriter fw = new FileWriter(archivo);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter salida = new PrintWriter(bw);
            salida.print(can);
            salida.close();
            BufferedInputStream origin = null;
            FileOutputStream dest = new FileOutputStream("cantidadArchivos.zip");
            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
            byte data[] = new byte[buffer];
            File f = new File("cantidadArchivos.txt");
            FileInputStream fi = new FileInputStream(f);
            origin = new BufferedInputStream(fi, buffer);
            ZipEntry entry = new ZipEntry("cantidadArchivos.txt");
            out.putNextEntry(entry);
            int count;
            while ((count = origin.read(data, 0, buffer)) != -1) out.write(data, 0, count);
            out.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en: " + e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
} </s>
<s>class temp {    public void verRecordatorio() {
        try {
            cantidadArchivos = obtenerCantidad() + 1;
            boolean existe = false;
            String filenametxt = "";
            String filenamezip = "";
            String hora = "";
            String lugar = "";
            String actividad = "";
            String linea = "";
            int dia = 0;
            int mes = 0;
            int ano = 0;
            for (int i = 1; i < cantidadArchivos; i++) {
                filenamezip = "recordatorio" + i + ".zip";
                filenametxt = "recordatorio" + i + ".txt";
                BufferedOutputStream dest = null;
                BufferedInputStream is = null;
                ZipEntry entry;
                ZipFile zipfile = new ZipFile(filenamezip);
                Enumeration e = zipfile.entries();
                while (e.hasMoreElements()) {
                    entry = (ZipEntry) e.nextElement();
                    is = new BufferedInputStream(zipfile.getInputStream(entry));
                    int count;
                    byte data[] = new byte[buffer];
                    FileOutputStream fos = new FileOutputStream(entry.getName());
                    dest = new BufferedOutputStream(fos, buffer);
                    while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);
                    dest.flush();
                    dest.close();
                    is.close();
                }
                DataInputStream input = new DataInputStream(new FileInputStream(filenametxt));
                dia = Integer.parseInt(input.readLine());
                mes = Integer.parseInt(input.readLine());
                ano = Integer.parseInt(input.readLine());
                if (dia == Integer.parseInt(identificarDato(datoSeleccionado))) {
                    existe = true;
                    hora = input.readLine();
                    lugar = input.readLine();
                    while ((linea = input.readLine()) != null) actividad += linea + "\n";
                    verRecordatorioInterfaz(hora, lugar, actividad);
                    hora = "";
                    lugar = "";
                    actividad = "";
                }
                input.close();
            }
            if (!existe) JOptionPane.showMessageDialog(null, "No existe un recordatorio guardado\n" + "para el " + identificarDato(datoSeleccionado) + " de " + meses[mesTemporal].toLowerCase() + " del a o " + anoTemporal, "No existe", JOptionPane.INFORMATION_MESSAGE);
            table.clearSelection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en: " + e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
} </s>
<s>class temp {    public int obtenerCantidad() {
        try {
            BufferedOutputStream dest = null;
            BufferedInputStream is = null;
            ZipEntry entry;
            ZipFile zipfile = new ZipFile("cantidadArchivos.zip");
            Enumeration e = zipfile.entries();
            while (e.hasMoreElements()) {
                entry = (ZipEntry) e.nextElement();
                is = new BufferedInputStream(zipfile.getInputStream(entry));
                int count;
                byte data[] = new byte[buffer];
                FileOutputStream fos = new FileOutputStream(entry.getName());
                dest = new BufferedOutputStream(fos, buffer);
                while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
                is.close();
            }
            DataInputStream input = new DataInputStream(new FileInputStream("cantidadArchivos.txt"));
            int a = Integer.parseInt(input.readLine());
            input.close();
            return (a);
        } catch (Exception e) {
            return (0);
        }
    }
} </s>
<s>class temp {    public boolean chequearMarca(int a, int m, int d) {
        boolean existe = false;
        try {
            cantidadArchivos = obtenerCantidad() + 1;
            String filenametxt = "";
            String filenamezip = "";
            int dia = 0;
            int mes = 0;
            int ano = 0;
            for (int i = 1; i < cantidadArchivos; i++) {
                filenamezip = "recordatorio" + i + ".zip";
                filenametxt = "recordatorio" + i + ".txt";
                BufferedOutputStream dest = null;
                BufferedInputStream is = null;
                ZipEntry entry;
                ZipFile zipfile = new ZipFile(filenamezip);
                Enumeration e = zipfile.entries();
                while (e.hasMoreElements()) {
                    entry = (ZipEntry) e.nextElement();
                    is = new BufferedInputStream(zipfile.getInputStream(entry));
                    int count;
                    byte data[] = new byte[buffer];
                    FileOutputStream fos = new FileOutputStream(entry.getName());
                    dest = new BufferedOutputStream(fos, buffer);
                    while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);
                    dest.flush();
                    dest.close();
                    is.close();
                }
                DataInputStream input = new DataInputStream(new FileInputStream(filenametxt));
                dia = Integer.parseInt(input.readLine());
                mes = Integer.parseInt(input.readLine());
                ano = Integer.parseInt(input.readLine());
                if (ano == a && mes == m && dia == d) existe = true;
                input.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en: " + e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return (existe);
    }
} </s>
<s>class temp {    public GetMyDocuments() {
        String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetMyDocuments";
        String rvalue = "";
        String filename = dms_home + FS + "temp" + FS + username + "mydocuments.xml";
        try {
            String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "mydocuments.xml";
            ;
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName("document");
            int num = nodelist.getLength();
            myDocsData = new String[num][4];
            myDocsToolTip = new String[num];
            myDocumentImageName = new String[num];
            myDocIds = new int[num];
            for (int i = 0; i < num; i++) {
                myDocsData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "filename"));
                myDocsData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "project"));
                myDocsData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "deadline"));
                myDocsData[i][3] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "workingfolder"));
                myDocsToolTip[i] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "title"));
                myDocumentImageName[i] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "imagename"));
                myDocIds[i] = (new Integer(new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "documentid")))).intValue();
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException ex) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
} </s>
<s>class temp {    public static boolean downloadRegPage() {
        String filename = "register.php?csz=" + checkEmptyString(jDtr) + "&&mac=" + MAC + "&&uname=" + checkEmptyString(InstallName) + "&&cname=" + checkEmptyString(InstallCompany) + "&&winuname=" + checkEmptyString(WinName) + "&&wincname=" + checkEmptyString(WinCompany) + "&&age=" + checkEmptyString(jAge) + "&&sal=" + checkEmptyString(jSal) + "&&sta=" + checkEmptyString(jSta) + "&&sex=" + checkEmptyString(jSex) + "&&con=" + checkEmptyString(jCon) + "&&occ=" + checkEmptyString(jOcc) + "&&int=" + checkEmptyString(jInt) + "&&ver=" + checkEmptyString(jVer) + "&&mor=" + checkEmptyString(jTyp);
        URL url1 = null;
        try {
            url1 = new URL(url + filename);
        } catch (MalformedURLException e1) {
        }
        int status = 0;
        try {
            status = ((HttpURLConnection) url1.openConnection()).getResponseCode();
        } catch (IOException e1) {
            System.out.println(e1);
        }
        if (status == 200) {
            return true;
        } else {
            return false;
        }
    }
} </s>
<s>class temp {    private void request() {
        try {
            connection = (HttpURLConnection) new URL(url).openConnection();
            if (isCometConnection) {
                connection.setReadTimeout(0);
            } else {
                connection.setReadTimeout(30000);
            }
            connection.setInstanceFollowRedirects(false);
            connection.setDoInput(true);
            connection.setRequestMethod(method);
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 GTB5");
            if ("post".equalsIgnoreCase(method)) {
                connection.setDoOutput(true);
                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            }
            if (user != null) {
                String auth = user + ":" + (password != null ? password : "");
                String base64Auth = HttpRequest.Base64.byteArrayToBase64(auth.getBytes());
                connection.setRequestProperty("Authorization", "Basic " + base64Auth);
            }
            for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) {
                String key = (String) iter.next();
                connection.setRequestProperty(key, (String) headers.get(key));
            }
            connection.setUseCaches(false);
            if (checkAbort()) return;
            if ("post".equalsIgnoreCase(method)) {
                DataOutputStream dos = new DataOutputStream(connection.getOutputStream());
                activeOS = dos;
                if (content != null) {
                    dos.writeBytes(content);
                }
                if (checkAbort()) return;
                dos.flush();
                dos.close();
                activeOS = null;
            }
            if (checkAbort()) return;
            InputStream is = null;
            try {
                is = connection.getInputStream();
            } catch (IOException e) {
                if (checkAbort()) return;
                readyState = 4;
                if (onreadystatechange != null) {
                    onreadystatechange.onLoaded();
                }
                connection = null;
                readyState = 0;
                return;
            }
            activeIS = is;
            if (readyState < 2) {
                readyState = 2;
                status = connection.getResponseCode();
                statusText = connection.getResponseMessage();
                if (onreadystatechange != null) {
                    onreadystatechange.onSent();
                }
            }
            receiving = initializeReceivingMonitor();
            ByteArrayOutputStream baos = new ByteArrayOutputStream(10240);
            byte[] buffer = new byte[10240];
            int read;
            while (!toAbort && (read = is.read(buffer)) != -1) {
                if (checkAbort()) return;
                if (readyState != 3) {
                    readyState = 3;
                    if (onreadystatechange != null) {
                        onreadystatechange.onReceiving();
                    }
                }
                boolean received = false;
                if (receiving != null) {
                    received = receiving.receiving(baos, buffer, 0, read);
                }
                if (!received) {
                    baos.write(buffer, 0, read);
                }
            }
            if (checkAbort()) return;
            is.close();
            activeIS = null;
            responseText = null;
            String type = connection.getHeaderField("Content-Type");
            if (type != null) {
                String charset = null;
                String lowerType = type.toLowerCase();
                int idx = lowerType.indexOf("charset=");
                if (idx != -1) {
                    charset = type.substring(idx + 8);
                } else {
                    idx = lowerType.indexOf("/xml");
                    if (idx != -1) {
                        String tmp = baos.toString();
                        Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp);
                        if (matcher.find()) {
                            charset = matcher.group(1);
                        } else {
                            responseText = tmp;
                        }
                    } else {
                        idx = lowerType.indexOf("html");
                        if (idx != -1) {
                            String tmp = baos.toString();
                            Matcher matcher = Pattern.compile("<meta.*content\\s*=\\s*[\'\"][^'\"]*charset\\s*=\\s*([^'\"]*)\\s*[\'\"].*>", Pattern.MULTILINE | Pattern.CASE_INSENSITIVE).matcher(tmp);
                            if (matcher.find()) {
                                charset = matcher.group(1);
                            } else {
                                responseText = tmp;
                            }
                        }
                    }
                }
                if (charset != null) {
                    try {
                        responseText = baos.toString(charset);
                    } catch (UnsupportedEncodingException e) {
                    }
                }
            }
            if (responseText == null) {
                try {
                    responseText = baos.toString("iso-8859-1");
                } catch (UnsupportedEncodingException e) {
                    responseText = baos.toString();
                }
            }
            readyState = 4;
            if (onreadystatechange != null) {
                onreadystatechange.onLoaded();
            }
            connection.disconnect();
            readyState = 0;
        } catch (Exception e) {
            if (checkAbort()) return;
            e.printStackTrace();
            readyState = 4;
            if (onreadystatechange != null) {
                onreadystatechange.onLoaded();
            }
            connection = null;
            readyState = 0;
        }
    }
} </s>
<s>class temp {    private String hash(String message) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA1");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError("Can't find the SHA1 algorithm in the java.security package");
        }
        String saltString = String.valueOf(12345);
        md.update(saltString.getBytes());
        md.update(message.getBytes());
        byte[] digestBytes = md.digest();
        StringBuffer digestSB = new StringBuffer();
        for (int i = 0; i < digestBytes.length; i++) {
            int lowNibble = digestBytes[i] & 0x0f;
            int highNibble = (digestBytes[i] >> 4) & 0x0f;
            digestSB.append(Integer.toHexString(highNibble));
            digestSB.append(Integer.toHexString(lowNibble));
        }
        String digestStr = digestSB.toString().trim();
        return digestStr;
    }
} </s>
<s>class temp {    public String encodePassword(String rawPass, Object salt) {
        MessageDigest sha;
        try {
            sha = MessageDigest.getInstance("SHA");
        } catch (java.security.NoSuchAlgorithmException e) {
            throw new LdapDataAccessException("No SHA implementation available!");
        }
        sha.update(rawPass.getBytes());
        if (salt != null) {
            Assert.isInstanceOf(byte[].class, salt, "Salt value must be a byte array");
            sha.update((byte[]) salt);
        }
        byte[] hash = combineHashAndSalt(sha.digest(), (byte[]) salt);
        return (salt == null ? SHA_PREFIX : SSHA_PREFIX) + new String(Base64.encodeBase64(hash));
    }
} </s>
<s>class temp {    public static String crypt(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException("String to encript cannot be null or zero length");
        }
        StringBuffer hexString = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md.update(str.getBytes());
        byte[] hash = md.digest();
        for (int i = 0; i < hash.length; i++) {
            if ((0xff & hash[i]) < 0x10) {
                hexString.append("0" + Integer.toHexString((0xFF & hash[i])));
            } else {
                hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
        }
        return hexString.toString();
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        try {
            {
                byte[] bytes1 = { (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };
                byte[] bytes2 = { (byte) 99, (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };
                System.out.println("Bytes 2,2,3,0,9 as Base64: " + encodeBytes(bytes1));
                System.out.println("Bytes 2,2,3,0,9 w/ offset: " + encodeBytes(bytes2, 1, bytes2.length - 1));
                byte[] dbytes = decode(encodeBytes(bytes1));
                System.out.print(encodeBytes(bytes1) + " decoded: ");
                for (int i = 0; i < dbytes.length; i++) System.out.print(dbytes[i] + (i < dbytes.length - 1 ? "," : "\n"));
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream("test.gif.b64");
                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);
                byte[] bytes = new byte[0];
                int b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[bytes.length + 1];
                    System.arraycopy(bytes, 0, temp, 0, bytes.length);
                    temp[bytes.length] = (byte) b;
                    bytes = temp;
                }
                b64is.close();
                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(bytes);
                javax.swing.JLabel jlabel = new javax.swing.JLabel("Read from test.gif.b64", iicon, 0);
                javax.swing.JFrame jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
                java.io.FileOutputStream fos = new java.io.FileOutputStream("test.gif_out");
                fos.write(bytes);
                fos.close();
                fis = new java.io.FileInputStream("test.gif_out");
                b64is = new Base64.InputStream(fis, ENCODE);
                byte[] ebytes = new byte[0];
                b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[ebytes.length + 1];
                    System.arraycopy(ebytes, 0, temp, 0, ebytes.length);
                    temp[ebytes.length] = (byte) b;
                    ebytes = temp;
                }
                b64is.close();
                String s = new String(ebytes);
                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);
                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);
                jframe = new javax.swing.JFrame();
                jframe.setTitle("Read from test.gif_out");
                jframe.getContentPane().add(jsp);
                jframe.pack();
                jframe.setVisible(true);
                fos = new java.io.FileOutputStream("test.gif.b64_out");
                fos.write(ebytes);
                fis = new java.io.FileInputStream("test.gif.b64_out");
                b64is = new Base64.InputStream(fis, DECODE);
                byte[] edbytes = new byte[0];
                b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[edbytes.length + 1];
                    System.arraycopy(edbytes, 0, temp, 0, edbytes.length);
                    temp[edbytes.length] = (byte) b;
                    edbytes = temp;
                }
                b64is.close();
                iicon = new javax.swing.ImageIcon(edbytes);
                jlabel = new javax.swing.JLabel("Read from test.gif.b64_out", iicon, 0);
                jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream("test.gif_out");
                byte[] rbytes = new byte[0];
                int b = -1;
                while ((b = fis.read()) >= 0) {
                    byte[] temp = new byte[rbytes.length + 1];
                    System.arraycopy(rbytes, 0, temp, 0, rbytes.length);
                    temp[rbytes.length] = (byte) b;
                    rbytes = temp;
                }
                fis.close();
                java.io.FileOutputStream fos = new java.io.FileOutputStream("test.gif.b64_out2");
                Base64.OutputStream b64os = new Base64.OutputStream(fos, ENCODE);
                b64os.write(rbytes);
                b64os.close();
                fis = new java.io.FileInputStream("test.gif.b64_out2");
                byte[] rebytes = new byte[0];
                b = -1;
                while ((b = fis.read()) >= 0) {
                    byte[] temp = new byte[rebytes.length + 1];
                    System.arraycopy(rebytes, 0, temp, 0, rebytes.length);
                    temp[rebytes.length] = (byte) b;
                    rebytes = temp;
                }
                fis.close();
                String s = new String(rebytes);
                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);
                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);
                javax.swing.JFrame jframe = new javax.swing.JFrame();
                jframe.setTitle("Read from test.gif.b64_out2");
                jframe.getContentPane().add(jsp);
                jframe.pack();
                jframe.setVisible(true);
                fos = new java.io.FileOutputStream("test.gif_out2");
                b64os = new Base64.OutputStream(fos, DECODE);
                b64os.write(rebytes);
                b64os.close();
                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon("test.gif_out2");
                javax.swing.JLabel jlabel = new javax.swing.JLabel("Read from test.gif_out2", iicon, 0);
                jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream("D:\\temp\\testencoding.txt");
                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);
                java.io.FileOutputStream fos = new java.io.FileOutputStream("D:\\temp\\file.zip");
                int b;
                while ((b = b64is.read()) >= 0) fos.write(b);
                fos.close();
                b64is.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private String encryptUserPassword(int userId, String password) {
        password = password.trim();
        if (password.length() == 0) {
            return "";
        } else {
            MessageDigest md;
            try {
                md = MessageDigest.getInstance("SHA");
            } catch (NoSuchAlgorithmException ex) {
                throw new BoardRuntimeException(ex);
            }
            md.update(String.valueOf(userId).getBytes());
            md.update(password.getBytes());
            byte b[] = md.digest();
            StringBuffer sb = new StringBuffer(1 + b.length * 2);
            for (int i = 0; i < b.length; i++) {
                int ii = b[i];
                if (ii < 0) {
                    ii = 256 + ii;
                }
                sb.append(getHexadecimalValue2(ii));
            }
            return sb.toString();
        }
    }
} </s>
<s>class temp {    @Override
    public void doIt() {
        try {
            Shared.createBackup("articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos");
            if (mode.equals("FTP")) {
                FTPClient client = new FTPClient();
                client.connect(Constants.ftpHost);
                client.login(Constants.ftpUser, Constants.ftpPass);
                client.changeDirectory(Constants.ftpDir);
                File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);
                client.download("GT99_A09.rar", ff);
                client.disconnect(false);
                Shared.prepareMovements(ff);
            } else if (mode.equals("File")) {
                JFileChooser jfc = new JFileChooser();
                FileFilter f = new ExtensionFileFilter("Traslados de Total Pos", "rar");
                jfc.setFileFilter(f);
                int selection = jfc.showOpenDialog(Shared.getMyMainWindows());
                if (selection == JFileChooser.APPROVE_OPTION) {
                    Shared.prepareMovements(jfc.getSelectedFile());
                } else {
                    return;
                }
            }
            Shared.updateMovements();
            if (Shared.isHadMovements()) {
                MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, "Fue cargado el nuevo inventario satisfactoriamente!");
                msg.show(Shared.getMyMainWindows());
            } else {
                MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, "La tienda no tuvo ningun movimiento asociado.");
                msg.show(Shared.getMyMainWindows());
            }
        } catch (Exception ex) {
            MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, "Ha ocurrido un error.", ex);
            msg.show(Shared.getMyMainWindows());
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        FTPClient client = new FTPClient();
        FileInputStream fis = null;
        try {
            client.connect("192.168.1.10");
            client.login("a", "123456");
            String filename = "D:\\DHTH5CLT\\HK3\\Ung dung phan tan\\FTP_JAVA\\FTP_DETAI\\FTP\\src\\DemoFTP\\filename\\5s.txt";
            fis = new FileInputStream(filename);
            client.storeFile(filename, fis);
            client.logout();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public static void _he3Decode(String in_file) {
        try {
            File out = new File(in_file + dec_extension);
            File in = new File(in_file);
            int file_size = (int) in.length();
            FileInputStream in_stream = new FileInputStream(in_file);
            out.createNewFile();
            FileOutputStream out_stream = new FileOutputStream(out.getName());
            InputStreamReader inputReader = new InputStreamReader(in_stream, "ISO8859_1");
            OutputStreamWriter outputWriter = new OutputStreamWriter(out_stream, "ISO8859_1");
            ByteArrayOutputStream os = new ByteArrayOutputStream(file_size);
            byte byte_arr[] = new byte[8];
            char char_arr[] = new char[8];
            int buff_size = char_arr.length;
            int _fetched = 0;
            int _chars_read = 0;
            System.out.println(appname + ".\n" + dec_mode + ": " + in_file + "\n" + dec_mode + " to: " + in_file + dec_extension + "\n" + "\nreading: ");
            while (_fetched < file_size) {
                _chars_read = inputReader.read(char_arr, 0, buff_size);
                if (_chars_read == -1) break;
                for (int i = 0; i < _chars_read; i++) byte_arr[i] = (byte) char_arr[i];
                os.write(byte_arr, 0, _chars_read);
                _fetched += _chars_read;
                System.out.print("*");
            }
            System.out.print("\n" + dec_mode + ": ");
            outputWriter.write(new String(_decode((ByteArrayOutputStream) os), "ISO-8859-1"));
            System.out.print("complete\n\n");
        } catch (java.io.FileNotFoundException fnfEx) {
            System.err.println("Exception: " + fnfEx.getMessage());
        } catch (java.io.IOException ioEx) {
            System.err.println("Exception: " + ioEx.getMessage());
        }
    }
} </s>
<s>class temp {    protected HttpResponse doGet(String action, String[][] args) throws IOException {
        long startTime = System.currentTimeMillis();
        String getString = host + "?" + ACTION_PARAMETER + "=" + action;
        if (args != null && args.length != 0) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].length != 0) {
                    getString = getString + "&" + args[i][0] + "=" + encode(args[i][1]);
                }
            }
        }
        HttpGet httpGet = new HttpGet(getString);
        HttpResponse response = getHttpClient().execute(httpGet);
        if (timingsOn) {
            totalCalls++;
            long elapsedTime = (System.currentTimeMillis() - startTime);
            if (totalCalls != 1) {
                totalTime = totalTime + elapsedTime;
                minTime = Math.min(minTime, elapsedTime);
                maxTime = Math.max(maxTime, elapsedTime);
            } else {
                minTime = elapsedTime;
                maxTime = 0L;
            }
            System.out.println("http get took " + elapsedTime + " ms., (calls, min, max, av) = (" + totalCalls + ", " + minTime + ", " + maxTime + ", " + (totalTime / totalCalls) + ")");
        }
        return response;
    }
} </s>
<s>class temp {    private void detachFile(File file, Block b) throws IOException {
        File tmpFile = volume.createDetachFile(b, file.getName());
        try {
            IOUtils.copyBytes(new FileInputStream(file), new FileOutputStream(tmpFile), 16 * 1024, true);
            if (file.length() != tmpFile.length()) {
                throw new IOException("Copy of file " + file + " size " + file.length() + " into file " + tmpFile + " resulted in a size of " + tmpFile.length());
            }
            FileUtil.replaceFile(tmpFile, file);
        } catch (IOException e) {
            boolean done = tmpFile.delete();
            if (!done) {
                DataNode.LOG.info("detachFile failed to delete temporary file " + tmpFile);
            }
            throw e;
        }
    }
} </s>
<s>class temp {    public static void copy(String from, String to) throws Exception {
        File inputFile = new File(from);
        File outputFile = new File(to);
        FileInputStream in = new FileInputStream(inputFile);
        FileOutputStream out = new FileOutputStream(outputFile);
        byte[] buffer = new byte[1024];
        int len;
        while ((len = in.read(buffer)) != -1) out.write(buffer, 0, len);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    private void copy(File fromFile, File toFile) throws IOException {
        String fromFileName = fromFile.getName();
        File tmpFile = new File(fromFileName);
        String toFileName = toFile.getName();
        if (!tmpFile.exists()) throw new IOException("FileCopy: " + "no such source file: " + fromFileName);
        if (!tmpFile.isFile()) throw new IOException("FileCopy: " + "can't copy directory: " + fromFileName);
        if (!tmpFile.canRead()) throw new IOException("FileCopy: " + "source file is unreadable: " + fromFileName);
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(tmpFile);
            File toF = new File(toFile.getCanonicalPath());
            if (!toF.exists()) ;
            toF.createNewFile();
            if (!SBCMain.DEBUG_MODE) to = new FileOutputStream(toFile); else to = new FileOutputStream(toF);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
} </s>
<s>class temp {    private void loadDBpediaOntology() {
        try {
            URL url = new URL("http://downloads.dbpedia.org/3.6/dbpedia_3.6.owl.bz2");
            InputStream is = new BufferedInputStream(url.openStream());
            CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is);
            dbPediaOntology = OWLManager.createOWLOntologyManager().loadOntologyFromOntologyDocument(in);
            reasoner = PelletReasonerFactory.getInstance().createNonBufferingReasoner(dbPediaOntology);
            reasoner.precomputeInferences(InferenceType.CLASS_HIERARCHY);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (CompressorException e) {
            e.printStackTrace();
        } catch (OWLOntologyCreationException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public static String SHA1(String string) throws XLWrapException {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException e) {
            throw new XLWrapException("SHA-1 message digest is not available.");
        }
        byte[] data = new byte[40];
        md.update(string.getBytes());
        data = md.digest();
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
            int halfbyte = (data[i] >>> 4) & 0x0F;
            int two_halfs = 0;
            do {
                if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                halfbyte = data[i] & 0x0F;
            } while (two_halfs++ < 1);
        }
        return buf.toString();
    }
} </s>
