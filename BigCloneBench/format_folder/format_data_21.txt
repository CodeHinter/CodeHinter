<s>class temp {    public Document load(java.net.URL url) throws DOMTestLoadException {
        Document doc = null;
        Exception parseException = null;
        try {
            LoadErrorHandler errorHandler = new LoadErrorHandler();
            builder.setErrorHandler(errorHandler);
            doc = builder.parse(url.openStream(), url.toString());
            parseException = errorHandler.getFirstException();
        } catch (Exception ex) {
            parseException = ex;
        }
        builder.setErrorHandler(null);
        if (parseException != null) {
            throw new DOMTestLoadException(parseException);
        }
        return doc;
    }
} </s>
<s>class temp {    public Point getCoordinates(String address, String city, String state, String country) {
        StringBuilder queryString = new StringBuilder();
        StringBuilder urlString = new StringBuilder();
        StringBuilder response = new StringBuilder();
        if (address != null) {
            queryString.append(address.trim().replaceAll(" ", "+"));
            queryString.append("+");
        }
        if (city != null) {
            queryString.append(city.trim().replaceAll(" ", "+"));
            queryString.append("+");
        }
        if (state != null) {
            queryString.append(state.trim().replaceAll(" ", "+"));
            queryString.append("+");
        }
        if (country != null) {
            queryString.append(country.replaceAll(" ", "+"));
        }
        urlString.append("http://maps.google.com/maps/geo?key=");
        urlString.append(key);
        urlString.append("&sensor=false&output=json&oe=utf8&q=");
        urlString.append(queryString.toString());
        try {
            URL url = new URL(urlString.toString());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            JSONObject root = (JSONObject) JSONValue.parse(response.toString());
            JSONObject placemark = (JSONObject) ((JSONArray) root.get("Placemark")).get(0);
            JSONArray coordinates = (JSONArray) ((JSONObject) placemark.get("Point")).get("coordinates");
            Point point = new Point();
            point.setLatitude((Double) coordinates.get(1));
            point.setLongitude((Double) coordinates.get(0));
            return point;
        } catch (MalformedURLException ex) {
            return null;
        } catch (NullPointerException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
    }
} </s>
<s>class temp {    private static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
} </s>
<s>class temp {    private void initialize() {
        StringBuffer license = new StringBuffer();
        URL url;
        InputStreamReader in;
        BufferedReader reader;
        String str;
        JTextArea textArea;
        JButton button;
        GridBagConstraints c;
        setTitle("mibible License");
        setSize(600, 600);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new GridBagLayout());
        url = getClass().getClassLoader().getResource("LICENSE.txt");
        if (url == null) {
            license.append("Couldn't locate license file (LICENSE.txt).");
        } else {
            try {
                in = new InputStreamReader(url.openStream());
                reader = new BufferedReader(in);
                while ((str = reader.readLine()) != null) {
                    if (!str.equals("")) {
                        license.append(str);
                    }
                    license.append("\n");
                }
                reader.close();
            } catch (IOException e) {
                license.append("Error reading license file ");
                license.append("(LICENSE.txt):\n\n");
                license.append(e.getMessage());
            }
        }
        textArea = new JTextArea(license.toString());
        textArea.setEditable(false);
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1.0d;
        c.weighty = 1.0d;
        c.insets = new Insets(4, 5, 4, 5);
        getContentPane().add(new JScrollPane(textArea), c);
        button = new JButton("Close");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        c = new GridBagConstraints();
        c.gridy = 1;
        c.anchor = GridBagConstraints.CENTER;
        c.insets = new Insets(10, 10, 10, 10);
        getContentPane().add(button, c);
    }
} </s>
<s>class temp {    public void testJob() {
        try {
            URL url = new URL("http://rickysql.gotoip3.com/mapp/admin/admin.do");
            url.openConnection();
            url.getContent();
            System.out.print("00");
        } catch (Exception e) {
            System.out.print("Daily data update exception:" + e);
        }
    }
} </s>
<s>class temp {    public List<String> generate(String geronimoVersion, String geronimoHome, String instanceNumber) {
        geronimoRepository = geronimoHome + "/repository";
        Debug.logInfo("The WASCE or Geronimo Repository is " + geronimoRepository, module);
        Classpath classPath = new Classpath(System.getProperty("java.class.path"));
        List<File> elements = classPath.getElements();
        List<String> jar_version = new ArrayList<String>();
        String jarPath = null;
        String jarName = null;
        String newJarName = null;
        String jarNameSimple = null;
        String jarVersion = "1.0";
        int lastDash = -1;
        for (File f : elements) {
            if (f.exists()) {
                if (f.isFile()) {
                    jarPath = f.getAbsolutePath();
                    jarName = f.getName();
                    String jarNameWithoutExt = (String) jarName.subSequence(0, jarName.length() - 4);
                    lastDash = jarNameWithoutExt.lastIndexOf("-");
                    if (lastDash > -1) {
                        jarVersion = jarNameWithoutExt.substring(lastDash + 1, jarNameWithoutExt.length());
                        jarNameSimple = jarNameWithoutExt.substring(0, lastDash);
                        boolean alreadyVersioned = 0 < StringUtil.removeRegex(jarVersion, "[^.0123456789]").length();
                        if (!alreadyVersioned) {
                            jarVersion = "1.0";
                            jarNameSimple = jarNameWithoutExt;
                            newJarName = jarNameWithoutExt + "-" + jarVersion + ".jar";
                        } else {
                            newJarName = jarName;
                        }
                    } else {
                        jarVersion = "1.0";
                        jarNameSimple = jarNameWithoutExt;
                        newJarName = jarNameWithoutExt + "-" + jarVersion + ".jar";
                    }
                    jar_version.add(jarNameSimple + "#" + jarVersion);
                    String targetDirectory = geronimoRepository + "/org/ofbiz/" + jarNameSimple + "/" + jarVersion;
                    File targetDir = new File(targetDirectory);
                    if (!targetDir.exists()) {
                        boolean created = targetDir.mkdirs();
                        if (!created) {
                            Debug.logFatal("Unable to create target directory - " + targetDirectory, module);
                            return null;
                        }
                    }
                    if (!targetDirectory.endsWith("/")) {
                        targetDirectory = targetDirectory + "/";
                    }
                    String newCompleteJarName = targetDirectory + newJarName;
                    File newJarFile = new File(newCompleteJarName);
                    try {
                        FileChannel srcChannel = new FileInputStream(jarPath).getChannel();
                        FileChannel dstChannel = new FileOutputStream(newCompleteJarName).getChannel();
                        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                        Debug.log("Created jar file : " + newJarName + " in WASCE or Geronimo repository", module);
                        srcChannel.close();
                        dstChannel.close();
                    } catch (IOException e) {
                        Debug.logFatal("Unable to create jar file - " + newJarName + " in WASCE or Geronimo repository (certainly already exists)", module);
                        return null;
                    }
                }
            }
        }
        List<ComponentConfig.WebappInfo> webApps = ComponentConfig.getAllWebappResourceInfos();
        File geronimoWebXml = new File(System.getProperty("ofbiz.home") + "/framework/appserver/templates/" + geronimoVersion + "/geronimo-web.xml");
        for (ComponentConfig.WebappInfo webApp : webApps) {
            if (null != webApp) {
                parseTemplate(geronimoWebXml, webApp);
            }
        }
        return jar_version;
    }
} </s>
<s>class temp {    protected void ensureProjectExists(String projectName) {
        List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>();
        IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
        try {
            boolean isEmptyProject = true;
            IProjectDescription projectDescription = null;
            IJavaProject javaProject = JavaCore.create(project);
            if (!project.exists()) {
                projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName);
                project.create(new NullProgressMonitor());
            } else {
                isEmptyProject = false;
                projectDescription = project.getDescription();
                classpathEntries.addAll(Arrays.asList(javaProject.getRawClasspath()));
            }
            String[] natureIds = projectDescription.getNatureIds();
            if (natureIds == null) {
                natureIds = new String[] { JavaCore.NATURE_ID };
            } else {
                boolean hasJavaNature = false;
                boolean hasPDENature = false;
                for (int i = 0; i < natureIds.length; ++i) {
                    if (JavaCore.NATURE_ID.equals(natureIds[i])) {
                        hasJavaNature = true;
                    }
                    if ("org.eclipse.pde.PluginNature".equals(natureIds[i])) {
                        hasPDENature = true;
                    }
                }
                if (!hasJavaNature) {
                    String[] oldNatureIds = natureIds;
                    natureIds = new String[oldNatureIds.length + 1];
                    System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length);
                    natureIds[oldNatureIds.length] = JavaCore.NATURE_ID;
                }
                if (!hasPDENature) {
                    String[] oldNatureIds = natureIds;
                    natureIds = new String[oldNatureIds.length + 1];
                    System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length);
                    natureIds[oldNatureIds.length] = "org.eclipse.pde.PluginNature";
                }
            }
            projectDescription.setNatureIds(natureIds);
            ICommand[] builders = projectDescription.getBuildSpec();
            if (builders == null) {
                builders = new ICommand[0];
            }
            boolean hasManifestBuilder = false;
            boolean hasSchemaBuilder = false;
            for (int i = 0; i < builders.length; ++i) {
                if ("org.eclipse.pde.ManifestBuilder".equals(builders[i].getBuilderName())) {
                    hasManifestBuilder = true;
                }
                if ("org.eclipse.pde.SchemaBuilder".equals(builders[i].getBuilderName())) {
                    hasSchemaBuilder = true;
                }
            }
            if (!hasManifestBuilder) {
                ICommand[] oldBuilders = builders;
                builders = new ICommand[oldBuilders.length + 1];
                System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length);
                builders[oldBuilders.length] = projectDescription.newCommand();
                builders[oldBuilders.length].setBuilderName("org.eclipse.pde.ManifestBuilder");
            }
            if (!hasSchemaBuilder) {
                ICommand[] oldBuilders = builders;
                builders = new ICommand[oldBuilders.length + 1];
                System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length);
                builders[oldBuilders.length] = projectDescription.newCommand();
                builders[oldBuilders.length].setBuilderName("org.eclipse.pde.SchemaBuilder");
            }
            projectDescription.setBuildSpec(builders);
            project.open(new NullProgressMonitor());
            project.setDescription(projectDescription, new NullProgressMonitor());
            if (isEmptyProject) {
                IFolder sourceContainer = project.getFolder("src");
                sourceContainer.create(false, true, new NullProgressMonitor());
                IClasspathEntry sourceClasspathEntry = JavaCore.newSourceEntry(new Path("/" + projectName + "/src"));
                classpathEntries.add(0, sourceClasspathEntry);
                String jreContainer = JavaRuntime.JRE_CONTAINER;
                String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project);
                if ("1.5".equals(complianceLevel)) {
                    jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5";
                } else if ("1.6".equals(complianceLevel)) {
                    jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6";
                }
                classpathEntries.add(JavaCore.newContainerEntry(new Path(jreContainer)));
                classpathEntries.add(JavaCore.newContainerEntry(new Path("org.eclipse.pde.core.requiredPlugins")));
                javaProject.setOutputLocation(new Path("/" + projectName + "/bin"), new NullProgressMonitor());
            }
            javaProject.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), new NullProgressMonitor());
        } catch (CoreException e) {
            e.printStackTrace();
            CodeGenEcorePlugin.INSTANCE.log(e);
        }
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA1");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException("Unable to load SHA1 algorithm", nsae);
            }
        }
        return messageDigest;
    }
} </s>
<s>class temp {    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (content == null) return null;
        final MessageDigest digest = MessageDigest.getInstance(DIGEST);
        if (digestLength == -1) digestLength = digest.getDigestLength();
        for (int i = 0; i < repeatedHashingCount; i++) {
            if (i > 0) digest.update(digest.digest());
            digest.update(saltBefore);
            digest.update(content.getBytes(WebCastellumParameter.DEFAULT_CHARACTER_ENCODING.getValue()));
            digest.update(saltAfter);
        }
        return digest.digest();
    }
} </s>
<s>class temp {    private void connect(byte[] bData) {
        System.out.println("Connecting to: " + url.toString());
        String SOAPAction = "";
        URLConnection connection = null;
        try {
            connection = url.openConnection();
            httpConn = (HttpURLConnection) connection;
            httpConn.setRequestProperty("Content-Length", String.valueOf(bData.length));
            httpConn.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
            httpConn.setRequestProperty("SOAPAction", SOAPAction);
            httpConn.setRequestMethod("POST");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
        } catch (IOException ioExp) {
            CommonLogger.error(this, "Error while connecting to  SOAP server !", ioExp);
        }
    }
} </s>
<s>class temp {    public String elementsSearch() {
        int index = 0;
        for (int i1 = 0; i1 < 6; i1++) {
            for (int i2 = 0; i2 < 5; i2++) {
                if (index < 5) {
                    if (initialMatrix[i1][i2] > 0) {
                        finalMatrix[index] = initialMatrix[i1][i2];
                        index++;
                    }
                } else break;
            }
        }
        int temp;
        for (int i = 0; i < finalMatrix.length; i++) {
            for (int j = 0; j < finalMatrix.length - 1; j++) {
                if (finalMatrix[j] < finalMatrix[j + 1]) {
                    temp = finalMatrix[j];
                    finalMatrix[j] = finalMatrix[j + 1];
                    finalMatrix[j + 1] = temp;
                }
            }
        }
        String result = "";
        for (int k : finalMatrix) result += k + " ";
        return result;
    }
} </s>
<s>class temp {    protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException {
        File currentSrcDir = sourceActionDirectory;
        File currentDestDir = destinationActionDirectory;
        String segment = "";
        for (int i = 0; i < segments.size() - 1; i++) {
            segment = segments.get(i);
            currentSrcDir = new File(currentSrcDir, segment);
            currentDestDir = new File(currentDestDir, segment);
        }
        if (currentSrcDir != null && currentDestDir != null) {
            File srcFile = new File(currentSrcDir, segments.getLast());
            if (srcFile.exists()) {
                File destFile = new File(currentDestDir, segments.getLast());
                if (destFile.exists()) {
                    throw new DuplicateActionFileException(srcFile.toURI().toASCIIString());
                }
                try {
                    FileChannel srcChannel = new FileInputStream(srcFile).getChannel();
                    FileChannel destChannel = new FileOutputStream(destFile).getChannel();
                    ByteBuffer buffer = ByteBuffer.allocate((int) srcChannel.size());
                    while (srcChannel.position() < srcChannel.size()) {
                        srcChannel.read(buffer);
                    }
                    srcChannel.close();
                    buffer.rewind();
                    destChannel.write(buffer);
                    destChannel.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    @Override
    public JSONObject getJsonObj(Trip trip, List<Waypoint> stops) throws IOException {
        JSONObject jsonObject = null;
        try {
            List<String> filtered = new LinkedList<String>();
            filtered.add(trip.getWaypoint().getFromLocation().getCity().replaceAll("\\W+", "+"));
            filtered.add(trip.getWaypoint().getToLocation().getCity().replaceAll("\\W+", "+"));
            for (Waypoint w : stops) {
                String from = w.getFromLocation().getCity().replaceAll("\\W+", "+");
                if (!filtered.contains(from)) filtered.add(from);
                String to = w.getToLocation().getCity().replaceAll("\\W+", "+");
                if (!filtered.contains(to)) filtered.add(to);
            }
            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.append("http://maps.google.com/maps/api/directions/json");
            urlBuilder.append("?origin=").append(filtered.get(0));
            urlBuilder.append("&destination=").append(filtered.get(1));
            if (filtered.size() > 2) {
                urlBuilder.append("&waypoints=");
                for (int i = 2; i < filtered.size() - 1; i++) urlBuilder.append(filtered.get(i)).append("|");
                urlBuilder.append(filtered.get(filtered.size() - 1));
            }
            urlBuilder.append("&sensor=false");
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlBuilder.toString()).openStream()));
            StringBuilder answerBuilder = new StringBuilder();
            String inputLine;
            while ((inputLine = in.readLine()) != null) answerBuilder.append(inputLine);
            in.close();
            jsonObject = new JSONObject(answerBuilder.toString());
        } catch (JSONException e) {
            logger.error("Problem with initializing JSONObject", e);
        }
        return jsonObject;
    }
} </s>
<s>class temp {    protected void fetchDicomSopInstance(File result) throws Exception {
        try {
            URL url = new URL(this.config.getUrl("wadoserver.url").toString() + "?requestType=WADO&contentType=text/xml" + "&studyUID=" + publicationProperties.getProperty("studyUID") + "&seriesUID=" + publicationProperties.getProperty("seriesUID") + "&objectUID=" + publicationProperties.getProperty("objectUID"));
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            OutputStream ostream;
            InputStream istream;
            connection.setUseCaches(false);
            connection.setRequestProperty("accept", "text/xml");
            connection.connect();
            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                throw new Exception("Error fetching DICOM SOP instance (" + connection.getResponseCode() + " " + connection.getResponseMessage() + ")");
            }
            ostream = new BufferedOutputStream(new FileOutputStream(result));
            try {
                istream = connection.getInputStream();
                Utilities.copyStream(istream, ostream);
            } finally {
                ostream.close();
            }
        } catch (Exception e) {
            throw new Exception("Error fetching DICOM SOP instance.", e);
        }
    }
} </s>
<s>class temp {    public void conMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + "&" + HttpConfig.BBS_MAIL_N_PARAM_NAME + "=" + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
} </s>
<s>class temp {    public void conReMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_RECON + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailReContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
} </s>
<s>class temp {    public boolean sendMail(MailObject mail, boolean backup) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        HttpPost post = new HttpPost(HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_SEND);
        List<NameValuePair> nvps = new ArrayList<NameValuePair>();
        nvps.add(new BasicNameValuePair(HttpConfig.BBS_MAIL_SEND_REF_PARAM_NAME, "pstmail"));
        nvps.add(new BasicNameValuePair(HttpConfig.BBS_MAIL_SEND_RECV_PARAM_NAME, mail.getSender()));
        nvps.add(new BasicNameValuePair(HttpConfig.BBS_MAIL_SEND_TITLE_PARAM_NAME, mail.getTitle()));
        nvps.add(new BasicNameValuePair(HttpConfig.BBS_MAIL_SEND_CONTENT_PARAM_NAME, mail.getContent()));
        if (backup) nvps.add(new BasicNameValuePair(HttpConfig.BBS_MAIL_SEND_BACKUP_PARAM_NAME, "backup"));
        try {
            post.setEntity(new UrlEncodedFormEntity(nvps, BBSBodyParseHelper.BBS_CHARSET));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isHttp200(response)) {
                HTTPUtil.consume(response.getEntity());
                return true;
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
} </s>
<s>class temp {    public boolean delMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_DEL + mail.getId());
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                HTTPUtil.consume(response.getEntity());
                return true;
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
} </s>
<s>class temp {    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance("MD5");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println("Failed to load the MD5 MessageDigest. " + "We will be unable to function normally.");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
} </s>
<s>class temp {    public synchronized String encrypt(String plaintext) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA1");
        } catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            noSuchAlgorithmException.printStackTrace();
        }
        try {
            md.update(plaintext.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException unsupportedEncodingException) {
            unsupportedEncodingException.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
} </s>
<s>class temp {    public String httpRequestByPOST(String url, int timeout, List<NameValuePair> params) {
        String response = "";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(url);
            httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
            HttpResponse serverResponse = httpClient.execute(httpPost);
            StatusLine statusLine = serverResponse.getStatusLine();
            if (statusLine.getStatusCode() < 400) {
                InputStream inputStream = serverResponse.getEntity().getContent();
                InputStreamReader inputReader = new InputStreamReader(inputStream);
                BufferedReader bufferedReader = new BufferedReader(inputReader);
                StringBuffer buffer = new StringBuffer();
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    buffer.append(line);
                }
                response = buffer.toString();
                inputStream.close();
            } else {
                this.lastErrorCode = String.valueOf(statusLine.getStatusCode());
                this.lastErrorMessage = statusLine.getReasonPhrase();
                return null;
            }
        } catch (IOException e) {
            this.lastErrorCode = "-1";
            this.lastErrorMessage = e.getLocalizedMessage();
            return null;
        }
        return response;
    }
} </s>
<s>class temp {    public static Bitmap loadBitmap(String token, String id, final String type) {
        String imageUrl = XMLfunctions.URL;
        imageUrl = imageUrl.replace("{0}", token);
        imageUrl = imageUrl.replace("{1}", id);
        InputStream imageStream = null;
        try {
            HttpGet httpRequest = new HttpGet(new URL(imageUrl).toURI());
            HttpResponse response = (HttpResponse) new DefaultHttpClient().execute(httpRequest);
            httpRequest = null;
            BufferedHttpEntity bufHttpEntity = new BufferedHttpEntity(response.getEntity());
            response = null;
            imageStream = bufHttpEntity.getContent();
            bufHttpEntity = null;
            if (imageStream != null) {
                final BitmapFactory.Options options = new BitmapFactory.Options();
                if (type.equals("image")) {
                    options.inSampleSize = 2;
                }
                return BitmapFactory.decodeStream(imageStream, null, options);
            } else {
            }
        } catch (IOException e) {
        } catch (URISyntaxException e) {
        } finally {
            if (imageStream != null) closeStream(imageStream);
        }
        return null;
    }
} </s>
<s>class temp {    public static Bitmap loadPhotoBitmap(final String imageUrl, final String type) {
        InputStream imageStream = null;
        try {
            HttpGet httpRequest = new HttpGet(new URL(imageUrl).toURI());
            HttpResponse response = (HttpResponse) new DefaultHttpClient().execute(httpRequest);
            httpRequest = null;
            BufferedHttpEntity bufHttpEntity = new BufferedHttpEntity(response.getEntity());
            response = null;
            imageStream = bufHttpEntity.getContent();
            bufHttpEntity = null;
            if (imageStream != null) {
                final BitmapFactory.Options options = new BitmapFactory.Options();
                if (type.equals("image")) {
                    options.inSampleSize = 2;
                }
                return BitmapFactory.decodeStream(imageStream, null, options);
            } else {
            }
        } catch (IOException e) {
        } catch (URISyntaxException e) {
        } finally {
            if (imageStream != null) closeStream(imageStream);
        }
        return null;
    }
} </s>
<s>class temp {    public static void translateTableMetaData(String baseDir, String tableName, NameSpaceDefinition nsDefinition) throws Exception {
        setVosiNS(baseDir, "table", nsDefinition);
        String filename = baseDir + "table.xsl";
        Scanner s = new Scanner(new File(filename));
        PrintWriter fw = new PrintWriter(new File(baseDir + tableName + ".xsl"));
        while (s.hasNextLine()) {
            fw.println(s.nextLine().replaceAll("TABLENAME", tableName));
        }
        s.close();
        fw.close();
        applyStyle(baseDir + "tables.xml", baseDir + tableName + ".json", baseDir + tableName + ".xsl");
    }
} </s>
<s>class temp {    public static void translateTableAttributes(String baseDir, String tableName, NameSpaceDefinition nsDefinition) throws Exception {
        setVosiNS(baseDir, "table_att", nsDefinition);
        String filename = baseDir + "table_att.xsl";
        Scanner s = new Scanner(new File(filename));
        PrintWriter fw = new PrintWriter(new File(baseDir + tableName + "_att.xsl"));
        while (s.hasNextLine()) {
            fw.println(s.nextLine().replaceAll("TABLENAME", tableName));
        }
        s.close();
        fw.close();
        applyStyle(baseDir + "tables.xml", baseDir + tableName + "_att.json", baseDir + tableName + "_att.xsl");
    }
} </s>
<s>class temp {    private static String myCrypt(String password, String seed) throws RuntimeException {
        String out = null;
        int count = 8;
        MessageDigest digester;
        if (!seed.substring(0, 3).equals("$H$")) {
            byte[] randomBytes = new byte[6];
            java.util.Random randomGenerator = new java.util.Random();
            randomGenerator.nextBytes(randomBytes);
            seed = genSalt(randomBytes);
        }
        String salt = seed.substring(4, 12);
        if (salt.length() != 8) {
            throw new RuntimeException("Error hashing password - Invalid seed.");
        }
        byte[] sha1Hash = new byte[40];
        try {
            digester = MessageDigest.getInstance("SHA-1");
            digester.update((salt + password).getBytes("iso-8859-1"), 0, (salt + password).length());
            sha1Hash = digester.digest();
            do {
                byte[] CombinedBytes = new byte[sha1Hash.length + password.length()];
                System.arraycopy(sha1Hash, 0, CombinedBytes, 0, sha1Hash.length);
                System.arraycopy(password.getBytes("iso-8859-1"), 0, CombinedBytes, sha1Hash.length, password.getBytes("iso-8859-1").length);
                digester.update(CombinedBytes, 0, CombinedBytes.length);
                sha1Hash = digester.digest();
            } while (--count > 0);
            out = seed.substring(0, 12);
            out += encode64(sha1Hash);
        } catch (NoSuchAlgorithmException Ex) {
            log.error("Error hashing password.", Ex);
        } catch (UnsupportedEncodingException Ex) {
            log.error("Error hashing password.", Ex);
        }
        if (out == null) {
            throw new RuntimeException("Error hashing password - out = null");
        }
        return out;
    }
} </s>
<s>class temp {    protected void loadUrl(URL url) throws BuildException {
        Properties props = new Properties();
        log("Loading " + url, Project.MSG_VERBOSE);
        try {
            InputStream is = url.openStream();
            try {
                loadProperties(props, is, url.getFile().endsWith(".xml"));
            } finally {
                if (is != null) {
                    is.close();
                }
            }
            addProperties(props);
        } catch (IOException ex) {
            throw new BuildException(ex, getLocation());
        }
    }
} </s>
<s>class temp {    private static void identify(ContentNetwork cn, String str) {
        try {
            URL url = new URL(str);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            UrlUtils.setBrowserHeaders(con, null);
            String key = "cn." + cn.getID() + ".identify.cookie";
            String cookie = COConfigurationManager.getStringParameter(key, null);
            if (cookie != null) {
                con.setRequestProperty("Cookie", cookie + ";");
            }
            con.setRequestProperty("Connection", "close");
            con.getResponseCode();
            cookie = con.getHeaderField("Set-Cookie");
            if (cookie != null) {
                String[] bits = cookie.split(";");
                if (bits.length > 0 && bits[0].length() > 0) {
                    COConfigurationManager.setParameter(key, bits[0]);
                }
            }
        } catch (Throwable e) {
        }
    }
} </s>
<s>class temp {    public void render(final HttpServletRequest request, final HttpServletResponse response, InputStream inputStream, final Throwable t, final String contentType, final String encoding) throws Exception {
        if (contentType != null) {
            response.setContentType(contentType);
        }
        if (encoding != null) {
            response.setCharacterEncoding(encoding);
        }
        IOUtils.copy(inputStream, response.getOutputStream());
    }
} </s>
<s>class temp {    private void connectAndLogin() throws SocketException, IOException, ClassNotFoundException, SQLException, FileNotFoundException {
        lastOperationTime = System.currentTimeMillis();
        exit();
        ftp = new FTPClient();
        ftp.connect(SERVER);
        ftp.login(USERNAME, PASSWORD);
        ftp.enterLocalPassiveMode();
        ftp.setFileType(FTP.BINARY_FILE_TYPE);
        System.out.println("Connected to " + SERVER + ".");
        db = new DB(propertiesPath);
    }
} </s>
<s>class temp {    private void zipAndSendFiles(File[] logFiles) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        EmailSender emailSender = new EmailSender();
        try {
            File globalZipFile = new File("XeptoTileServer_Statistics_" + sdf.format(new Date()) + ".zip");
            ZipOutputStream globalZos = new ZipOutputStream(new CheckedOutputStream(new FileOutputStream(globalZipFile), new Adler32()));
            BufferedOutputStream globalOut = new BufferedOutputStream(globalZos);
            globalZos.setComment("Statistics for all users from the XeptoTileServer.");
            File[] zipFiles = new File[usernames.length];
            ZipOutputStream[] zipOutputStreams = new ZipOutputStream[usernames.length];
            BufferedOutputStream[] bufferedZipStreams = new BufferedOutputStream[usernames.length];
            for (File logFile : logFiles) {
                int i;
                for (i = 0; i < usernames.length; i++) {
                    if (logFile.getName().substring(27, 28 + usernames[i].length()).equalsIgnoreCase(usernames[i] + "_")) break;
                }
                BufferedReader in = new BufferedReader(new FileReader(logFile.getPath()));
                ZipEntry entry = new ZipEntry(logFile.getName());
                globalZos.putNextEntry(entry);
                if (i < usernames.length && emails[i] != null) {
                    if (zipFiles[i] == null) {
                        zipFiles[i] = new File("XeptoTileServer_Statistics_" + usernames[i] + "_" + sdf.format(new Date()) + ".zip");
                        zipOutputStreams[i] = new ZipOutputStream(new CheckedOutputStream(new FileOutputStream(zipFiles[i]), new Adler32()));
                        bufferedZipStreams[i] = new BufferedOutputStream(zipOutputStreams[i]);
                        zipOutputStreams[i].setComment("Statistics for username " + usernames[i] + " from the XeptoTileServer.");
                    }
                    zipOutputStreams[i].putNextEntry(entry);
                    int c;
                    while ((c = in.read()) != -1) {
                        globalOut.write(c);
                        bufferedZipStreams[i].write(c);
                    }
                } else {
                    int c;
                    while ((c = in.read()) != -1) globalOut.write(c);
                }
                in.close();
                logFile.delete();
            }
            globalOut.close();
            emailSender.send(java.util.ResourceBundle.getBundle("logsender_conf").getString("e-mail"), globalZipFile);
            globalZipFile.delete();
            for (int i = 0; i < zipFiles.length; i++) {
                if (zipFiles[i] != null) {
                    bufferedZipStreams[i].close();
                    emailSender.send(emails[i], zipFiles[i]);
                    zipFiles[i].delete();
                }
            }
        } catch (IOException ex) {
            System.out.println("Cannot create zip file.");
            ex.printStackTrace();
        }
    }
} </s>
<s>class temp {    public static void find(String pckgname, Class tosubclass) {
        String name = new String(pckgname);
        if (!name.startsWith("/")) {
            name = "/" + name;
        }
        name = name.replace('.', '/');
        URL url = RTSI.class.getResource(name);
        System.out.println(name + "->" + url);
        if (url == null) return;
        File directory = new File(url.getFile());
        if (directory.exists()) {
            String[] files = directory.list();
            for (int i = 0; i < files.length; i++) {
                if (files[i].endsWith(".class")) {
                    String classname = files[i].substring(0, files[i].length() - 6);
                    try {
                        Object o = Class.forName(pckgname + "." + classname).newInstance();
                        if (tosubclass.isInstance(o)) {
                            System.out.println(classname);
                        }
                    } catch (ClassNotFoundException cnfex) {
                        System.err.println(cnfex);
                    } catch (InstantiationException iex) {
                    } catch (IllegalAccessException iaex) {
                    }
                }
            }
        } else {
            try {
                JarURLConnection conn = (JarURLConnection) url.openConnection();
                String starts = conn.getEntryName();
                JarFile jfile = conn.getJarFile();
                Enumeration e = jfile.entries();
                while (e.hasMoreElements()) {
                    ZipEntry entry = (ZipEntry) e.nextElement();
                    String entryname = entry.getName();
                    if (entryname.startsWith(starts) && (entryname.lastIndexOf('/') <= starts.length()) && entryname.endsWith(".class")) {
                        String classname = entryname.substring(0, entryname.length() - 6);
                        if (classname.startsWith("/")) classname = classname.substring(1);
                        classname = classname.replace('/', '.');
                        try {
                            Object o = Class.forName(classname).newInstance();
                            if (tosubclass.isInstance(o)) {
                                System.out.println(classname.substring(classname.lastIndexOf('.') + 1));
                            }
                        } catch (ClassNotFoundException cnfex) {
                            System.err.println(cnfex);
                        } catch (InstantiationException iex) {
                        } catch (IllegalAccessException iaex) {
                        }
                    }
                }
            } catch (IOException ioex) {
                System.err.println(ioex);
            }
        }
    }
} </s>
<s>class temp {    public void doGet(OutputStream os) throws IOException {
        try {
            uc = (HttpURLConnection) url.openConnection();
            uc.setRequestProperty("User-Agent", USER_AGENT);
            uc.setReadTimeout(READ_TIMEOUT);
            logger.debug("Connect timeout=" + uc.getConnectTimeout() + " read timeout=" + uc.getReadTimeout() + " u=" + url);
            InputStream buffer = new BufferedInputStream(uc.getInputStream());
            int c;
            while ((c = buffer.read()) != -1) {
                os.write(c);
            }
            headers = uc.getHeaderFields();
            status = uc.getResponseCode();
            responseMessage = uc.getResponseMessage();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        } finally {
            if (status != 200) logger.error("Download failed status: " + status + " " + responseMessage + " for " + url); else logger.debug("HTTP status=" + status + " " + uc.getResponseMessage());
            os.close();
            uc.disconnect();
        }
    }
} </s>
<s>class temp {    public String doGet() throws MalformedURLException, IOException {
        uc = (HttpURLConnection) url.openConnection();
        BufferedInputStream buffer = new BufferedInputStream(uc.getInputStream());
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        int c;
        while ((c = buffer.read()) != -1) {
            bos.write(c);
        }
        bos.close();
        headers = uc.getHeaderFields();
        status = uc.getResponseCode();
        return bos.toString();
    }
} </s>
<s>class temp {    public List<String> extractUrlList(String url) throws IOException, XPathExpressionException {
        LinkedList<String> list = new LinkedList<String>();
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        Tidy tidy = new Tidy();
        tidy.setErrout(new NullPrintWriter());
        Document doc = tidy.parseDOM(conn.getInputStream(), null);
        int len = conn.getContentLength();
        if (len <= 0) len = 32000;
        ByteArrayOutputStream bout = new ByteArrayOutputStream(len);
        PrintStream ps = new PrintStream(bout);
        tidy.pprint(doc, ps);
        ps.flush();
        String content = bout.toString();
        Pattern p = Pattern.compile("(http://[\\w\\\\\\./=&?;-]+)");
        Matcher m = p.matcher(content);
        while (m.find()) {
            list.add(m.group());
        }
        return list;
    }
} </s>
<s>class temp {    private Image retrievePdsImage(double lat, double lon) {
        imageDone = false;
        try {
            StringBuffer urlBuff = new StringBuffer(psdUrl + psdCgi + "?");
            urlBuff.append("DATA_SET_NAME=" + dataSet);
            urlBuff.append("&VERSION=" + version);
            urlBuff.append("&PIXEL_TYPE=" + pixelType);
            urlBuff.append("&PROJECTION=" + projection);
            urlBuff.append("&STRETCH=" + stretch);
            urlBuff.append("&GRIDLINE_FREQUENCY=" + gridlineFrequency);
            urlBuff.append("&SCALE=" + URLEncoder.encode(scale));
            urlBuff.append("&RESOLUTION=" + resolution);
            urlBuff.append("&LATBOX=" + latbox);
            urlBuff.append("&LONBOX=" + lonbox);
            urlBuff.append("&BANDS_SELECTED=" + bandsSelected);
            urlBuff.append("&LAT=" + lat);
            urlBuff.append("&LON=" + lon);
            URL url = new URL(urlBuff.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String result = null;
            String line;
            String imageSrc;
            int count = 0;
            while ((line = in.readLine()) != null) {
                if (count == 6) result = line;
                count++;
            }
            int startIndex = result.indexOf("<TH COLSPAN=2 ROWSPAN=2><IMG SRC = \"") + 36;
            int endIndex = result.indexOf("\"", startIndex);
            imageSrc = result.substring(startIndex, endIndex);
            URL imageUrl = new URL(imageSrc);
            return (Toolkit.getDefaultToolkit().getImage(imageUrl));
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return null;
    }
} </s>
<s>class temp {    public static String readUrl(String urlString) {
        try {
            java.net.URL url = new java.net.URL(urlString);
            BufferedReader br = null;
            if (url != null) {
                br = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            StringBuffer fileString = new StringBuffer();
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                fileString.append(line + "\n");
            }
            return fileString.toString();
        } catch (Exception e) {
            return null;
        }
    }
} </s>
<s>class temp {    @Override
    public String getMD5(String host) {
        String res = "";
        Double randNumber = Math.random() + System.currentTimeMillis();
        try {
            MessageDigest algorithm = MessageDigest.getInstance("MD5");
            algorithm.reset();
            algorithm.update(randNumber.toString().getBytes());
            byte[] md5 = algorithm.digest();
            String tmp = "";
            for (int i = 0; i < md5.length; i++) {
                tmp = (Integer.toHexString(0xFF & md5[i]));
                if (tmp.length() == 1) {
                    res += "0" + tmp;
                } else {
                    res += tmp;
                }
            }
        } catch (Exception ex) {
        }
        return res;
    }
} </s>
<s>class temp {    public static String encryptMd5(String plaintext) {
        String hashtext = "";
        try {
            MessageDigest m;
            m = MessageDigest.getInstance("MD5");
            m.reset();
            m.update(plaintext.getBytes());
            byte[] digest = m.digest();
            BigInteger bigInt = new BigInteger(1, digest);
            hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hashtext;
    }
} </s>
<s>class temp {    public boolean authenticate(String userName, String loginPassword) {
        if (!systemConfigManager.getBool("ldap", "authEnable")) {
            return false;
        }
        String ldapName = userName;
        AkteraUser user = userDAO.findUserByName(userName);
        if (user != null && StringTools.isNotTrimEmpty(user.getLdapName())) {
            ldapName = user.getLdapName();
        }
        String server = systemConfigManager.getString("ldap", "authHost");
        if (StringTools.isTrimEmpty(server)) {
            return false;
        }
        int port = NumberTools.toInt(systemConfigManager.get("ldap", "authPort"), 389);
        String type = StringTools.trim(systemConfigManager.getString("ldap", "authType"));
        String baseDn = StringTools.trim(systemConfigManager.getString("ldap", "authBaseDn"));
        String userDn = StringTools.trim(systemConfigManager.getString("ldap", "authUserDn"));
        String password = StringTools.trim(systemConfigManager.getString("ldap", "authPassword"));
        String query = StringTools.trim(systemConfigManager.getString("ldap", "authQuery"));
        String bindDn = StringTools.trim(systemConfigManager.getString("ldap", "authBindDn"));
        String passwordAttributeName = StringTools.trim(systemConfigManager.getString("ldap", "authPasswordAttributeName"));
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("userName", userName);
        params.put("ldapName", ldapName);
        params.put("loginName", StringTools.isTrimEmpty(ldapName) ? userName : ldapName);
        query = StringTools.replaceTemplate(query, params);
        bindDn = StringTools.replaceTemplate(bindDn, params);
        Hashtable<String, Object> env = new Hashtable<String, Object>();
        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
        env.put(Context.PROVIDER_URL, "ldap://" + server + ":" + port + "/" + baseDn);
        env.put(Context.SECURITY_AUTHENTICATION, "simple");
        if ("ldapAuthBind".equals(type)) {
            env.put(Context.SECURITY_PRINCIPAL, bindDn);
            env.put(Context.SECURITY_CREDENTIALS, loginPassword);
            try {
                DirContext ctx = new InitialDirContext(env);
                try {
                    ctx.close();
                } catch (Exception ignored) {
                }
                return true;
            } catch (Exception ignored) {
                return false;
            }
        }
        if (StringTools.isTrimEmpty(userDn) || StringTools.isTrimEmpty(password)) {
            return false;
        }
        env.put(Context.SECURITY_PRINCIPAL, userDn);
        env.put(Context.SECURITY_CREDENTIALS, password);
        DirContext ctx = null;
        NamingEnumeration<SearchResult> results = null;
        try {
            ctx = new InitialDirContext(env);
            SearchControls controls = new SearchControls();
            controls.setSearchScope(SearchControls.SUBTREE_SCOPE);
            results = ctx.search("", query, controls);
            if (results.hasMore()) {
                SearchResult searchResult = results.next();
                Attributes attributes = searchResult.getAttributes();
                if (attributes.get(passwordAttributeName) == null) {
                    return false;
                }
                String pass = new String((byte[]) attributes.get(passwordAttributeName).get());
                if (pass.startsWith("{SHA}") || pass.startsWith("{MD5}")) {
                    String method = pass.substring(1, pass.indexOf('}'));
                    MessageDigest digest = MessageDigest.getInstance(method);
                    digest.update(loginPassword.getBytes(), 0, loginPassword.length());
                    if (pass.equals("{" + method + "}" + Base64.encode(digest.digest()))) {
                        return true;
                    }
                } else {
                    if (pass.equals(loginPassword)) {
                        return true;
                    }
                }
            }
        } catch (Exception x) {
        } finally {
            if (results != null) {
                try {
                    results.close();
                } catch (Exception e) {
                }
            }
            if (ctx != null) {
                try {
                    ctx.close();
                } catch (Exception e) {
                }
            }
        }
        return false;
    }
} </s>
<s>class temp {        public ActualTask(TEditor editor, TIGDataBase dataBase, String directoryPath) {
            File myDirectory = new File(directoryPath);
            int i;
            Vector images = new Vector();
            images = dataBase.allImageSearch();
            lengthOfTask = images.size() * 2;
            String directory = directoryPath + "Images" + myDirectory.separator;
            File newDirectoryFolder = new File(directory);
            newDirectoryFolder.mkdirs();
            try {
                DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
                doc = domBuilder.newDocument();
            } catch (Exception exc) {
                System.out.println(exc.getMessage());
                System.out.println(exc.toString());
            }
            Element dbElement = doc.createElement("dataBase");
            for (i = 0; ((i < images.size()) && !stop); i++) {
                current = i;
                String element = (String) images.elementAt(i);
                String pathSrc = "Images" + File.separator + element.substring(0, 1).toUpperCase() + File.separator + element;
                String name = pathSrc.substring(pathSrc.lastIndexOf(myDirectory.separator) + 1, pathSrc.length());
                String pathDst = directory + name;
                try {
                    FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                    FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException exc) {
                    System.out.println(exc.getMessage());
                    System.out.println(exc.toString());
                }
                Vector keyWords = new Vector();
                keyWords = dataBase.asociatedConceptSearch((String) images.elementAt(i));
                Element imageElement = doc.createElement("image");
                Element imageNameElement = doc.createElement("name");
                imageNameElement.appendChild(doc.createTextNode(name));
                imageElement.appendChild(imageNameElement);
                for (int j = 0; j < keyWords.size(); j++) {
                    Element keyWordElement = doc.createElement("keyWord");
                    keyWordElement.appendChild(doc.createTextNode((String) keyWords.elementAt(j)));
                    imageElement.appendChild(keyWordElement);
                }
                dbElement.appendChild(imageElement);
            }
            try {
                doc.appendChild(dbElement);
                File dst = new File(directory.concat("Images"));
                BufferedWriter bufferWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dst), "UTF-8"));
                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();
                DOMSource source = new DOMSource(doc);
                StreamResult result = new StreamResult(bufferWriter);
                transformer.transform(source, result);
                bufferWriter.close();
            } catch (Exception exc) {
                System.out.println(exc.getMessage());
                System.out.println(exc.toString());
            }
            current = lengthOfTask;
        }
} </s>
<s>class temp {    public void insert() throws Exception {
        Connection con = DbUtil.connectToDb();
        PreparedStatement pStmt = null;
        try {
            pStmt = con.prepareStatement("INSERT INTO " + Constants.TABLENAME + " (name,phone,address)" + " values(?,?,?)");
            con.setAutoCommit(false);
            pStmt.setString(1, name);
            pStmt.setString(2, phone);
            pStmt.setString(3, address);
            int j = pStmt.executeUpdate();
            con.commit();
        } catch (Exception ex) {
            try {
                con.rollback();
            } catch (SQLException sqlex) {
                sqlex.printStackTrace(System.out);
            }
            throw ex;
        } finally {
            try {
                pStmt.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public static HttpURLConnection getHttpConn(String urlStr, String Method) throws IOException {
        URL url = null;
        HttpURLConnection connection = null;
        url = new URL(urlStr);
        connection = (HttpURLConnection) url.openConnection();
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.setRequestMethod(Method);
        connection.setUseCaches(false);
        connection.connect();
        return connection;
    }
} </s>
<s>class temp {    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error: " + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
} </s>
<s>class temp {    public static void doHttpPost(String urlName, byte[] data, String contentType, String cookieData) throws InteropException {
        URL url = getAccessURL(urlName);
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Cookie", cookieData);
            connection.setRequestProperty("Content-type", contentType);
            connection.setRequestProperty("Content-length", "" + data.length);
            OutputStream stream = connection.getOutputStream();
            stream.write(data);
            stream.flush();
            stream.close();
            connection.connect();
            InputStream inputStream = connection.getInputStream();
            inputStream.close();
        } catch (IOException ex) {
            throw new InteropException("Error POSTing to " + urlName, ex);
        }
    }
} </s>
<s>class temp {    public void copyServer(int id) throws Exception {
        File in = new File("servers" + File.separatorChar + "server_" + id);
        File serversDir = new File("servers" + File.separatorChar);
        int newNumber = serversDir.listFiles().length + 1;
        System.out.println("New File Number: " + newNumber);
        File out = new File("servers" + File.separatorChar + "server_" + newNumber);
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
        getServer(newNumber - 1);
    }
} </s>
<s>class temp {    public void run() {
        try {
            URL url = new URL(UPDATE_URL);
            URLConnection urlc = url.openConnection();
            BufferedReader br = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
            String versionString = br.readLine();
            if (versionString != null && !versionString.equals(PinEmUp.VERSION)) {
                StringBuilder changelogString = new StringBuilder();
                changelogString.append("<html>");
                changelogString.append("<p>" + I18N.getInstance().getString("info.updateavailable.part1") + "</p>");
                changelogString.append("<p>" + I18N.getInstance().getString("info.updateavailable.part2") + " " + PinEmUp.VERSION + "<br />");
                changelogString.append(I18N.getInstance().getString("info.updateavailable.part3") + " " + versionString + "</p>");
                changelogString.append("<p>" + I18N.getInstance().getString("info.updateavailable.part4") + " <a href=\"http://pinemup.sourceforge.net\">http://pinemup.sourceforge.net</a></p>");
                changelogString.append("<p>&nbsp;</p>");
                changelogString.append("<p>Changelog:<br />");
                changelogString.append("--------------------------------</p><p>");
                boolean firstList = true;
                String nextLine;
                do {
                    nextLine = br.readLine();
                    if (nextLine != null) {
                        if (nextLine.startsWith("-")) {
                            changelogString.append("<li>" + nextLine.substring(2) + "</li>");
                        } else {
                            if (!firstList) {
                                changelogString.append("</ul>");
                            } else {
                                firstList = false;
                            }
                            changelogString.append(nextLine + "<ul>");
                        }
                    }
                } while (nextLine != null);
                changelogString.append("</p></html>");
                new UpdateDialog(changelogString.toString());
            } else if (showUpToDateMessage) {
                JOptionPane.showMessageDialog(null, I18N.getInstance().getString("info.versionuptodate"), I18N.getInstance().getString("info.title"), JOptionPane.INFORMATION_MESSAGE);
            }
            br.close();
        } catch (IOException e) {
        }
    }
} </s>
<s>class temp {    public int download() {
        FTPClient client = null;
        URL url = null;
        try {
            client = new FTPClient();
            url = new URL(ratingsUrl);
            if (log.isDebugEnabled()) log.debug("Downloading " + url);
            client.connect(url.getHost());
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                if (log.isErrorEnabled()) log.error("Connection to " + url + " refused");
                return RESULT_CONNECTION_REFUSED;
            }
            if (log.isDebugEnabled()) log.debug("Logging in  l:" + getUserName() + " p:" + getPassword());
            client.login(getUserName(), getPassword());
            client.changeWorkingDirectory(url.getPath());
            FTPFile[] files = client.listFiles(url.getPath());
            if ((files == null) || (files.length != 1)) throw new FileNotFoundException("No remote file");
            FTPFile remote = files[0];
            if (log.isDebugEnabled()) log.debug("Remote file data: " + remote);
            File local = new File(getOutputFile());
            if (local.exists()) {
                if ((local.lastModified() == remote.getTimestamp().getTimeInMillis())) {
                    if (log.isDebugEnabled()) log.debug("File " + local.getAbsolutePath() + " is not changed on the server");
                    return RESULT_NO_NEW_FILE;
                }
            }
            if (log.isDebugEnabled()) log.debug("Setting binary transfer modes");
            client.mode(FTPClient.BINARY_FILE_TYPE);
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            OutputStream fos = new FileOutputStream(local);
            boolean result = client.retrieveFile(url.getPath(), fos);
            if (log.isDebugEnabled()) log.debug("The transfer result is :" + result);
            fos.flush();
            fos.close();
            local.setLastModified(remote.getTimestamp().getTimeInMillis());
            if (result) uncompress();
            if (result) return RESULT_OK; else return RESULT_TRANSFER_ERROR;
        } catch (MalformedURLException e) {
            return RESULT_ERROR;
        } catch (SocketException e) {
            return RESULT_ERROR;
        } catch (FileNotFoundException e) {
            return RESULT_ERROR;
        } catch (IOException e) {
            return RESULT_ERROR;
        } finally {
            if (client != null) {
                try {
                    if (log.isDebugEnabled()) log.debug("Logging out");
                    client.logout();
                } catch (Exception e) {
                }
                try {
                    if (log.isDebugEnabled()) log.debug("Disconnecting");
                    client.disconnect();
                } catch (Exception e) {
                }
            }
        }
    }
} </s>
<s>class temp {    private static Pattern getBotPattern() {
        StringBuilder sb = new StringBuilder();
        try {
            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                InputStream in = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in, "utf8"));
                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (!line.startsWith("#") && !line.equals("")) {
                        if (sb.length() > 0) sb.append("|");
                        sb.append("(").append(line).append(")");
                    }
                }
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException("Error reading bot user-agent configuration", e);
        }
        return Pattern.compile(sb.toString());
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException, DataFormatException {
        byte in_buf[] = new byte[20000];
        if (args.length < 2) {
            System.out.println("too few arguments");
            System.exit(0);
        }
        String inputName = args[0];
        InputStream in = new FileInputStream(inputName);
        int index = 0;
        for (int i = 1; i < args.length; i++) {
            int size = Integer.parseInt(args[i]);
            boolean copy = size >= 0;
            if (size < 0) {
                size = -size;
            }
            OutputStream out = null;
            if (copy) {
                index++;
                out = new FileOutputStream(inputName + "." + index + ".dat");
            }
            while (size > 0) {
                int read = in.read(in_buf, 0, Math.min(in_buf.length, size));
                if (read < 0) {
                    break;
                }
                size -= read;
                if (copy) {
                    out.write(in_buf, 0, read);
                }
            }
            if (copy) {
                out.close();
            }
        }
        index++;
        OutputStream out = new FileOutputStream(inputName + "." + index + ".dat");
        while (true) {
            int read = in.read(in_buf);
            if (read < 0) {
                break;
            }
            out.write(in_buf, 0, read);
        }
        out.close();
        in.close();
    }
} </s>
<s>class temp {    public void bubblesort(String filenames[]) {
        for (int i = filenames.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                String temp;
                if (filenames[j].compareTo(filenames[j + 1]) > 0) {
                    temp = filenames[j];
                    filenames[j] = filenames[j + 1];
                    filenames[j + 1] = temp;
                }
            }
        }
    }
} </s>
<s>class temp {        private byte[] cacheInputStream(URL url) throws IOException {
            InputStream ins = url.openStream();
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            byte[] buf = new byte[256];
            while (true) {
                int n = ins.read(buf);
                if (n == -1) break;
                bout.write(buf, 0, n);
            }
            return bout.toByteArray();
        }
} </s>
<s>class temp {    public void scan() throws Throwable {
        client = new FTPClient();
        log.info("connecting to " + host + "...");
        client.connect(host);
        log.info(client.getReplyString());
        log.info("logging in...");
        client.login("anonymous", "");
        log.info(client.getReplyString());
        Date date = Calendar.getInstance().getTime();
        xmlDocument = new XMLDocument(host, dir, date);
        scanDirectory(dir);
    }
} </s>
<s>class temp {    private static void main(String[] args) {
        try {
            File f = new File("test.txt");
            if (f.exists()) {
                throw new IOException(f + " already exists.  I don't want to overwrite it.");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println("Error: " + i + " read as " + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println("Error: 0x" + i + " read as 0x" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
} </s>
<s>class temp {    public DataSetInfo(String request) throws AddeURLException {
        URLConnection urlc;
        BufferedReader reader;
        debug = debug || request.indexOf("debug=true") >= 0;
        try {
            URL url = new URL(request);
            urlc = url.openConnection();
            reader = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
        } catch (AddeURLException ae) {
            status = -1;
            throw new AddeURLException("No datasets found");
        } catch (Exception e) {
            status = -1;
            throw new AddeURLException("Error opening connection: " + e);
        }
        int numBytes = ((AddeURLConnection) urlc).getInitialRecordSize();
        if (debug) System.out.println("DataSetInfo: numBytes = " + numBytes);
        if (numBytes == 0) {
            status = -1;
            throw new AddeURLException("No datasets found");
        } else {
            data = new char[numBytes];
            try {
                int start = 0;
                while (start < numBytes) {
                    int numRead = reader.read(data, start, (numBytes - start));
                    if (debug) System.out.println("bytes read = " + numRead);
                    start += numRead;
                }
            } catch (IOException e) {
                status = -1;
                throw new AddeURLException("Error reading dataset info:" + e);
            }
            int numNames = data.length / 80;
            descriptorTable = new Hashtable(numNames);
            if (debug) System.out.println("Number of descriptors = " + numNames);
            for (int i = 0; i < numNames; i++) {
                String temp = new String(data, i * 80, 80);
                if (debug) System.out.println("Parsing: >" + temp + "<");
                if (temp.trim().equals("")) continue;
                String descriptor = temp.substring(0, 12).trim();
                if (debug) System.out.println("Descriptor = " + descriptor);
                String comment = descriptor;
                int pos = temp.indexOf('"');
                if (debug) System.out.println("Found quote at " + pos);
                if (pos >= 23) {
                    comment = temp.substring(pos + 1).trim();
                    if (comment.equals("")) comment = descriptor;
                }
                if (debug) System.out.println("Comment = " + comment);
                descriptorTable.put(comment, descriptor);
            }
        }
    }
} </s>
<s>class temp {    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException("Copy: no such source file: " + fromFileName);
        if (!fromFile.canRead()) throw new IOException("Copy: source file is unreadable: " + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException("Copy: destination file is unwriteable: " + toFileName);
            if (JOptionPane.showConfirmDialog(null, "Overwrite File ?", "Overwrite File", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) return;
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty("user.dir");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException("Copy: destination directory doesn't exist: " + parent);
            if (dir.isFile()) throw new IOException("Copy: destination is not a directory: " + parent);
            if (!dir.canWrite()) throw new IOException("Copy: destination directory is unwriteable: " + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
} </s>
<s>class temp {    @Override
    public void copy(final String fileName) throws FileIOException {
        try {
            if (opened) {
                fileChannel.position(0);
            } else {
                fileChannel = new FileInputStream(file).getChannel();
            }
            FileChannel dstChannel = null;
            try {
                dstChannel = new FileOutputStream(fileName).getChannel();
                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());
            } finally {
                try {
                    if (dstChannel != null) {
                        dstChannel.close();
                    }
                } catch (Exception exception) {
                }
            }
            if (opened) {
                fileChannel.position(currentPositionInFile);
            } else {
                fileChannel.close();
            }
        } catch (IOException exception) {
            throw HELPER_FILE_UTIL.fileIOException("failed copy " + file + " to " + fileName, null, exception);
        }
    }
} </s>
<s>class temp {    public static void test(String args[]) {
        int trace;
        int bytes_read = 0;
        int last_contentLenght = 0;
        try {
            BufferedReader reader;
            URL url;
            url = new URL(args[0]);
            URLConnection istream = url.openConnection();
            last_contentLenght = istream.getContentLength();
            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
            System.out.println(url.toString());
            String line;
            trace = t2pNewTrace();
            while ((line = reader.readLine()) != null) {
                bytes_read = bytes_read + line.length() + 1;
                t2pProcessLine(trace, line);
            }
            t2pHandleEventPairs(trace);
            t2pSort(trace, 0);
            t2pExportTrace(trace, new String("pngtest2.png"), 1000, 700, (float) 0, (float) 33);
            t2pExportTrace(trace, new String("pngtest3.png"), 1000, 700, (float) 2.3, (float) 2.44);
            System.out.println("Press any key to contiune read from stream !!!");
            System.out.println(t2pGetProcessName(trace, 0));
            System.in.read();
            istream = url.openConnection();
            if (last_contentLenght != istream.getContentLength()) {
                istream = url.openConnection();
                istream.setRequestProperty("Range", "bytes=" + Integer.toString(bytes_read) + "-");
                System.out.println(Integer.toString(istream.getContentLength()));
                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                    t2pProcessLine(trace, line);
                }
            } else System.out.println("File not changed !");
            t2pDeleteTrace(trace);
        } catch (MalformedURLException e) {
            System.out.println("MalformedURLException !!!");
        } catch (IOException e) {
            System.out.println("File not found " + args[0]);
        }
        ;
    }
} </s>
<s>class temp {    @Override
    public AudioFileFormat getAudioFileFormat(URL url) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out("getAudioFileFormat(URL url)");
        }
        InputStream inputStream = url.openStream();
        try {
            return getAudioFileFormat(inputStream);
        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
        }
    }
} </s>
<s>class temp {    public int[] do_it(final int[] x) {
        int temp = 0;
        int j = x.length;
        while (j > 0) {
            for (int i = 0; i < j - 1; i++) {
                if (x[i] > x[i + 1]) {
                    temp = x[i];
                    x[i] = x[i + 1];
                    x[i + 1] = temp;
                }
                ;
            }
            ;
            j--;
        }
        ;
        return x;
    }
} </s>
<s>class temp {    public static String getDigest(String user, String realm, String password, String method, String uri, String nonce) {
        String digest1 = user + ":" + realm + ":" + password;
        String digest2 = method + ":" + uri;
        try {
            MessageDigest digestOne = MessageDigest.getInstance("md5");
            digestOne.update(digest1.getBytes());
            String hexDigestOne = getHexString(digestOne.digest());
            MessageDigest digestTwo = MessageDigest.getInstance("md5");
            digestTwo.update(digest2.getBytes());
            String hexDigestTwo = getHexString(digestTwo.digest());
            String digest3 = hexDigestOne + ":" + nonce + ":" + hexDigestTwo;
            MessageDigest digestThree = MessageDigest.getInstance("md5");
            digestThree.update(digest3.getBytes());
            String hexDigestThree = getHexString(digestThree.digest());
            return hexDigestThree;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public static String getDigest(String user, String realm, String password, String method, String uri, String nonce, String nc, String cnonce, String qop) {
        String digest1 = user + ":" + realm + ":" + password;
        String digest2 = method + ":" + uri;
        try {
            MessageDigest digestOne = MessageDigest.getInstance("md5");
            digestOne.update(digest1.getBytes());
            String hexDigestOne = getHexString(digestOne.digest());
            MessageDigest digestTwo = MessageDigest.getInstance("md5");
            digestTwo.update(digest2.getBytes());
            String hexDigestTwo = getHexString(digestTwo.digest());
            String digest3 = hexDigestOne + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop + ":" + hexDigestTwo;
            MessageDigest digestThree = MessageDigest.getInstance("md5");
            digestThree.update(digest3.getBytes());
            String hexDigestThree = getHexString(digestThree.digest());
            return hexDigestThree;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    static void getFileClient(String fsName, String id, File[] localPath) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        StringBuffer str = new StringBuffer("http://" + fsName + "/getimage?");
        str.append(id);
        URL url = new URL(str.toString());
        URLConnection connection = url.openConnection();
        InputStream stream = connection.getInputStream();
        FileOutputStream[] output = null;
        try {
            if (localPath != null) {
                output = new FileOutputStream[localPath.length];
                for (int i = 0; i < output.length; i++) {
                    output[i] = new FileOutputStream(localPath[i]);
                }
            }
            int num = 1;
            while (num > 0) {
                num = stream.read(buf);
                if (num > 0 && localPath != null) {
                    for (int i = 0; i < output.length; i++) {
                        output[i].write(buf, 0, num);
                    }
                }
            }
        } finally {
            stream.close();
            if (output != null) {
                for (int i = 0; i < output.length; i++) {
                    if (output[i] != null) {
                        output[i].close();
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    private void bokActionPerformed(java.awt.event.ActionEvent evt) {
        if (this.tfGeneralSubDivision.getText().trim().equals("")) {
            this.showWarningMessage("Enter general sub division");
        } else {
            String[] patlib = newgen.presentation.NewGenMain.getAppletInstance().getPatronLibraryIds();
            String xmlreq = newgen.presentation.administration.AdministrationXMLGenerator.getInstance().saveGeneralSubDivision("1", this.tfGeneralSubDivision.getText(), patlib);
            System.out.println(xmlreq);
            try {
                java.net.URL url = new java.net.URL(ResourceBundle.getBundle("Administration").getString("ServerURL") + ResourceBundle.getBundle("Administration").getString("ServletSubPath") + "SubDivisionServlet");
                java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
                urlconn.setDoOutput(true);
                java.io.OutputStream dos = urlconn.getOutputStream();
                dos.write(xmlreq.getBytes());
                java.io.InputStream ios = urlconn.getInputStream();
                SAXBuilder saxb = new SAXBuilder();
                Document retdoc = saxb.build(ios);
                Element rootelement = retdoc.getRootElement();
                if (rootelement.getChild("Error") == null) {
                    this.showInformationMessage(ResourceBundle.getBundle("Administration").getString("DataSavedInDatabase"));
                } else {
                    this.showErrorMessage(ResourceBundle.getBundle("Administration").getString("ErrorPleaseContactTheVendor"));
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }
} </s>
<s>class temp {    private static boolean hasPackageInfo(URL url) {
        if (url == null) return false;
        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("Specification-Title: ") || line.startsWith("Specification-Version: ") || line.startsWith("Specification-Vendor: ") || line.startsWith("Implementation-Title: ") || line.startsWith("Implementation-Version: ") || line.startsWith("Implementation-Vendor: ")) return true;
            }
        } catch (IOException ioe) {
        } finally {
            if (br != null) try {
                br.close();
            } catch (IOException e) {
            }
        }
        return false;
    }
} </s>
<s>class temp {    @Test(dataProvider = Arquillian.ARQUILLIAN_DATA_PROVIDER)
    public void shouldGreetUser(@ArquillianResource URL baseURL) throws IOException {
        final String name = "Earthlings";
        final URL url = new URL(baseURL, "Foo.action");
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            builder.append(line);
        }
        reader.close();
        LOGGER.info("Returned response: " + builder.toString());
        Assert.assertEquals(builder.toString(), FooService.GREETING + name);
    }
} </s>
<s>class temp {    public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException {
        ActionForward forward = mapping.findForward("weblogEdit.page");
        ActionErrors errors = new ActionErrors();
        WeblogEntryData entry = null;
        try {
            RollerRequest rreq = RollerRequest.getRollerRequest(request);
            if (rreq.isUserAuthorizedToEdit()) {
                WeblogEntryFormEx form = (WeblogEntryFormEx) actionForm;
                String entryid = form.getId();
                if (entryid == null) {
                    entryid = request.getParameter(RollerRequest.WEBLOGENTRYID_KEY);
                }
                RollerContext rctx = RollerContext.getRollerContext(request);
                WeblogManager wmgr = rreq.getRoller().getWeblogManager();
                entry = wmgr.retrieveWeblogEntry(entryid);
                String title = entry.getTitle();
                PageHelper pageHelper = PageHelper.createPageHelper(request, response);
                pageHelper.setSkipFlag(true);
                String excerpt = pageHelper.renderPlugins(entry);
                excerpt = StringUtils.left(Utilities.removeHTML(excerpt), 255);
                String url = rctx.createEntryPermalink(entry, request, true);
                String blog_name = entry.getWebsite().getName();
                if (form.getTrackbackUrl() != null) {
                    try {
                        String data = URLEncoder.encode("title", "UTF-8") + "=" + URLEncoder.encode(title, "UTF-8");
                        data += ("&" + URLEncoder.encode("excerpt", "UTF-8") + "=" + URLEncoder.encode(excerpt, "UTF-8"));
                        data += ("&" + URLEncoder.encode("url", "UTF-8") + "=" + URLEncoder.encode(url, "UTF-8"));
                        data += ("&" + URLEncoder.encode("blog_name", "UTF-8") + "=" + URLEncoder.encode(blog_name, "UTF-8"));
                        URL tburl = new URL(form.getTrackbackUrl());
                        URLConnection conn = tburl.openConnection();
                        conn.setDoOutput(true);
                        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                        wr.write(data);
                        wr.flush();
                        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        String line;
                        StringBuffer resultBuff = new StringBuffer();
                        while ((line = rd.readLine()) != null) {
                            resultBuff.append(Utilities.escapeHTML(line, true));
                            resultBuff.append("<br />");
                        }
                        ActionMessages resultMsg = new ActionMessages();
                        resultMsg.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("weblogEdit.trackbackResults", resultBuff));
                        saveMessages(request, resultMsg);
                        wr.close();
                        rd.close();
                    } catch (IOException e) {
                        errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.trackback", e));
                    }
                } else {
                    errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.noTrackbackUrlSpecified"));
                }
                form.setTrackbackUrl(null);
            } else {
                forward = mapping.findForward("access-denied");
            }
        } catch (Exception e) {
            mLogger.error(e);
            String msg = e.getMessage();
            if (msg == null) {
                msg = e.getClass().getName();
            }
            errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.general", msg));
        }
        if (!errors.isEmpty()) {
            saveErrors(request, errors);
        }
        request.setAttribute("model", new WeblogEntryPageModel(request, response, mapping, (WeblogEntryFormEx) actionForm, WeblogEntryPageModel.EDIT_MODE));
        return forward;
    }
} </s>
<s>class temp {    public void copyFile(File source, File destination, boolean lazy) {
        if (!source.exists()) {
            return;
        }
        if (lazy) {
            String oldContent = null;
            try {
                oldContent = read(source);
            } catch (Exception e) {
                return;
            }
            String newContent = null;
            try {
                newContent = read(destination);
            } catch (Exception e) {
            }
            if ((oldContent == null) || !oldContent.equals(newContent)) {
                copyFile(source, destination, false);
            }
        } else {
            if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
                destination.getParentFile().mkdirs();
            }
            try {
                FileChannel srcChannel = new FileInputStream(source).getChannel();
                FileChannel dstChannel = new FileOutputStream(destination).getChannel();
                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                srcChannel.close();
                dstChannel.close();
            } catch (IOException ioe) {
                _log.error(ioe.getMessage());
            }
        }
    }
} </s>
<s>class temp {    public void createIndex(File indexDir) throws SearchLibException, IOException {
        if (!indexDir.mkdir()) throw new SearchLibException("directory creation failed (" + indexDir + ")");
        InputStream is = null;
        FileWriter target = null;
        for (String resource : resources) {
            String res = rootPath + '/' + resource;
            is = getClass().getResourceAsStream(res);
            if (is == null) is = getClass().getResourceAsStream("common" + '/' + resource);
            if (is == null) throw new SearchLibException("Unable to find resource " + res);
            try {
                File f = new File(indexDir, resource);
                if (f.getParentFile() != indexDir) f.getParentFile().mkdirs();
                target = new FileWriter(f);
                IOUtils.copy(is, target);
            } finally {
                if (target != null) target.close();
                if (is != null) is.close();
            }
        }
    }
} </s>
<s>class temp {    public File download(Show s) throws Exception {
        Collection<String> exclude = Util.toCollection((List<String>) this.exclude.clone(), Util.nonNullString(s.getExclude()).split(","));
        URL url = new URL("http://v3.newzbin.com/search/" + buildQuery(s));
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = in.readLine()) != null) {
            if (!Util.containsNone(line, exclude)) continue;
            String id = line.split("\",\"", 3)[1];
            File downloaded = download(s, id);
            if (downloaded != null) return downloaded;
        }
        return null;
    }
} </s>
<s>class temp {    private static MapEntry<String, Properties> loadFpmConf() throws ConfigurationReadException {
        MapEntry<String, Properties> ret = null;
        Scanner sc = new Scanner(CONF_PATHS).useDelimiter(SEP_P);
        String prev = "";
        while (sc.hasNext() && !hasLoaded) {
            Properties fpmConf = null;
            boolean relative = false;
            String path = sc.next();
            if (path.startsWith(PREV_P)) {
                path = path.replace(PREV_P, prev.substring(0, prev.length() - 1));
            } else if (path.startsWith(REL_P)) {
                path = path.replace(REL_P + FS, "");
                relative = true;
            } else if (path.contains(HOME_P)) {
                path = path.replace(HOME_P, USER_HOME);
            }
            prev = path;
            path = path.concat(MAIN_CONF_FILE);
            try {
                InputStream is = null;
                if (relative) {
                    is = ClassLoader.getSystemResourceAsStream(path);
                    path = getSystemConfDir();
                    Strings.getOne().createPath(path);
                    path += MAIN_CONF_FILE;
                    FileOutputStream os = new FileOutputStream(path);
                    IOUtils.copy(is, os);
                    os.flush();
                    os.close();
                    os = null;
                } else {
                    is = new FileInputStream(path);
                }
                fpmConf = new Properties();
                fpmConf.load(is);
                if (fpmConf.isEmpty()) {
                    throw new ConfigurationReadException();
                }
                ret = new MapEntry<String, Properties>(path, fpmConf);
                hasLoaded = true;
            } catch (FileNotFoundException e) {
                fpmConf = null;
                singleton = null;
                hasLoaded = false;
            } catch (IOException e) {
                throw new ConfigurationReadException();
            }
        }
        return ret;
    }
} </s>
<s>class temp {    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), "UTF-8").replaceFirst("^.*?\\/(id:.*)\\/.*?$", "$1");
        logger.debug("rewrittenQueryString: " + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug("rewrittenUrl: " + rewrittenUrl.getProtocol() + "://" + rewrittenUrl.getHost() + ":" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug("[status=" + httpURLConnection.getResponseCode() + "]");
        logger.debug("[headers]");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + ": " + value);
                        if (!header.getKey().equals("Server") && !header.getKey().equals("Transfer-Encoding")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug("[/headers]");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
} </s>
<s>class temp {    private String readFile(String urlFileString) throws IOException {
        URL url = new URL(urlFileString);
        VizDebugUtils.debug("url: " + url.toString());
        InputStream stream = url.openStream();
        Reader reader = new InputStreamReader(stream, "iso-8859-1");
        StringWriter writer = new StringWriter();
        StreamUtils.transfer(reader, writer);
        stream.close();
        return writer.toString();
    }
} </s>
<s>class temp {    public static String md5Encode16(String s) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(s.getBytes("utf-8"));
            byte b[] = md.digest();
            int i;
            StringBuilder buf = new StringBuilder("");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append("0");
                buf.append(Integer.toHexString(i));
            }
            return buf.toString().substring(8, 24);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
} </s>
<s>class temp {    InputStream selectSource(String item) {
        if (item == null) {
            item = "http://pushnpop.net:8912/subpop.ogg";
        }
        if (item.endsWith(".pls")) {
            item = fetch_pls(item);
            if (item == null) {
                return null;
            }
        } else if (item.endsWith(".m3u")) {
            item = fetch_m3u(item);
            if (item == null) {
                return null;
            }
        }
        if (!item.endsWith(".ogg")) {
            return null;
        }
        InputStream is = null;
        URLConnection urlc = null;
        try {
            URL url = null;
            if (running_as_applet) {
                url = new URL(getCodeBase(), item);
            } else {
                url = new URL(item);
            }
            urlc = url.openConnection();
            is = urlc.getInputStream();
            current_source = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort() + url.getFile();
        } catch (Exception ee) {
            System.err.println(ee);
        }
        if (is == null && !running_as_applet) {
            try {
                is = new FileInputStream(System.getProperty("user.dir") + System.getProperty("file.separator") + item);
                current_source = null;
            } catch (Exception ee) {
                System.err.println(ee);
            }
        }
        if (is == null) {
            return null;
        }
        System.out.println("Select: " + item);
        {
            boolean find = false;
            for (int i = 0; i < cb.getItemCount(); i++) {
                String foo = (String) (cb.getItemAt(i));
                if (item.equals(foo)) {
                    find = true;
                    break;
                }
            }
            if (!find) {
                cb.addItem(item);
            }
        }
        int i = 0;
        String s = null;
        String t = null;
        udp_port = -1;
        udp_baddress = null;
        while (urlc != null && true) {
            s = urlc.getHeaderField(i);
            t = urlc.getHeaderFieldKey(i);
            if (s == null) {
                break;
            }
            i++;
            if (t != null && t.equals("udp-port")) {
                try {
                    udp_port = Integer.parseInt(s);
                } catch (Exception ee) {
                    System.err.println(ee);
                }
            } else if (t != null && t.equals("udp-broadcast-address")) {
                udp_baddress = s;
            }
        }
        return is;
    }
} </s>
<s>class temp {    String fetch_pls(String pls) {
        InputStream pstream = null;
        if (pls.startsWith("http://")) {
            try {
                URL url = null;
                if (running_as_applet) {
                    url = new URL(getCodeBase(), pls);
                } else {
                    url = new URL(pls);
                }
                URLConnection urlc = url.openConnection();
                pstream = urlc.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if (pstream == null && !running_as_applet) {
            try {
                pstream = new FileInputStream(System.getProperty("user.dir") + System.getProperty("file.separator") + pls);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String line = null;
        while (true) {
            try {
                line = readline(pstream);
            } catch (Exception e) {
            }
            if (line == null) {
                break;
            }
            if (line.startsWith("File1=")) {
                byte[] foo = line.getBytes();
                int i = 6;
                for (; i < foo.length; i++) {
                    if (foo[i] == 0x0d) {
                        break;
                    }
                }
                return line.substring(6, i);
            }
        }
        return null;
    }
} </s>
<s>class temp {    String fetch_m3u(String m3u) {
        InputStream pstream = null;
        if (m3u.startsWith("http://")) {
            try {
                URL url = null;
                if (running_as_applet) {
                    url = new URL(getCodeBase(), m3u);
                } else {
                    url = new URL(m3u);
                }
                URLConnection urlc = url.openConnection();
                pstream = urlc.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if (pstream == null && !running_as_applet) {
            try {
                pstream = new FileInputStream(System.getProperty("user.dir") + System.getProperty("file.separator") + m3u);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String line = null;
        while (true) {
            try {
                line = readline(pstream);
            } catch (Exception e) {
            }
            if (line == null) {
                break;
            }
            return line;
        }
        return null;
    }
} </s>
<s>class temp {    void loadPlaylist() {
        if (running_as_applet) {
            String s = null;
            for (int i = 0; i < 10; i++) {
                s = getParameter("jorbis.player.play." + i);
                if (s == null) {
                    break;
                }
                playlist.addElement(s);
            }
        }
        if (playlistfile == null) {
            return;
        }
        try {
            InputStream is = null;
            try {
                URL url = null;
                if (running_as_applet) {
                    url = new URL(getCodeBase(), playlistfile);
                } else {
                    url = new URL(playlistfile);
                }
                URLConnection urlc = url.openConnection();
                is = urlc.getInputStream();
            } catch (Exception ee) {
            }
            if (is == null && !running_as_applet) {
                try {
                    is = new FileInputStream(System.getProperty("user.dir") + System.getProperty("file.separator") + playlistfile);
                } catch (Exception ee) {
                }
            }
            if (is == null) {
                return;
            }
            while (true) {
                String line = readline(is);
                if (line == null) {
                    break;
                }
                byte[] foo = line.getBytes();
                for (int i = 0; i < foo.length; i++) {
                    if (foo[i] == 0x0d) {
                        line = new String(foo, 0, i);
                        break;
                    }
                }
                playlist.addElement(line);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
} </s>
<s>class temp {    protected Control createContents(Composite parent) {
        this.getShell().setText("Chisio");
        this.getShell().setSize(800, 600);
        this.getShell().setImage(ImageDescriptor.createFromFile(ChisioMain.class, "icon/chisio-icon.png").createImage());
        Composite composite = new Composite(parent, SWT.BORDER);
        composite.setLayout(new FillLayout());
        this.viewer = new ScrollingGraphicalViewer();
        this.viewer.setEditDomain(this.editDomain);
        this.viewer.createControl(composite);
        this.viewer.getControl().setBackground(ColorConstants.white);
        this.rootEditPart = new ChsScalableRootEditPart();
        this.viewer.setRootEditPart(this.rootEditPart);
        this.viewer.setEditPartFactory(new ChsEditPartFactory());
        ((FigureCanvas) this.viewer.getControl()).setScrollBarVisibility(FigureCanvas.ALWAYS);
        this.viewer.addDropTargetListener(new ChsFileDropTargetListener(this.viewer, this));
        this.viewer.addDragSourceListener(new ChsFileDragSourceListener(this.viewer));
        CompoundModel model = new CompoundModel();
        model.setAsRoot();
        this.viewer.setContents(model);
        this.viewer.getControl().addMouseListener(this);
        this.popupManager = new PopupManager(this);
        this.popupManager.setRemoveAllWhenShown(true);
        this.popupManager.addMenuListener(new IMenuListener() {

            public void menuAboutToShow(IMenuManager manager) {
                ChisioMain.this.popupManager.createActions(manager);
            }
        });
        KeyHandler keyHandler = new KeyHandler();
        ActionRegistry a = new ActionRegistry();
        keyHandler.put(KeyStroke.getPressed(SWT.DEL, 127, 0), new DeleteAction(this.viewer));
        keyHandler.put(KeyStroke.getPressed('+', SWT.KEYPAD_ADD, 0), new ZoomAction(this, 1, null));
        keyHandler.put(KeyStroke.getPressed('-', SWT.KEYPAD_SUBTRACT, 0), new ZoomAction(this, -1, null));
        keyHandler.put(KeyStroke.getPressed(SWT.F2, 0), a.getAction(GEFActionConstants.DIRECT_EDIT));
        this.viewer.setKeyHandler(keyHandler);
        this.higlightColor = ColorConstants.yellow;
        this.createCombos();
        return composite;
    }
} </s>
<s>class temp {    public String getWebcontent(final String link, final String postdata) {
        final StringBuffer response = new StringBuffer();
        try {
            DisableSSLCertificateCheckUtil.disableChecks();
            final URL url = new URL(link);
            final URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            final OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(postdata);
            wr.flush();
            final BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String content = "";
            while ((content = rd.readLine()) != null) {
                response.append(content);
                response.append('\n');
            }
            wr.close();
            rd.close();
        } catch (final Exception e) {
            LOG.error("getWebcontent(String link, String postdata): " + e.toString() + "\012" + link + "\012" + postdata);
        }
        return response.toString();
    }
} </s>
<s>class temp {    public static Hashtable DefaultLoginValues(String firstName, String lastName, String password, String mac, String startLocation, int major, int minor, int patch, int build, String platform, String viewerDigest, String userAgent, String author) throws Exception {
        Hashtable values = new Hashtable();
        MessageDigest md5 = MessageDigest.getInstance("MD5");
        md5.update(password.getBytes("ASCII"), 0, password.length());
        byte[] raw_digest = md5.digest();
        String passwordDigest = Helpers.toHexText(raw_digest);
        values.put("first", firstName);
        values.put("last", lastName);
        values.put("passwd", "" + password);
        values.put("start", startLocation);
        values.put("major", major);
        values.put("minor", minor);
        values.put("patch", patch);
        values.put("build", build);
        values.put("platform", platform);
        values.put("mac", mac);
        values.put("agree_to_tos", "true");
        values.put("viewer_digest", viewerDigest);
        values.put("user-agent", userAgent + " (" + Helpers.VERSION + ")");
        values.put("author", author);
        Vector optionsArray = new Vector();
        optionsArray.addElement("inventory-root");
        optionsArray.addElement("inventory-skeleton");
        optionsArray.addElement("inventory-lib-root");
        optionsArray.addElement("inventory-lib-owner");
        optionsArray.addElement("inventory-skel-lib");
        optionsArray.addElement("initial-outfit");
        optionsArray.addElement("gestures");
        optionsArray.addElement("event_categories");
        optionsArray.addElement("event_notifications");
        optionsArray.addElement("classified_categories");
        optionsArray.addElement("buddy-list");
        optionsArray.addElement("ui-config");
        optionsArray.addElement("login-flags");
        optionsArray.addElement("global-textures");
        values.put("options", optionsArray);
        return values;
    }
} </s>
<s>class temp {    public static String md5(String senha) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Ocorreu NoSuchAlgorithmException");
        }
        md.update(senha.getBytes());
        byte[] xx = md.digest();
        String n2 = null;
        StringBuffer resposta = new StringBuffer();
        for (int i = 0; i < xx.length; i++) {
            n2 = Integer.toHexString(0XFF & ((int) (xx[i])));
            if (n2.length() < 2) {
                n2 = "0" + n2;
            }
            resposta.append(n2);
        }
        return resposta.toString();
    }
} </s>
<s>class temp {    public void prepareWorkingDirectory() throws Exception {
        workingDirectory = tempDir + "/profile_" + System.nanoTime();
        (new File(workingDirectory)).mkdir();
        String monitorCallShellScript = "data/scripts/monitorcall.sh";
        URL monitorCallShellScriptUrl = Thread.currentThread().getContextClassLoader().getResource(monitorCallShellScript);
        File inScriptFile = null;
        try {
            inScriptFile = new File(monitorCallShellScriptUrl.toURI());
        } catch (URISyntaxException e) {
            throw e;
        }
        monitorShellScript = workingDirectory + "/monitorcall.sh";
        File outScriptFile = new File(monitorShellScript);
        FileChannel inChannel = new FileInputStream(inScriptFile).getChannel();
        FileChannel outChannel = new FileOutputStream(outScriptFile).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
        try {
            LinuxCommandExecutor cmdExecutor = new LinuxCommandExecutor();
            cmdExecutor.runCommand("chmod 777 " + monitorShellScript);
        } catch (Exception e) {
            throw e;
        }
    }
} </s>
<s>class temp {    public static int[] sort(int[] v) {
        int i;
        int l = v.length;
        int[] index = new int[l];
        for (i = 0; i < l; i++) index[i] = i;
        int tmp;
        boolean change = true;
        while (change) {
            change = false;
            for (i = 0; i < l - 1; i++) {
                if (v[index[i]] > v[index[i + 1]]) {
                    tmp = index[i];
                    index[i] = index[i + 1];
                    index[i + 1] = tmp;
                    change = true;
                }
            }
        }
        return index;
    }
} </s>
<s>class temp {    public Vector<Question> reload() throws IOException {
        Vector<Question> questions = new Vector<Question>();
        InputStream is = url.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        shortName = br.readLine();
        if (shortName != null && shortName.equals("SHORTNAME")) {
            shortName = br.readLine();
            author = br.readLine();
            if (author != null && author.equals("AUTHOR")) {
                author = br.readLine();
                description = br.readLine();
                if (description != null && description.equals("DESCRIPTION")) {
                    description = br.readLine();
                    try {
                        questions = QuestionLoader.getQuestions(br);
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                        throw ioe;
                    } finally {
                        br.close();
                        is.close();
                    }
                } else {
                    throw new IllegalArgumentException();
                }
            } else {
                throw new IllegalArgumentException();
            }
        } else {
            throw new IllegalArgumentException();
        }
        return questions;
    }
} </s>
<s>class temp {    protected void configureGraphicalViewer() {
        super.configureGraphicalViewer();
        GraphicalViewer viewer = getGraphicalViewer();
        viewer.setEditPartFactory(createEditPartFactory());
        ScalableRootEditPart rootEditPart = new ScalableRootEditPart();
        viewer.setRootEditPart(rootEditPart);
        ZoomManager manager = rootEditPart.getZoomManager();
        double[] zoomLevels = new double[] { 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 10.0, 20.0 };
        manager.setZoomLevels(zoomLevels);
        ArrayList zoomContributions = new ArrayList();
        zoomContributions.add(ZoomManager.FIT_ALL);
        zoomContributions.add(ZoomManager.FIT_HEIGHT);
        zoomContributions.add(ZoomManager.FIT_WIDTH);
        manager.setZoomLevelContributions(zoomContributions);
        getActionRegistry().registerAction(new ZoomInAction(manager));
        getActionRegistry().registerAction(new ZoomOutAction(manager));
        getGraphicalViewer().setKeyHandler(new GraphicalViewerKeyHandler(getGraphicalViewer()));
        String menuId = this.getClass().getName() + ".EditorContext";
        MenuManager menuMgr = new MenuManager(menuId, menuId);
        openPropertyAction = new OpenPropertyViewAction(viewer);
        openOutlineAction = new OpenOutlineViewAction(viewer);
        saveAsImageAction = new SaveAsImageAction(viewer);
        createDiagramAction(viewer);
        getSite().registerContextMenu(menuId, menuMgr, viewer);
        PrintAction printAction = new PrintAction(this);
        printAction.setImageDescriptor(UMLPlugin.getImageDescriptor("icons/print.gif"));
        getActionRegistry().registerAction(printAction);
        final DeleteAction deleteAction = new DeleteAction((IWorkbenchPart) this);
        deleteAction.setSelectionProvider(getGraphicalViewer());
        getActionRegistry().registerAction(deleteAction);
        viewer.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                deleteAction.update();
            }
        });
        menuMgr.add(new Separator("edit"));
        menuMgr.add(getActionRegistry().getAction(ActionFactory.DELETE.getId()));
        menuMgr.add(getActionRegistry().getAction(ActionFactory.UNDO.getId()));
        menuMgr.add(getActionRegistry().getAction(ActionFactory.REDO.getId()));
        menuMgr.add(new Separator("zoom"));
        menuMgr.add(getActionRegistry().getAction(GEFActionConstants.ZOOM_IN));
        menuMgr.add(getActionRegistry().getAction(GEFActionConstants.ZOOM_OUT));
        fillDiagramPopupMenu(menuMgr);
        menuMgr.add(new Separator("print"));
        menuMgr.add(saveAsImageAction);
        menuMgr.add(printAction);
        menuMgr.add(new Separator("views"));
        menuMgr.add(openPropertyAction);
        menuMgr.add(openOutlineAction);
        menuMgr.add(new Separator("generate"));
        menuMgr.add(new Separator("additions"));
        viewer.setContextMenu(menuMgr);
        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer).setParent(getCommonKeyHandler()));
    }
} </s>
<s>class temp {    public boolean checkTypeChange(Class<?> clazz, File buildDir, File refFile) throws MojoExecutionException {
        if (!clazz.isPrimitive()) {
            ClassLoader cl = clazz.getClassLoader();
            if (cl == loader) {
                if (clazz.isArray()) return checkTypeChange(getArrayType(clazz), buildDir, refFile);
                String path = clazz.getName().replace('.', File.separatorChar) + ".class";
                File file = new File(buildDir, path);
                long lastMod = Long.MAX_VALUE;
                if (!file.exists()) {
                    URL url = cl.getResource(path);
                    if (url == null) throw new MojoExecutionException("Can't get URL for webservice class '" + clazz.getName() + "' from jar file."); else {
                        try {
                            JarURLConnection con = (JarURLConnection) url.openConnection();
                            lastMod = con.getJarEntry().getTime();
                        } catch (IOException x) {
                            throw new MojoExecutionException("Can't get modification time for webservice class '" + clazz.getName() + "' from jar file.");
                        }
                    }
                } else {
                    lastMod = file.lastModified();
                }
                if (refFile.lastModified() < lastMod) return true;
                if (clazz.isInterface()) {
                    Class<?>[] itfs = clazz.getInterfaces();
                    for (int i = 0; i < itfs.length; i++) {
                        boolean changed = checkTypeChange(itfs[i], buildDir, refFile);
                        if (changed) return true;
                    }
                } else {
                    Class<?> sup = clazz.getSuperclass();
                    boolean changed = checkTypeChange(sup, buildDir, refFile);
                    if (changed) return true;
                }
            }
        }
        return false;
    }
} </s>
<s>class temp {    private static List retrieveQuotes(Report report, Symbol symbol, String prefix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, prefix, startDate, endDate);
        EODQuoteFilter filter = new GoogleEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString("GOOGLE_DISPLAY_URL") + ":" + symbol + ":" + Locale.getString("ERROR") + ": " + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString("UNABLE_TO_CONNECT_ERROR", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString("UNABLE_TO_CONNECT_ERROR", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString("UNKNOWN_HOST_ERROR", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString("DESTINATION_UNREACHABLE_ERROR", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString("INVALID_PROXY_ERROR", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString("ERROR_DOWNLOADING_QUOTES"));
        }
        return quotes;
    }
} </s>
<s>class temp {    private static File createFileFromURL(URL url) throws IOException {
        File tempFile = File.createTempFile("oboFile", ".obo");
        PrintStream ps = new PrintStream(tempFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            ps.println(line);
        }
        ps.close();
        return tempFile;
    }
} </s>
<s>class temp {    private final long test(final boolean applyFilter, final int executionCount) throws NoSuchAlgorithmException, NoSuchPaddingException, FileNotFoundException, IOException, RuleLoadingException {
        final boolean stripHtmlEnabled = true;
        final boolean injectSecretTokensEnabled = true;
        final boolean encryptQueryStringsEnabled = true;
        final boolean protectParamsAndFormsEnabled = true;
        final boolean applyExtraProtectionForDisabledFormFields = true;
        final boolean applyExtraProtectionForReadonlyFormFields = false;
        final boolean applyExtraProtectionForRequestParamValueCount = false;
        final ContentInjectionHelper helper = new ContentInjectionHelper();
        final RuleFileLoader ruleFileLoaderModificationExcludes = new ClasspathZipRuleFileLoader();
        ruleFileLoaderModificationExcludes.setPath(RuleParameter.MODIFICATION_EXCLUDES_DEFAULT.getValue());
        final ContentModificationExcludeDefinitionContainer containerModExcludes = new ContentModificationExcludeDefinitionContainer(ruleFileLoaderModificationExcludes);
        containerModExcludes.parseDefinitions();
        helper.setContentModificationExcludeDefinitions(containerModExcludes);
        final AttackHandler attackHandler = new AttackHandler(null, 123, 600000, 100000, 300000, 300000, null, "MOCK", false, false, 0, false, false, Pattern.compile("sjghggfakgfjagfgajgfjasgfs"), Pattern.compile("sjghggfakgfjagfgajgfjasgfs"), true, new AttackMailHandler());
        final SessionCreationTracker sessionCreationTracker = new SessionCreationTracker(attackHandler, 0, 600000, 300000, 0, "", "", "", "");
        final RequestWrapper request = new RequestWrapper(new RequestMock(), helper, sessionCreationTracker, "123.456.789.000", false, true, true);
        final RuleFileLoader ruleFileLoaderResponseModifications = new ClasspathZipRuleFileLoader();
        ruleFileLoaderResponseModifications.setPath(RuleParameter.RESPONSE_MODIFICATIONS_DEFAULT.getValue());
        final ResponseModificationDefinitionContainer container = new ResponseModificationDefinitionContainer(ruleFileLoaderResponseModifications);
        container.parseDefinitions();
        final ResponseModificationDefinition[] responseModificationDefinitions = downCast(container.getAllEnabledRequestDefinitions());
        final List<Pattern> tmpPatternsToExcludeCompleteTag = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToExcludeCompleteScript = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToExcludeLinksWithinScripts = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToExcludeLinksWithinTags = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToCaptureLinksWithinScripts = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToCaptureLinksWithinTags = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToExcludeCompleteTag = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToExcludeCompleteScript = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToExcludeLinksWithinScripts = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToExcludeLinksWithinTags = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToCaptureLinksWithinScripts = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToCaptureLinksWithinTags = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<Integer[]> tmpGroupNumbersToCaptureLinksWithinScripts = new ArrayList<Integer[]>(responseModificationDefinitions.length);
        final List<Integer[]> tmpGroupNumbersToCaptureLinksWithinTags = new ArrayList<Integer[]>(responseModificationDefinitions.length);
        for (int i = 0; i < responseModificationDefinitions.length; i++) {
            final ResponseModificationDefinition responseModificationDefinition = responseModificationDefinitions[i];
            if (responseModificationDefinition.isMatchesScripts()) {
                tmpPatternsToExcludeCompleteScript.add(responseModificationDefinition.getScriptExclusionPattern());
                tmpPrefiltersToExcludeCompleteScript.add(responseModificationDefinition.getScriptExclusionPrefilter());
                tmpPatternsToExcludeLinksWithinScripts.add(responseModificationDefinition.getUrlExclusionPattern());
                tmpPrefiltersToExcludeLinksWithinScripts.add(responseModificationDefinition.getUrlExclusionPrefilter());
                tmpPatternsToCaptureLinksWithinScripts.add(responseModificationDefinition.getUrlCapturingPattern());
                tmpPrefiltersToCaptureLinksWithinScripts.add(responseModificationDefinition.getUrlCapturingPrefilter());
                tmpGroupNumbersToCaptureLinksWithinScripts.add(ServerUtils.convertSimpleToObjectArray(responseModificationDefinition.getCapturingGroupNumbers()));
            }
            if (responseModificationDefinition.isMatchesTags()) {
                tmpPatternsToExcludeCompleteTag.add(responseModificationDefinition.getTagExclusionPattern());
                tmpPrefiltersToExcludeCompleteTag.add(responseModificationDefinition.getTagExclusionPrefilter());
                tmpPatternsToExcludeLinksWithinTags.add(responseModificationDefinition.getUrlExclusionPattern());
                tmpPrefiltersToExcludeLinksWithinTags.add(responseModificationDefinition.getUrlExclusionPrefilter());
                tmpPatternsToCaptureLinksWithinTags.add(responseModificationDefinition.getUrlCapturingPattern());
                tmpPrefiltersToCaptureLinksWithinTags.add(responseModificationDefinition.getUrlCapturingPrefilter());
                tmpGroupNumbersToCaptureLinksWithinTags.add(ServerUtils.convertSimpleToObjectArray(responseModificationDefinition.getCapturingGroupNumbers()));
            }
        }
        final Matcher[] matchersToExcludeCompleteTag = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeCompleteTag);
        final Matcher[] matchersToExcludeCompleteScript = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeCompleteScript);
        final Matcher[] matchersToExcludeLinksWithinScripts = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeLinksWithinScripts);
        final Matcher[] matchersToExcludeLinksWithinTags = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeLinksWithinTags);
        final Matcher[] matchersToCaptureLinksWithinScripts = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToCaptureLinksWithinScripts);
        final Matcher[] matchersToCaptureLinksWithinTags = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToCaptureLinksWithinTags);
        final WordDictionary[] prefiltersToExcludeCompleteTag = (WordDictionary[]) tmpPrefiltersToExcludeCompleteTag.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeCompleteScript = (WordDictionary[]) tmpPrefiltersToExcludeCompleteScript.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeLinksWithinScripts = (WordDictionary[]) tmpPrefiltersToExcludeLinksWithinScripts.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeLinksWithinTags = (WordDictionary[]) tmpPrefiltersToExcludeLinksWithinTags.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToCaptureLinksWithinScripts = (WordDictionary[]) tmpPrefiltersToCaptureLinksWithinScripts.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToCaptureLinksWithinTags = (WordDictionary[]) tmpPrefiltersToCaptureLinksWithinTags.toArray(new WordDictionary[0]);
        final int[][] groupNumbersToCaptureLinksWithinScripts = ServerUtils.convertArrayIntegerListTo2DimIntArray(tmpGroupNumbersToCaptureLinksWithinScripts);
        final int[][] groupNumbersToCaptureLinksWithinTags = ServerUtils.convertArrayIntegerListTo2DimIntArray(tmpGroupNumbersToCaptureLinksWithinTags);
        final Cipher cipher = CryptoUtils.getCipher();
        final CryptoKeyAndSalt key = CryptoUtils.generateRandomCryptoKeyAndSalt(false);
        Cipher.getInstance("AES");
        MessageDigest.getInstance("SHA-1");
        final ResponseWrapper response = new ResponseWrapper(new ResponseMock(), request, attackHandler, helper, false, "___ENCRYPTED___", cipher, key, "___SEC-KEY___", "___SEC-VALUE___", "___PROT-KEY___", false, false, false, false, "123.456.789.000", new HashSet(), prefiltersToExcludeCompleteScript, matchersToExcludeCompleteScript, prefiltersToExcludeCompleteTag, matchersToExcludeCompleteTag, prefiltersToExcludeLinksWithinScripts, matchersToExcludeLinksWithinScripts, prefiltersToExcludeLinksWithinTags, matchersToExcludeLinksWithinTags, prefiltersToCaptureLinksWithinScripts, matchersToCaptureLinksWithinScripts, prefiltersToCaptureLinksWithinTags, matchersToCaptureLinksWithinTags, groupNumbersToCaptureLinksWithinScripts, groupNumbersToCaptureLinksWithinTags, true, false, true, true, true, true, true, true, true, true, true, false, false, true, "", "", (short) 3, true, false, false);
        final List durations = new ArrayList();
        for (int i = 0; i < executionCount; i++) {
            final long start = System.currentTimeMillis();
            Reader reader = null;
            Writer writer = null;
            try {
                reader = new BufferedReader(new FileReader(this.htmlFile));
                writer = new FileWriter(this.outputFile);
                if (applyFilter) {
                    writer = new ResponseFilterWriter(writer, true, "http://127.0.0.1/test/sample", "/test", "/test", "___SEC-KEY___", "___SEC-VALUE___", "___PROT-KEY___", cipher, key, helper, "___ENCRYPTED___", request, response, stripHtmlEnabled, injectSecretTokensEnabled, protectParamsAndFormsEnabled, encryptQueryStringsEnabled, applyExtraProtectionForDisabledFormFields, applyExtraProtectionForReadonlyFormFields, applyExtraProtectionForRequestParamValueCount, prefiltersToExcludeCompleteScript, matchersToExcludeCompleteScript, prefiltersToExcludeCompleteTag, matchersToExcludeCompleteTag, prefiltersToExcludeLinksWithinScripts, matchersToExcludeLinksWithinScripts, prefiltersToExcludeLinksWithinTags, matchersToExcludeLinksWithinTags, prefiltersToCaptureLinksWithinScripts, matchersToCaptureLinksWithinScripts, prefiltersToCaptureLinksWithinTags, matchersToCaptureLinksWithinTags, groupNumbersToCaptureLinksWithinScripts, groupNumbersToCaptureLinksWithinTags, true, true, false, true, true, true, true, true, true, true, true, false, false, true, "", "", (short) 3, true, false);
                    writer = new BufferedWriter(writer);
                }
                char[] chars = new char[16 * 1024];
                int read;
                while ((read = reader.read(chars)) != -1) {
                    if (read > 0) {
                        writer.write(chars, 0, read);
                    }
                }
                durations.add(new Long(System.currentTimeMillis() - start));
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException ignored) {
                    }
                }
                if (writer != null) {
                    try {
                        writer.close();
                    } catch (IOException ignored) {
                    }
                }
            }
        }
        long sum = 0;
        for (final Iterator iter = durations.iterator(); iter.hasNext(); ) {
            Long value = (Long) iter.next();
            sum += value.longValue();
        }
        return sum / durations.size();
    }
} </s>
<s>class temp {    protected File getFile(NameCategory category) throws IOException {
        File home = new File(System.getProperty("user.dir"));
        String fileName = String.format("%s.txt", category);
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = LocalNameGenerator.class.getResource("/" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format("Cannot find resource at %s", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
} </s>
<s>class temp {    public void updateSuccessStatus(ArrayList<THLEventStatus> succeededEvents, ArrayList<THLEventStatus> skippedEvents) throws THLException {
        Statement stmt = null;
        PreparedStatement pstmt = null;
        try {
            conn.setAutoCommit(false);
            if (succeededEvents != null && succeededEvents.size() > 0) {
                stmt = conn.createStatement();
                String seqnoList = buildCommaSeparatedList(succeededEvents);
                stmt.executeUpdate("UPDATE " + history + " SET status = " + THLEvent.COMPLETED + ", processed_tstamp = " + conn.getNowFunction() + " WHERE seqno in " + seqnoList);
            }
            if (skippedEvents != null && skippedEvents.size() > 0) {
                pstmt = conn.prepareStatement("UPDATE " + history + " SET status = ?, comments = ?," + " processed_tstamp = ? WHERE seqno = ?");
                Timestamp now = new Timestamp(System.currentTimeMillis());
                for (THLEventStatus event : skippedEvents) {
                    pstmt.setShort(1, THLEvent.SKIPPED);
                    pstmt.setString(2, truncate(event.getException() != null ? event.getException().getMessage() : "Unknown event failure", commentLength));
                    pstmt.setTimestamp(3, now);
                    pstmt.setLong(4, event.getSeqno());
                    pstmt.addBatch();
                }
                pstmt.executeBatch();
                pstmt.close();
            }
            conn.commit();
        } catch (SQLException e) {
            THLException exception = new THLException("Failed to update events status");
            exception.initCause(e);
            try {
                conn.rollback();
            } catch (SQLException e1) {
                THLException exception2 = new THLException("Failed to rollback after failure while updating events status");
                e1.initCause(exception);
                exception2.initCause(e1);
                exception = exception2;
            }
            throw exception;
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException ignore) {
                }
            }
            if (pstmt != null) {
                try {
                    pstmt.close();
                } catch (SQLException ignore) {
                }
            }
            try {
                conn.setAutoCommit(true);
            } catch (SQLException ignore) {
            }
        }
    }
} </s>
<s>class temp {    public void updateFailedStatus(THLEventStatus failedEvent, ArrayList<THLEventStatus> events) throws THLException {
        Timestamp now = new Timestamp(System.currentTimeMillis());
        Statement stmt = null;
        PreparedStatement pstmt = null;
        try {
            conn.setAutoCommit(false);
            if (events != null && events.size() > 0) {
                String seqnoList = buildCommaSeparatedList(events);
                stmt = conn.createStatement();
                stmt.executeUpdate("UPDATE history SET status = " + THLEvent.FAILED + ", comments = 'Event was rollbacked due to failure while processing event#" + failedEvent.getSeqno() + "'" + ", processed_tstamp = " + conn.getNowFunction() + " WHERE seqno in " + seqnoList);
            }
            pstmt = conn.prepareStatement("UPDATE history SET status = ?" + ", comments = ?" + ", processed_tstamp = ?" + " WHERE seqno = ?");
            pstmt.setShort(1, THLEvent.FAILED);
            pstmt.setString(2, truncate(failedEvent.getException() != null ? failedEvent.getException().getMessage() : "Unknown failure", commentLength));
            pstmt.setTimestamp(3, now);
            pstmt.setLong(4, failedEvent.getSeqno());
            pstmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            THLException exception = new THLException("Failed to update events status");
            exception.initCause(e);
            try {
                conn.rollback();
            } catch (SQLException e1) {
                THLException exception2 = new THLException("Failed to rollback after failure while updating events status");
                e1.initCause(exception);
                exception2.initCause(e1);
                exception = exception2;
            }
            throw exception;
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException ignore) {
                }
            }
            if (pstmt != null) {
                try {
                    pstmt.close();
                } catch (SQLException ignore) {
                }
            }
            try {
                conn.setAutoCommit(true);
            } catch (SQLException ignore) {
            }
        }
    }
} </s>
<s>class temp {    InputStream openURL(URL url) throws IOException, WrongMIMETypeException {
        InputStream is = null;
        if (url.getProtocol().equals("file")) {
            if (debug) {
                System.out.println("Using direct input stream on file url");
            }
            URLConnection urlc = url.openConnection();
            try {
                urlc.connect();
                is = new DataInputStream(urlc.getInputStream());
            } catch (FileNotFoundException e) {
            }
        } else {
            double start = 0;
            if (timing) {
                start = Time.getNow();
            }
            ContentNegotiator cn = null;
            cn = new ContentNegotiator(url);
            Object obj = null;
            obj = cn.getContent();
            if (obj != null) {
                byte[] buf = (byte[]) obj;
                is = new ByteArrayInputStream(buf);
            } else {
                System.err.println("Loader.openURL got null content");
                throw new IOException("Loader.openURL got null content");
            }
            if (timing) {
                double elapsed = Time.getNow() - start;
                System.out.println("Loader: open and buffer URL in: " + numFormat.format(elapsed, 2) + " seconds");
            }
        }
        return is;
    }
} </s>
<s>class temp {    public static Document tidyHTML(URL url) throws XMLHelperException {
        try {
            URLConnection inConnection = url.openConnection();
            if (inConnection.getContentType().startsWith("text/xml") || inConnection.getContentType().startsWith("text/xhtml")) {
                return parseXMLFromURL(url);
            } else if (inConnection.getContentType().startsWith("text/html")) {
                InputStream is = inConnection.getInputStream();
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                int totalBytes = 0;
                byte[] buffer = new byte[65536];
                while (true) {
                    int bytesRead = is.read(buffer, 0, buffer.length);
                    if (bytesRead < 0) break;
                    for (int i = 0; i < bytesRead; i++) {
                        byte b = buffer[i];
                        if (b < 32 && b != 10 && b != 13 && b != 9) b = 32;
                        buffer[i] = b;
                    }
                    out.write(buffer, 0, bytesRead);
                    totalBytes += bytesRead;
                }
                is.close();
                out.close();
                String outContent = out.toString();
                InputStream in = new ByteArrayInputStream(out.toByteArray());
                Tidy tidy = new Tidy();
                tidy.setShowWarnings(false);
                tidy.setXmlOut(true);
                tidy.setXmlPi(false);
                tidy.setDocType("omit");
                tidy.setXHTML(false);
                tidy.setRawOut(true);
                tidy.setNumEntities(true);
                tidy.setQuiet(true);
                tidy.setFixComments(true);
                tidy.setIndentContent(true);
                tidy.setCharEncoding(org.w3c.tidy.Configuration.ASCII);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                org.w3c.dom.Document tNode = (org.w3c.dom.Document) tidy.parseDOM(in, baos);
                String result = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + baos.toString();
                int startIndex = 0;
                int endIndex = 0;
                if ((startIndex = result.indexOf("<!DOCTYPE")) >= 0) {
                    endIndex = result.indexOf(">", startIndex);
                    result = result.substring(0, startIndex) + result.substring(endIndex + 1, result.length());
                }
                while ((startIndex = result.indexOf("<script")) >= 0) {
                    endIndex = result.indexOf("</script>");
                    result = result.substring(0, startIndex) + result.substring(endIndex + 9, result.length());
                }
                in.close();
                baos.close();
                return parseXMLFromString(result);
            } else {
                throw new XMLHelperException("Unable to tidy content type: " + inConnection.getContentType());
            }
        } catch (IOException ioe) {
            throw new XMLHelperException("Unable to perform input/output", ioe);
        }
    }
} </s>
<s>class temp {    public String buscaCDA() {
        Properties prop = new CargaProperties().Carga();
        URL url;
        BufferedReader in;
        String inputLine;
        String miLinea = null;
        try {
            url = new URL(prop.getProperty("CDA"));
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains("cda-TRUNK-")) {
                    miLinea = inputLine;
                    miLinea = miLinea.substring(miLinea.indexOf("lastSuccessfulBuild/artifact/dist/cda-TRUNK"));
                    miLinea = miLinea.substring(0, miLinea.indexOf("\">"));
                    miLinea = url + miLinea;
                }
            }
        } catch (Throwable t) {
        }
        log.debug("Detetectado last build CDA: " + miLinea);
        return miLinea;
    }
} </s>
<s>class temp {    public String buscaCDE() {
        URL url;
        Properties prop = new CargaProperties().Carga();
        BufferedReader in;
        String inputLine;
        String miLinea = null;
        try {
            url = new URL(prop.getProperty("CDE"));
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains("lastSuccessfulBuild/artifact/server/plugin/dist/pentaho-cdf-dd-TRUNK")) {
                    miLinea = inputLine;
                    miLinea = miLinea.substring(miLinea.indexOf("lastSuccessfulBuild/artifact/server/plugin/dist/pentaho-cdf-dd-TRUNK"));
                    miLinea = miLinea.substring(0, miLinea.indexOf("\">"));
                    miLinea = url + miLinea;
                }
            }
        } catch (Throwable t) {
        }
        log.debug("Detetectado last build CDE: " + miLinea);
        return miLinea;
    }
} </s>
<s>class temp {    public String buscaSAIKU() {
        URL url;
        Properties prop = new CargaProperties().Carga();
        BufferedReader in;
        String inputLine;
        String miLinea = null;
        try {
            url = new URL(prop.getProperty("SAIKU"));
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains("lastSuccessfulBuild/artifact/saiku-bi-platform-plugin/target")) {
                    miLinea = inputLine;
                    log.debug(miLinea);
                    miLinea = miLinea.substring(miLinea.indexOf("lastSuccessfulBuild/artifact/saiku-bi-platform-plugin/target"));
                    miLinea = miLinea.substring(0, miLinea.indexOf("\">"));
                    miLinea = url + miLinea;
                }
            }
        } catch (Throwable t) {
        }
        log.debug("Detetectado last build SAIKU: " + miLinea);
        return miLinea;
    }
} </s>
<s>class temp {    public DataSet(String name, String type, URL docBase, String plotDir) {
        sitename = name.toUpperCase();
        data = new Vector[3];
        data[0] = new Vector();
        data[1] = new Vector();
        data[2] = new Vector();
        if (type == null) return;
        plottype = type.toLowerCase();
        String filename;
        filename = plotDir + sitename + "_" + plottype + ".plt.gz";
        try {
            double total = 0;
            URL dataurl = new URL(docBase, filename);
            BufferedReader readme = new BufferedReader(new InputStreamReader(new GZIPInputStream(dataurl.openStream())));
            while (true) {
                String myline = readme.readLine();
                if (myline == null) break;
                myline = myline.toLowerCase();
                if (myline.startsWith("fit:")) {
                    if (haveFit) {
                        continue;
                    }
                    StringTokenizer st = new StringTokenizer(myline.replace('\n', ' '));
                    fit = new Double[5];
                    String bye = (String) st.nextToken();
                    fit[0] = new Double((String) st.nextToken());
                    fit[1] = new Double((String) st.nextToken());
                    fit[2] = new Double((String) st.nextToken());
                    fit[3] = new Double((String) st.nextToken());
                    fit[4] = new Double((String) st.nextToken());
                    haveFit = true;
                    continue;
                }
                if (myline.startsWith("decyear:")) {
                    StringTokenizer st = new StringTokenizer(myline.replace('\n', ' '));
                    String bye = (String) st.nextToken();
                    decYear = new Double((String) st.nextToken());
                    haveDate = true;
                    continue;
                }
                StringTokenizer st = new StringTokenizer(myline.replace('\n', ' '));
                boolean ok = true;
                String tmp;
                Double[] mydbl = new Double[3];
                for (int i = 0; i < 3 && ok; i++) {
                    if (st.hasMoreTokens()) {
                        tmp = (String) st.nextToken();
                        if (tmp.startsWith("X") || tmp.startsWith("x")) {
                            ok = false;
                            break;
                        } else {
                            mydbl[i] = new Double(tmp);
                        }
                    } else {
                        mydbl[i] = new Double(0.0);
                    }
                }
                if (ok) {
                    if (mydbl[2].doubleValue() > 100) continue;
                    total = mydbl[1].doubleValue() + total;
                    for (int i = 0; i < 3; i++) {
                        data[i].addElement(mydbl[i]);
                    }
                }
            }
            average = total / length();
        } catch (FileNotFoundException e) {
            System.err.println("PlotApplet: file not found: " + e);
        } catch (IOException e) {
            System.err.println("PlotApplet: error reading input file: " + e);
        }
    }
} </s>
