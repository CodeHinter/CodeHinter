<s>class temp {    public InputStream getResourceStream(String resource) {
        try {
            URL url = getClass().getResource(resource);
            System.out.println("URL: " + url);
            System.out.println("Read ROM " + resource);
            if (url == null) url = new URL(codebase + resource);
            return url.openConnection().getInputStream();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public void submitReport() {
        String subject = m_Subject.getText();
        String description = m_Description.getText();
        String email = m_Email.getText();
        if (subject.length() == 0) {
            Util.flashComponent(m_Subject, Color.RED);
            return;
        }
        if (description.length() == 0) {
            Util.flashComponent(m_Description, Color.RED);
            return;
        }
        DynamicLocalisation loc = m_MainFrame.getLocalisation();
        if (email.length() == 0 || email.indexOf("@") == -1 || email.indexOf(".") == -1 || email.startsWith("@")) {
            email = "anonymous@blaat.com";
        }
        try {
            String data = URLEncoder.encode("mode", "UTF-8") + "=" + URLEncoder.encode("manual", "UTF-8");
            data += "&" + URLEncoder.encode("from", "UTF-8") + "=" + URLEncoder.encode(email, "UTF-8");
            data += "&" + URLEncoder.encode("subject", "UTF-8") + "=" + URLEncoder.encode(subject, "UTF-8");
            data += "&" + URLEncoder.encode("body", "UTF-8") + "=" + URLEncoder.encode(description, "UTF-8");
            data += "&" + URLEncoder.encode("jvm", "UTF-8") + "=" + URLEncoder.encode(System.getProperty("java.version"), "UTF-8");
            data += "&" + URLEncoder.encode("ocdsver", "UTF-8") + "=" + URLEncoder.encode(Constants.OPENCDS_VERSION, "UTF-8");
            data += "&" + URLEncoder.encode("os", "UTF-8") + "=" + URLEncoder.encode(Constants.OS_NAME + " " + System.getProperty("os.version") + " " + System.getProperty("os.arch"), "UTF-8");
            URL url = new URL(Constants.BUGREPORT_SCRIPT);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                System.out.println(line);
            }
            wr.close();
            rd.close();
            JOptionPane.showMessageDialog(this, loc.getMessage("ReportBug.SentMessage"));
        } catch (Exception e) {
            Logger.getInstance().logException(e);
        }
        dispose();
    }
} </s>
<s>class temp {    public void sendMessage(Message m) throws IOException {
        URL url = new URL(strURL);
        urlcon = (HttpURLConnection) url.openConnection();
        urlcon.setUseCaches(false);
        urlcon.setDefaultUseCaches(false);
        urlcon.setDoOutput(true);
        urlcon.setDoInput(true);
        urlcon.setRequestProperty("Content-type", "application/octet-stream");
        urlcon.setAllowUserInteraction(false);
        HttpURLConnection.setDefaultAllowUserInteraction(false);
        urlcon.setRequestMethod("POST");
        ObjectOutputStream oos = new ObjectOutputStream(urlcon.getOutputStream());
        oos.writeObject(m);
        oos.flush();
        oos.close();
    }
} </s>
<s>class temp {    void IconmenuItem5_actionPerformed(ActionEvent e) {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = "";
        if (getPath() != null && !getPath().equals("")) {
            jFileChooser1.setCurrentDirectory(new File(getPath()));
            jFileChooser1.setSelectedFile(new File(getPath()));
        }
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File("." + separator + "images");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getPath().lastIndexOf(separator);
            String imgName = getPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getPath());
                File outputFile = new File(newPath);
                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                    FileInputStream in = new FileInputStream(inputFile);
                    FileOutputStream out = new FileOutputStream(outputFile);
                    int c;
                    while ((c = in.read()) != -1) out.write(c);
                    in.close();
                    out.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + "-" + getClass(), "", JOptionPane.ERROR_MESSAGE);
            }
            setPath(newPath);
            if (getDefaultPath() == null || getDefaultPath().equals("")) {
                String msgString = "E' stata selezionata un'immagine da associare all'IconShape, ma non e' " + "stata selezionata ancora nessun'immagine di default. Imposto quella scelta anche come " + "immagine di default?";
                if (JOptionPane.showConfirmDialog(null, msgString.substring(0, Math.min(msgString.length(), getFatherPanel().MAX_DIALOG_MSG_SZ)), "choose one", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    setDefaultPath(newPath);
                    createDefaultImage();
                }
            }
            createImage();
        }
    }
} </s>
<s>class temp {    void IconmenuItem6_actionPerformed(ActionEvent e) {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = "";
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setDefaultPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File("." + separator + "images");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getDefaultPath().lastIndexOf(separator);
            String imgName = getDefaultPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getDefaultPath());
                File outputFile = new File(newPath);
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, "LOG_MSG", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + "-" + getClass(), "", JOptionPane.ERROR_MESSAGE);
            }
            setDefaultPath(newPath);
            createDefaultImage();
        }
    }
} </s>
<s>class temp {    public static void bubbleSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException("Null-pointed array");
        }
        int right = a.length - 1;
        int k = 0;
        while (right > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
        }
    }
} </s>
<s>class temp {    public static void shakeSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException("Null-pointed array");
        }
        int k = 0;
        int left = 0;
        int right = a.length - 1;
        while (right - left > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
            k = a.length - 1;
            for (int i = left; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            left = k;
        }
    }
} </s>
<s>class temp {    protected String encrypt(final String data, final String key) throws CryptographicFailureException {
        Validate.notNull(data, "Provided data cannot be null.");
        Validate.notNull(key, "Provided key name cannot be null.");
        final PublicKey pk = getPublicKey(key);
        if (pk == null) {
            throw new CryptographicFailureException("PublicKeyNotFound", String.format("Cannot find public key '%s'", key));
        }
        try {
            final Cipher cipher = Cipher.getInstance(pk.getAlgorithm());
            cipher.init(Cipher.ENCRYPT_MODE, pk);
            final ByteArrayInputStream bin = new ByteArrayInputStream(data.getBytes());
            final CipherInputStream cin = new CipherInputStream(bin, cipher);
            final ByteArrayOutputStream bout = new ByteArrayOutputStream();
            IOUtils.copy(cin, bout);
            return new String(Base64.encodeBase64(bout.toByteArray()));
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(String.format("Cannot find instance of algorithm '%s'", pk.getAlgorithm()), e);
        } catch (NoSuchPaddingException e) {
            throw new IllegalStateException(String.format("Cannot build instance of algorithm '%s'", pk.getAlgorithm()), e);
        } catch (InvalidKeyException e) {
            throw new IllegalStateException(String.format("Cannot build instance of algorithm '%s'", pk.getAlgorithm()), e);
        } catch (IOException e) {
            throw new IllegalStateException("Cannot build in-memory cipher copy", e);
        }
    }
} </s>
<s>class temp {    protected String decrypt(final String data, final String key) throws CryptographicFailureException {
        Validate.notNull(data, "Provided data cannot be null.");
        Validate.notNull(key, "Provided key name cannot be null.");
        final PrivateKey pk = getPrivateKey(key);
        if (pk == null) {
            throw new CryptographicFailureException("PrivateKeyNotFound", String.format("Cannot find private key '%s'", key));
        }
        try {
            final Cipher cipher = Cipher.getInstance(pk.getAlgorithm());
            cipher.init(Cipher.DECRYPT_MODE, pk);
            final ByteArrayInputStream bin = new ByteArrayInputStream(Base64.decodeBase64(data.getBytes()));
            final CipherInputStream cin = new CipherInputStream(bin, cipher);
            final ByteArrayOutputStream bout = new ByteArrayOutputStream();
            IOUtils.copy(cin, bout);
            return new String(bout.toByteArray());
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(String.format("Cannot find instance of algorithm '%s'", pk.getAlgorithm()), e);
        } catch (NoSuchPaddingException e) {
            throw new IllegalStateException(String.format("Cannot build instance of algorithm '%s'", pk.getAlgorithm()), e);
        } catch (InvalidKeyException e) {
            throw new IllegalStateException(String.format("Cannot build instance of algorithm '%s'", pk.getAlgorithm()), e);
        } catch (IOException e) {
            throw new IllegalStateException("Cannot build in-memory cipher copy", e);
        }
    }
} </s>
<s>class temp {    public GLatLng geoCodeAddress(SearchParms searchParms) throws IOException {
        logger.debug(searchParms.getGeocodeAddress());
        URL url = new URL(geocoder.encode(searchParms.getGeocodeAddress()));
        URLConnection connection = url.openConnection();
        String content = Streams.readString(connection.getInputStream());
        return geocoder.decode(content);
    }
} </s>
<s>class temp {        @Override
        public void executeInterruptible() {
            encodingTerminated = false;
            File destinationFile = null;
            try {
                Runtime runtime = Runtime.getRuntime();
                IconAndFileListElement element;
                while ((element = getNextFileElement()) != null) {
                    File origFile = element.getFile();
                    destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName());
                    if (!destinationFile.getParentFile().exists()) {
                        destinationFile.getParentFile().mkdirs();
                    }
                    actualFileLabel.setText(origFile.getName());
                    actualFileModel.setMaximum((int) origFile.length());
                    actualFileModel.setValue(0);
                    int bitrate;
                    synchronized (bitratePattern) {
                        Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue());
                        bitrateMatcher.find();
                        bitrate = Integer.parseInt(bitrateMatcher.group(1));
                    }
                    List<String> command = new LinkedList<String>();
                    command.add(encoderFile.getCanonicalPath());
                    command.add("--mp3input");
                    command.add("-m");
                    command.add("j");
                    String sampleFreq = Settings.getSetting("encode.sample.freq");
                    if (Util.isNotEmpty(sampleFreq)) {
                        command.add("--resample");
                        command.add(sampleFreq);
                    }
                    QualityElement quality = (QualityElement) ((JComboBox) encodeFileCard.getQuality().getValueComponent()).getSelectedItem();
                    command.add("-q");
                    command.add(Integer.toString(quality.getValue()));
                    command.add("-b");
                    command.add(Integer.toString(bitrate));
                    command.add("--cbr");
                    command.add("-");
                    command.add(destinationFile.getCanonicalPath());
                    if (LOG.isDebugEnabled()) {
                        StringBuilder commandLine = new StringBuilder();
                        boolean first = true;
                        for (String part : command) {
                            if (!first) commandLine.append(" ");
                            commandLine.append(part);
                            first = false;
                        }
                        LOG.debug("Command line: " + commandLine.toString());
                    }
                    encodingProcess = runtime.exec(command.toArray(new String[0]));
                    lastPosition = 0l;
                    InputStream fileStream = null;
                    try {
                        fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this);
                        IOUtils.copy(fileStream, encodingProcess.getOutputStream());
                        encodingProcess.getOutputStream().close();
                    } finally {
                        IOUtils.closeQuietly(fileStream);
                        if (LOG.isDebugEnabled()) {
                            InputStream processOut = null;
                            try {
                                processOut = encodingProcess.getInputStream();
                                StringWriter sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug("Process output stream:\n" + sw);
                                IOUtils.closeQuietly(processOut);
                                processOut = encodingProcess.getErrorStream();
                                sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug("Process error stream:\n" + sw);
                            } finally {
                                IOUtils.closeQuietly(processOut);
                            }
                        }
                    }
                    int result = encodingProcess.waitFor();
                    encodingProcess = null;
                    if (result != 0) {
                        LOG.warn("Encoder process returned error code " + result);
                    }
                    if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) {
                        MP3File mp3Input = new MP3File(origFile);
                        MP3File mp3Output = new MP3File(destinationFile);
                        boolean write = false;
                        if (mp3Input.hasID3v2tag()) {
                            ID3v2Tag id3v2Tag = new ID3v2Tag();
                            for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) {
                                id3v2Tag.addFrame(frame);
                            }
                            mp3Output.setID3v2tag(id3v2Tag);
                            write = true;
                        }
                        if (mp3Input.hasID3v11tag()) {
                            mp3Output.setID3v11tag(mp3Input.getID3v11tag());
                            write = true;
                        }
                        if (write) mp3Output.write();
                    }
                }
                actualFileLabel.setText(Messages.getString("operations.file.encode.execute.actualfile.terminated"));
                actualFileModel.setValue(actualFileModel.getMaximum());
            } catch (Exception e) {
                LOG.error("Cannot encode files", e);
                if (!(e instanceof IOException && encodingTerminated)) MainWindowInterface.showError(e);
                if (destinationFile != null) destinationFile.delete();
            }
        }
} </s>
<s>class temp {    @Override
    public void executeInterruptible() {
        EncodeFilesDialog dialog = (EncodeFilesDialog) this.dialog;
        File encoderFile = null;
        InputStream is = null;
        OutputStream os = null;
        try {
            if (Platform.isWindows()) {
                encoderFile = new File(".", "lame.exe");
                is = Thread.currentThread().getContextClassLoader().getResourceAsStream("lame/lame.exe");
            } else if (Platform.isLinux()) {
                encoderFile = new File(".", "lame");
                is = Thread.currentThread().getContextClassLoader().getResourceAsStream("lame/lame");
            } else {
                MainWindowInterface.showError(new Exception(Messages.getString("operations.file.encode.dialog.notsupported")));
                return;
            }
            os = new FileOutputStream(encoderFile);
            IOUtils.copy(is, os);
        } catch (Exception e) {
            LOG.error("Cannot extract encoder executable", e);
            MainWindowInterface.showError(e);
            return;
        } finally {
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
        encoderFile.setExecutable(true, true);
        try {
            long totalSize = 0l;
            for (int i = 0, l = filesModel.getSize(); i < l; i++) {
                if (isInterrupted()) return;
                IconAndFileListElement element = (IconAndFileListElement) filesModel.get(i);
                File origFile = element.getFile();
                totalSize += origFile.length();
            }
            rangeModel = dialog.getProgressBar().getModel();
            rangeModel.setMinimum(0);
            rangeModel.setMaximum((int) totalSize);
            int parallelProcesses = dialog.getParallelProcesses();
            List<Thread> encodingThreads = new ArrayList<Thread>();
            encodingRunnables = new ArrayList<EncoderLauncherRunnable>(parallelProcesses);
            for (int i = 0; i < parallelProcesses; i++) {
                EncoderLauncherRunnable encoderLauncherRunnable = new EncoderLauncherRunnable(i, dialog, encoderFile);
                Thread thread = new Thread(encoderLauncherRunnable);
                encodingRunnables.add(encoderLauncherRunnable);
                encodingThreads.add(thread);
                thread.start();
            }
            for (Thread thread : encodingThreads) {
                thread.join();
            }
            if (!isInterrupted()) MainWindowInterface.showMessage(Messages.getString("operations.file.encode.execute.done.title"), Messages.getString("operations.file.encode.execute.done.message").replace("${number}", "" + filesModel.getSize()));
        } catch (Exception e) {
            LOG.error("Cannot encode files", e);
            MainWindowInterface.showError(e);
        } finally {
            if (encoderFile != null) encoderFile.delete();
            dialog.setVisible(false);
        }
    }
} </s>
<s>class temp {    public static String[] readStats() throws Exception {
        URL url = null;
        BufferedReader reader = null;
        StringBuilder stringBuilder;
        try {
            url = new URL("http://localhost:" + port + webctx + "/shared/js/libOO/health_check.sjs");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setReadTimeout(10 * 1000);
            connection.connect();
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            stringBuilder = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
            return stringBuilder.toString().split(",");
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    public static String downloadJar(URL url) throws IOException {
        String localFile = null;
        char[] buf = new char[4096];
        int num;
        localFile = Settings.getFreeTsUserPath() + "lib" + Settings.SLASH + getURLFileName(url);
        DebugDialog.print("Downloading jar-file " + url + " to " + localFile + ".", 4);
        InputStreamReader in = new InputStreamReader(url.openStream());
        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(localFile));
        do {
            num = in.read(buf, 0, 4096);
            if (num > 0) {
                out.write(buf, 0, num);
            }
        } while (num > 0);
        in.close();
        out.close();
        return localFile;
    }
} </s>
<s>class temp {    private StylingEngine createStyling() {
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StyleSheetCompilerFactory inlineCompilerFactory = new InlineStyleSheetCompilerFactory(null);
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(inlineCompilerFactory);
        CSSCompilerBuilder builder = new CSSCompilerBuilder();
        builder.setStyleSheetCompilerFactory(DefaultStyleSheetCompilerFactory.getDefaultInstance());
        CSSCompiler cssCompiler = builder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource("/com/volantis/mcs/runtime/default.css");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        if (protocol != null && protocol.getCompiledDefaultStyleSheet() != null) {
            stylingEngine.pushStyleSheet(protocol.getCompiledDefaultStyleSheet());
        }
        return stylingEngine;
    }
} </s>
<s>class temp {    private String MD5(String s) {
        Log.d("MD5", "Hashing '" + s + "'");
        String hash = "";
        try {
            MessageDigest m = MessageDigest.getInstance("MD5");
            m.update(s.getBytes(), 0, s.length());
            hash = new BigInteger(1, m.digest()).toString(16);
            Log.d("MD5", "Hash: " + hash);
        } catch (Exception e) {
            Log.e("MD5", e.getMessage());
        }
        return hash;
    }
} </s>
<s>class temp {    private void doTask() {
        try {
            log("\n\n\n\n\n\n\n\n\n");
            log(" =================================================");
            log(" = Starting PSCafePOS                            =");
            log(" =================================================");
            log(" =   An open source point of sale system         =");
            log(" =   for educational organizations.              =");
            log(" =================================================");
            log(" = General Information                           =");
            log(" =   http://pscafe.sourceforge.net               =");
            log(" = Free Product Support                          =");
            log(" =   http://www.sourceforge.net/projects/pscafe  =");
            log(" =================================================");
            log(" = License Overview                              =");
            log(" =================================================");
            log(" = PSCafePOS is a POS System for Schools         =");
            log(" = Copyright (C) 2007 Charles Syperski           =");
            log(" =                                               =");
            log(" = This program is free software; you can        =");
            log(" = redistribute it and/or modify it under the    =");
            log(" = terms of the GNU General Public License as    =");
            log(" = published by the Free Software Foundation;    =");
            log(" = either version 2 of the License, or any later =");
            log(" = version.                                      =");
            log(" =                                               =");
            log(" = This program is distributed in the hope that  =");
            log(" = it will be useful, but WITHOUT ANY WARRANTY;  =");
            log(" = without even the implied warranty of          =");
            log(" = MERCHANTABILITY or FITNESS FOR A PARTICULAR   =");
            log(" = PURPOSE.                                      =");
            log(" =                                               =");
            log(" = See the GNU General Public License for more   =");
            log(" = details.                                      =");
            log(" =                                               =");
            log(" = You should have received a copy of the GNU    =");
            log(" = General Public License along with this        =");
            log(" = program; if not, write to the                 =");
            log(" =                                               =");
            log(" =      Free Software Foundation, Inc.           =");
            log(" =      59 Temple Place, Suite 330               =");
            log(" =      Boston, MA 02111-1307 USA                =");
            log(" =================================================");
            log(" = If you have any questions of comments please  =");
            log(" = let us know at http://pscafe.sourceforge.net  =");
            log(" =================================================");
            pause();
            File settings;
            if (blAltSettings) {
                System.out.println("\n  + Alternative path specified at run time:");
                System.out.println("    Path: " + strAltPath);
                settings = new File(strAltPath);
            } else {
                settings = new File("etc" + File.separatorChar + "settings.dbp");
            }
            System.out.print("\n  + Checking for existance of settings...");
            boolean blGo = false;
            if (settings.exists() && settings.canRead()) {
                log("[OK]");
                blGo = true;
                if (forceConfig) {
                    System.out.print("\n  + Running Config Wizard (at user request)...");
                    Process pp = Runtime.getRuntime().exec("java -cp . PSSettingWizard etc" + File.separatorChar + "settings.dbp");
                    InputStream stderr = pp.getErrorStream();
                    InputStream stdin = pp.getInputStream();
                    InputStreamReader isr = new InputStreamReader(stdin);
                    BufferedReader br = new BufferedReader(isr);
                    String ln = null;
                    while ((ln = br.readLine()) != null) System.out.println("  " + ln);
                    pp.waitFor();
                }
            } else {
                log("[FAILED]");
                settings = new File("etc" + File.separatorChar + "settings.dbp.firstrun");
                System.out.print("\n  + Checking if this is the first run... ");
                if (settings.exists() && settings.canRead()) {
                    log("[FOUND]");
                    File toFile = new File("etc" + File.separatorChar + "settings.dbp");
                    FileInputStream from = null;
                    FileOutputStream to = null;
                    try {
                        from = new FileInputStream(settings);
                        to = new FileOutputStream(toFile);
                        byte[] buffer = new byte[4096];
                        int bytes_read;
                        while ((bytes_read = from.read(buffer)) != -1) {
                            to.write(buffer, 0, bytes_read);
                        }
                        if (toFile.exists() && toFile.canRead()) {
                            settings = null;
                            settings = new File("etc" + File.separatorChar + "settings.dbp");
                        }
                        System.out.print("\n  + Running Settings Wizard... ");
                        try {
                            Process p = Runtime.getRuntime().exec("java PSSettingWizard etc" + File.separatorChar + "settings.dbp");
                            InputStream stderr = p.getErrorStream();
                            InputStream stdin = p.getInputStream();
                            InputStreamReader isr = new InputStreamReader(stdin);
                            BufferedReader br = new BufferedReader(isr);
                            String ln = null;
                            while ((ln = br.readLine()) != null) System.out.println("  " + ln);
                            p.waitFor();
                            log("[OK]");
                            if (p.exitValue() == 0) blGo = true;
                        } catch (InterruptedException i) {
                            System.err.println(i.getMessage());
                        }
                    } catch (Exception ex) {
                        System.err.println(ex.getMessage());
                    } finally {
                        if (from != null) try {
                            from.close();
                        } catch (IOException e) {
                            ;
                        }
                        if (to != null) try {
                            to.close();
                        } catch (IOException e) {
                            ;
                        }
                    }
                } else {
                    settings = null;
                    settings = new File("etc" + File.separatorChar + "settings.dbp");
                    DBSettingsWriter writ = new DBSettingsWriter();
                    writ.writeFile(new DBSettings(), settings);
                    blGo = true;
                }
            }
            if (blGo) {
                String cp = ".";
                try {
                    File classpath = new File("lib");
                    File[] subFiles = classpath.listFiles();
                    for (int i = 0; i < subFiles.length; i++) {
                        if (subFiles[i].isFile()) {
                            cp += File.pathSeparatorChar + "lib" + File.separatorChar + subFiles[i].getName() + "";
                        }
                    }
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }
                try {
                    boolean blExecutePOS = false;
                    System.out.print("\n  + Checking runtime settings...         ");
                    DBSettings info = null;
                    if (settings == null) settings = new File("etc" + File.separatorChar + "settings.dbp");
                    if (settings.exists() && settings.canRead()) {
                        DBSettingsWriter writ = new DBSettingsWriter();
                        info = (DBSettings) writ.loadSettingsDB(settings);
                        if (info != null) {
                            blExecutePOS = true;
                        }
                    }
                    if (blExecutePOS) {
                        log("[OK]");
                        String strSSL = "";
                        String strSSLDebug = "";
                        if (info != null) {
                            debug = info.get(DBSettings.MAIN_DEBUG).compareTo("1") == 0;
                            if (debug) log("       * Debug Mode is ON"); else log("       * Debug Mode is OFF");
                            if (info.get(DBSettings.POS_SSLENABLED).compareTo("1") == 0) {
                                strSSL = "-Djavax.net.ssl.keyStore=" + info.get(DBSettings.POS_SSLKEYSTORE) + " -Djavax.net.ssl.keyStorePassword=pscafe -Djavax.net.ssl.trustStore=" + info.get(DBSettings.POS_SSLTRUSTSTORE) + " -Djavax.net.ssl.trustStorePassword=pscafe";
                                log("       * Using SSL");
                                debug("            " + strSSL);
                                if (info.get(DBSettings.POS_SSLDEBUG).compareTo("1") == 0) {
                                    strSSLDebug = "-Djavax.net.debug=all";
                                    log("       * SSL Debugging enabled");
                                    debug("            " + strSSLDebug);
                                }
                            }
                        }
                        String strPOSRun = "java  -cp " + cp + " " + strSSL + " " + strSSLDebug + " POSDriver " + settings.getPath();
                        debug(strPOSRun);
                        System.out.print("\n  + Running PSCafePOS...                 ");
                        Process pr = Runtime.getRuntime().exec(strPOSRun);
                        System.out.print("[OK]\n\n");
                        InputStream stderr = pr.getErrorStream();
                        InputStream stdin = pr.getInputStream();
                        InputStreamReader isr = new InputStreamReader(stdin);
                        InputStreamReader isre = new InputStreamReader(stderr);
                        BufferedReader br = new BufferedReader(isr);
                        BufferedReader bre = new BufferedReader(isre);
                        String line = null;
                        String lineError = null;
                        log(" =================================================");
                        log(" =        Output from PSCafePOS System           =");
                        log(" =================================================");
                        while ((line = br.readLine()) != null || (lineError = bre.readLine()) != null) {
                            if (line != null) System.out.println(" [PSCafePOS]" + line);
                            if (lineError != null) System.out.println(" [ERR]" + lineError);
                        }
                        pr.waitFor();
                        log(" =================================================");
                        log(" =       End output from PSCafePOS System        =");
                        log(" =              PSCafePOS has exited             =");
                        log(" =================================================");
                    } else {
                        log("[Failed]");
                    }
                } catch (Exception i) {
                    log(i.getMessage());
                    i.printStackTrace();
                }
            }
        } catch (Exception e) {
            log(e.getMessage());
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException, ClassNotFoundException {
        URL urlServlet = null;
        try {
            urlServlet = new URL("http://wofproj.appspot.com/test");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        URLConnection con = null;
        try {
            con = urlServlet.openConnection();
        } catch (IOException e) {
            e.printStackTrace();
        }
        con.setDoInput(true);
        con.setDoOutput(true);
        con.setUseCaches(false);
        con.setRequestProperty("Content-Type", "application/x-java-serialized-object");
        OutputStream outstream = con.getOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(outstream);
        oos.writeObject("tom");
        oos.flush();
        oos.close();
        InputStream instr = con.getInputStream();
        ObjectInputStream inputFromServlet = new ObjectInputStream(instr);
        Object retval = inputFromServlet.readObject();
        inputFromServlet.close();
        instr.close();
        System.out.println(retval.getClass().toString());
    }
} </s>
<s>class temp {    public void testGetRequestWithRefresh() throws Exception {
        expect(request.getParameter(ProxyBase.REFRESH_PARAM)).andReturn("120").anyTimes();
        Capture<HttpRequest> requestCapture = new Capture<HttpRequest>();
        expect(pipeline.execute(capture(requestCapture))).andReturn(new HttpResponse(RESPONSE_BODY));
        replay();
        handler.fetch(request, recorder);
        HttpRequest httpRequest = requestCapture.getValue();
        assertEquals("public,max-age=120", recorder.getHeader("Cache-Control"));
        assertEquals(120, httpRequest.getCacheTtl());
    }
} </s>
<s>class temp {    public void testExplicitHeaders() throws Exception {
        String headerString = "X-Foo=bar&X-Bar=baz%20foo";
        HttpRequest expected = new HttpRequest(REQUEST_URL).addHeader("X-Foo", "bar").addHeader("X-Bar", "baz foo");
        expect(pipeline.execute(expected)).andReturn(new HttpResponse(RESPONSE_BODY));
        expect(request.getParameter(MakeRequestHandler.HEADERS_PARAM)).andReturn(headerString);
        replay();
        handler.fetch(request, recorder);
        verify();
        JSONObject results = extractJsonFromResponse();
        assertEquals(HttpResponse.SC_OK, results.getInt("rc"));
        assertEquals(RESPONSE_BODY, results.get("body"));
        assertTrue(rewriter.responseWasRewritten());
    }
} </s>
<s>class temp {    public void play() throws FileNotFoundException, IOException, NoSuchAlgorithmException, FTPException {
        final int BUFFER = 2048;
        String host = "ftp.genome.jp";
        String username = "anonymous";
        String password = "";
        FTPClient ftp = null;
        ftp = new FTPClient();
        ftp.setRemoteHost(host);
        FTPMessageCollector listener = new FTPMessageCollector();
        ftp.setMessageListener(listener);
        System.out.println("Connecting");
        ftp.connect();
        System.out.println("Logging in");
        ftp.login(username, password);
        System.out.println("Setting up passive, ASCII transfers");
        ftp.setConnectMode(FTPConnectMode.PASV);
        ftp.setType(FTPTransferType.ASCII);
        System.out.println("Directory before put:");
        String[] files = ftp.dir(".", true);
        for (int i = 0; i < files.length; i++) System.out.println(files[i]);
        System.out.println("Quitting client");
        ftp.quit();
        String messages = listener.getLog();
        System.out.println("Listener log:");
        System.out.println(messages);
        System.out.println("Test complete");
    }
} </s>
<s>class temp {    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
} </s>
<s>class temp {    public static void testMapSource(MapSource mapSource, EastNorthCoordinate coordinate) throws Exception {
        int zoom = mapSource.getMaxZoom();
        MapSpace mapSpace = mapSource.getMapSpace();
        int tilex = mapSpace.cLonToX(coordinate.lon, zoom) / mapSpace.getTileSize();
        int tiley = mapSpace.cLatToY(coordinate.lat, zoom) / mapSpace.getTileSize();
        URL url = new URL(mapSource.getTileUrl(zoom, tilex, tiley));
        HttpURLConnection c = (HttpURLConnection) url.openConnection();
        c.connect();
        c.disconnect();
        if (c.getResponseCode() != 200) throw new MapSourceTestFailed(mapSource, c.getResponseCode());
    }
} </s>
<s>class temp {    private static String getDocumentAt(String urlString) {
        StringBuffer html_text = new StringBuffer();
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) html_text.append(line + "\n");
            reader.close();
        } catch (MalformedURLException e) {
            System.out.println("  Ч  URL: " + urlString);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html_text.toString();
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    public int updatewuliao(Addwuliao aw) {
        int flag = 0;
        Connection conn = null;
        PreparedStatement pm = null;
        try {
            conn = Pool.getConnection();
            conn.setAutoCommit(false);
            pm = conn.prepareStatement("update addwuliao set inname=?,innum=?,inprice=?,productsdetail=?where pid=?");
            pm.setString(1, aw.getInname());
            pm.setInt(2, aw.getInnum());
            pm.setDouble(3, aw.getInprice());
            pm.setString(4, aw.getProductsdetail());
            pm.setString(5, aw.getPid());
            flag = pm.executeUpdate();
            conn.commit();
            Pool.close(pm);
            Pool.close(conn);
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (Exception ep) {
                ep.printStackTrace();
            }
            Pool.close(pm);
            Pool.close(conn);
        } finally {
            Pool.close(pm);
            Pool.close(conn);
        }
        return flag;
    }
} </s>
<s>class temp {    public static void copyFile(String pathOrig, String pathDst) throws FileNotFoundException, IOException {
        InputStream in;
        OutputStream out;
        if (pathOrig == null || pathDst == null) {
            System.err.println("Error en path");
            return;
        }
        File orig = new File(pathOrig);
        if (!orig.exists() || !orig.isFile() || !orig.canRead()) {
            System.err.println("Error en fichero de origen");
            return;
        }
        File dest = new File(pathDst);
        String file = new File(pathOrig).getName();
        if (dest.isDirectory()) pathDst += file;
        in = new FileInputStream(pathOrig);
        out = new FileOutputStream(pathDst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    public void run() {
        FileInputStream src;
        try {
            src = new FileInputStream(srcName);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return;
        }
        FileOutputStream dest;
        FileChannel srcC = src.getChannel();
        ByteBuffer buf = ByteBuffer.allocateDirect(BUFFER_SIZE);
        try {
            int i = 1;
            int fileNo = 0;
            long maxByte = this.maxSize << 10;
            long nbByte = srcC.size();
            long nbFile = (nbByte / maxByte) + 1;
            for (fileNo = 0; fileNo < nbFile; fileNo++) {
                long fileByte = 0;
                String destName = srcName + "_" + fileNo;
                dest = new FileOutputStream(destName);
                FileChannel destC = dest.getChannel();
                while ((i > 0) && fileByte < maxByte) {
                    i = srcC.read(buf);
                    buf.flip();
                    fileByte += i;
                    destC.write(buf);
                    buf.compact();
                }
                destC.close();
                dest.close();
            }
        } catch (IOException e1) {
            e1.printStackTrace();
            return;
        }
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    public static void copyFile(File src, String srcEncoding, File dest, String destEncoding) throws IOException {
        InputStreamReader in = new InputStreamReader(new FileInputStream(src), srcEncoding);
        OutputStreamWriter out = new OutputStreamWriter(new RobustFileOutputStream(dest), destEncoding);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        out.flush();
        in.close();
        out.close();
    }
} </s>
<s>class temp {    private static boolean DownloadDB() {
        URL url = null;
        BufferedWriter inWriter = null;
        String line;
        try {
            url = new URL(URL);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));
            inWriter = new BufferedWriter(new FileWriter(InFileName));
            while ((line = reader.readLine()) != null) {
                inWriter.write(line);
                inWriter.newLine();
            }
            inWriter.close();
        } catch (Exception e) {
            try {
                inWriter.close();
            } catch (IOException ignored) {
            }
            e.printStackTrace();
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    private void copyResources(File oggDecDir, String[] resources, String resPrefix) throws FileNotFoundException, IOException {
        for (int i = 0; i < resources.length; i++) {
            String res = resPrefix + resources[i];
            InputStream is = this.getClass().getResourceAsStream(res);
            if (is == null) throw new IllegalArgumentException("cannot find resource '" + res + "'");
            File file = new File(oggDecDir, resources[i]);
            if (!file.exists() || file.length() == 0) {
                FileOutputStream fos = new FileOutputStream(file);
                try {
                    IOUtils.copyStreams(is, fos);
                } finally {
                    fos.close();
                }
            }
        }
    }
} </s>
<s>class temp {    private static byte[] Md5f(String plainText) {
        byte[] ab = new byte[16];
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(plainText.getBytes());
            byte b[] = md.digest();
            ab = b;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return ab;
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    private String getResultFromHttpUrl(String href) {
        String result = null;
        try {
            URL url = new URL(href);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Object o = conn.getContent();
            log.debug("Opened " + href + " and got class " + o.getClass().getName());
            StringBuffer version = new StringBuffer();
            String inputLine;
            DataInputStream dis = new DataInputStream(conn.getInputStream());
            while ((inputLine = dis.readLine()) != null) {
                version.append(inputLine + "\n");
            }
            result = version.toString();
            log.debug("Read from URL:\n" + result);
            dis.close();
        } catch (Exception e) {
            log.debug("Caught exception " + e + " whilst attempting to query URL " + href);
            e.printStackTrace();
        } finally {
            return result;
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".build")) develBuild = line.substring(6).trim(); else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    public static String getContent(String path, String encoding) throws IOException {
        URL url = new URL(path);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        InputStream inputStream = conn.getInputStream();
        InputStreamReader isr = new InputStreamReader(inputStream, encoding);
        StringBuffer sb = new StringBuffer();
        BufferedReader in = new BufferedReader(isr);
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            sb.append(inputLine);
            sb.append("\n");
        }
        return sb.toString();
    }
} </s>
<s>class temp {    public String getTemplateString(String templateFilename) {
        InputStream is = servletContext.getResourceAsStream("/resources/" + templateFilename);
        StringWriter writer = new StringWriter();
        try {
            IOUtils.copy(is, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return writer.toString();
    }
} </s>
<s>class temp {    public static synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance("SHA-1");
            } catch (NoSuchAlgorithmException nsae) {
                nsae.printStackTrace();
            }
        }
        try {
            digest.update(data.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            System.err.println(e);
        }
        return encodeHex(digest.digest());
    }
} </s>
<s>class temp {    public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException("cp: no such source file: " + source_name);
            if (!source_file.canRead()) throw new FileCopyException("cp: source file " + "is unreadable: " + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException("cp: destination " + "file is unwriteable: " + dest_name);
                    System.out.print("cp: file " + dest_name + " already exists. Overwrite it ? (Y/N): ");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals("Y") && !response.equals("y")) throw new FileCopyException("cp: copy cancelled.");
                } else throw new FileCopyException("cp: destination " + "is not a file: " + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException("cp: destination " + "directory doesn't exist: " + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException("cp: destination " + "directory is unwriteable: " + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print("cp: ");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print("#");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print("#");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    private ZipOutputStream copyOOXMLContent(String signatureZipEntryName, OutputStream signedOOXMLOutputStream) throws IOException, ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerFactoryConfigurationError, TransformerException {
        ZipOutputStream zipOutputStream = new ZipOutputStream(signedOOXMLOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(this.getOfficeOpenXMLDocumentURL().openStream());
        ZipEntry zipEntry;
        boolean hasOriginSigsRels = false;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            LOG.debug("copy ZIP entry: " + zipEntry.getName());
            ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
            zipOutputStream.putNextEntry(newZipEntry);
            if ("[Content_Types].xml".equals(zipEntry.getName())) {
                Document contentTypesDocument = loadDocumentNoClose(zipInputStream);
                Element typesElement = contentTypesDocument.getDocumentElement();
                Element overrideElement = contentTypesDocument.createElementNS("http://schemas.openxmlformats.org/package/2006/content-types", "Override");
                overrideElement.setAttribute("PartName", "/" + signatureZipEntryName);
                overrideElement.setAttribute("ContentType", "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml");
                typesElement.appendChild(overrideElement);
                Element nsElement = contentTypesDocument.createElement("ns");
                nsElement.setAttributeNS(Constants.NamespaceSpecNS, "xmlns:tns", "http://schemas.openxmlformats.org/package/2006/content-types");
                NodeList nodeList = XPathAPI.selectNodeList(contentTypesDocument, "/tns:Types/tns:Default[@Extension='sigs']", nsElement);
                if (0 == nodeList.getLength()) {
                    Element defaultElement = contentTypesDocument.createElementNS("http://schemas.openxmlformats.org/package/2006/content-types", "Default");
                    defaultElement.setAttribute("Extension", "sigs");
                    defaultElement.setAttribute("ContentType", "application/vnd.openxmlformats-package.digital-signature-origin");
                    typesElement.appendChild(defaultElement);
                }
                writeDocumentNoClosing(contentTypesDocument, zipOutputStream, false);
            } else if ("_rels/.rels".equals(zipEntry.getName())) {
                Document relsDocument = loadDocumentNoClose(zipInputStream);
                Element nsElement = relsDocument.createElement("ns");
                nsElement.setAttributeNS(Constants.NamespaceSpecNS, "xmlns:tns", "http://schemas.openxmlformats.org/package/2006/relationships");
                NodeList nodeList = XPathAPI.selectNodeList(relsDocument, "/tns:Relationships/tns:Relationship[@Target='_xmlsignatures/origin.sigs']", nsElement);
                if (0 == nodeList.getLength()) {
                    Element relationshipElement = relsDocument.createElementNS("http://schemas.openxmlformats.org/package/2006/relationships", "Relationship");
                    relationshipElement.setAttribute("Id", "rel-id-" + UUID.randomUUID().toString());
                    relationshipElement.setAttribute("Type", "http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin");
                    relationshipElement.setAttribute("Target", "_xmlsignatures/origin.sigs");
                    relsDocument.getDocumentElement().appendChild(relationshipElement);
                }
                writeDocumentNoClosing(relsDocument, zipOutputStream, false);
            } else if ("_xmlsignatures/_rels/origin.sigs.rels".equals(zipEntry.getName())) {
                hasOriginSigsRels = true;
                Document originSignRelsDocument = loadDocumentNoClose(zipInputStream);
                Element relationshipElement = originSignRelsDocument.createElementNS("http://schemas.openxmlformats.org/package/2006/relationships", "Relationship");
                String relationshipId = "rel-" + UUID.randomUUID().toString();
                relationshipElement.setAttribute("Id", relationshipId);
                relationshipElement.setAttribute("Type", "http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature");
                String target = FilenameUtils.getName(signatureZipEntryName);
                LOG.debug("target: " + target);
                relationshipElement.setAttribute("Target", target);
                originSignRelsDocument.getDocumentElement().appendChild(relationshipElement);
                writeDocumentNoClosing(originSignRelsDocument, zipOutputStream, false);
            } else {
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        if (false == hasOriginSigsRels) {
            addOriginSigsRels(signatureZipEntryName, zipOutputStream);
            addOriginSigs(zipOutputStream);
        }
        zipInputStream.close();
        return zipOutputStream;
    }
} </s>
<s>class temp {    protected void copy(URL url, File file) throws IOException {
        InputStream in = null;
        FileOutputStream out = null;
        try {
            in = url.openStream();
            out = new FileOutputStream(file);
            IOUtils.copy(in, out);
        } finally {
            if (out != null) {
                out.close();
            }
            if (in != null) {
                in.close();
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        String codecClassname = args[0];
        Class<?> codecClass = Class.forName(codecClassname);
        Configuration conf = new Configuration();
        CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);
        Compressor compressor = null;
        try {
            compressor = CodecPool.getCompressor(codec);
            CompressionOutputStream out = codec.createOutputStream(System.out, compressor);
            IOUtils.copyBytes(System.in, out, 4096, false);
            out.finish();
        } finally {
            CodecPool.returnCompressor(compressor);
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".version")) version = line.substring(8).trim(); else if (line.startsWith(".build")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    public static String test(String server, String baseDir, String user, String password) throws Exception {
        FTPClient ftpClient = new FTPClient();
        try {
            String file = baseDir;
            ftpClient.connect(server);
            ftpClient.login(user, password);
            int reply = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftpClient.disconnect();
                System.err.println("FTP server refused connection.");
                return null;
            }
            ftpClient.setFileType(FTP.IMAGE_FILE_TYPE);
            ftpClient.enterLocalPassiveMode();
            boolean isDir = isDir(ftpClient, file);
            if (isDir) {
                FTPFile[] files = ftpClient.listFiles(file);
                for (int i = 0; i < files.length; i++) {
                }
            } else {
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                if (ftpClient.retrieveFile(file, bos)) {
                } else {
                    throw new IOException("Unable to retrieve file:" + file);
                }
            }
            return "";
        } finally {
            closeConnection(ftpClient);
        }
    }
} </s>
<s>class temp {    private FTPClient getFtpClient(Entry parentEntry) throws Exception {
        Object[] values = parentEntry.getValues();
        if (values == null) {
            return null;
        }
        String server = (String) values[COL_SERVER];
        String baseDir = (String) values[COL_BASEDIR];
        String user = (String) values[COL_USER];
        String password = (String) values[COL_PASSWORD];
        if (password != null) {
            password = getRepository().getPageHandler().processTemplate(password, false);
        } else {
            password = "";
        }
        FTPClient ftpClient = new FTPClient();
        try {
            ftpClient.connect(server);
            if (user != null) {
                ftpClient.login(user, password);
            }
            int reply = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftpClient.disconnect();
                System.err.println("FTP server refused connection.");
                return null;
            }
            ftpClient.setFileType(FTP.IMAGE_FILE_TYPE);
            ftpClient.enterLocalPassiveMode();
            return ftpClient;
        } catch (Exception exc) {
            System.err.println("Could not connect to ftp server:" + exc);
            return null;
        }
    }
} </s>
<s>class temp {    public static byte[] ComputeForBinary(String ThisString) throws Exception {
        byte[] Result;
        MessageDigest MD5Hasher;
        MD5Hasher = MessageDigest.getInstance("MD5");
        MD5Hasher.update(ThisString.getBytes("iso-8859-1"));
        Result = MD5Hasher.digest();
        return Result;
    }
} </s>
<s>class temp {    public static byte[] ComputeForText(String ThisString) throws Exception {
        byte[] Result;
        MessageDigest MD5Hasher;
        MD5Hasher = MessageDigest.getInstance("MD5");
        MD5Hasher.update(ThisString.replaceAll("\r", "").getBytes("iso-8859-1"));
        Result = MD5Hasher.digest();
        return Result;
    }
} </s>
<s>class temp {    private static String getDocumentAt(String urlString) {
        StringBuffer html_text = new StringBuffer();
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) html_text.append(line + "\n");
            reader.close();
        } catch (MalformedURLException e) {
            System.out.println("  Ч  URL: " + urlString);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html_text.toString();
    }
} </s>
<s>class temp {    static void sort(int[] a) {
        int i = 0;
        while (i < a.length - 1) {
            int j = 0;
            while (j < (a.length - i) - 1) {
                if (a[j] > a[j + 1]) {
                    int aux = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = aux;
                }
                j = j + 1;
            }
            i = i + 1;
        }
    }
} </s>
<s>class temp {    public void put(String path, File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, this.endpointPort);
            log.debug("Ftp put reply: " + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException("Ftp put server refused connection.");
            }
            if (!ftp.login("anonymous", "")) {
                ftp.logout();
                throw new IOException("FTP: server wrong passwd");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(path, input) != true) {
                ftp.logout();
                input.close();
                throw new IOException("FTP put exception");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error("Ftp client exception: " + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }
} </s>
<s>class temp {    public void get(String path, File fileToGet) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException("Ftp get server refused connection.");
            }
            if (!ftp.login("anonymous", "")) {
                ftp.logout();
                throw new IOException("FTP: server wrong passwd");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            OutputStream output = new FileOutputStream(fileToGet.getName());
            if (ftp.retrieveFile(path, output) != true) {
                ftp.logout();
                output.close();
                throw new IOException("FTP get exception, maybe file not found");
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
    }
} </s>
<s>class temp {    public void delete(String fileToDelete) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException("Ftp delete server refused connection.");
            }
            if (!ftp.login("anonymous", "")) {
                ftp.logout();
                throw new IOException("FTP: server wrong passwd");
            }
            ftp.enterLocalPassiveMode();
            log.debug("Deleted: " + ftp.deleteFile(fileToDelete));
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
    }
} </s>
<s>class temp {    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException("Ftp exists server refused connection.");
            }
            if (!ftp.login("anonymous", "")) {
                ftp.logout();
                throw new IOException("FTP: server wrong passwd");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
} </s>
<s>class temp {                    public void run() {
                        try {
                            HttpPost httpPostRequest = new HttpPost(Feesh.device_URL);
                            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
                            nameValuePairs.add(new BasicNameValuePair("c", "feed"));
                            nameValuePairs.add(new BasicNameValuePair("amount", String.valueOf(foodAmount)));
                            nameValuePairs.add(new BasicNameValuePair("type", String.valueOf(foodType)));
                            httpPostRequest.setEntity(new UrlEncodedFormEntity(nameValuePairs));
                            HttpResponse httpResponse = (HttpResponse) new DefaultHttpClient().execute(httpPostRequest);
                            HttpEntity entity = httpResponse.getEntity();
                            String resultString = "";
                            if (entity != null) {
                                InputStream instream = entity.getContent();
                                resultString = convertStreamToString(instream);
                                instream.close();
                            }
                            Message msg_toast = new Message();
                            msg_toast.obj = resultString;
                            toast_handler.sendMessage(msg_toast);
                        } catch (UnsupportedEncodingException e) {
                            e.printStackTrace();
                        } catch (ClientProtocolException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
} </s>
<s>class temp {    private static JSONObject sendCouchRequest(HttpUriRequest request) {
        try {
            HttpResponse httpResponse = (HttpResponse) new DefaultHttpClient().execute(request);
            HttpEntity entity = httpResponse.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                String resultString = convertStreamToString(instream);
                instream.close();
                JSONObject jsonResult = new JSONObject(resultString);
                return jsonResult;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException, WrongFormatException, URISyntaxException {
        System.out.println(new URI("google.com.ua.css").toString());
        Scanner scc = new Scanner(System.in);
        System.err.print(scc.nextLine().substring(1));
        ServerSocket s = new ServerSocket(5354);
        while (true) {
            Socket client = s.accept();
            InputStream iStream = client.getInputStream();
            BufferedReader bf = new BufferedReader(new InputStreamReader(iStream));
            String line = "";
            while (!(line = bf.readLine()).equals("")) {
                System.out.println(line);
            }
            System.out.println("end of request");
            new PrintWriter(client.getOutputStream()).println("hi");
            bf.close();
        }
    }
} </s>
<s>class temp {    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
} </s>
<s>class temp {    public static void copy(File from_file, File to_file) throws IOException {
        from_file = checkFile(from_file);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort("FileCopy: destination file is unwriteable: " + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty("user.dir");
            File dir = new File(parent);
            if (!dir.exists()) abort("FileCopy: destination directory doesn't exist: " + parent);
            if (dir.isFile()) abort("FileCopy: destination is not a directory: " + parent);
            if (!dir.canWrite()) abort("FileCopy: destination directory is unwriteable: " + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".version")) version = line.substring(8).trim(); else if (line.startsWith(".build")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public static void fileCopy(String fromPath, String toPath) throws IOException {
        File inputFile = new File(fromPath);
        File outputFile = new File(toPath);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
} </s>
<s>class temp {    public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        registroActualizado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat("HHmmss");
            DateFormat sss = new SimpleDateFormat("S");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            ms = conn.prepareStatement(SENTENCIA_UPDATE);
            ms.setString(1, descartadoEntrada);
            ms.setString(2, usuarioEntrada);
            ms.setString(3, motivosDescarteEntrada);
            ms.setInt(4, Integer.parseInt(anoOficio));
            ms.setInt(5, Integer.parseInt(oficinaOficio));
            ms.setInt(6, Integer.parseInt(numeroOficio));
            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int afectados = ms.executeUpdate();
            if (afectados > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            conn.commit();
        } catch (Exception ex) {
            System.out.println("Error inesperat, no s'ha desat el registre: " + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("", "Error inesperat, no s'ha desat el registre" + ": " + ex.getClass() + "->" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException("S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats", sqle);
            }
            throw new RemoteException("Error inesperat, no s'ha modifcat el registre", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    private void removeSessionId(InputStream inputStream, Output output) throws IOException {
        String jsessionid = RewriteUtils.getSessionId(target);
        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader("Content-Type"));
        if (jsessionid == null || !textContentType) {
            IOUtils.copy(inputStream, output.getOutputStream());
        } else {
            String charset = httpClientResponse.getContentCharset();
            if (charset == null) {
                charset = "ISO-8859-1";
            }
            String content = IOUtils.toString(inputStream, charset);
            content = removeSessionId(jsessionid, content);
            if (output.getHeader("Content-length") != null) {
                output.setHeader("Content-length", Integer.toString(content.length()));
            }
            OutputStream outputStream = output.getOutputStream();
            IOUtils.write(content, outputStream, charset);
        }
        inputStream.close();
    }
} </s>
<s>class temp {    private Document saveFile(Document document, File file) throws Exception {
        List<Preference> preferences = prefService.findAll();
        if (preferences != null && !preferences.isEmpty()) {
            preference = preferences.get(0);
        }
        SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATEFORMAT_YYYYMMDD);
        String repo = preference.getRepository();
        Calendar calendar = Calendar.getInstance();
        StringBuffer sbRepo = new StringBuffer(repo);
        sbRepo.append(File.separator);
        StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime()));
        sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY));
        File folder = new File(sbRepo.append(sbFolder).toString());
        if (!folder.exists()) {
            folder.mkdirs();
        }
        FileChannel fcSource = null, fcDest = null;
        try {
            StringBuffer sbFile = new StringBuffer(folder.getAbsolutePath());
            StringBuffer fname = new StringBuffer(document.getId().toString());
            fname.append(".").append(document.getExt());
            sbFile.append(File.separator).append(fname);
            fcSource = new FileInputStream(file).getChannel();
            fcDest = new FileOutputStream(sbFile.toString()).getChannel();
            fcDest.transferFrom(fcSource, 0, fcSource.size());
            document.setLocation(sbFolder.toString());
            documentService.save(document);
        } catch (FileNotFoundException notFoundEx) {
            log.error("saveFile file not found: " + document.getName(), notFoundEx);
        } catch (IOException ioEx) {
            log.error("saveFile IOException: " + document.getName(), ioEx);
        } finally {
            try {
                if (fcSource != null) {
                    fcSource.close();
                }
                if (fcDest != null) {
                    fcDest.close();
                }
            } catch (Exception e) {
                log.error(e.getMessage(), e);
            }
        }
        return document;
    }
} </s>
<s>class temp {    @Override
    protected String doInBackground(Void... params) {
        try {
            HttpGet request = new HttpGet(UPDATE_URL);
            request.setHeader("Accept", "text/plain");
            HttpResponse response = MyMovies.getHttpClient().execute(request);
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                return "Error: Failed getting update notes";
            }
            return EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }
} </s>
<s>class temp {    boolean isTextPage(URL url) {
        try {
            String ct = url.openConnection().getContentType().toLowerCase();
            String s = url.toString();
            Loro.log("LoroEDI: " + "  content-type: " + ct);
            if (!ct.startsWith("text/") || s.endsWith(".jar") || s.endsWith(".lar")) {
                javax.swing.JOptionPane.showOptionDialog(null, Str.get("gui.1_browser_cannot_show_link", s), "", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE, null, null, null);
                Loro.log("LoroEDI: " + "  unable to display");
                return false;
            }
        } catch (Exception ex) {
            Loro.log("LoroEDI: " + "  Exception: " + ex.getMessage());
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    public static File getFileFromURL(URL url) {
        File tempFile;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            String tempDir = System.getProperty("java.io.tmpdir", ".");
            tempFile = File.createTempFile("xxindex", ".tmp", new File(tempDir));
            tempFile.deleteOnExit();
            InputStream is = url.openStream();
            in = new BufferedInputStream(is);
            FileOutputStream fos = new FileOutputStream(tempFile);
            out = new BufferedOutputStream(fos);
            byte[] b = new byte[1];
            while (in.read(b) >= 0) {
                out.write(b);
            }
            logger.debug(url + " written to local file " + tempFile.getAbsolutePath());
        } catch (IOException e) {
            throw new IllegalStateException("Could not create local file for URL: " + url, e);
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException e) {
            }
        }
        return tempFile;
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    protected static void upload(FtpSiteConnector connector, File localFile, String remotePath, boolean createRootDir, IProgressMonitor monitor) throws FtpException {
        FTPClient ftp = new FTPClient();
        try {
            String hostname = connector.getUrl().getHost();
            ftp.connect(hostname);
            log.info("Connected to " + hostname);
            log.info(ftp.getReplyString());
            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());
            if (loggedIn) {
                log.info("User " + connector.getUsername() + " logged in");
                ftp.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);
                ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
                ftp.enterLocalPassiveMode();
                FtpUtils.store(ftp, localFile, remotePath, createRootDir, monitor);
                ftp.logout();
            } else {
                throw new FtpException("Invalid login");
            }
            ftp.disconnect();
        } catch (Exception e) {
            log.error("File upload failed with message: " + e.getMessage());
            throw new FtpException("File upload failed with message: " + e.getMessage());
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                    throw new FtpException("File upload failed with message: " + ioe.getMessage());
                }
            }
        }
    }
} </s>
<s>class temp {    protected static void download(FtpSiteConnector connector, File localFile, String remotePath, final IProgressMonitor monitor) throws FtpException {
        if (!localFile.exists()) {
            FTPClient ftp = new FTPClient();
            try {
                FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
                ftp.configure(conf);
                String hostname = connector.getUrl().getHost();
                ftp.connect(hostname);
                log.info("Connected to " + hostname);
                log.info(ftp.getReplyString());
                boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());
                if (loggedIn) {
                    log.info("downloading file: " + remotePath);
                    ftp.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);
                    ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
                    ftp.enterLocalPassiveMode();
                    final long fileSize = getFileSize(ftp, remotePath);
                    FileOutputStream dfile = new FileOutputStream(localFile);
                    ftp.retrieveFile(remotePath, dfile, new CopyStreamListener() {

                        public int worked = 0;

                        public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) {
                            int percent = percent(fileSize, totalBytesTransferred);
                            int delta = percent - worked;
                            if (delta > 0) {
                                if (monitor != null) {
                                    monitor.worked(delta);
                                }
                                worked = percent;
                            }
                        }

                        public void bytesTransferred(CopyStreamEvent event) {
                        }

                        private int percent(long totalBytes, long totalBytesTransferred) {
                            long percent = (totalBytesTransferred * 100) / totalBytes;
                            return Long.valueOf(percent).intValue();
                        }
                    });
                    dfile.flush();
                    dfile.close();
                    ftp.logout();
                } else {
                    throw new FtpException("Invalid login");
                }
                ftp.disconnect();
            } catch (SocketException e) {
                log.error("File download failed with message: " + e.getMessage());
                throw new FtpException("File download failed with message: " + e.getMessage());
            } catch (IOException e) {
                log.error("File download failed with message: " + e.getMessage());
                throw new FtpException("File download failed with message: " + e.getMessage());
            } finally {
                if (ftp.isConnected()) {
                    try {
                        ftp.disconnect();
                    } catch (IOException ioe) {
                        throw new FtpException("File download failed with message: " + ioe.getMessage());
                    }
                }
            }
        }
    }
} </s>
<s>class temp {    public boolean updateCalculatedHand(CalculateTransferObject query, BasicStartingHandTransferObject[] hands) throws CalculateDAOException {
        boolean retval = false;
        Connection connection = null;
        Statement statement = null;
        PreparedStatement prep = null;
        ResultSet result = null;
        StringBuffer sql = new StringBuffer(SELECT_ID_SQL);
        sql.append(appendQuery(query));
        try {
            connection = getDataSource().getConnection();
            connection.setAutoCommit(false);
            statement = connection.createStatement();
            result = statement.executeQuery(sql.toString());
            if (result.first()) {
                String id = result.getString("id");
                prep = connection.prepareStatement(UPDATE_HANDS_SQL);
                for (int i = 0; i < hands.length; i++) {
                    prep.setInt(1, hands[i].getWins());
                    prep.setInt(2, hands[i].getLoses());
                    prep.setInt(3, hands[i].getDraws());
                    prep.setString(4, id);
                    prep.setString(5, hands[i].getHand());
                    if (prep.executeUpdate() != 1) {
                        throw new SQLException("updated too many records in calculatehands, " + id + "-" + hands[i].getHand());
                    }
                }
                connection.commit();
            }
        } catch (SQLException sqle) {
            try {
                connection.rollback();
            } catch (SQLException e) {
                e.setNextException(sqle);
                throw new CalculateDAOException(e);
            }
            throw new CalculateDAOException(sqle);
        } finally {
            if (result != null) {
                try {
                    result.close();
                } catch (SQLException e) {
                    throw new CalculateDAOException(e);
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    throw new CalculateDAOException(e);
                }
            }
            if (prep != null) {
                try {
                    prep.close();
                } catch (SQLException e) {
                    throw new CalculateDAOException(e);
                }
            }
        }
        return retval;
    }
} </s>
<s>class temp {    private String hashPassword(String password) {
        String passwordHash = "";
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            passwordHash = hash.toString(16);
            if (passwordHash.length() == 31) {
                passwordHash = "0" + passwordHash;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return passwordHash;
    }
} </s>
<s>class temp {    private ResponseStatus performHandshake(String url) throws IOException {
        HttpURLConnection connection = Caller.getInstance().openConnection(url);
        InputStream is = connection.getInputStream();
        BufferedReader r = new BufferedReader(new InputStreamReader(is));
        String status = r.readLine();
        int statusCode = ResponseStatus.codeForStatus(status);
        ResponseStatus responseStatus;
        if (statusCode == ResponseStatus.OK) {
            this.sessionId = r.readLine();
            this.nowPlayingUrl = r.readLine();
            this.submissionUrl = r.readLine();
            responseStatus = new ResponseStatus(statusCode);
        } else if (statusCode == ResponseStatus.FAILED) {
            responseStatus = new ResponseStatus(statusCode, status.substring(status.indexOf(' ') + 1));
        } else {
            return new ResponseStatus(statusCode);
        }
        r.close();
        return responseStatus;
    }
} </s>
<s>class temp {    public ResponseStatus nowPlaying(String artist, String track, String album, int length, int tracknumber) throws IOException {
        if (sessionId == null) throw new IllegalStateException("Perform successful handshake first.");
        String b = album != null ? encode(album) : "";
        String l = length == -1 ? "" : String.valueOf(length);
        String n = tracknumber == -1 ? "" : String.valueOf(tracknumber);
        String body = String.format("s=%s&a=%s&t=%s&b=%s&l=%s&n=%s&m=", sessionId, encode(artist), encode(track), b, l, n);
        if (Caller.getInstance().isDebugMode()) System.out.println("now playing: " + body);
        Proxy proxy = Caller.getInstance().getProxy();
        HttpURLConnection urlConnection = Caller.getInstance().openConnection(nowPlayingUrl);
        urlConnection.setRequestMethod("POST");
        urlConnection.setDoOutput(true);
        OutputStream outputStream = urlConnection.getOutputStream();
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream));
        writer.write(body);
        writer.close();
        InputStream is = urlConnection.getInputStream();
        BufferedReader r = new BufferedReader(new InputStreamReader(is));
        String status = r.readLine();
        r.close();
        return new ResponseStatus(ResponseStatus.codeForStatus(status));
    }
} </s>
<s>class temp {    public ResponseStatus submit(Collection<SubmissionData> data) throws IOException {
        if (sessionId == null) throw new IllegalStateException("Perform successful handshake first.");
        if (data.size() > 50) throw new IllegalArgumentException("Max 50 submissions at once");
        StringBuilder builder = new StringBuilder(data.size() * 100);
        int index = 0;
        for (SubmissionData submissionData : data) {
            builder.append(submissionData.toString(sessionId, index));
            builder.append('\n');
            index++;
        }
        String body = builder.toString();
        if (Caller.getInstance().isDebugMode()) System.out.println("submit: " + body);
        HttpURLConnection urlConnection = Caller.getInstance().openConnection(submissionUrl);
        urlConnection.setRequestMethod("POST");
        urlConnection.setDoOutput(true);
        OutputStream outputStream = urlConnection.getOutputStream();
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream));
        writer.write(body);
        writer.close();
        InputStream is = urlConnection.getInputStream();
        BufferedReader r = new BufferedReader(new InputStreamReader(is));
        String status = r.readLine();
        r.close();
        int statusCode = ResponseStatus.codeForStatus(status);
        if (statusCode == ResponseStatus.FAILED) {
            return new ResponseStatus(statusCode, status.substring(status.indexOf(' ') + 1));
        }
        return new ResponseStatus(statusCode);
    }
} </s>
<s>class temp {    protected String readUrl(String svnUrl) throws IOException {
        URL url = new URL(svnUrl);
        URLConnection uc = url.openConnection();
        if (url.getProtocol().equals("https")) {
            String userPassword = user + ":" + password;
            String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());
            uc.setRequestProperty("Authorization", "Basic " + encoding);
        }
        InputStream is = null;
        String in = null;
        try {
            is = uc.getInputStream();
            in = read(is);
        } finally {
            try {
                is.close();
            } catch (Exception e) {
            }
        }
        return in;
    }
} </s>
<s>class temp {    public InputStream getInputStream() throws ResourceLoadException {
        logger.info("loading: " + url.toString() + ", Thread: " + Thread.currentThread().getName());
        tryCount = 0;
        while (true) {
            HttpURLConnection httpConnection = null;
            try {
                connection = url.openConnection();
            } catch (IOException e) {
                throw new ResourceLoadException("Error opening connection", this, e, false);
            }
            connection.setRequestProperty("Accept", "application/xml");
            connection.setRequestProperty("Accept-Encoding", "gzip");
            try {
                connection.connect();
            } catch (IOException e) {
                failed(e, "Error connecting", false);
                continue;
            }
            if (connection instanceof HttpURLConnection) {
                httpConnection = (HttpURLConnection) connection;
                try {
                    responseCode = httpConnection.getResponseCode();
                } catch (IOException e) {
                    failed(e, "Error getting response code", true);
                    continue;
                }
                if ((responseCode / 100) != 2) {
                    failed(null, "Non 2XX response code: " + responseCode, true);
                    continue;
                }
            }
            try {
                urlInputStream = connection.getInputStream();
            } catch (IOException e) {
                failed(e, "Error opening input stream", true);
                continue;
            }
            String encoding = connection.getContentEncoding();
            if (encoding != null && encoding.toLowerCase().equals("gzip")) {
                try {
                    urlInputStream = new GZIPInputStream(urlInputStream);
                } catch (IOException e) {
                    failed(e, "Error ungzipping", true);
                    continue;
                }
            }
            lastModified = connection.getLastModified();
            contentLength = connection.getContentLength();
            eTag = connection.getHeaderField("ETag");
            logger.finer("RequiredResourceLoader - Done.");
            return urlInputStream;
        }
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".build")) develBuild = line.substring(6).trim(); else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    private String endcodePassword(String password) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(password.getBytes("UTF-8"));
        byte raw[] = md.digest();
        Base64 base64 = new Base64();
        String hash = new String(base64.encode(raw));
        return hash;
    }
} </s>
<s>class temp {    public String getRssFeedUrl(boolean searchWeb) {
        String rssFeedUrl = null;
        if (entity.getNewsFeedUrl() != null & !entity.getUrl().equals("")) {
            return entity.getNewsFeedUrl();
        } else if (entity.getUrl() == null || entity.getUrl().equals("")) {
            return entity.getNewsFeedUrl();
        } else if (searchWeb) {
            HttpURLConnection con = null;
            InputStream is = null;
            try {
                URL url = new URL(entity.getUrl());
                con = (HttpURLConnection) url.openConnection();
                con.connect();
                is = con.getInputStream();
                InputStreamReader sr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(sr);
                String ln;
                StringBuffer sb = new StringBuffer();
                while ((ln = br.readLine()) != null) {
                    sb.append(ln + "\n");
                }
                rssFeedUrl = extractRssFeedUrl(sb.toString());
            } catch (Exception e) {
                log.error(e);
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                        log.error(e);
                    }
                }
                if (con != null) {
                    con.disconnect();
                }
            }
        }
        return rssFeedUrl;
    }
} </s>
<s>class temp {    public static File downloadFile(URL url, String filePath) throws IOException, ConnectException, UnknownHostException {
        File f = null;
        long t1 = System.currentTimeMillis();
        try {
            long t3 = System.currentTimeMillis();
            File tempDirectory = new File(tempDirectoryPath);
            if (!tempDirectory.exists()) {
                tempDirectory.mkdir();
            }
            String fName = normalizeFileName(filePath);
            f = new File(tempDirectoryPath + "/" + fName);
            logger.info("downloading '" + url.toString() + "' to: " + f.getAbsolutePath());
            f.deleteOnExit();
            DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(f)));
            byte[] buffer = new byte[1024 * 256];
            InputStream is = url.openStream();
            long readed = 0;
            for (int i = is.read(buffer); i > 0; i = is.read(buffer)) {
                dos.write(buffer, 0, i);
                readed += i;
            }
            dos.close();
            long t4 = System.currentTimeMillis();
            logger.debug("Download time: " + (t4 - t3));
        } catch (IOException io) {
            io.printStackTrace();
        }
        long t2 = System.currentTimeMillis();
        logger.debug("Total download method time: " + (t2 - t1));
        return f;
    }
} </s>
<s>class temp {    public static File doRequestPost(URL url, String req, String fName, boolean override) throws ArcImsException {
        File f = null;
        URL virtualUrl = getVirtualRequestUrlFromUrlAndRequest(url, req);
        if ((f = getPreviousDownloadedURL(virtualUrl, override)) == null) {
            File tempDirectory = new File(tempDirectoryPath);
            if (!tempDirectory.exists()) {
                tempDirectory.mkdir();
            }
            String nfName = normalizeFileName(fName);
            f = new File(tempDirectoryPath + "/" + nfName);
            f.deleteOnExit();
            logger.info("downloading '" + url.toString() + "' to: " + f.getAbsolutePath());
            try {
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setDoOutput(true);
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Content-type", "application/x-www-form-urlencoded");
                conn.setRequestProperty("Content-length", "" + req.length());
                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(req);
                wr.flush();
                DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(f)));
                byte[] buffer = new byte[1024 * 256];
                InputStream is = conn.getInputStream();
                long readed = 0;
                for (int i = is.read(buffer); i > 0; i = is.read(buffer)) {
                    dos.write(buffer, 0, i);
                    readed += i;
                }
                dos.close();
                is.close();
                wr.close();
                addDownloadedURL(virtualUrl, f.getAbsolutePath());
            } catch (ConnectException ce) {
                logger.error("Timed out error", ce);
                throw new ArcImsException("arcims_server_timeout");
            } catch (FileNotFoundException fe) {
                logger.error("FileNotFound Error", fe);
                throw new ArcImsException("arcims_server_error");
            } catch (IOException e) {
                logger.error("IO Error", e);
                throw new ArcImsException("arcims_server_error");
            }
        }
        if (!f.exists()) {
            downloadedFiles.remove(virtualUrl);
            f = doRequestPost(url, req, fName, override);
        }
        return f;
    }
} </s>
<s>class temp {    public static InputStream getRemoteIS(URL url, String post) throws ArcImsException {
        InputStream lector = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-type", "application/x-www-form-urlencoded");
            conn.setRequestProperty("Content-length", "" + post.length());
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(post);
            wr.flush();
            logger.info("downloading '" + url.toString());
            lector = conn.getInputStream();
        } catch (ConnectException e) {
            logger.error("Timed out error", e);
            throw new ArcImsException("arcims_server_timeout");
        } catch (ProtocolException e) {
            logger.error(e.getMessage(), e);
            throw new ArcImsException("arcims_server_error");
        } catch (IOException e) {
            logger.error(e.getMessage(), e);
            throw new ArcImsException("arcims_server_error");
        }
        return lector;
    }
} </s>
<s>class temp {    public static String urlPost(Map<String, String> paraMap, String urlStr) throws IOException {
        String strParam = "";
        for (Map.Entry<String, String> entry : paraMap.entrySet()) {
            strParam = strParam + (entry.getKey() + "=" + entry.getValue()) + "&";
        }
        URL url = new URL(urlStr);
        URLConnection connection = url.openConnection();
        connection.setDoOutput(true);
        OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), "utf-8");
        out.write(strParam);
        out.flush();
        out.close();
        String sCurrentLine;
        String sTotalString;
        sCurrentLine = "";
        sTotalString = "";
        InputStream l_urlStream;
        l_urlStream = connection.getInputStream();
        BufferedReader l_reader = new BufferedReader(new InputStreamReader(l_urlStream));
        while ((sCurrentLine = l_reader.readLine()) != null) {
            sTotalString += sCurrentLine + "\r\n";
        }
        System.out.println(sTotalString);
        return sTotalString;
    }
} </s>
<s>class temp {    private static void unpackEntry(File destinationFile, ZipInputStream zin, ZipEntry entry) throws Exception {
        if (!entry.isDirectory()) {
            createFolders(destinationFile.getParentFile());
            FileOutputStream fis = new FileOutputStream(destinationFile);
            try {
                IOUtils.copy(zin, fis);
            } finally {
                zin.closeEntry();
                fis.close();
            }
        } else {
            createFolders(destinationFile);
        }
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {        @Override
        protected void copyContent(String filename) throws IOException {
            InputStream in = null;
            try {
                in = LOADER.getResourceAsStream(RES_PKG + filename);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                IOUtils.copy(in, out);
                setResponseData(out.toByteArray());
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        }
} </s>
<s>class temp {        @Override
        protected void copyContent(String filename) throws IOException {
            InputStream in = null;
            try {
                String resourceDir = System.getProperty("resourceDir");
                File resource = new File(resourceDir, filename);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                if (resource.exists()) {
                    in = new FileInputStream(resource);
                } else {
                    in = LOADER.getResourceAsStream(RES_PKG + filename);
                }
                IOUtils.copy(in, out);
                setResponseData(out.toByteArray());
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".build")) develBuild = line.substring(6).trim(); else if (line.startsWith(".stablebuild")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty("version-check.url"));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith(".version")) version = line.substring(8).trim(); else if (line.startsWith(".build")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, "version-check" + ".up-to-date", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty("version-check.url"), e.toString() };
            GUIUtilities.error(view, "read-error", args);
        }
        view.hideWaitCursor();
    }
} </s>
<s>class temp {    public void execute(File sourceFile, File destinationFile, Properties htmlCleanerConfig) {
        FileReader reader = null;
        Writer writer = null;
        try {
            reader = new FileReader(sourceFile);
            logger.info("Using source file: " + trimPath(userDir, sourceFile));
            if (!destinationFile.getParentFile().exists()) {
                createDirectory(destinationFile.getParentFile());
            }
            writer = new FileWriter(destinationFile);
            logger.info("Destination file:  " + trimPath(userDir, destinationFile));
            execute(reader, writer, htmlCleanerConfig);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                    writer = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (reader != null) {
                try {
                    reader.close();
                    reader = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    private byte[] _generate() throws NoSuchAlgorithmException {
        if (host == null) {
            try {
                seed = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                seed = "localhost/127.0.0.1";
            } catch (SecurityException e) {
                seed = "localhost/127.0.0.1";
            }
            host = seed;
        } else {
            seed = host;
        }
        seed = seed + new Date().toString();
        seed = seed + Long.toString(rnd.nextLong());
        md = MessageDigest.getInstance(algorithm);
        md.update(seed.getBytes());
        return md.digest();
    }
} </s>
<s>class temp {    public static final void zip(final ZipOutputStream out, final File f, String base) throws Exception {
        if (f.isDirectory()) {
            final File[] fl = f.listFiles();
            base = base.length() == 0 ? "" : base + File.separator;
            for (final File element : fl) {
                zip(out, element, base + element.getName());
            }
        } else {
            out.putNextEntry(new org.apache.tools.zip.ZipEntry(base));
            final FileInputStream in = new FileInputStream(f);
            IOUtils.copyStream(in, out);
            in.close();
        }
        Thread.sleep(10);
    }
} </s>
<s>class temp {    public void login(String username, String key) {
        if (isLogged()) {
            return;
        }
        if (null == this.username || null == this.key) {
            this.username = username;
            this.key = key;
        }
        final ProgressHandle handle = ProgressHandleFactory.createHandle("Logining into DreamHost");
        handle.start();
        working = true;
        fireChangeEvent();
        RequestProcessor.getDefault().post(new Runnable() {

            public void run() {
                try {
                    HttpsURLConnection connection = (HttpsURLConnection) urlGenerator(DreamHostCommands.CMD_DOMAIN_LIST_DOMAINS, null).openConnection();
                    String response = getResponse(connection);
                    Document document = builder.parse(new ByteArrayInputStream(response.getBytes()));
                    String result = document.getElementsByTagName("result").item(0).getTextContent();
                    logged = result.equals("success");
                } catch (SAXException ex) {
                    Logger.getLogger(DreamHostConnector.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DreamHostConnector.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    if (isLogged()) {
                        NbPreferences.forModule(DreamHostConnector.class).put("username", getUsername());
                        NbPreferences.forModule(DreamHostConnector.class).put("key", getKey());
                    }
                    handle.finish();
                    working = false;
                    fireChangeEvent();
                }
            }
        });
    }
} </s>
<s>class temp {    public static String httpGetJson(final List<NameValuePair> nameValuePairs) {
        HttpClient httpclient = null;
        String data = "";
        URI uri = null;
        try {
            final String paramString = URLEncodedUtils.format(nameValuePairs, "utf-8");
            if (HTTPS) {
                final SchemeRegistry schemeRegistry = new SchemeRegistry();
                schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
                final HttpParams params = new BasicHttpParams();
                final SingleClientConnManager mgr = new SingleClientConnManager(params, schemeRegistry);
                httpclient = new DefaultHttpClient(mgr, params);
                uri = new URI(DEADDROPS_SERVER_URL_HTTPS + "?" + paramString);
            } else {
                httpclient = new DefaultHttpClient();
                uri = new URI(DEADDROPS_SERVER_URL + "?" + paramString);
            }
            final HttpGet request = new HttpGet();
            request.setURI(uri);
            final HttpResponse response = httpclient.execute(request);
            final BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) data += inputLine;
            in.close();
        } catch (final URISyntaxException e) {
            e.printStackTrace();
            return null;
        } catch (final ClientProtocolException e) {
            e.printStackTrace();
            return null;
        } catch (final IOException e) {
            e.printStackTrace();
            return null;
        }
        return data;
    }
} </s>
