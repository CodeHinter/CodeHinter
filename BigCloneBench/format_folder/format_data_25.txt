<s>class temp {    public static String encryptPassword(String username, String realm, String password) throws GeneralSecurityException {
        MessageDigest md = null;
        md = MessageDigest.getInstance("MD5");
        md.update(username.getBytes());
        md.update(":".getBytes());
        md.update(realm.getBytes());
        md.update(":".getBytes());
        md.update(password.getBytes());
        byte[] hash = md.digest();
        return toHex(hash, hash.length);
    }
} </s>
<s>class temp {    public static boolean doTest(Getter<?> context, Document node) {
        try {
            URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, "url"), context));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Assert.isTrue(conn.getResponseCode() < 400);
            conn.disconnect();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
} </s>
<s>class temp {    protected void xInitGUI() {
        this.jlHead.setText(formater.getText("select_marc21_title"));
        this.jlResId.setText(formater.getText("select_marc21_label_text"));
        this.jlResId.setToolTipText(formater.getText("select_marc21_label_description"));
        ElvisListModel model = new ElvisListModel();
        this.jlResourceList.setModel(model);
        try {
            URL urlListResources = new URL(ElvisRegistry.getInstance().getProperty("elvis.server") + "/servlet/listResources?xpath=document()//Book");
            InputStream streamResources = urlListResources.openStream();
            XmlPullParser xpp = XmlPullParserFactory.newInstance().newPullParser();
            xpp.setInput(new InputStreamReader(streamResources));
            int type = xpp.getEventType();
            while (type != XmlPullParser.END_DOCUMENT) {
                if (type == XmlPullParser.START_TAG && "Resource".equals(xpp.getName())) {
                    model.add(xpp.getAttributeValue("", "resId"), xpp.getAttributeValue("", "author"), xpp.getAttributeValue("", "title"));
                }
                type = xpp.next();
            }
            streamResources.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (XmlPullParserException xppe) {
            xppe.printStackTrace();
        }
        ListSelectionModel selectionModel = this.jlResourceList.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {

            /**
				 * @param  e  Description of the Parameter
				 * @see       javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
				 */
            public void valueChanged(ListSelectionEvent e) {
                int index = e.getFirstIndex();
                boolean isAdjusting = e.getValueIsAdjusting();
                if (!isAdjusting) {
                    ElvisListModel _model = (ElvisListModel) jlResourceList.getModel();
                    jtfResId.setText(_model.get(index).getId());
                }
            }
        });
    }
} </s>
<s>class temp {    private static void getFileFtp(String user, String password, String host, int port, String fileName, String location) throws Exception {
        Log.info("\nretrieve " + fileName + NEW_LINE);
        FTPClient client = new FTPClient();
        client.connect(host, port);
        int reply = client.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            throw new Exception("FTP fail to connect");
        }
        if (!client.login(user, password)) {
            throw new Exception("FTP fail to login");
        }
        try {
            File locationFile = new File(location);
            File dest = new File(locationFile, fileName);
            if (dest.exists()) {
                dest.delete();
            } else {
                locationFile.mkdirs();
            }
            boolean status = client.changeWorkingDirectory("/");
            Log.info("chdir-status:" + status + NEW_LINE);
            client.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            client.enterLocalActiveMode();
            InputStream in = client.retrieveFileStream(fileName);
            if (in == null) {
                Log.error("Input stream is null\n");
                throw new Exception("Fail to retrieve file " + fileName);
            }
            Thread.sleep(3000);
            saveInputStreamToFile(in, new File(location, fileName));
        } finally {
            client.disconnect();
        }
    }
} </s>
<s>class temp {    public static void copyFile(String src, String target) throws IOException {
        FileChannel ic = new FileInputStream(src).getChannel();
        FileChannel oc = new FileOutputStream(target).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }
} </s>
<s>class temp {    public static String digest(String text, String algorithm, String charsetName) {
        try {
            MessageDigest md = MessageDigest.getInstance(algorithm);
            md.update(text.getBytes(charsetName), 0, text.length());
            return convertToHex(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("unexpected exception: " + e, e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException("unexpected exception: " + e, e);
        }
    }
} </s>
<s>class temp {    private String callPage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        BufferedReader reader = null;
        StringBuilder result = new StringBuilder();
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line);
            }
        } finally {
            if (reader != null) reader.close();
        }
        return result.toString();
    }
} </s>
<s>class temp {    public static Image getPluginImage(Object plugin, String name) {
        try {
            try {
                URL url = getPluginImageURL(plugin, name);
                if (mURLImageMap.containsKey(url)) {
                    return mURLImageMap.get(url);
                }
                InputStream is = url.openStream();
                Image image;
                try {
                    image = getImage(is);
                    mURLImageMap.put(url, image);
                } finally {
                    is.close();
                }
                return image;
            } catch (Throwable e) {
                LOG.debug("Ignore any exceptions");
            }
        } catch (Throwable e) {
            LOG.debug("Ignore any exceptions");
        }
        return null;
    }
} </s>
<s>class temp {    public static void processString(String text) throws Exception {
        MessageDigest md5 = MessageDigest.getInstance(MD5_DIGEST);
        md5.reset();
        md5.update(text.getBytes());
        displayResult(null, md5.digest());
    }
} </s>
<s>class temp {    public void process(String t) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(MD5_DIGEST);
            md5.reset();
            md5.update(t.getBytes());
            callback.display(null, digestToHexString(md5.digest()));
        } catch (Exception ex) {
            callback.display(null, "[failed]");
        }
    }
} </s>
<s>class temp {    private void save() {
        int[] selection = list.getSelectionIndices();
        String dir = System.getProperty("user.dir");
        for (int i = 0; i < selection.length; i++) {
            File src = files[selection[i]];
            FileDialog dialog = new FileDialog(shell, SWT.SAVE);
            dialog.setFilterPath(dir);
            dialog.setFileName(src.getName());
            String destination = dialog.open();
            if (destination != null) {
                File dest = new File(destination);
                try {
                    dest.createNewFile();
                    FileChannel srcC = new FileInputStream(src).getChannel();
                    FileChannel destC = new FileOutputStream(dest).getChannel();
                    destC.transferFrom(srcC, 0, srcC.size());
                    destC.close();
                    srcC.close();
                    updateSaved(selection[i], true);
                    files[selection[i]] = dest;
                } catch (FileNotFoundException e) {
                    IVC.showError("Error!", "" + e.getMessage(), "");
                } catch (IOException e) {
                    IVC.showError("Error!", "" + e.getMessage(), "");
                }
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Usage: java xyzImpl inputfile");
            System.exit(0);
        }
        XYZ xyz = null;
        try {
            URL url = new URL(Util.makeAbsoluteURL(args[0]));
            BufferedReader bReader = new BufferedReader(new InputStreamReader(url.openStream()));
            int idx = args[0].indexOf(".");
            String id = (idx == -1) ? args[0] : args[0].substring(0, idx);
            idx = id.lastIndexOf("\\");
            if (idx != -1) id = id.substring(idx + 1);
            xyz = new XYZImpl(bReader, id);
            CMLMolecule mol = xyz.getMolecule();
            StringWriter sw = new StringWriter();
            mol.debug(sw);
            System.out.println(sw.toString());
            SpanningTree sTree = new SpanningTreeImpl(mol);
            System.out.println(sTree.toSMILES());
            Writer w = new OutputStreamWriter(new FileOutputStream(id + ".xml"));
            PMRDelegate.outputEventStream(mol, w, PMRNode.PRETTY, 0);
            w.close();
            w = new OutputStreamWriter(new FileOutputStream(id + "-new.mol"));
            xyz.setOutputCMLMolecule(mol);
            xyz.output(w);
            w.close();
        } catch (Exception e) {
            System.out.println("xyz failed: " + e);
            e.printStackTrace();
            System.exit(0);
        }
    }
} </s>
<s>class temp {    public static void bubbleSort(Drawable[] list) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < list.length - 1; ++i) {
                if (list[i].getSortValue() > list[i + 1].getSortValue()) {
                    Drawable temp = list[i];
                    list[i] = list[i + 1];
                    list[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
} </s>
<s>class temp {    private List<String> readUrl(URL url) throws IOException {
        List<String> lines = new ArrayList<String>();
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        while ((str = in.readLine()) != null) {
            lines.add(str);
        }
        in.close();
        return lines;
    }
} </s>
<s>class temp {    public static boolean copyFile(File sourceFile, File destinationFile) {
        boolean copySuccessfull = false;
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destinationFile).getChannel();
            long transferedBytes = destination.transferFrom(source, 0, source.size());
            copySuccessfull = transferedBytes == source.size() ? true : false;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (source != null) {
                try {
                    source.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (destination != null) {
                try {
                    destination.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return copySuccessfull;
    }
} </s>
<s>class temp {    private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println("Couldn't copy file '" + srcFile + "' to directory '" + destDir + "'");
        }
    }
} </s>
<s>class temp {    public void initialize(IProgressMonitor monitor) throws JETException {
        IProgressMonitor progressMonitor = monitor;
        progressMonitor.beginTask("", 10);
        progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_GeneratingJETEmitterFor_message", new Object[] { getTemplateURI() }));
        final IWorkspace workspace = ResourcesPlugin.getWorkspace();
        IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot());
        try {
            final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader());
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETParsing_message", new Object[] { jetCompiler.getResolvedTemplateURI() }));
            jetCompiler.parse();
            progressMonitor.worked(1);
            String packageName = jetCompiler.getSkeleton().getPackageName();
            if (getTemplateURIPath() != null) {
                URI templateURI = URI.createURI(getTemplateURIPath()[0]);
                URLClassLoader theClassLoader = null;
                if (templateURI.isPlatformResource()) {
                    IProject project = workspace.getRoot().getProject(templateURI.segment(1));
                    if (JETNature.getRuntime(project) != null) {
                        List<URL> urls = new ArrayList<URL>();
                        IJavaProject javaProject = JavaCore.create(project);
                        urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL());
                        for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) {
                            if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {
                                IPath projectPath = classpathEntry.getPath();
                                IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0));
                                IJavaProject otherJavaProject = JavaCore.create(otherProject);
                                urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL());
                            }
                        }
                        theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) {

                            @Override
                            public Class<?> loadClass(String className) throws ClassNotFoundException {
                                try {
                                    return super.loadClass(className);
                                } catch (ClassNotFoundException classNotFoundException) {
                                    return getClassLoader().loadClass(className);
                                }
                            }
                        };
                    }
                } else if (templateURI.isPlatformPlugin()) {
                    final Bundle bundle = Platform.getBundle(templateURI.segment(1));
                    if (bundle != null) {
                        theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) {

                            @Override
                            public Class<?> loadClass(String className) throws ClassNotFoundException {
                                try {
                                    return bundle.loadClass(className);
                                } catch (ClassNotFoundException classNotFoundException) {
                                    return super.loadClass(className);
                                }
                            }
                        };
                    }
                }
                if (theClassLoader != null) {
                    String className = (packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName();
                    if (className.endsWith("_")) {
                        className = className.substring(0, className.length() - 1);
                    }
                    try {
                        Class<?> theClass = theClassLoader.loadClass(className);
                        Class<?> theOtherClass = null;
                        try {
                            theOtherClass = getClassLoader().loadClass(className);
                        } catch (ClassNotFoundException exception) {
                        }
                        if (theClass != theOtherClass) {
                            String methodName = jetCompiler.getSkeleton().getMethodName();
                            Method[] methods = theClass.getDeclaredMethods();
                            for (int i = 0; i < methods.length; ++i) {
                                if (methods[i].getName().equals(methodName)) {
                                    jetEmitter.setMethod(methods[i]);
                                    break;
                                }
                            }
                            return;
                        }
                    } catch (ClassNotFoundException exception) {
                    }
                }
            }
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            jetCompiler.generate(outputStream);
            final InputStream contents = new ByteArrayInputStream(outputStream.toByteArray());
            if (!javaModel.isOpen()) {
                javaModel.open(new SubProgressMonitor(progressMonitor, 1));
            } else {
                progressMonitor.worked(1);
            }
            final IProject project = workspace.getRoot().getProject(jetEmitter.getProjectName());
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETPreparingProject_message", new Object[] { project.getName() }));
            IJavaProject javaProject;
            if (!project.exists()) {
                progressMonitor.subTask("JET creating project " + project.getName());
                project.create(new SubProgressMonitor(progressMonitor, 1));
                progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] { project.getName() }));
                IProjectDescription description = workspace.newProjectDescription(project.getName());
                description.setNatureIds(new String[] { JavaCore.NATURE_ID });
                description.setLocation(null);
                project.open(new SubProgressMonitor(progressMonitor, 1));
                project.setDescription(description, new SubProgressMonitor(progressMonitor, 1));
            } else {
                project.open(new SubProgressMonitor(progressMonitor, 5));
                IProjectDescription description = project.getDescription();
                description.setNatureIds(new String[] { JavaCore.NATURE_ID });
                project.setDescription(description, new SubProgressMonitor(progressMonitor, 1));
            }
            javaProject = JavaCore.create(project);
            List<IClasspathEntry> classpath = new UniqueEList<IClasspathEntry>(Arrays.asList(javaProject.getRawClasspath()));
            for (int i = 0, len = classpath.size(); i < len; i++) {
                IClasspathEntry entry = classpath.get(i);
                if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) {
                    classpath.remove(i);
                }
            }
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETInitializingProject_message", new Object[] { project.getName() }));
            IClasspathEntry classpathEntry = JavaCore.newSourceEntry(new Path("/" + project.getName() + "/src"));
            IClasspathEntry jreClasspathEntry = JavaCore.newContainerEntry(new Path("org.eclipse.jdt.launching.JRE_CONTAINER"));
            classpath.add(classpathEntry);
            classpath.add(jreClasspathEntry);
            classpath.addAll(getClassPathEntries());
            IFolder sourceFolder = project.getFolder(new Path("src"));
            if (!sourceFolder.exists()) {
                sourceFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1));
            }
            IFolder runtimeFolder = project.getFolder(new Path("bin"));
            if (!runtimeFolder.exists()) {
                runtimeFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1));
            }
            javaProject.setRawClasspath(classpath.toArray(new IClasspathEntry[classpath.size()]), new SubProgressMonitor(progressMonitor, 1));
            javaProject.setOutputLocation(new Path("/" + project.getName() + "/bin"), new SubProgressMonitor(progressMonitor, 1));
            javaProject.close();
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETOpeningJavaProject_message", new Object[] { project.getName() }));
            javaProject.open(new SubProgressMonitor(progressMonitor, 1));
            IPackageFragmentRoot[] packageFragmentRoots = javaProject.getPackageFragmentRoots();
            IPackageFragmentRoot sourcePackageFragmentRoot = null;
            for (int j = 0; j < packageFragmentRoots.length; ++j) {
                IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j];
                if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) {
                    sourcePackageFragmentRoot = packageFragmentRoot;
                    break;
                }
            }
            StringTokenizer stringTokenizer = new StringTokenizer(packageName, ".");
            IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);
            subProgressMonitor.beginTask("", stringTokenizer.countTokens() + 4);
            subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_CreateTargetFile_message"));
            IContainer sourceContainer = sourcePackageFragmentRoot == null ? project : (IContainer) sourcePackageFragmentRoot.getCorrespondingResource();
            while (stringTokenizer.hasMoreElements()) {
                String folderName = stringTokenizer.nextToken();
                sourceContainer = sourceContainer.getFolder(new Path(folderName));
                if (!sourceContainer.exists()) {
                    ((IFolder) sourceContainer).create(false, true, new SubProgressMonitor(subProgressMonitor, 1));
                }
            }
            IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java"));
            if (!targetFile.exists()) {
                subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreating_message", new Object[] { targetFile.getFullPath() }));
                targetFile.create(contents, true, new SubProgressMonitor(subProgressMonitor, 1));
            } else {
                subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETUpdating_message", new Object[] { targetFile.getFullPath() }));
                targetFile.setContents(contents, true, true, new SubProgressMonitor(subProgressMonitor, 1));
            }
            subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETBuilding_message", new Object[] { project.getName() }));
            project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, new SubProgressMonitor(subProgressMonitor, 1));
            boolean errors = hasErrors(subProgressMonitor, targetFile);
            if (!errors) {
                subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETLoadingClass_message", new Object[] { jetCompiler.getSkeleton().getClassName() + ".class" }));
                List<URL> urls = new ArrayList<URL>();
                urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL());
                final Set<Bundle> bundles = new HashSet<Bundle>();
                LOOP: for (IClasspathEntry jetEmitterClasspathEntry : jetEmitter.getClasspathEntries()) {
                    IClasspathAttribute[] classpathAttributes = jetEmitterClasspathEntry.getExtraAttributes();
                    if (classpathAttributes != null) {
                        for (IClasspathAttribute classpathAttribute : classpathAttributes) {
                            if (classpathAttribute.getName().equals(CodeGenUtil.EclipseUtil.PLUGIN_ID_CLASSPATH_ATTRIBUTE_NAME)) {
                                Bundle bundle = Platform.getBundle(classpathAttribute.getValue());
                                if (bundle != null) {
                                    bundles.add(bundle);
                                    continue LOOP;
                                }
                            }
                        }
                    }
                    urls.add(new URL("platform:/resource" + jetEmitterClasspathEntry.getPath() + "/"));
                }
                URLClassLoader theClassLoader = new URLClassLoader(urls.toArray(new URL[0]), getClassLoader()) {

                    @Override
                    public Class<?> loadClass(String className) throws ClassNotFoundException {
                        try {
                            return super.loadClass(className);
                        } catch (ClassNotFoundException exception) {
                            for (Bundle bundle : bundles) {
                                try {
                                    return bundle.loadClass(className);
                                } catch (ClassNotFoundException exception2) {
                                }
                            }
                            throw exception;
                        }
                    }
                };
                Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName());
                String methodName = jetCompiler.getSkeleton().getMethodName();
                Method[] methods = theClass.getDeclaredMethods();
                for (int i = 0; i < methods.length; ++i) {
                    if (methods[i].getName().equals(methodName)) {
                        jetEmitter.setMethod(methods[i]);
                        break;
                    }
                }
            }
            subProgressMonitor.done();
        } catch (CoreException exception) {
            throw new JETException(exception);
        } catch (Exception exception) {
            throw new JETException(exception);
        } finally {
            progressMonitor.done();
        }
    }
} </s>
<s>class temp {    public void insertStringInFile(String file, String textToInsert, long fromByte, long toByte) throws Exception {
        String tmpFile = file + ".tmp";
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        long byteCount = 0;
        try {
            in = new BufferedInputStream(new FileInputStream(new File(file)));
            out = new BufferedOutputStream(new FileOutputStream(tmpFile));
            long size = fromByte;
            byte[] buf = null;
            if (size == 0) {
            } else {
                buf = new byte[(int) size];
                int length = -1;
                if ((length = in.read(buf)) != -1) {
                    out.write(buf, 0, length);
                    byteCount = byteCount + length;
                } else {
                    String msg = "Failed to read the first '" + size + "' bytes of file '" + file + "'. This might be a programming error.";
                    this.logger.warning(msg);
                    throw new Exception(msg);
                }
            }
            buf = textToInsert.getBytes();
            int length = buf.length;
            out.write(buf, 0, length);
            byteCount = byteCount + length;
            long skipLength = toByte - fromByte;
            long skippedBytes = in.skip(skipLength);
            if (skippedBytes == -1) {
            } else {
                buf = new byte[4096];
                length = -1;
                while ((length = in.read(buf)) != -1) {
                    out.write(buf, 0, length);
                    byteCount = byteCount + length;
                }
            }
            in.close();
            in = null;
            out.close();
            out = null;
            File fileToDelete = new File(file);
            boolean wasDeleted = fileToDelete.delete();
            if (!wasDeleted) {
                String msg = "Failed to delete the original file '" + file + "' to replace it with the modified file after text insertion.";
                this.logger.warning(msg);
                throw new Exception(msg);
            }
            File fileToRename = new File(tmpFile);
            boolean wasRenamed = fileToRename.renameTo(fileToDelete);
            if (!wasRenamed) {
                String msg = "Failed to rename tmp file '" + tmpFile + "' to the name of the original file '" + file + "'";
                this.logger.warning(msg);
                throw new Exception(msg);
            }
        } catch (Exception e) {
            this.logger.log(Level.WARNING, "Failed to read/write file '" + file + "'.", e);
            throw e;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    this.logger.log(Level.FINEST, "Ignoring error closing input file '" + file + "'.", e);
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    this.logger.log(Level.FINEST, "Ignoring error closing output file '" + tmpFile + "'.", e);
                }
            }
        }
    }
} </s>
<s>class temp {    public void run() throws Exception {
        logger.debug("#run enter");
        PreparedStatement psNextId = null;
        ResultSet rsNextId = null;
        PreparedStatement ps = null;
        try {
            PreparedStatement psCount = connection.prepareStatement(COUNT_ACTIVE_ORDERS);
            psCount.setString(1, login);
            ResultSet rsCount = psCount.executeQuery();
            if (rsCount.next()) {
                Integer count = rsCount.getInt(1);
                if (count > 0) {
                    DBHelper.closeAll(null, rsCount, psCount);
                    throw new RuntimeException("У вас уже есть один активный заказ. Вы не можете создать второй.");
                }
            }
            connection.setAutoCommit(false);
            psNextId = connection.prepareStatement(NEXT_ORDER);
            rsNextId = psNextId.executeQuery();
            if (rsNextId.next()) {
                orderId = rsNextId.getInt(1);
            }
            rsNextId.close();
            psNextId.close();
            logger.info("#run orderId  = " + orderId);
            ps = connection.prepareStatement(INSERT_ORDER);
            ps.setInt(1, orderId);
            if (order.getCustomerId() != null) {
                ps.setInt(2, order.getCustomerId());
            } else {
                ps.setNull(2, Types.INTEGER);
            }
            ps.setString(3, order.getSellerLogin());
            ps.executeUpdate();
            ps.close();
            logger.info("#run order insert OK");
            Iterator<OrderLine> lines = order.getLines().iterator();
            while (lines.hasNext()) {
                OrderLine line = lines.next();
                CreateOrderLineAction action = new CreateOrderLineAction();
                action.execute(connection, orderId, line);
            }
            connection.commit();
        } catch (SQLException ex) {
            logger.error("SQLException", ex);
            connection.rollback();
            throw new Exception("Не удалось создать заказ. Ошибка : " + ex.getMessage());
        } finally {
            connection.setAutoCommit(true);
        }
        logger.debug("#run exit");
    }
} </s>
<s>class temp {    public ImageData getJPEGDiagram() {
        Shell shell = new Shell();
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new CsdeEditPartFactory());
        viewer.setContents(getDiagram());
        viewer.flush();
        LayerManager lm = (LayerManager) viewer.getEditPartRegistry().get(LayerManager.ID);
        IFigure fig = lm.getLayer(LayerConstants.PRINTABLE_LAYERS);
        Dimension d = fig.getSize();
        Image image = new Image(null, d.width, d.height);
        GC tmpGC = new GC(image);
        SWTGraphics graphics = new SWTGraphics(tmpGC);
        fig.paint(graphics);
        shell.dispose();
        return image.getImageData();
    }
} </s>
<s>class temp {    public void run(Preprocessor pp) throws SijappException {
        for (int i = 0; i < this.filenames.length; i++) {
            File srcFile = new File(this.srcDir, this.filenames[i]);
            BufferedReader reader;
            try {
                InputStreamReader isr = new InputStreamReader(new FileInputStream(srcFile), "CP1251");
                reader = new BufferedReader(isr);
            } catch (Exception e) {
                throw (new SijappException("File " + srcFile.getPath() + " could not be read"));
            }
            File destFile = new File(this.destDir, this.filenames[i]);
            BufferedWriter writer;
            try {
                (new File(destFile.getParent())).mkdirs();
                OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(destFile), "CP1251");
                writer = new BufferedWriter(osw);
            } catch (Exception e) {
                throw (new SijappException("File " + destFile.getPath() + " could not be written"));
            }
            try {
                pp.run(reader, writer);
            } catch (SijappException e) {
                try {
                    reader.close();
                } catch (IOException f) {
                }
                try {
                    writer.close();
                } catch (IOException f) {
                }
                try {
                    destFile.delete();
                } catch (SecurityException f) {
                }
                throw (new SijappException(srcFile.getPath() + ":" + e.getMessage()));
            }
            try {
                reader.close();
            } catch (IOException e) {
            }
            try {
                writer.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format("%1$032X", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return "";
    }
} </s>
<s>class temp {    private synchronized void resetUserDictionary() {
        if (this.fChecker == null) return;
        if (this.fUserDictionary != null) {
            this.fChecker.removeDictionary(this.fUserDictionary);
            this.fUserDictionary.unload();
            this.fUserDictionary = null;
        }
        IPreferenceStore store = SpellActivator.getDefault().getPreferenceStore();
        String filePath = store.getString(PreferenceConstants.SPELLING_USER_DICTIONARY);
        IStringVariableManager variableManager = VariablesPlugin.getDefault().getStringVariableManager();
        try {
            filePath = variableManager.performStringSubstitution(filePath);
        } catch (CoreException e) {
            SpellActivator.log(e);
            return;
        }
        if (filePath.length() > 0) {
            try {
                File file = new File(filePath);
                if (!file.exists() && !file.createNewFile()) return;
                final URL url = new URL("file", null, filePath);
                InputStream stream = url.openStream();
                if (stream != null) {
                    try {
                        this.fUserDictionary = new PersistentSpellDictionary(url);
                        this.fChecker.addDictionary(this.fUserDictionary);
                    } finally {
                        stream.close();
                    }
                }
            } catch (MalformedURLException exception) {
            } catch (IOException exception) {
            }
        }
    }
} </s>
<s>class temp {    public void transform(File inputMatrixFile, MatrixIO.Format inputFormat, File outputMatrixFile) throws IOException {
        FileChannel original = new FileInputStream(inputMatrixFile).getChannel();
        FileChannel copy = new FileOutputStream(outputMatrixFile).getChannel();
        copy.transferFrom(original, 0, original.size());
        original.close();
        copy.close();
    }
} </s>
<s>class temp {    public long getMD5Hash(String str) {
        MessageDigest m = null;
        try {
            m = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        m.update(str.getBytes(), 0, str.length());
        return new BigInteger(1, m.digest()).longValue();
    }
} </s>
<s>class temp {    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println("\n" + src + ": not an ACRNEMA stream!");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
} </s>
<s>class temp {    public Void doInBackground() {
        Transferable clipData = clipboard.getContents(this);
        File file = new File("Videos/" + (mp3.getArtist() + " - " + mp3.getTitle() + ".jpg").replace("/", "").replace("\\", ""));
        try {
            String test = (String) (clipData.getTransferData(DataFlavor.stringFlavor));
            String testje = test.toLowerCase();
            if (testje.indexOf(".flv") > 0 || testje.indexOf(".wmv") > 0 || testje.indexOf(".mpg") > 0 || testje.indexOf(".mpeg") > 0 || testje.indexOf(".avi") > 0 || testje.indexOf(".avi") > 0 || testje.indexOf(".divx") > 0 || testje.indexOf(".avi") > 0) {
                URL url = new URL(test);
                (new File("Videos/")).mkdirs();
                System.out.println("Saving video to " + file);
                try {
                    URLConnection urlC = url.openConnection();
                    InputStream is = url.openStream();
                    System.out.flush();
                    FileOutputStream fos = null;
                    fos = new FileOutputStream(file);
                    byte[] buf = new byte[32768];
                    int len;
                    while ((len = is.read(buf)) > 0) {
                        fos.write(buf, 0, len);
                    }
                    is.close();
                    fos.close();
                } catch (Exception e) {
                    System.out.println("Error saving video from url: " + url);
                    mp3.setVideo(file.getAbsolutePath());
                }
            }
        } catch (Exception ex) {
            System.out.println("not a valid video file");
            ex.printStackTrace();
        }
        return null;
    }
} </s>
<s>class temp {    protected void createDb() {
        File rootFolder = new File(dbFolderPath);
        if (!rootFolder.exists()) {
            rootFolder.mkdirs();
        }
        openConnection();
        try {
            Statement stat = connection.createStatement();
            ResourceBundle bundle = ResourceBundle.getBundle("uTaggerDb");
            for (String key : bundle.keySet()) {
                stat.executeUpdate(bundle.getString(key));
            }
            commit();
        } catch (SQLException e) {
            LOG.warn(e);
            rollback();
        }
    }
} </s>
<s>class temp {    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println("reading " + inFile + "...");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println("writing " + outFile + "...");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println("done!");
    }
} </s>
<s>class temp {    private void initialize(OAIRepository repo, String u, String v, String params) throws OAIException {
        oParent = repo;
        strVerb = v;
        strBaseURL = u;
        strParams = params;
        strResumptionToken = "";
        iResumptionCount = 0;
        boolInitialized = false;
        boolValidResponse = false;
        iIndex = 1;
        iCount = -1;
        iCursor = -1;
        iRealCursor = -1;
        iCompleteListSize = -1;
        if (!strVerb.equals("ListIdentifiers") && !strVerb.equals("ListMetadataFormats") && !strVerb.equals("ListRecords") && !strVerb.equals("ListSets")) {
            throw new OAIException(OAIException.INVALID_VERB_ERR, "Invalid verb");
        }
        if (strBaseURL.length() == 0) {
            throw new OAIException(OAIException.NO_BASE_URL_ERR, "No baseURL");
        }
        if (params.length() > 0) {
            if (params.charAt(0) != '&') {
                params = "&" + params;
            }
        }
        try {
            URL url = new URL(strBaseURL + "?verb=" + strVerb + params);
            HttpURLConnection http = (HttpURLConnection) url.openConnection();
            http = oParent.frndTrySend(http);
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            docFactory.setNamespaceAware(true);
            if (oParent.getValidation() == OAIRepository.VALIDATION_VERY_STRICT) {
                docFactory.setValidating(true);
            } else {
                docFactory.setValidating(false);
            }
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            try {
                xml = docBuilder.parse(http.getInputStream());
                boolValidResponse = true;
            } catch (IllegalArgumentException iae) {
                throw new OAIException(OAIException.CRITICAL_ERR, iae.getMessage());
            } catch (SAXException se) {
                if (oParent.getValidation() != OAIRepository.VALIDATION_LOOSE) {
                    throw new OAIException(OAIException.XML_PARSE_ERR, se.getMessage() + " Try loose validation.");
                } else {
                    try {
                        http.disconnect();
                        url = new URL(strBaseURL + "?verb=" + strVerb + params);
                        http = (HttpURLConnection) url.openConnection();
                        http = oParent.frndTrySend(http);
                        xml = docBuilder.parse(priCreateDummyResponse(http.getInputStream()));
                    } catch (SAXException se2) {
                        throw new OAIException(OAIException.XML_PARSE_ERR, se2.getMessage());
                    }
                }
            }
            namespaceNode = xml.createElement(strVerb);
            namespaceNode.setAttribute("xmlns:oai", OAIRepository.XMLNS_OAI + strVerb);
            namespaceNode.setAttribute("xmlns:dc", OAIRepository.XMLNS_DC);
            PrefixResolverDefault prefixResolver = new PrefixResolverDefault(namespaceNode);
            XPath xpath = new XPath("//oai:" + strVerb + "/oai:" + priGetMainNodeName(), null, prefixResolver, XPath.SELECT, null);
            XPathContext xpathSupport = new XPathContext();
            int ctxtNode = xpathSupport.getDTMHandleFromNode(xml);
            XObject list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
            Node node = list.nodeset().nextNode();
            if (node == null) {
                namespaceNode.setAttribute("xmlns:oai", OAIRepository.XMLNS_OAI_2_0);
                prefixResolver = new PrefixResolverDefault(namespaceNode);
                xpath = new XPath("/oai:OAI-PMH", null, prefixResolver, XPath.SELECT, null);
                list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                node = list.nodeset().nextNode();
                if (node == null) {
                    namespaceNode.setAttribute("xmlns:oai", OAIRepository.XMLNS_OAI_1_0 + strVerb);
                } else {
                    xpath = new XPath("oai:OAI-PMH/oai:error", null, prefixResolver, XPath.SELECT, null);
                    list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                    NodeList nl = list.nodelist();
                    if (nl.getLength() > 0) {
                        oParent.frndSetErrors(nl);
                        throw new OAIException(OAIException.OAI_ERR, oParent.getLastOAIError().getCode() + ": " + oParent.getLastOAIError().getReason());
                    }
                }
            }
            xpath = new XPath("//oai:" + strVerb + "/oai:" + priGetMainNodeName(), null, prefixResolver, XPath.SELECT, null);
            list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
            nodeList = list.nodelist();
            boolInitialized = true;
            oParent.frndSetNamespaceNode(namespaceNode);
            xpath = new XPath("//oai:requestURL | //oai:request", null, prefixResolver, XPath.SELECT, null);
            node = xpath.execute(xpathSupport, ctxtNode, prefixResolver).nodeset().nextNode();
            if (node != null) {
                oParent.frndSetRequest(node);
            }
            oParent.frndSetResponseDate(getResponseDate());
            docFactory = null;
            docBuilder = null;
            url = null;
            prefixResolver = null;
            xpathSupport = null;
            xpath = null;
        } catch (TransformerException te) {
            throw new OAIException(OAIException.CRITICAL_ERR, te.getMessage());
        } catch (MalformedURLException mue) {
            throw new OAIException(OAIException.CRITICAL_ERR, mue.getMessage());
        } catch (FactoryConfigurationError fce) {
            throw new OAIException(OAIException.CRITICAL_ERR, fce.getMessage());
        } catch (ParserConfigurationException pce) {
            throw new OAIException(OAIException.CRITICAL_ERR, pce.getMessage());
        } catch (IOException ie) {
            throw new OAIException(OAIException.CRITICAL_ERR, ie.getMessage());
        }
    }
} </s>
<s>class temp {    public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {
        String sessionUrl = getSessionTokenUrl(protocol, domain);
        URL url = new URL(sessionUrl);
        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
        String header = formAuthorizationHeader(onetimeUseToken, key, url, "GET");
        httpConn.setRequestProperty("Authorization", header);
        if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {
            throw new AuthenticationException(httpConn.getResponseCode() + ": " + httpConn.getResponseMessage());
        }
        String body = CharStreams.toString(new InputStreamReader(httpConn.getInputStream(), Charsets.ISO_8859_1));
        Map<String, String> parsedTokens = StringUtil.string2Map(body, "\n", "=", true);
        parsedTokens = StringUtil.lowercaseKeys(parsedTokens);
        return parsedTokens.get("token");
    }
} </s>
<s>class temp {    public static Version getWebRelease(String url) {
        InputStream is = null;
        try {
            is = new URL(url).openStream();
            Reader reader = new InputStreamReader(new BufferedInputStream(is), "UTF-8");
            String word = findWord(reader, "<description>Release:", "</description>").trim();
            if (!isValid(word)) {
                word = "0";
            }
            return new Version(word);
        } catch (Throwable ex) {
            LOGGER.log(Level.WARNING, null, ex);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException ex) {
                    LOGGER.log(Level.SEVERE, null, ex);
                }
            }
        }
        return null;
    }
} </s>
<s>class temp {    @Override
    public byte[] read(String path) throws PersistenceException {
        path = fmtPath(path);
        try {
            S3Object fileObj = s3Service.getObject(bucketObj, path);
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            IOUtils.copy(fileObj.getDataInputStream(), out);
            return out.toByteArray();
        } catch (Exception e) {
            throw new PersistenceException("fail to read s3 file - " + path, e);
        }
    }
} </s>
<s>class temp {    @Override
    public String fetchElectronicEdition(Publication pub) {
        final String url = pub.getEe();
        HttpMethod method = null;
        String responseBody = "";
        method = new GetMethod(url);
        method.setFollowRedirects(true);
        try {
            if (StringUtils.isNotBlank(method.getURI().getScheme())) {
                InputStream is = null;
                StringWriter writer = new StringWriter();
                try {
                    client.executeMethod(method);
                    Header contentType = method.getResponseHeader("Content-Type");
                    if (contentType != null && StringUtils.isNotBlank(contentType.getValue()) && contentType.getValue().indexOf("text/html") >= 0) {
                        is = method.getResponseBodyAsStream();
                        IOUtils.copy(is, writer);
                        responseBody = writer.toString();
                    } else {
                        logger.info("ignoring non-text/html response from page: " + url + " content-type:" + contentType);
                    }
                } catch (HttpException he) {
                    logger.error("Http error connecting to '" + url + "'");
                    logger.error(he.getMessage());
                } catch (IOException ioe) {
                    logger.error("Unable to connect to '" + url + "'");
                } finally {
                    IOUtils.closeQuietly(is);
                    IOUtils.closeQuietly(writer);
                }
            }
        } catch (URIException e) {
            logger.error(e);
        } finally {
            method.releaseConnection();
        }
        return responseBody;
    }
} </s>
<s>class temp {    public void loadSample(String uid, URL url) throws Exception {
        AudioInputStream input = AudioSystem.getAudioInputStream(url.openStream());
        Clip line = null;
        DataLine.Info info = new DataLine.Info(Clip.class, input.getFormat());
        if (!AudioSystem.isLineSupported(info)) {
            throw new javax.sound.sampled.UnsupportedAudioFileException(url.toExternalForm());
        }
        line = (Clip) AudioSystem.getLine(info);
        line.open(input);
        samples.put(uid, line);
    }
} </s>
<s>class temp {    public void startStreaming(final String mediaUrl) throws IOException {
        final String TAG = "startStreaming";
        int bitrate = 56;
        sendMessage(PlayListTab.CHECKRIORITY);
        sendMessage(PlayListTab.RAISEPRIORITY);
        sendMessage(PlayListTab.START);
        try {
            url = new URL(mediaUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setReadTimeout(1000 * 20);
            urlConn.setConnectTimeout(1000 * 5);
            String ctype = urlConn.getContentType();
            if (ctype == null) {
                ctype = "";
            } else {
                ctype = ctype.toLowerCase();
            }
            Log.d(TAG, "Content Type: " + ctype);
            if (ctype.contains(AUDIO_MPEG) || ctype.equals("")) {
                String temp = urlConn.getHeaderField(BITERATE_HEADER);
                Log.d(TAG, "Bitrate: " + temp);
                if (temp != null) {
                    bitrate = new Integer(temp).intValue();
                }
            } else {
                Log.e(TAG, "Does not look like we can play this audio type: " + ctype);
                Log.e(TAG, "Or we could not connect to audio");
                sendMessage(PlayListTab.TROUBLEWITHAUDIO);
                stop();
                return;
            }
        } catch (IOException ioe) {
            Log.e(TAG, "Could not connect to " + mediaUrl);
            sendMessage(PlayListTab.TROUBLEWITHAUDIO);
            stop();
            return;
        }
        if (regularStream) {
            Log.d(TAG, "Setup regular stream");
            Runnable r = new Runnable() {

                public void run() {
                    try {
                        downloadAudio(mediaUrl);
                    } catch (IOException e) {
                        Log.e(TAG, "Unable to initialize the MediaPlayer for Audio Url = " + mediaUrl, e);
                        sendMessage(PlayListTab.TROUBLEWITHAUDIO);
                        stop();
                        return;
                    }
                }
            };
            Thread t = new Thread(r);
            t.start();
        } else {
            Log.d(TAG, "Setup incremental stream");
            INTIAL_KB_BUFFER = bitrate * SECONDS / BIT;
            Runnable r = new Runnable() {

                public void run() {
                    try {
                        downloadAudioIncrement(mediaUrl);
                    } catch (IOException e) {
                        Log.e(TAG, "Unable to initialize the MediaPlayer for Audio Url = " + mediaUrl, e);
                        sendMessage(PlayListTab.TROUBLEWITHAUDIO);
                        stop();
                        return;
                    }
                }
            };
            Thread t = new Thread(r);
            t.start();
        }
    }
} </s>
<s>class temp {    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
} </s>
<s>class temp {    @Override
    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
        final String url = req.getParameter("url");
        if (!isAllowed(url)) {
            resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        final HttpClient client = new HttpClient();
        client.getParams().setVersion(HttpVersion.HTTP_1_0);
        final PostMethod method = new PostMethod(url);
        method.getParams().setVersion(HttpVersion.HTTP_1_0);
        method.setFollowRedirects(false);
        final RequestEntity entity = new InputStreamRequestEntity(req.getInputStream());
        method.setRequestEntity(entity);
        try {
            final int statusCode = client.executeMethod(method);
            if (statusCode != -1) {
                InputStream is = null;
                ServletOutputStream os = null;
                try {
                    is = method.getResponseBodyAsStream();
                    try {
                        os = resp.getOutputStream();
                        IOUtils.copy(is, os);
                    } finally {
                        if (os != null) {
                            try {
                                os.flush();
                            } catch (IOException ignored) {
                            }
                        }
                    }
                } catch (IOException ioex) {
                    final String message = ioex.getMessage();
                    if (!"chunked stream ended unexpectedly".equals(message)) {
                        throw ioex;
                    }
                } finally {
                    IOUtils.closeQuietly(is);
                }
            }
        } finally {
            method.releaseConnection();
        }
    }
} </s>
<s>class temp {    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
} </s>
<s>class temp {    public SimpleParser(String filepath) throws Exception {
        this.path = filepath;
        InputStream is = null;
        try {
            if (this.path.indexOf("http") == 0) {
                URL url = new URL(this.path);
                is = url.openStream();
            } else if (this.path.indexOf("<?xml") == 0) {
                is = new ByteArrayInputStream(filepath.getBytes(encoding));
            } else {
                File f = new File(this.path);
                if (!f.exists()) {
                    setError("File not found : " + this.path);
                } else {
                    is = new FileInputStream(f);
                }
            }
            if (is != null) {
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                doc = dBuilder.parse(is);
                doc.getDocumentElement().normalize();
            }
        } catch (Exception ex) {
            Malgn.errorLog("{SimpleParser.constructor} Path:" + filepath + " " + ex.getMessage());
            setError("Parser Error : " + ex.getMessage());
        } finally {
            if (is != null) is.close();
        }
    }
} </s>
<s>class temp {    private Element makeRequest(String link) {
        try {
            URL url = new URL(link);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();
            InputStream in = conn.getInputStream();
            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            Document document = builder.parse(in);
            Element element = document.getDocumentElement();
            element.normalize();
            if (checkRootTag(element)) {
                return element;
            } else {
                return null;
            }
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
            return null;
        } catch (SAXException e) {
            e.printStackTrace();
            return null;
        }
    }
} </s>
<s>class temp {    public void importSequences() {
        names = new ArrayList<String>();
        sequences = new ArrayList<String>();
        try {
            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();
            ImportHelper helper = new ImportHelper(new InputStreamReader(is));
            int ch = helper.read();
            while (ch != '>') {
                ch = helper.read();
            }
            do {
                String line = helper.readLine();
                StringTokenizer tokenizer = new StringTokenizer(line, " \t");
                String name = tokenizer.nextToken();
                StringBuffer seq = new StringBuffer();
                helper.readSequence(seq, ">", Integer.MAX_VALUE, "-", "?", "", null);
                ch = helper.getLastDelimiter();
                names.add(name);
                sequences.add(seq.toString());
            } while (ch == '>');
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (EOFException e) {
        } catch (IOException e) {
        }
    }
} </s>
<s>class temp {    public AudioFileFormat getAudioFileFormat(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream urlStream = url.openStream();
        AudioFileFormat fileFormat = null;
        try {
            fileFormat = getFMT(urlStream, false);
        } finally {
            urlStream.close();
        }
        return fileFormat;
    }
} </s>
<s>class temp {    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream urlStream = url.openStream();
        AudioFileFormat fileFormat = null;
        try {
            fileFormat = getFMT(urlStream, false);
        } finally {
            if (fileFormat == null) {
                urlStream.close();
            }
        }
        return new AudioInputStream(urlStream, fileFormat.getFormat(), fileFormat.getFrameLength());
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    private String getHash(String string) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        return str;
    }
} </s>
<s>class temp {    public CmsSetupTestResult execute(CmsSetupBean setupBean) {
        CmsSetupTestResult testResult = new CmsSetupTestResult(this);
        String basePath = setupBean.getWebAppRfsPath();
        if (!basePath.endsWith(File.separator)) {
            basePath += File.separator;
        }
        File file1;
        Random rnd = new Random();
        do {
            file1 = new File(basePath + "test" + rnd.nextInt(1000));
        } while (file1.exists());
        boolean success = false;
        try {
            file1.createNewFile();
            FileWriter fw = new FileWriter(file1);
            fw.write("aA1");
            fw.close();
            success = true;
            FileReader fr = new FileReader(file1);
            success = success && (fr.read() == 'a');
            success = success && (fr.read() == 'A');
            success = success && (fr.read() == '1');
            success = success && (fr.read() == -1);
            fr.close();
            success = file1.delete();
            success = !file1.exists();
        } catch (Exception e) {
            success = false;
        }
        if (!success) {
            testResult.setRed();
            testResult.setInfo("OpenCms cannot be installed without read and write privileges for path " + basePath + "! Please check you are running your servlet container with the right user and privileges.");
            testResult.setHelp("Not enough permissions to create/read/write a file");
            testResult.setResult(RESULT_FAILED);
        } else {
            testResult.setGreen();
            testResult.setResult(RESULT_PASSED);
        }
        return testResult;
    }
} </s>
<s>class temp {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter("edit") != null) {
            try {
                User cu = (User) request.getSession().getAttribute("currentuser");
                UserDetails ud = cu.getUserDetails();
                String returnTo = "editprofile.jsp";
                if (!request.getParameter("password").equals("")) {
                    String password = request.getParameter("password");
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    md.update(new String(password).getBytes());
                    byte[] hash = md.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    cu.setClientPassword(pass);
                }
                ud.setFirstName(request.getParameter("fname"));
                ud.setLastName(request.getParameter("lname"));
                ud.setEmailAddress(request.getParameter("email"));
                ud.setAddress(request.getParameter("address"));
                ud.setZipcode(request.getParameter("zipcode"));
                ud.setTown(request.getParameter("town"));
                ud.setCountry(request.getParameter("country"));
                ud.setTrackingColor(request.getParameter("input1"));
                String vis = request.getParameter("visibility");
                if (vis.equals("self")) {
                    cu.setVisibility(0);
                } else if (vis.equals("friends")) {
                    cu.setVisibility(1);
                } else if (vis.equals("all")) {
                    cu.setVisibility(2);
                } else {
                    response.sendRedirect("error.jsp?id=8");
                }
                em.getTransaction().begin();
                em.persist(cu);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect("error.jsp?id=5");
            }
            return;
        }
    }
} </s>
<s>class temp {    public void loadProperties() {
        try {
            java.util.Properties props = new java.util.Properties();
            java.net.URL url = ClassLoader.getSystemResource("env.properties");
            props.load(url.openStream());
            this.proxyCertificatePath = props.getProperty("proxy.certificate.path");
            this.dummyFileDirName = props.getProperty("delete.dummyFileDirName");
            this.idleTimeTestDelay = new Integer(props.getProperty("idleTimeTestDelaySeconds"));
            if (props.getProperty("gridftp.timeoutMilliSecs") != null) {
                this.gridftpTimeoutMilliSecs = new Integer(props.getProperty("gridftp.timeoutMilliSecs").trim());
            }
            this.assertContentInWriteTests = new Boolean(props.getProperty("assertContentInWriteTests"));
            this.gridftpHost1 = props.getProperty("gridftp.host1");
            this.gridftpPort1 = new Integer(props.getProperty("gridftp.port1"));
            this.gridftpHost2 = props.getProperty("gridftp.host2");
            this.gridftpPort2 = new Integer(props.getProperty("gridftp.port2"));
            this.srbGsiHost = props.getProperty("srb.gsi.host");
            this.srbGsiPort = new Integer(props.getProperty("srb.gsi.port"));
            this.srbGsiPortMin = new Integer(props.getProperty("srb.gsi.port.min"));
            this.srbGsiPortMax = new Integer(props.getProperty("srb.gsi.port.max"));
            this.srbGsiDefaultResource = props.getProperty("srb.gsi.defaultResource");
            this.srbEncryptHost = props.getProperty("srb.encrypt.host");
            this.srbEncryptPort = new Integer(props.getProperty("srb.encrypt.port"));
            this.srbEncryptPortMin = new Integer(props.getProperty("srb.encrypt.port.min"));
            this.srbEncryptPortMax = new Integer(props.getProperty("srb.encrypt.port.max"));
            this.srbEncryptDefaultResource = props.getProperty("srb.encrypt.defaultResource");
            this.srbEncryptHomeDirectory = props.getProperty("srb.encrypt.homeDirectory");
            this.srbEncryptMcatZone = props.getProperty("srb.encrypt.mcatZone");
            this.srbEncryptMdasDomainName = props.getProperty("srb.encrypt.mdasDomainName");
            this.srbEncryptUsername = props.getProperty("srb.encrypt.username");
            this.srbEncryptPassword = props.getProperty("srb.encrypt.password");
            this.sftpHost = props.getProperty("sftp.host");
            this.sftpPort = new Integer(props.getProperty("sftp.port"));
            this.sftpPath = props.getProperty("sftp.path");
            this.sftpUsername = props.getProperty("sftp.username");
            this.sftpPassword = props.getProperty("sftp.password");
            if (props.getProperty("sftp.timeoutMilliSecs") != null) {
                this.sftpTimeoutMilliSecs = new Integer(props.getProperty("sftp.timeoutMilliSecs").trim());
            }
            irodsEncryptHost = props.getProperty("irods.encrypt.host");
            irodsEncryptPort = new Integer(props.getProperty("irods.encrypt.port"));
            irodsEncryptResource = props.getProperty("irods.encrypt.defaultResource");
            irodsEncryptHomeDirectory = props.getProperty("irods.encrypt.homeDirectory");
            irodsEncryptZone = props.getProperty("irods.encrypt.zone");
            irodsEncryptUsername = props.getProperty("irods.encrypt.username");
            irodsEncryptPassword = props.getProperty("irods.encrypt.password");
            irodsGsiHost = props.getProperty("irods.gsi.host");
            irodsGsiPort = new Integer(props.getProperty("irods.gsi.port"));
            irodsGsiZone = props.getProperty("irods.gsi.zone");
            srbQueryTimeout = new Integer(props.getProperty("srb.query.timeout"));
            this.ftpUri = props.getProperty("ftp.uri");
            this.httpUri = props.getProperty("http.uri");
            this.httpProxy = props.getProperty("http.proxy");
            this.httpPort = new Integer(props.getProperty("http.port"));
            this.fileUri = props.getProperty("file.uri");
            java.net.URI tempUri = new java.net.URI(this.fileUri);
            File f = new File(tempUri);
            if (!f.exists()) {
                String temp = System.getProperty("java.io.tmpdir");
                System.out.println("Cannot list [" + fileUri + "] listing java.io.tmpdir instead [" + temp + "]");
                this.fileUri = temp;
            }
            useSrbGsiInFsCopyTest = new Boolean(props.getProperty("srb.gsi.use.in.fs.copy.test"));
            useSrbEncryptInFsCopyTest = new Boolean(props.getProperty("srb.encrypt.use.in.fs.copy.test"));
            useGridftpHost1InFsCopyTest = new Boolean(props.getProperty("gridftp.host1.use.in.fs.copy.test"));
            useGridftpHost2InFsCopyTest = new Boolean(props.getProperty("gridftp.host2.use.in.fs.copy.test"));
            useSftpInFsCopyTest = new Boolean(props.getProperty("sftp.use.in.fs.copy.test"));
            useLocalFileInFsCopyTest = new Boolean(props.getProperty("file.use.in.fs.copy.test"));
            useIrodsGsiCopyTest = new Boolean(props.getProperty("irods.gsi.use.in.fs.copy.test"));
            useIrodsEncryptCopyTest = new Boolean(props.getProperty("irods.encrypt.use.in.fs.copy.test"));
            assertNotNull(this.proxyCertificatePath);
            assertNotNull(this.dummyFileDirName);
            assertNotNull(this.idleTimeTestDelay);
            assertNotNull(this.ftpUri);
            assertNotNull(this.httpUri);
        } catch (Exception ex) {
            Logger.getLogger(AbstractTestClass.class.getName()).log(Level.SEVERE, null, ex);
            fail("Unable to locate and load 'testsettings.properties' file in source " + ex);
        }
    }
} </s>
<s>class temp {    public void register(URL codeBase, String filePath) throws Exception {
        Properties properties = new Properties();
        URL url = new URL(codeBase + filePath);
        properties.load(url.openStream());
        initializeContext(codeBase, properties);
    }
} </s>
<s>class temp {    private void renameTo(File from, File to) {
        if (!from.exists()) return;
        if (to.exists()) to.delete();
        boolean worked = false;
        try {
            worked = from.renameTo(to);
        } catch (Exception e) {
            database.logError(this, "" + e, null);
        }
        if (!worked) {
            database.logWarning(this, "Could not rename GEDCOM to " + to.getAbsolutePath(), null);
            try {
                to.delete();
                final FileReader in = new FileReader(from);
                final FileWriter out = new FileWriter(to);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
                from.delete();
            } catch (Exception e) {
                database.logError(this, "" + e, null);
            }
        }
    }
} </s>
<s>class temp {    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    public static String getStringFromURL(URL url) {
        try {
            if (url == null) {
                return null;
            }
            URLConnection conn = url.openConnection();
            conn.connect();
            if (conn instanceof HttpURLConnection) {
                int status = ((HttpURLConnection) conn).getResponseCode();
                if (status != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            int available = conn.getContentLength();
            InputStream is = conn.getInputStream();
            byte buffer[] = new byte[available];
            int pos = 0;
            while (available > 0) {
                int amount = is.read(buffer, pos, available);
                available -= amount;
                pos += amount;
            }
            is.close();
            String tmp = new String(buffer);
            return tmp;
        } catch (Exception ex) {
            System.out.println(ex);
            return "";
        }
    }
} </s>
<s>class temp {    public static void copyZip() {
        InputStream is;
        OutputStream os;
        String javacZip = "";
        try {
            if ("windows".equalsIgnoreCase(Compilador.getSo())) {
                javacZip = "javacWin.zip";
                is = UnZip.class.getResourceAsStream("javacWin.zip");
            } else if ("linux".equalsIgnoreCase(Compilador.getSo())) {
                javacZip = "javacLinux.zip";
                is = UnZip.class.getResourceAsStream("javacLinux.zip");
            }
            is = UnZip.class.getResourceAsStream(javacZip);
            File tempZip = File.createTempFile("tempJavacJTraductor", ".zip");
            tempZip.mkdir();
            tempZip.deleteOnExit();
            os = FileUtils.openOutputStream(tempZip);
            IOUtils.copy(is, os);
            is.close();
            os.close();
            extractZip(tempZip.getPath());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(PseutemView.mainPanel, "Error al copiar los archivos temporales necesarios para ejecutar el programa:\n\n" + ex, "Error copiando.", JOptionPane.ERROR_MESSAGE);
        }
    }
} </s>
<s>class temp {        protected void download() {
            boolean connected = false;
            String outcome = "";
            try {
                InputStream is = null;
                try {
                    SESecurityManager.setThreadPasswordHandler(this);
                    synchronized (this) {
                        if (destroyed) {
                            return;
                        }
                        scratch_file = AETemporaryFileHandler.createTempFile();
                        raf = new RandomAccessFile(scratch_file, "rw");
                    }
                    HttpURLConnection connection;
                    int response;
                    connection = (HttpURLConnection) original_url.openConnection();
                    connection.setRequestProperty("Connection", "Keep-Alive");
                    connection.setRequestProperty("User-Agent", user_agent);
                    int time_remaining = listener.getPermittedTime();
                    if (time_remaining > 0) {
                        Java15Utils.setConnectTimeout(connection, time_remaining);
                    }
                    connection.connect();
                    time_remaining = listener.getPermittedTime();
                    if (time_remaining < 0) {
                        throw (new IOException("Timeout during connect"));
                    }
                    Java15Utils.setReadTimeout(connection, time_remaining);
                    connected = true;
                    response = connection.getResponseCode();
                    last_response = response;
                    last_response_retry_after_secs = -1;
                    if (response == 503) {
                        long retry_after_date = new Long(connection.getHeaderFieldDate("Retry-After", -1L)).longValue();
                        if (retry_after_date <= -1) {
                            last_response_retry_after_secs = connection.getHeaderFieldInt("Retry-After", -1);
                        } else {
                            last_response_retry_after_secs = (int) ((retry_after_date - System.currentTimeMillis()) / 1000);
                            if (last_response_retry_after_secs < 0) {
                                last_response_retry_after_secs = -1;
                            }
                        }
                    }
                    is = connection.getInputStream();
                    if (response == HttpURLConnection.HTTP_ACCEPTED || response == HttpURLConnection.HTTP_OK || response == HttpURLConnection.HTTP_PARTIAL) {
                        byte[] buffer = new byte[64 * 1024];
                        int requests_outstanding = 1;
                        while (!destroyed) {
                            int permitted = listener.getPermittedBytes();
                            if (requests_outstanding == 0 || permitted < 1) {
                                permitted = 1;
                                Thread.sleep(100);
                            }
                            int len = is.read(buffer, 0, Math.min(permitted, buffer.length));
                            if (len <= 0) {
                                break;
                            }
                            synchronized (this) {
                                try {
                                    raf.write(buffer, 0, len);
                                } catch (Throwable e) {
                                    outcome = "Write failed: " + e.getMessage();
                                    ExternalSeedException error = new ExternalSeedException(outcome, e);
                                    error.setPermanentFailure(true);
                                    throw (error);
                                }
                            }
                            listener.reportBytesRead(len);
                            requests_outstanding = checkRequests();
                        }
                        checkRequests();
                    } else {
                        outcome = "Connection failed: " + connection.getResponseMessage();
                        ExternalSeedException error = new ExternalSeedException(outcome);
                        error.setPermanentFailure(true);
                        throw (error);
                    }
                } catch (IOException e) {
                    if (con_fail_is_perm_fail && !connected) {
                        outcome = "Connection failed: " + e.getMessage();
                        ExternalSeedException error = new ExternalSeedException(outcome);
                        error.setPermanentFailure(true);
                        throw (error);
                    } else {
                        outcome = "Connection failed: " + Debug.getNestedExceptionMessage(e);
                        if (last_response_retry_after_secs >= 0) {
                            outcome += ", Retry-After: " + last_response_retry_after_secs + " seconds";
                        }
                        ExternalSeedException excep = new ExternalSeedException(outcome, e);
                        if (e instanceof FileNotFoundException) {
                            excep.setPermanentFailure(true);
                        }
                        throw (excep);
                    }
                } catch (ExternalSeedException e) {
                    throw (e);
                } catch (Throwable e) {
                    if (e instanceof ExternalSeedException) {
                        throw ((ExternalSeedException) e);
                    }
                    outcome = "Connection failed: " + Debug.getNestedExceptionMessage(e);
                    throw (new ExternalSeedException("Connection failed", e));
                } finally {
                    SESecurityManager.unsetThreadPasswordHandler();
                    if (is != null) {
                        try {
                            is.close();
                        } catch (Throwable e) {
                        }
                    }
                }
            } catch (ExternalSeedException e) {
                if (!connected && con_fail_is_perm_fail) {
                    e.setPermanentFailure(true);
                }
                destroy(e);
            }
        }
} </s>
<s>class temp {    public static String genDigest(String info) {
        MessageDigest alga;
        byte[] digesta = null;
        try {
            alga = MessageDigest.getInstance("SHA-1");
            alga.update(info.getBytes());
            digesta = alga.digest();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return byte2hex(digesta);
    }
} </s>
<s>class temp {    public Scene load(URL url) throws FileNotFoundException, IncorrectFormatException, ParsingErrorException {
        BufferedReader reader;
        if (baseUrl == null) setBaseUrlFromUrl(url);
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (IOException e) {
            throw new FileNotFoundException(e.getMessage());
        }
        fromUrl = true;
        return load(reader);
    }
} </s>
<s>class temp {    private void mergeInDefaultMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String surl = AutoplotUtil.getProperty("autoplot.default.bookmarks", "http://www.autoplot.org/data/demos.xml");
            URL url = new URL(surl);
            Document doc = AutoplotUtil.readDoc(url.openStream());
            List<Bookmark> importBook = Bookmark.parseBookmarks(doc.getDocumentElement());
            List<Bookmark> newList = new ArrayList(model.list.size());
            for (int i = 0; i < model.list.size(); i++) {
                newList.add(i, model.list.get(i).copy());
            }
            model.mergeList(importBook, newList);
            model.setList(newList);
            formatToFile(bookmarksFile);
        } catch (SAXException ex) {
            logger.log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            logger.log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }
} </s>
<s>class temp {    public OAuthResponseMessage access(OAuthMessage request, net.oauth.ParameterStyle style) throws IOException {
        HttpMessage httpRequest = HttpMessage.newRequest(request, style);
        HttpResponseMessage httpResponse = http.execute(httpRequest, httpParameters);
        httpResponse = HttpMessageDecoder.decode(httpResponse);
        return new OAuthResponseMessage(httpResponse);
    }
} </s>
<s>class temp {    public void run() {
        try {
            Socket socket = getSocket();
            System.out.println("opening socket to " + address + " on " + port);
            InputStream in = socket.getInputStream();
            for (; ; ) {
                FileTransferHeader header = FileTransferHeader.readHeader(in);
                if (header == null) break;
                System.out.println("header: " + header);
                List<String> parts = header.getFilename().getSegments();
                String filename;
                if (parts.size() > 0) filename = "dl-" + parts.get(parts.size() - 1); else filename = "dl-" + session.getScreenname();
                System.out.println("writing to file " + filename);
                long sum = 0;
                if (new File(filename).exists()) {
                    FileInputStream fis = new FileInputStream(filename);
                    byte[] block = new byte[10];
                    for (int i = 0; i < block.length; ) {
                        int count = fis.read(block);
                        if (count == -1) break;
                        i += count;
                    }
                    FileTransferChecksum summer = new FileTransferChecksum();
                    summer.update(block, 0, 10);
                    sum = summer.getValue();
                }
                FileChannel fileChannel = new FileOutputStream(filename).getChannel();
                FileTransferHeader outHeader = new FileTransferHeader(header);
                outHeader.setHeaderType(FileTransferHeader.HEADERTYPE_ACK);
                outHeader.setIcbmMessageId(cookie);
                outHeader.setBytesReceived(0);
                outHeader.setReceivedChecksum(sum);
                OutputStream socketOut = socket.getOutputStream();
                System.out.println("sending header: " + outHeader);
                outHeader.write(socketOut);
                for (int i = 0; i < header.getFileSize(); ) {
                    long transferred = fileChannel.transferFrom(Channels.newChannel(in), 0, header.getFileSize() - i);
                    System.out.println("transferred " + transferred);
                    if (transferred == -1) return;
                    i += transferred;
                }
                System.out.println("finished transfer!");
                fileChannel.close();
                FileTransferHeader doneHeader = new FileTransferHeader(header);
                doneHeader.setHeaderType(FileTransferHeader.HEADERTYPE_RECEIVED);
                doneHeader.setFlags(doneHeader.getFlags() | FileTransferHeader.FLAG_DONE);
                doneHeader.setBytesReceived(doneHeader.getBytesReceived() + 1);
                doneHeader.setIcbmMessageId(cookie);
                doneHeader.setFilesLeft(doneHeader.getFilesLeft() - 1);
                doneHeader.write(socketOut);
                if (doneHeader.getFilesLeft() - 1 <= 0) {
                    socket.close();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    }
} </s>
<s>class temp {    public TestReport runImpl() throws Exception {
        DocumentFactory df = new SAXDocumentFactory(GenericDOMImplementation.getDOMImplementation(), parserClassName);
        File f = (new File(testFileName));
        URL url = f.toURL();
        Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream());
        Element e = doc.getElementById(targetId);
        if (e == null) {
            DefaultTestReport report = new DefaultTestReport(this);
            report.setErrorCode(ERROR_GET_ELEMENT_BY_ID_FAILED);
            report.addDescriptionEntry(ENTRY_KEY_ID, targetId);
            report.setPassed(false);
            return report;
        }
        e.setAttribute(targetAttribute, targetValue);
        if (targetValue.equals(e.getAttribute(targetAttribute))) {
            return reportSuccess();
        }
        DefaultTestReport report = new DefaultTestReport(this);
        report.setErrorCode(TestReport.ERROR_TEST_FAILED);
        report.setPassed(false);
        return report;
    }
} </s>
<s>class temp {    protected synchronized String encryptThis(String seed, String text) throws EncryptionException {
        String encryptedValue = null;
        String textToEncrypt = text;
        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(textToEncrypt.getBytes("UTF-8"));
            encryptedValue = (new BASE64Encoder()).encode(md.digest());
        } catch (Exception e) {
            throw new EncryptionException(e);
        }
        return encryptedValue;
    }
} </s>
<s>class temp {    public static void reset() throws Exception {
        Session session = DataStaticService.getHibernateSessionFactory().openSession();
        try {
            Connection connection = session.connection();
            try {
                Statement statement = connection.createStatement();
                try {
                    statement.executeUpdate("delete from Post");
                    connection.commit();
                } finally {
                    statement.close();
                }
            } catch (HibernateException e) {
                connection.rollback();
                throw new Exception(e);
            } catch (SQLException e) {
                connection.rollback();
                throw new Exception(e);
            }
        } catch (SQLException e) {
            throw new Exception(e);
        } finally {
            session.close();
        }
    }
} </s>
<s>class temp {    public void doCompress(File[] files, File out, List<String> excludedKeys) {
        Map<String, File> map = new HashMap<String, File>();
        String parent = FilenameUtils.getBaseName(out.getName());
        for (File f : files) {
            CompressionUtil.list(f, parent, map, excludedKeys);
        }
        if (!map.isEmpty()) {
            FileOutputStream fos = null;
            ArchiveOutputStream aos = null;
            InputStream is = null;
            try {
                fos = new FileOutputStream(out);
                aos = getArchiveOutputStream(fos);
                for (Map.Entry<String, File> entry : map.entrySet()) {
                    File file = entry.getValue();
                    ArchiveEntry ae = getArchiveEntry(file, entry.getKey());
                    aos.putArchiveEntry(ae);
                    if (file.isFile()) {
                        IOUtils.copy(is = new FileInputStream(file), aos);
                        IOUtils.closeQuietly(is);
                        is = null;
                    }
                    aos.closeArchiveEntry();
                }
                aos.finish();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                IOUtils.closeQuietly(is);
                IOUtils.closeQuietly(aos);
                IOUtils.closeQuietly(fos);
            }
        }
    }
} </s>
<s>class temp {    public static void copierFichier(URL url, File destination) throws CopieException, IOException {
        if (destination.exists()) {
            throw new CopieException("ERREUR : Copie du fichier '" + url.getPath() + "' vers '" + destination.getPath() + "' impossible!\n" + "CAUSE  : Le fichier destination existe d j .");
        }
        URLConnection urlConnection = url.openConnection();
        InputStream httpStream = urlConnection.getInputStream();
        FileOutputStream destinationFile = new FileOutputStream(destination);
        byte buffer[] = new byte[512 * 1024];
        int nbLecture;
        while ((nbLecture = httpStream.read(buffer)) != -1) {
            destinationFile.write(buffer, 0, nbLecture);
        }
        log.debug("(COPIE) Copie du fichier : " + url.getPath() + " --> " + destination.getPath());
        httpStream.close();
        destinationFile.close();
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
} </s>
<s>class temp {    public static void main(String[] args) throws Exception {
        DES des = new DES();
        StreamBlockReader reader = new StreamBlockReader(new FileInputStream("D:\\test.txt"));
        StreamBlockWriter writer = new StreamBlockWriter(new FileOutputStream("D:\\test1.txt"));
        SingleKey key = new SingleKey(new Block(64), "");
        key = new SingleKey(new Block("1111111100000000111111110000000011111111000000001111111100000000"), "");
        Mode mode = new ECBDESMode(des);
        des.encrypt(reader, writer, key, mode);
    }
} </s>
<s>class temp {    public String md5(String password) {
        MessageDigest m = null;
        try {
            m = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException ex) {
        }
        m.update(password.getBytes(), 0, password.length());
        return new BigInteger(1, m.digest()).toString(16);
    }
} </s>
<s>class temp {    public static void replaceEntry(File file, String entryName, InputStream stream) throws PersistenceException {
        try {
            File temporaryFile = File.createTempFile("pmMDA_zargo", ".zargo");
            temporaryFile.deleteOnExit();
            FileInputStream inputStream = new FileInputStream(file);
            ZipInputStream input = new ZipInputStream(inputStream);
            ZipOutputStream output = new ZipOutputStream(new FileOutputStream(temporaryFile));
            ZipEntry entry = input.getNextEntry();
            while (entry != null) {
                ZipEntry zipEntry = new ZipEntry(entry);
                zipEntry.setCompressedSize(-1);
                output.putNextEntry(zipEntry);
                if (!entry.getName().equals(entryName)) {
                    IOUtils.copy(input, output);
                } else {
                    IOUtils.copy(stream, output);
                }
                input.closeEntry();
                output.closeEntry();
                entry = input.getNextEntry();
            }
            input.close();
            inputStream.close();
            output.close();
            System.gc();
            boolean isSuccess = file.delete();
            if (!isSuccess) {
                throw new PersistenceException();
            }
            isSuccess = temporaryFile.renameTo(file);
            if (!isSuccess) {
                throw new PersistenceException();
            }
        } catch (IOException e) {
            throw new PersistenceException(e);
        }
    }
} </s>
<s>class temp {    public static void copy(File src, File dst) throws IOException {
        FileChannel inChannel;
        FileChannel outChannel;
        inChannel = new FileInputStream(src).getChannel();
        outChannel = new FileOutputStream(dst).getChannel();
        outChannel.transferFrom(inChannel, 0, inChannel.size());
        inChannel.close();
        outChannel.close();
    }
} </s>
<s>class temp {    public static String getMd5Digest(String pInput) {
        try {
            MessageDigest lDigest = MessageDigest.getInstance("MD5");
            lDigest.update(pInput.getBytes());
            BigInteger lHashInt = new BigInteger(1, lDigest.digest());
            return String.format("%1$032x", lHashInt).toLowerCase();
        } catch (NoSuchAlgorithmException lException) {
            throw new RuntimeException(lException);
        }
    }
} </s>
<s>class temp {    private void parse(URL url, String description, boolean qualifiersOnTarget) throws org.xml.sax.SAXException, java.io.IOException {
        this.qualifiersOnTarget = qualifiersOnTarget;
        model = new Model(description);
        if (roughMode) model.setRoughMode(true);
        DOMParser parser = new DOMParser();
        parser.setFeature("http://xml.org/sax/features/validation", false);
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.parse(new InputSource(url.openStream()));
        Document doc = parser.getDocument();
        Element documentEl = doc.getDocumentElement();
        Element contentEl = demandChildElement(documentEl, "XMI.content");
        adapter = Adapter.getAdapter(documentEl);
        parsePackage(contentEl);
        if (!packagePath.isEmpty()) throw new IllegalArgumentException();
        packagePath = null;
        for (Iterator i = generalizations.iterator(); i.hasNext(); ) parseGeneralization((Element) i.next());
        generalizations = null;
        for (Iterator i = associations.keySet().iterator(); i.hasNext(); ) {
            Element assoel = (Element) i.next();
            parseAssociation(assoel, (ModelClass) (associations.get(assoel)));
        }
        associations = null;
        for (Iterator i = classElements.keySet().iterator(); i.hasNext(); ) elaborate((ModelClass) (i.next()));
        classElements = null;
        if (roughMode) model.determineAllSupertypes(); else model.flatten();
        url = null;
    }
} </s>
<s>class temp {    private void onOKAction() {
        if (url == null) {
            optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
            JOptionPane.showMessageDialog(this, "URL field cannot be empty", "Empty URL", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                URLConnection sourceConnection = url.openConnection();
                sourceConnection.setConnectTimeout(10);
                if (sourceConnection.getContentLength() == -1) {
                    throw new IOException("Can't connect to " + url.toString());
                }
                exit_status = OK;
                setVisible(false);
                dispose();
            } catch (IOException e) {
                optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
                JOptionPane.showMessageDialog(this, "Please enter valid, resolvable source and target URLs...\n " + e.getMessage(), "Invalid URL", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) throws IOException {
        String uri = "hdfs://localhost:8020/user/leeing/maxtemp/sample.txt";
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        FSDataInputStream in = null;
        try {
            in = fs.open(new Path(uri));
            IOUtils.copyBytes(in, System.out, 8192, false);
            System.out.println("\n");
            in.seek(0);
            IOUtils.copyBytes(in, System.out, 8192, false);
        } finally {
            IOUtils.closeStream(in);
        }
    }
} </s>
<s>class temp {    public boolean update(String dbName, Query[] queries) throws ServiceException {
        Connection con = null;
        PreparedStatement pstmt = null;
        int rows = 0;
        try {
            con = getDbConnection().getConnection(dbName);
            con.setAutoCommit(false);
            for (int i = 0; i < queries.length; i++) {
                Query query = queries[i];
                System.out.println(query.getSql());
                pstmt = con.prepareStatement(query.getSql());
                addParametersToQuery(query, pstmt);
                rows += pstmt.executeUpdate();
            }
            con.commit();
            return rows > 0;
        } catch (DbException e) {
            log.error("[DAOService::update]  " + e.getMessage(), e);
            log.error("[DAOService::update] Execute rollback " + e.getMessage(), e);
            try {
                con.rollback();
            } catch (SQLException e1) {
                log.error("[DAOService::update] Errore durante il rollback " + e.getMessage(), e);
                throw new ServiceException(e.getMessage());
            }
            throw new ServiceException(e.getMessage());
        } catch (SQLException e) {
            log.error("[DAOService::update]  " + e.getMessage(), e);
            try {
                con.rollback();
            } catch (SQLException e1) {
                log.error("[DAOService::update] Errore durante il rollback " + e.getMessage(), e);
                throw new ServiceException(e.getMessage());
            }
            throw new ServiceException(e.getMessage());
        } finally {
            closeConnection(con, pstmt, null);
        }
    }
} </s>
<s>class temp {    public static String gerarDigest(String mensagem) {
        String mensagemCriptografada = null;
        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            System.out.println("Mensagem original: " + mensagem);
            md.update(mensagem.getBytes());
            byte[] digest = md.digest();
            mensagemCriptografada = converterBytesEmHexa(digest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mensagemCriptografada;
    }
} </s>
<s>class temp {    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
} </s>
<s>class temp {    protected InputStream transform(URL url) throws IOException {
        TransformerFactory tf = TransformerFactory.newInstance();
        InputStream xsl_is = null;
        InputStream url_is = null;
        ByteArrayOutputStream os = null;
        byte[] output;
        try {
            xsl_is = Classes.getThreadClassLoader().getResourceAsStream(getStylesheet());
            url_is = new BufferedInputStream(url.openStream());
            os = new ByteArrayOutputStream();
            Transformer tr = tf.newTransformer(new StreamSource(xsl_is));
            tr.transform(new StreamSource(url_is), new StreamResult(os));
            output = os.toByteArray();
        } catch (TransformerConfigurationException tce) {
            throw new IOException(tce.getLocalizedMessage());
        } catch (TransformerException te) {
            throw new IOException(te.getLocalizedMessage());
        } finally {
            try {
                if (os != null) os.close();
            } catch (Throwable t) {
            }
            try {
                if (url_is != null) url_is.close();
            } catch (Throwable t) {
            }
            try {
                if (xsl_is != null) xsl_is.close();
            } catch (Throwable t) {
            }
        }
        if (logService.isEnabledFor(LogLevel.TRACE)) logService.log(LogLevel.TRACE, new String(output));
        return new ByteArrayInputStream(output);
    }
} </s>
<s>class temp {    private void copyResource(String resource, File targetDir) {
        InputStream is = FragmentFileSetTest.class.getResourceAsStream(resource);
        Assume.assumeNotNull(is);
        int i = resource.lastIndexOf("/");
        String filename;
        if (i == -1) {
            filename = resource;
        } else {
            filename = resource.substring(i + 1);
        }
        try {
            FileOutputStream fos = new FileOutputStream(new File(targetDir, filename));
            IOUtils.copy(is, fos);
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
    }
} </s>
<s>class temp {    private boolean downloadBlacklist() {
        boolean blacklist_updated = false;
        try {
            mLogger.debug("Attempting to download MT blacklist");
            URL url = new URL(blacklistURL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0");
            if (this.lastModified != null) {
                connection.setRequestProperty("If-Modified-Since", DateUtil.formatRfc822(this.lastModified));
            }
            int responseCode = connection.getResponseCode();
            mLogger.debug("HttpConnection response = " + responseCode);
            if (responseCode == HttpURLConnection.HTTP_NOT_MODIFIED) {
                mLogger.debug("MT blacklist site says we are current");
                return false;
            }
            long lastModifiedLong = connection.getHeaderFieldDate("Last-Modified", -1);
            if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) {
                mLogger.debug("my last modified = " + this.lastModified.getTime());
                mLogger.debug("MT last modified = " + lastModifiedLong);
                InputStream instream = connection.getInputStream();
                String uploadDir = RollerConfig.getProperty("uploads.dir");
                String path = uploadDir + File.separator + blacklistFile;
                FileOutputStream outstream = new FileOutputStream(path);
                mLogger.debug("writing updated MT blacklist to " + path);
                byte[] buf = new byte[4096];
                int length = 0;
                while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length);
                outstream.close();
                instream.close();
                blacklist_updated = true;
                mLogger.debug("MT blacklist download completed.");
            } else {
                mLogger.debug("blacklist *NOT* saved, assuming we are current");
            }
        } catch (Exception e) {
            mLogger.error("error downloading blacklist", e);
        }
        return blacklist_updated;
    }
} </s>
<s>class temp {    public String index(URL url) {
        InputStream is = null;
        try {
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setInstanceFollowRedirects(true);
            urlConnection.setAllowUserInteraction(false);
            System.setProperty("sun.net.client.defaultConnectTimeout", "15000");
            System.setProperty("sun.net.client.defaultReadTimeout", "15000");
            urlConnection.connect();
            is = urlConnection.getInputStream();
            return index(is);
        } catch (Throwable t) {
        } finally {
            IOUtils.closeQuietly(is);
        }
        return "";
    }
} </s>
<s>class temp {    protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println("Java VM is not compatible");
            exit();
            return null;
        }
    }
} </s>
<s>class temp {    public void init() {
        String inputLine = "";
        String registeredLine = "";
        println("Insert RSS link:");
        String urlString = sc.nextLine();
        if (urlString.length() == 0) init();
        println("Working...");
        BufferedReader in = null;
        URL url = null;
        try {
            url = new URL(urlString);
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((inputLine = in.readLine()) != null) registeredLine += inputLine;
            in.close();
        } catch (MalformedURLException e2) {
            e2.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        File elenco = new File("elenco.txt");
        PrintWriter pout = null;
        try {
            pout = new PrintWriter(elenco);
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
        Vector<String> vector = new Vector<String>();
        int endIndex = 0;
        int numeroFoto = 0;
        while ((registeredLine = registeredLine.substring(endIndex)).length() > 10) {
            int startIndex = registeredLine.indexOf("<media:content url='");
            if (startIndex == -1) break;
            registeredLine = registeredLine.substring(startIndex);
            String address = "";
            startIndex = registeredLine.indexOf("http://");
            endIndex = registeredLine.indexOf("' height");
            address = registeredLine.substring(startIndex, endIndex);
            println(address);
            pout.println(address);
            vector.add(address);
            numeroFoto++;
        }
        if (pout.checkError()) println("ERROR");
        println("Images number: " + numeroFoto);
        if (numeroFoto == 0) {
            println("No photos found, WebAlbum is empty or the RSS link is incorrect.");
            sc.nextLine();
            System.exit(0);
        }
        println("Start downloading? (y/n)");
        if (!sc.nextLine().equalsIgnoreCase("y")) System.exit(0);
        SimpleDateFormat data = new SimpleDateFormat("dd-MM-yy_HH.mm");
        Calendar oggi = Calendar.getInstance();
        String cartella = data.format(oggi.getTime());
        boolean success = new File(cartella).mkdir();
        if (success) println("Sub-directory created...");
        println("downloading...\npress ctrl-C to stop");
        BufferedInputStream bin = null;
        BufferedOutputStream bout = null;
        URL photoAddr = null;
        int len = 0;
        for (int x = 0; x < vector.size(); x++) {
            println("file " + (x + 1) + " of " + numeroFoto);
            try {
                photoAddr = new URL(vector.get(x));
                bin = new BufferedInputStream(photoAddr.openStream());
                bout = new BufferedOutputStream(new FileOutputStream(cartella + "/" + (x + 1) + ".jpg"));
                while ((len = bin.read()) != -1) bout.write(len);
                bout.flush();
                bout.close();
                bin.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        println("Done!");
    }
} </s>
<s>class temp {    public String contentType() {
        if (_contentType != null) {
            return (String) _contentType;
        }
        String uti = null;
        URL url = url();
        LOG.info("OKIOSIDManagedObject.contentType(): url = " + url + "\n");
        if (url != null) {
            String contentType = null;
            try {
                contentType = url.openConnection().getContentType();
            } catch (java.io.IOException e) {
                LOG.info("OKIOSIDManagedObject.contentType(): couldn't open URL connection!\n");
                String urlString = url.getPath();
                LOG.info("OKIOSIDManagedObject.contentType(): urlString = " + urlString + "\n");
                if (urlString != null) {
                    uti = UTType.preferredIdentifierForTag(UTType.FilenameExtensionTagClass, (NSPathUtilities.pathExtension(urlString)).toLowerCase(), null);
                }
                if (uti == null) {
                    uti = UTType.Item;
                }
                return uti;
            }
            if (contentType != null) {
                LOG.info("OKIOSIDManagedObject.contentType(): contentType = " + contentType + "\n");
                uti = UTType.preferredIdentifierForTag(UTType.MIMETypeTagClass, contentType, null);
            }
            if (uti == null) {
                uti = UTType.Item;
            }
        } else {
            uti = UTType.Item;
        }
        _contentType = uti;
        LOG.info("OKIOSIDManagedObject.contentType(): uti = " + uti + "\n");
        return uti;
    }
} </s>
<s>class temp {    public boolean isPasswordCorrect(String attempt) {
        try {
            MessageDigest digest = MessageDigest.getInstance(attempt);
            digest.update(salt);
            digest.update(attempt.getBytes("UTF-8"));
            byte[] attemptHash = digest.digest();
            return attemptHash.equals(hash);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(UserRecord.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(UserRecord.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
} </s>
<s>class temp {    public static void doGet(HttpServletRequest request, HttpServletResponse response, CollOPort colloport, PrintStream out) throws ServletException, IOException {
        response.addDateHeader("Expires", System.currentTimeMillis() - 86400);
        String id = request.getParameter("id");
        String url_index = request.getParameter("url_index");
        int url_i;
        try {
            url_i = Integer.parseInt(url_index);
        } catch (NumberFormatException nfe) {
            url_i = 0;
        }
        Summary summary = colloport.getSummary(id);
        String filename = request.getPathInfo();
        if (filename != null && filename.length() > 0) {
            filename = filename.substring(1);
        }
        String includeURLAll = summary.getIncludeURL();
        String includeURLs[] = includeURLAll.split(" ");
        String includeURL = includeURLs[url_i];
        if (includeURL != null && includeURL.length() > 0) {
            if (filename.indexOf(":") > 0) {
                includeURL = "";
            } else if (filename.startsWith("/")) {
                includeURL = includeURL.substring(0, includeURL.indexOf("/"));
            } else if (!includeURL.endsWith("/") && includeURL.indexOf(".") > 0) {
                includeURL = includeURL.substring(0, includeURL.lastIndexOf("/") + 1);
            }
            URL url = null;
            try {
                url = new URL(includeURL + response.encodeURL(filename));
            } catch (MalformedURLException mue) {
                System.out.println(mue);
            }
            URLConnection conn = null;
            if (url != null) {
                try {
                    conn = url.openConnection();
                } catch (IOException ioe) {
                    System.out.println(ioe);
                }
            }
            if (conn != null) {
                String contentType = conn.getContentType();
                String contentDisposition;
                if (contentType == null) {
                    contentType = "application/x-java-serialized-object";
                    contentDisposition = "attachment;filename=\"" + filename + "\"";
                } else {
                    contentDisposition = "inline;filename=\"" + filename + "\"";
                }
                response.setHeader("content-disposition", contentDisposition);
                response.setContentType(contentType);
                try {
                    InputStream inputStream = conn.getInputStream();
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = inputStream.read(buffer)) >= 0) {
                        response.getOutputStream().write(buffer, 0, bytesRead);
                    }
                    inputStream.close();
                } catch (IOException ioe) {
                    response.setContentType("text/plain");
                    ioe.printStackTrace(out);
                }
                if (conn instanceof HttpURLConnection) {
                    ((HttpURLConnection) conn).disconnect();
                }
            }
        }
    }
} </s>
<s>class temp {    public static String getUrl(String urlString) {
        int retries = 0;
        String result = "";
        while (true) {
            try {
                URL url = new URL(urlString);
                BufferedReader rdr = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = rdr.readLine();
                while (line != null) {
                    result += line;
                    line = rdr.readLine();
                }
                return result;
            } catch (IOException ex) {
                if (retries == 5) {
                    logger.debug("Problem getting url content exhausted");
                    return result;
                } else {
                    logger.debug("Problem getting url content retrying..." + urlString);
                    try {
                        Thread.sleep((int) Math.pow(2.0, retries) * 1000);
                    } catch (InterruptedException e) {
                    }
                    retries++;
                }
            }
        }
    }
} </s>
<s>class temp {    public void start(OutputStream bytes, Target target) throws IOException {
        URLConnection conn = url.openConnection();
        InputStream fis = conn.getInputStream();
        byte[] buf = new byte[4096];
        while (true) {
            int bytesRead = fis.read(buf);
            if (bytesRead < 1) break;
            bytes.write(buf, 0, bytesRead);
        }
        fis.close();
    }
} </s>
<s>class temp {    protected ProductionTabsProperties(final PlayerID playerId, final List<Rule> mRules, final String mapDir) {
        m_rules = mRules;
        final ResourceLoader loader = ResourceLoader.getMapResourceLoader(mapDir);
        String propertyFile = PROPERTY_FILE + "." + playerId.getName() + ".properties";
        URL url = loader.getResource(propertyFile);
        if (url == null) {
            propertyFile = PROPERTY_FILE + ".properties";
            url = loader.getResource(propertyFile);
            if (url == null) {
            } else {
                try {
                    m_properties.load(url.openStream());
                } catch (final IOException e) {
                    System.out.println("Error reading " + propertyFile + e);
                }
            }
        }
    }
} </s>
<s>class temp {    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
} </s>
<s>class temp {    public void setRemoteConfig(String s) {
        try {
            HashMap<String, String> map = new HashMap<String, String>();
            URL url = new URL(s);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = in.readLine()) != null) {
                if (line.startsWith("#")) continue;
                String[] split = line.split("=");
                if (split.length >= 2) {
                    map.put(split[0], split[1]);
                }
            }
            MethodAndFieldSetter.setMethodsAndFields(this, map);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    private void fileCopy(File filename) throws IOException {
        if (this.stdOut) {
            this.fileDump(filename);
            return;
        }
        File source_file = new File(spoolPath + "/" + filename);
        File destination_file = new File(copyPath + "/" + filename);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException("no such source file: " + source_file);
            if (!source_file.canRead()) throw new FileCopyException("source file is unreadable: " + source_file);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    if (!destination_file.canWrite()) throw new FileCopyException("destination file is unwriteable: " + destination_file);
                    if (!this.overwrite) {
                        System.out.print("File " + destination_file + " already exists. Overwrite? (Y/N): ");
                        System.out.flush();
                        if (!in.readLine().toUpperCase().equals("Y")) throw new FileCopyException("copy cancelled.");
                    }
                } else throw new FileCopyException("destination is not a file: " + destination_file);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException("destination directory doesn't exist: " + destination_file);
                if (!parentdir.canWrite()) throw new FileCopyException("destination directory is unwriteable: " + destination_file);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            while ((bytes_read = source.read(buffer)) != -1) {
                destination.write(buffer, 0, bytes_read);
            }
            System.out.println("File " + filename + " successfull copied to " + destination_file);
            if (this.keep == false && source_file.isFile()) {
                try {
                    source.close();
                } catch (Exception e) {
                }
                if (source_file.delete()) {
                    new File(this.spoolPath + "/info/" + filename + ".desc").delete();
                }
            }
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.flush();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
} </s>
<s>class temp {    private String executePost(String targetURL, String urlParameters) {
        URL url;
        HttpURLConnection connection = null;
        try {
            url = new URL(targetURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            connection.setRequestProperty("Content-Length", "" + Integer.toString(urlParameters.getBytes().length));
            connection.setRequestProperty("Content-Language", "en-US");
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();
            InputStream is = connection.getInputStream();
            BufferedReader rd = new BufferedReader(new InputStreamReader(is));
            String line;
            StringBuffer response = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                response.append(line);
                response.append('\r');
            }
            rd.close();
            return response.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length < 1) {
            System.out.println("Parameters:  method arg1 arg2 arg3 etc");
            System.out.println("");
            System.out.println("Methods:");
            System.out.println("    reloadpolicies");
            System.out.println("    migratedatastreamcontrolgroup");
            System.exit(0);
        }
        String method = args[0].toLowerCase();
        if (method.equals("reloadpolicies")) {
            if (args.length == 4) {
                try {
                    reloadPolicies(args[1], args[2], args[3]);
                    System.out.println("SUCCESS: Policies have been reloaded");
                    System.exit(0);
                } catch (Throwable th) {
                    th.printStackTrace();
                    System.err.println("ERROR: Reloading policies failed; see above");
                    System.exit(1);
                }
            } else {
                System.err.println("ERROR: Three arguments required: " + "http|https username password");
                System.exit(1);
            }
        } else if (method.equals("migratedatastreamcontrolgroup")) {
            if (args.length > 10) {
                System.err.println("ERROR: too many arguments provided");
                System.exit(1);
            }
            if (args.length < 7) {
                System.err.println("ERROR: insufficient arguments provided.  Arguments are: ");
                System.err.println("    protocol [http|https]");
                System.err.println("    user");
                System.err.println("    password");
                System.err.println("    pid - either");
                System.err.println("        a single pid, eg demo:object");
                System.err.println("        list of pids separated by commas, eg demo:object1,demo:object2");
                System.err.println("        name of file containing pids, eg file:///path/to/file");
                System.err.println("    dsid - either");
                System.err.println("        a single datastream id, eg DC");
                System.err.println("        list of ids separated by commas, eg DC,RELS-EXT");
                System.err.println("    controlGroup - target control group (note only M is implemented)");
                System.err.println("    addXMLHeader - add an XML header to the datastream [true|false, default false]");
                System.err.println("    reformat - reformat the XML [true|false, default false]");
                System.err.println("    setMIMETypeCharset - add charset=UTF-8 to the MIMEType [true|false, default false]");
                System.exit(1);
            }
            try {
                boolean addXMLHeader = getArgBoolean(args, 7, false);
                boolean reformat = getArgBoolean(args, 8, false);
                boolean setMIMETypeCharset = getArgBoolean(args, 9, false);
                ;
                InputStream is = modifyDatastreamControlGroup(args[1], args[2], args[3], args[4], args[5], args[6], addXMLHeader, reformat, setMIMETypeCharset);
                IOUtils.copy(is, System.out);
                is.close();
                System.out.println("SUCCESS: Datastreams modified");
                System.exit(0);
            } catch (Throwable th) {
                th.printStackTrace();
                System.err.println("ERROR: migrating datastream control group failed; see above");
                System.exit(1);
            }
        } else {
            System.err.println("ERROR: unrecognised method " + method);
            System.exit(1);
        }
    }
} </s>
<s>class temp {    public String load(URL url) throws LoaderException {
        log.debug("loading content");
        log.trace("opening connection: " + url);
        BufferedReader in = null;
        URLConnection conn = null;
        try {
            conn = url.openConnection();
            in = null;
            if (encodedProxyLogin != null) {
                conn.setRequestProperty("Proxy-Authorization", "Basic " + encodedProxyLogin);
            }
        } catch (IOException ioe) {
            log.warn("Error create connection");
            throw new LoaderException("Error create connection", ioe);
        }
        log.trace("connection opened, reading ... ");
        StringBuilder buffer = new StringBuilder();
        try {
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                buffer.append(inputLine);
            }
        } catch (IOException ioe) {
            log.warn("Error loading content");
            throw new LoaderException("Error reading content. ", ioe);
        } finally {
            try {
                in.close();
            } catch (Exception e) {
            }
        }
        log.debug("content loaded");
        return buffer.toString();
    }
} </s>
<s>class temp {    public static String md5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        byte[] md5hash;
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
} </s>
<s>class temp {    protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) {
        String annotClass = par.annotation.getType().substring(1, par.annotation.getType().length() - 1).replace('/', '.');
        String methodName = getMethodName(par);
        String hashKey = annotClass + CLASS_SIG_SEPARATOR_STRING + methodName;
        PredicateAnnotationRecord gr = _generatedPredicateRecords.get(hashKey);
        if (gr != null) {
            _sharedAddData.cacheInfo.incCombinePredicateCacheHit();
            return gr;
        } else {
            _sharedAddData.cacheInfo.incCombinePredicateCacheMiss();
        }
        String predicateClass = ((_predicatePackage.length() > 0) ? (_predicatePackage + ".") : "") + annotClass + "Pred";
        ClassFile predicateCF = null;
        File clonedFile = new File(_predicatePackageDir, annotClass.replace('.', '/') + "Pred.class");
        if (clonedFile.exists() && clonedFile.isFile() && clonedFile.canRead()) {
            try {
                predicateCF = new ClassFile(new FileInputStream(clonedFile));
            } catch (IOException ioe) {
                throw new ThreadCheckException("Could not open predicate class file, source=" + clonedFile, ioe);
            }
        } else {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                _templatePredicateClassFile.write(baos);
                predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray()));
            } catch (IOException ioe) {
                throw new ThreadCheckException("Could not open predicate template class file", ioe);
            }
        }
        clonedFile.getParentFile().mkdirs();
        final ArrayList<String> paramNames = new ArrayList<String>();
        final HashMap<String, String> paramTypes = new HashMap<String, String>();
        performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() {

            public Object apply(String param1, String param2, AAnnotationsAttributeInfo.Annotation.AMemberValue param3) {
                paramNames.add(param1);
                paramTypes.put(param1, param2);
                return null;
            }
        }, "");
        ArrayList<PredicateAnnotationRecord> memberPARs = new ArrayList<PredicateAnnotationRecord>();
        for (String key : par.combinedPredicates.keySet()) {
            for (PredicateAnnotationRecord memberPAR : par.combinedPredicates.get(key)) {
                if ((memberPAR.predicateClass != null) && (memberPAR.predicateMI != null)) {
                    memberPARs.add(memberPAR);
                } else {
                    memberPARs.add(generatePredicateAnnotationRecord(memberPAR, miDescriptor));
                }
            }
        }
        AUTFPoolInfo predicateClassNameItem = new ASCIIPoolInfo(predicateClass.replace('.', '/'), predicateCF.getConstantPool());
        int[] l = predicateCF.addConstantPoolItems(new APoolInfo[] { predicateClassNameItem });
        predicateClassNameItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
        ClassPoolInfo predicateClassItem = new ClassPoolInfo(predicateClassNameItem, predicateCF.getConstantPool());
        l = predicateCF.addConstantPoolItems(new APoolInfo[] { predicateClassItem });
        predicateClassItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckClassVisitor.singleton(), null);
        predicateCF.setThisClass(predicateClassItem);
        StringBuilder sb = new StringBuilder();
        sb.append("(Ljava/lang/Object;");
        if (par.passArguments) {
            sb.append("[Ljava/lang/Object;");
        }
        for (String key : paramNames) {
            sb.append(paramTypes.get(key));
        }
        sb.append(")Z");
        String methodDesc = sb.toString();
        MethodInfo templateMI = null;
        MethodInfo predicateMI = null;
        for (MethodInfo mi : predicateCF.getMethods()) {
            if ((mi.getName().toString().equals(methodName)) && (mi.getDescriptor().toString().equals(methodDesc))) {
                predicateMI = mi;
                break;
            } else if ((mi.getName().toString().equals("template")) && (mi.getDescriptor().toString().startsWith("(")) && (mi.getDescriptor().toString().endsWith(")Z"))) {
                templateMI = mi;
            }
        }
        if ((templateMI == null) && (predicateMI == null)) {
            throw new ThreadCheckException("Could not find template predicate method in class file");
        }
        if (predicateMI == null) {
            AUTFPoolInfo namecpi = new ASCIIPoolInfo(methodName, predicateCF.getConstantPool());
            l = predicateCF.addConstantPoolItems(new APoolInfo[] { namecpi });
            namecpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
            AUTFPoolInfo descpi = new ASCIIPoolInfo(methodDesc, predicateCF.getConstantPool());
            l = predicateCF.addConstantPoolItems(new APoolInfo[] { descpi });
            descpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
            ArrayList<AAttributeInfo> list = new ArrayList<AAttributeInfo>();
            for (AAttributeInfo a : templateMI.getAttributes()) {
                try {
                    AAttributeInfo clonedA = (AAttributeInfo) a.clone();
                    list.add(clonedA);
                } catch (CloneNotSupportedException e) {
                    throw new InstrumentorException("Could not clone method attributes");
                }
            }
            predicateMI = new MethodInfo(templateMI.getAccessFlags(), namecpi, descpi, list.toArray(new AAttributeInfo[] {}));
            predicateCF.getMethods().add(predicateMI);
            CodeAttributeInfo.CodeProperties props = predicateMI.getCodeAttributeInfo().getProperties();
            props.maxLocals += paramTypes.size() + 1 + (par.passArguments ? 1 : 0);
            InstructionList il = new InstructionList(predicateMI.getCodeAttributeInfo().getCode());
            if ((par.combineMode == Combine.Mode.OR) || (par.combineMode == Combine.Mode.XOR) || (par.combineMode == Combine.Mode.IMPLIES)) {
                il.insertInstr(new GenericInstruction(Opcode.ICONST_0), predicateMI.getCodeAttributeInfo());
            } else {
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
            }
            boolean res;
            res = il.advanceIndex();
            assert res == true;
            int accumVarIndex = props.maxLocals - 1;
            AInstruction loadAccumInstr;
            AInstruction storeAccumInstr;
            if (accumVarIndex < 256) {
                loadAccumInstr = new GenericInstruction(Opcode.ILOAD, (byte) accumVarIndex);
                storeAccumInstr = new GenericInstruction(Opcode.ISTORE, (byte) accumVarIndex);
            } else {
                byte[] bytes = new byte[] { Opcode.ILOAD, 0, 0 };
                Types.bytesFromShort((short) accumVarIndex, bytes, 1);
                loadAccumInstr = new WideInstruction(bytes);
                bytes[0] = Opcode.ISTORE;
                storeAccumInstr = new WideInstruction(bytes);
            }
            il.insertInstr(storeAccumInstr, predicateMI.getCodeAttributeInfo());
            res = il.advanceIndex();
            assert res == true;
            int maxStack = 0;
            int paramIndex = 1;
            int lvIndex = 1;
            if (par.passArguments) {
                lvIndex += 1;
            }
            int memberCount = 0;
            for (PredicateAnnotationRecord memberPAR : memberPARs) {
                ++memberCount;
                il.insertInstr(new GenericInstruction(Opcode.ALOAD_0), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                int curStack = 1;
                if (memberPAR.passArguments) {
                    if (par.passArguments) {
                        il.insertInstr(new GenericInstruction(Opcode.ALOAD_1), predicateMI.getCodeAttributeInfo());
                        res = il.advanceIndex();
                        assert res == true;
                        curStack += 1;
                    }
                }
                for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) {
                    String t = memberPAR.paramTypes.get(memberPAR.paramNames.get(paramNameIndex));
                    if (t.length() == 0) {
                        throw new ThreadCheckException("Length of parameter type no. " + paramIndex + " string is 0 in " + predicateMI.getName() + " in class " + predicateCF.getThisClassName());
                    }
                    byte opcode;
                    int nextLVIndex = lvIndex;
                    switch(t.charAt(0)) {
                        case 'I':
                        case 'B':
                        case 'C':
                        case 'S':
                        case 'Z':
                            opcode = Opcode.ILOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case 'F':
                            opcode = Opcode.FLOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case '[':
                        case 'L':
                            opcode = Opcode.ALOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case 'J':
                            opcode = Opcode.LLOAD;
                            nextLVIndex += 2;
                            curStack += 2;
                            break;
                        case 'D':
                            opcode = Opcode.DLOAD;
                            nextLVIndex += 2;
                            curStack += 2;
                            break;
                        default:
                            throw new ThreadCheckException("Parameter type no. " + paramIndex + ", " + t + ", is unknown in " + predicateMI.getName() + " in class " + predicateCF.getThisClassName());
                    }
                    AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex);
                    il.insertInstr(load, predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    ++paramIndex;
                    lvIndex = nextLVIndex;
                }
                if (curStack > maxStack) {
                    maxStack = curStack;
                }
                ReferenceInstruction predicateCallInstr = new ReferenceInstruction(Opcode.INVOKESTATIC, (short) 0);
                int predicateCallIndex = predicateCF.addMethodToConstantPool(memberPAR.predicateClass.replace('.', '/'), memberPAR.predicateMI.getName().toString(), memberPAR.predicateMI.getDescriptor().toString());
                predicateCallInstr.setReference(predicateCallIndex);
                il.insertInstr(predicateCallInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) {
                    il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    il.insertInstr(new GenericInstruction(Opcode.SWAP), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    il.insertInstr(new GenericInstruction(Opcode.ISUB), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                }
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                if (par.combineMode == Combine.Mode.OR) {
                    il.insertInstr(new GenericInstruction(Opcode.IOR), predicateMI.getCodeAttributeInfo());
                } else if ((par.combineMode == Combine.Mode.AND) || (par.combineMode == Combine.Mode.NOT)) {
                    il.insertInstr(new GenericInstruction(Opcode.IAND), predicateMI.getCodeAttributeInfo());
                } else if (par.combineMode == Combine.Mode.XOR) {
                    il.insertInstr(new GenericInstruction(Opcode.IADD), predicateMI.getCodeAttributeInfo());
                } else if (par.combineMode == Combine.Mode.IMPLIES) {
                    il.insertInstr(new GenericInstruction(Opcode.IOR), predicateMI.getCodeAttributeInfo());
                } else {
                    assert false;
                }
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(storeAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
            }
            if (par.combineMode == Combine.Mode.XOR) {
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(new GenericInstruction(Opcode.ICONST_0), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                WideBranchInstruction br2 = new WideBranchInstruction(Opcode.GOTO_W, il.getIndex() + 1);
                il.insertInstr(br2, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                int jumpIndex = il.getIndex();
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                res = il.rewindIndex(3);
                assert res == true;
                BranchInstruction br1 = new BranchInstruction(Opcode.IF_ICMPEQ, jumpIndex);
                il.insertInstr(br1, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex(4);
                assert res == true;
            } else {
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
            }
            il.deleteInstr(predicateMI.getCodeAttributeInfo());
            predicateMI.getCodeAttributeInfo().setCode(il.getCode());
            props.maxStack = Math.max(maxStack, 2);
            predicateMI.getCodeAttributeInfo().setProperties(props.maxStack, props.maxLocals);
            try {
                FileOutputStream fos = new FileOutputStream(clonedFile);
                predicateCF.write(fos);
                fos.close();
            } catch (IOException e) {
                throw new ThreadCheckException("Could not write cloned predicate class file, target=" + clonedFile);
            }
        }
        gr = new PredicateAnnotationRecord(par.annotation, predicateClass, predicateMI, paramNames, paramTypes, new ArrayList<AAnnotationsAttributeInfo.Annotation.AMemberValue>(), par.passArguments, null, new HashMap<String, ArrayList<PredicateAnnotationRecord>>());
        _generatedPredicateRecords.put(hashKey, gr);
        return gr;
    }
} </s>
<s>class temp {    public JsonValue get(Url url) {
        try {
            URLConnection connection = new URL(url + "").openConnection();
            return createItemFromResponse(url, connection);
        } catch (IOException e) {
            throw ItemscriptError.internalError(this, "get.IOException", e);
        }
    }
} </s>
