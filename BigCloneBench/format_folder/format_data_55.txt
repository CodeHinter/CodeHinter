<s>class temp {    public TreeNode fetchArchive(TreeNode owner, int id) throws Exception {
        builder.start(owner, false);
        parser.setDocumentHandler(builder);
        String arg = server + "?todo=archive&db=" + db + "&document=" + document + "&id=" + id;
        URL url = new URL(arg);
        URLConnection con = url.openConnection();
        con.setUseCaches(false);
        con.connect();
        InputSource xmlInput = new InputSource(new InputStreamReader(con.getInputStream(), "ISO-8859-1"));
        parser.parse(xmlInput);
        return owner;
    }
} </s>
<s>class temp {    public String getString(String arg) throws Exception {
        URL url = new URL(arg);
        URLConnection con = url.openConnection();
        con.setUseCaches(false);
        con.connect();
        InputStreamReader src = new InputStreamReader(con.getInputStream(), "ISO-8859-1");
        StringBuffer stb = new StringBuffer();
        char[] buf = new char[1024];
        int l;
        while ((l = src.read(buf, 0, 1024)) >= 0) {
            stb.append(buf, 0, l);
        }
        String res = stb.toString();
        if (res.startsWith("<pannenleiter-exception")) {
            builder.start(new TreeNode((TreeWidget) null, false), false);
            InputSource xmlInput = new InputSource(new StringReader(res));
            parser.setDocumentHandler(builder);
            parser.parse(xmlInput);
        }
        return res;
    }
} </s>
<s>class temp {    private String fetch(URL url) {
        StringBuilder body = new StringBuilder();
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                body.append(inputLine);
            }
            in.close();
            return body.toString();
        } catch (Exception e) {
            debug("Error: fetch: Exception reading URL: " + e);
        }
        return null;
    }
} </s>
<s>class temp {    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (Exception e) {
        }
        try {
            md.update(plaintext.getBytes("UTF-8"));
        } catch (Exception e) {
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
} </s>
<s>class temp {    @Override
    public void handle(HttpExchange http) throws IOException {
        Headers reqHeaders = http.getRequestHeaders();
        Headers respHeader = http.getResponseHeaders();
        respHeader.add("Content-Type", "text/plain");
        http.sendResponseHeaders(200, 0);
        PrintWriter console = new PrintWriter(System.err);
        PrintWriter web = new PrintWriter(http.getResponseBody());
        PrintWriter out = new PrintWriter(new YWriter(web, console));
        out.println("### " + new Date() + " ###");
        out.println("Method: " + http.getRequestMethod());
        out.println("Protocol: " + http.getProtocol());
        out.println("RemoteAddress.HostName: " + http.getRemoteAddress().getHostName());
        for (String key : reqHeaders.keySet()) {
            out.println("* \"" + key + "\"");
            for (String v : reqHeaders.get(key)) {
                out.println("\t" + v);
            }
        }
        InputStream in = http.getRequestBody();
        if (in != null) {
            out.println();
            IOUtils.copyTo(new InputStreamReader(in), out);
            in.close();
        }
        out.flush();
        out.close();
    }
} </s>
<s>class temp {    private static final String getResult(String url, String postData) throws MalformedURLException, IOException {
        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        if (!postData.equals("null")) {
            postData = postData.substring(1, postData.length() - 1);
            connection.setDoOutput(true);
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(connection.getOutputStream()));
            writer.write(postData);
            writer.flush();
        }
        InputStreamReader reader = new InputStreamReader(connection.getInputStream());
        int i;
        StringBuffer buffer = new StringBuffer();
        while ((i = reader.read()) != -1) {
            buffer.append((char) i);
        }
        reader.close();
        String response = buffer.toString().trim();
        response = StringUtilities.replaceAll(response, "\r\n", "\\r\\n");
        response = StringUtilities.replaceAll(response, "\"", "\\\"");
        return "\"" + response + "\"";
    }
} </s>
<s>class temp {    private void saveFile(Folder folder, Object key, InputStream stream) throws FileManagerException {
        File file = new File(folder, key.toString());
        LOGGER.debug("Writing file: " + file.getAbsolutePath());
        Writer writer = null;
        Writer encodedWriter = null;
        try {
            encodedWriter = new OutputStreamWriter(new FileOutputStream(file), getEncodeCharset());
            IOUtils.copy(stream, encodedWriter, getDecodeCharset());
            LOGGER.info("saveFile(), decode charset: " + getDecodeCharset() + ", encode charset: " + getEncodeCharset());
        } catch (IOException e) {
            throw new FileManagerException("Unable to write to file: " + file.getAbsolutePath(), e);
        } finally {
            try {
                encodedWriter.close();
            } catch (IOException e) {
                throw new FileManagerException("Unable to write to file: " + file.getAbsolutePath(), e);
            }
        }
    }
} </s>
<s>class temp {    public static HttpData postRequest(HttpPost postMethod, String xml) throws ClientProtocolException, SocketException, IOException, SocketTimeoutException {
        HttpData data = new HttpData();
        try {
            postMethod.addHeader("Content-Type", "text/xml; charset=utf-8");
            postMethod.addHeader("Connection", "Keep-Alive");
            postMethod.addHeader("User-Agent", "Openwave");
            StringEntity se = new StringEntity(xml, HTTP.UTF_8);
            postMethod.setEntity(se);
            printPostRequestHeader(postMethod);
            HttpParams httpParams = new BasicHttpParams();
            HttpConnectionParams.setConnectionTimeout(httpParams, HTTP_TIMEOUT);
            HttpClient client = new DefaultHttpClient(httpParams);
            client.getParams().setIntParameter(HttpConnectionParams.CONNECTION_TIMEOUT, DEFAULT_POST_REQUEST_TIMEOUT);
            client.getParams().setIntParameter(HttpConnectionParams.SO_TIMEOUT, DEFAULT_POST_REQUEST_TIMEOUT);
            HttpResponse httpResponse = client.execute(postMethod);
            if (httpResponse == null) throw new SocketTimeoutException();
            if (httpResponse.getStatusLine().getStatusCode() == 200) {
                byte bytearray[] = ImageInputStream(httpResponse.getEntity());
                data.setByteArray(bytearray);
            } else {
                data.setStatusCode(httpResponse.getStatusLine().getStatusCode() + "");
            }
        } catch (SocketException e) {
            throw new SocketException();
        } catch (SocketTimeoutException e) {
            throw new SocketTimeoutException();
        } catch (ClientProtocolException e) {
            throw new ClientProtocolException();
        } catch (IOException e) {
            throw new IOException();
        } finally {
            postMethod.abort();
        }
        return data;
    }
} </s>
<s>class temp {    protected byte[] getTSAResponse(byte[] requestBytes) throws SinaduraCoreException {
        byte[] respBytes = null;
        try {
            URL url = new URL(this.tsaURL);
            URLConnection tsaConnection = null;
            if (this.proxy == null) tsaConnection = url.openConnection(); else tsaConnection = url.openConnection(this.proxy);
            tsaConnection.setDoInput(true);
            tsaConnection.setDoOutput(true);
            tsaConnection.setUseCaches(false);
            tsaConnection.setRequestProperty("Content-Type", "application/timestamp-query");
            tsaConnection.setRequestProperty("Content-Transfer-Encoding", "binary");
            if ((this.tsaUsername != null) && !this.tsaUsername.equals("")) {
                String userPassword = this.tsaUsername + ":" + this.tsaPassword;
                tsaConnection.setRequestProperty("Authorization", "Basic " + new String(new sun.misc.BASE64Encoder().encode(userPassword.getBytes())));
            }
            OutputStream out = tsaConnection.getOutputStream();
            out.write(requestBytes);
            out.close();
            InputStream inp = tsaConnection.getInputStream();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int bytesRead = 0;
            while ((bytesRead = inp.read(buffer, 0, buffer.length)) >= 0) {
                baos.write(buffer, 0, bytesRead);
            }
            respBytes = baos.toByteArray();
            String encoding = tsaConnection.getContentEncoding();
            if (encoding != null && encoding.equalsIgnoreCase("base64")) {
                sun.misc.BASE64Decoder dec = new sun.misc.BASE64Decoder();
                respBytes = dec.decodeBuffer(new String(respBytes));
            }
        } catch (MalformedURLException e) {
            throw new SinaduraCoreException("URL malformed " + e.getMessage(), e);
        } catch (IOException e) {
            throw new SinaduraCoreException("Connection Error " + e.getMessage(), e);
        }
        return respBytes;
    }
} </s>
<s>class temp {    public static void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
} </s>
<s>class temp {        protected boolean exists(String filename) {
            try {
                URL url = new URL(base, filename);
                URLConnection conn = url.openConnection();
                conn.connect();
                conn.getInputStream().close();
                return true;
            } catch (IOException ex) {
                return false;
            }
        }
} </s>
<s>class temp {    protected URLConnection openConnection(URL url) throws IOException {
        if (bundleEntry != null) return (new BundleURLConnection(url, bundleEntry));
        String bidString = url.getHost();
        if (bidString == null) {
            throw new IOException(NLS.bind(AdaptorMsg.URL_NO_BUNDLE_ID, url.toExternalForm()));
        }
        AbstractBundle bundle = null;
        long bundleID;
        try {
            bundleID = Long.parseLong(bidString);
        } catch (NumberFormatException nfe) {
            throw new MalformedURLException(NLS.bind(AdaptorMsg.URL_INVALID_BUNDLE_ID, bidString));
        }
        bundle = (AbstractBundle) context.getBundle(bundleID);
        if (!url.getAuthority().equals(SECURITY_AUTHORIZED)) {
            checkAdminPermission(bundle);
        }
        if (bundle == null) {
            throw new IOException(NLS.bind(AdaptorMsg.URL_NO_BUNDLE_FOUND, url.toExternalForm()));
        }
        return (new BundleURLConnection(url, findBundleEntry(url, bundle)));
    }
} </s>
<s>class temp {    public boolean copy(String file, String path) {
        try {
            File file_in = new File(file);
            String tmp1, tmp2;
            tmp1 = file;
            tmp2 = path;
            while (tmp2.contains("\\")) {
                tmp2 = tmp2.substring(tmp2.indexOf("\\") + 1);
                tmp1 = tmp1.substring(tmp1.indexOf("\\") + 1);
            }
            tmp1 = file.substring(0, file.length() - tmp1.length()) + tmp2 + tmp1.substring(tmp1.indexOf("\\"));
            File file_out = new File(tmp1);
            File parent = file_out.getParentFile();
            parent.mkdirs();
            FileInputStream in1 = new FileInputStream(file_in);
            FileOutputStream out1 = new FileOutputStream(file_out);
            byte[] bytes = new byte[1024];
            int c;
            while ((c = in1.read(bytes)) != -1) out1.write(bytes, 0, c);
            in1.close();
            out1.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error!");
            return false;
        }
    }
} </s>
<s>class temp {    public boolean copy(String file, String target, int tag) {
        try {
            File file_in = new File(file);
            File file_out = new File(target);
            File parent = file_out.getParentFile();
            parent.mkdirs();
            FileInputStream in1 = new FileInputStream(file_in);
            FileOutputStream out1 = new FileOutputStream(file_out);
            byte[] bytes = new byte[1024];
            int c;
            while ((c = in1.read(bytes)) != -1) out1.write(bytes, 0, c);
            in1.close();
            out1.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error!");
            return false;
        }
    }
} </s>
<s>class temp {    public static boolean insert(final CelulaFinanceira objCelulaFinanceira) {
        int result = 0;
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            final String sql = "insert into celula_financeira " + "(descricao, id_orgao, id_gestao, " + "id_natureza_despesa, id_programa_trabalho, " + "id_unidade_orcamentaria, id_fonte_recursos, " + "valor_provisionado, gasto_previsto, gasto_real, " + "saldo_previsto, saldo_real)" + " values (?, ?, ?, ?, ?, ?, ?, TRUNCATE(?,2), TRUNCATE(?,2), TRUNCATE(?,2), TRUNCATE(?,2), TRUNCATE(?,2))";
            pst = c.prepareStatement(sql);
            pst.setString(1, objCelulaFinanceira.getDescricao());
            pst.setLong(2, (objCelulaFinanceira.getOrgao()).getCodigo());
            pst.setString(3, (objCelulaFinanceira.getGestao()).getCodigo());
            pst.setString(4, (objCelulaFinanceira.getNaturezaDespesa()).getCodigo());
            pst.setString(5, (objCelulaFinanceira.getProgramaTrabalho()).getCodigo());
            pst.setString(6, (objCelulaFinanceira.getUnidadeOrcamentaria()).getCodigo());
            pst.setString(7, (objCelulaFinanceira.getFonteRecursos()).getCodigo());
            pst.setDouble(8, objCelulaFinanceira.getValorProvisionado());
            pst.setDouble(9, objCelulaFinanceira.getGastoPrevisto());
            pst.setDouble(10, objCelulaFinanceira.getGastoReal());
            pst.setDouble(11, objCelulaFinanceira.getSaldoPrevisto());
            pst.setDouble(12, objCelulaFinanceira.getSaldoReal());
            result = pst.executeUpdate();
            c.commit();
        } catch (final SQLException e) {
            try {
                c.rollback();
            } catch (final SQLException e1) {
                System.out.println("[CelulaFinanceiraDAO.insert] Erro ao inserir -> " + e1.getMessage());
            }
            System.out.println("[CelulaFinanceiraDAO.insert] Erro ao inserir -> " + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }
} </s>
<s>class temp {    private boolean canReadSource(String fileURL) {
        URL url;
        try {
            url = new URL(fileURL);
        } catch (MalformedURLException e) {
            log.error("Error accessing URL " + fileURL + ".");
            return false;
        }
        InputStream is;
        try {
            is = url.openStream();
        } catch (IOException e) {
            log.error("Error creating Input Stream from URL '" + fileURL + "'.");
            return false;
        }
        return true;
    }
} </s>
<s>class temp {    protected JavaFileObject open(String className) throws IOException {
        JavaFileObject fo = getClassFileObject(className);
        if (fo != null) return fo;
        String cn = className;
        int lastDot;
        while ((lastDot = cn.lastIndexOf(".")) != -1) {
            cn = cn.substring(0, lastDot) + "$" + cn.substring(lastDot + 1);
            fo = getClassFileObject(cn);
            if (fo != null) return fo;
        }
        if (!className.endsWith(".class")) return null;
        if (fileManager instanceof StandardJavaFileManager) {
            StandardJavaFileManager sfm = (StandardJavaFileManager) fileManager;
            fo = sfm.getJavaFileObjects(className).iterator().next();
            if (fo != null && fo.getLastModified() != 0) {
                return fo;
            }
        }
        if (className.matches("^[A-Za-z]+:.*")) {
            try {
                final URI uri = new URI(className);
                final URL url = uri.toURL();
                final URLConnection conn = url.openConnection();
                return new JavaFileObject() {

                    public Kind getKind() {
                        return JavaFileObject.Kind.CLASS;
                    }

                    public boolean isNameCompatible(String simpleName, Kind kind) {
                        throw new UnsupportedOperationException();
                    }

                    public NestingKind getNestingKind() {
                        throw new UnsupportedOperationException();
                    }

                    public Modifier getAccessLevel() {
                        throw new UnsupportedOperationException();
                    }

                    public URI toUri() {
                        return uri;
                    }

                    public String getName() {
                        return url.toString();
                    }

                    public InputStream openInputStream() throws IOException {
                        return conn.getInputStream();
                    }

                    public OutputStream openOutputStream() throws IOException {
                        throw new UnsupportedOperationException();
                    }

                    public Reader openReader(boolean ignoreEncodingErrors) throws IOException {
                        throw new UnsupportedOperationException();
                    }

                    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
                        throw new UnsupportedOperationException();
                    }

                    public Writer openWriter() throws IOException {
                        throw new UnsupportedOperationException();
                    }

                    public long getLastModified() {
                        return conn.getLastModified();
                    }

                    public boolean delete() {
                        throw new UnsupportedOperationException();
                    }
                };
            } catch (URISyntaxException ignore) {
            } catch (IOException ignore) {
            }
        }
        return null;
    }
} </s>
<s>class temp {    private FTPClient getClient() throws SocketException, IOException {
        FTPClient ftp = new FTPClient();
        ftp.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));
        ftp.setDefaultPort(getPort());
        ftp.connect(getIp());
        int reply = ftp.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            log.warn("FTP server refused connection: {}", getIp());
            ftp.disconnect();
            return null;
        }
        if (!ftp.login(getUsername(), getPassword())) {
            log.warn("FTP server refused login: {}, user: {}", getIp(), getUsername());
            ftp.logout();
            ftp.disconnect();
            return null;
        }
        ftp.setControlEncoding(getEncoding());
        ftp.setFileType(FTP.BINARY_FILE_TYPE);
        ftp.enterLocalPassiveMode();
        return ftp;
    }
} </s>
<s>class temp {    public char check(String password) {
        if (captchaRandom.equals("null")) {
            return 's';
        }
        if (captchaRandom.equals("used")) {
            return 'm';
        }
        String encryptionBase = secret + captchaRandom;
        if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) {
            encryptionBase += ":" + alphabet + ":" + letters;
        }
        MessageDigest md5;
        byte[] digest = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        try {
            md5 = MessageDigest.getInstance("MD5");
            md5.update(encryptionBase.getBytes());
            digest = md5.digest();
        } catch (NoSuchAlgorithmException e) {
        }
        String correctPassword = "";
        int index;
        for (int i = 0; i < letters; i++) {
            index = (digest[i] + 256) % 256 % alphabet.length();
            correctPassword += alphabet.substring(index, index + 1);
        }
        if (!password.equals(correctPassword)) {
            return 'w';
        } else {
            captchaRandom = "used";
            return 't';
        }
    }
} </s>
<s>class temp {    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error: " + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
} </s>
<s>class temp {    private boolean createFTPConnection() {
        client = new FTPClient();
        System.out.println("Client created");
        try {
            client.connect(this.hostname, this.port);
            System.out.println("Connected: " + this.hostname + ", " + this.port);
            client.login(username, password);
            System.out.println("Logged in: " + this.username + ", " + this.password);
            this.setupActiveFolder();
            return true;
        } catch (IllegalStateException ex) {
            Logger.getLogger(FTPProject.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FTPProject.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPIllegalReplyException ex) {
            Logger.getLogger(FTPProject.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPException ex) {
            Logger.getLogger(FTPProject.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
} </s>
<s>class temp {    public static NSImage getImage(URL url) {
        InputStream in = null;
        try {
            in = url.openStream();
        } catch (IOException e) {
            Log.error(e.getMessage(), e);
        }
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buff = new byte[10 * 1024];
        int len;
        try {
            if (in != null) {
                while ((len = in.read(buff)) != -1) {
                    out.write(buff, 0, len);
                }
                in.close();
            }
            out.close();
        } catch (IOException e) {
            Log.error(e.getMessage(), e);
        }
        NSData data = new NSData(out.toByteArray());
        return new NSImage(data);
    }
} </s>
<s>class temp {    public void exe2(String[] args) {
        Connection con = null;
        Connection con2 = null;
        Statement stmt = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ResultSetMetaData rsmd = null;
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = getConnection("mis030dv");
            con2 = getConnection("mis030db");
            con2.setAutoCommit(false);
            stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT * FROM MIS.MAP_PUR0101 WHERE NOT EXISTS (SELECT 1 FROM MIS.RSCMGOOD@MIS030DB@DEVU01 WHERE GOODCD = PUM_CODE OR GOODCD = NEW_PUM_CODE)");
            pstmt = con2.prepareStatement("INSERT INTO MIS.RSCMGOOD ( GOODCD,GOODFLAG,GOODNM,GOODHNGNM,GOODENGNM,GOODSPEC,GOODMODEL,ASETFLAG,LRGCD,MDLCD,SMLCD,EDICD,PRODCMPYCD,CMT,FSTRGSTRID,FSTRGSTDT,LASTUPDTRID,LASTUPDTDT,APPINSTDATA,MNGTFLAG) " + "VALUES ( ?,SUBSTR(?,1,1),?,?,?,?,NULL,'1',substr(?,2,2),substr(?,4,3),NULL,NULL,NULL,'OCS      빰ǰ','MISASIS',TO_DATE('20111231','YYYYMMDD'),'MISASIS',TO_DATE('20111231','YYYYMMDD'),NULL,'N')");
            int count = 0;
            String goodcd = null;
            String goodnm = null;
            while (rs.next()) {
                count++;
                goodcd = rs.getString("PUM_CODE").toUpperCase();
                goodnm = rs.getString("PUM_HNAME");
                StringUtils.trimWhitespace(goodnm);
                if (goodnm == null || goodnm.equals("")) goodnm = "-";
                pstmt.setString(1, goodcd);
                pstmt.setString(2, goodcd);
                pstmt.setString(3, goodnm);
                pstmt.setString(4, goodnm);
                pstmt.setString(5, rs.getString("PUM_ENAME"));
                pstmt.setString(6, rs.getString("KYUKYEOK"));
                pstmt.setString(7, goodcd);
                pstmt.setString(8, goodcd);
                pstmt.executeUpdate();
                if (count % 100 == 0) System.out.println("Copy Row : " + count);
            }
            System.out.println("Commit Copy Rows : " + count);
            con2.commit();
        } catch (Exception e) {
            try {
                con2.rollback();
            } catch (Exception ee) {
                ee.printStackTrace();
            }
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (con != null) con.close();
                if (con2 != null) con2.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    private void createCanvas() {
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.setRootEditPart(new ScalableRootEditPart());
        viewer.setEditPartFactory(new BlockEditPartFactory());
        viewer.createControl(this);
        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));
        ActionRegistry actionRegistry = new ActionRegistry();
        createActions(actionRegistry);
        ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);
        viewer.setContextMenu(cmProvider);
        Block b = new Block();
        b.addChild(new ChartItem());
        viewer.setContents(b);
        PaletteViewer paletteViewer = new PaletteViewer();
        paletteViewer.createControl(this);
    }
} </s>
<s>class temp {    ArrayList<String> remoteSampling(IntersectionFile[] intersectionFiles, double[][] points) {
        logger.info("begin REMOTE sampling, number of threads " + intersectConfig.getThreadCount() + ", number of layers=" + intersectionFiles.length + ", number of coordinates=" + points.length);
        ArrayList<String> output = null;
        try {
            long start = System.currentTimeMillis();
            URL url = new URL(intersectConfig.getLayerIndexUrl() + "/intersect/batch");
            URLConnection c = url.openConnection();
            c.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream());
            out.write("fids=");
            for (int i = 0; i < intersectionFiles.length; i++) {
                if (i > 0) {
                    out.write(",");
                }
                out.write(intersectionFiles[i].getFieldId());
            }
            out.write("&points=");
            for (int i = 0; i < points.length; i++) {
                if (i > 0) {
                    out.write(",");
                }
                out.write(String.valueOf(points[i][0]));
                out.write(",");
                out.write(String.valueOf(points[i][1]));
            }
            out.close();
            CSVReader csv = new CSVReader(new InputStreamReader(new GZIPInputStream(c.getInputStream())));
            long mid = System.currentTimeMillis();
            ArrayList<StringBuilder> tmpOutput = new ArrayList<StringBuilder>();
            for (int i = 0; i < intersectionFiles.length; i++) {
                tmpOutput.add(new StringBuilder());
            }
            String[] line;
            int row = 0;
            csv.readNext();
            while ((line = csv.readNext()) != null) {
                for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) {
                    if (row > 0) {
                        tmpOutput.get(i - 2).append("\n");
                    }
                    tmpOutput.get(i - 2).append(line[i]);
                }
                row++;
            }
            csv.close();
            output = new ArrayList<String>();
            for (int i = 0; i < tmpOutput.size(); i++) {
                output.add(tmpOutput.get(i).toString());
                tmpOutput.set(i, null);
            }
            long end = System.currentTimeMillis();
            logger.info("sample time for " + 5 + " layers and " + 3 + " coordinates: get response=" + (mid - start) + "ms, write response=" + (end - mid) + "ms");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return output;
    }
} </s>
<s>class temp {    private void doLogin(String password) throws LoginFailedException, IncorrectPasswordException {
        final long mgr = Constants.MANAGER;
        Data data, response;
        try {
            response = sendAndWait(new Request(mgr)).get(0);
            MessageDigest md;
            try {
                md = MessageDigest.getInstance("MD5");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException("MD5 hash not supported.");
            }
            byte[] challenge = response.getBytes();
            md.update(challenge);
            md.update(password.getBytes(Data.STRING_ENCODING));
            try {
                data = Data.valueOf(md.digest());
                response = sendAndWait(new Request(mgr).add(0, data)).get(0);
            } catch (ExecutionException ex) {
                throw new IncorrectPasswordException();
            }
            setLoginMessage(response.getString());
            response = sendAndWait(new Request(mgr).add(0, getLoginData())).get(0);
            ID = response.getWord();
            registerSettings();
        } catch (InterruptedException ex) {
            throw new LoginFailedException(ex);
        } catch (ExecutionException ex) {
            throw new LoginFailedException(ex);
        } catch (IOException ex) {
            throw new LoginFailedException(ex);
        }
    }
} </s>
<s>class temp {    public BigInteger generateHashing(String value, int lengthBits) {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(this.algorithm);
            algorithm.update(value.getBytes());
            byte[] digest = algorithm.digest();
            BigInteger hashing = new BigInteger(+1, digest);
            if (lengthBits != digest.length * 8) {
                BigInteger length = new BigInteger("2");
                length = length.pow(lengthBits);
                hashing = hashing.mod(length);
            }
            return hashing;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalArgumentException("Error with algorithm", e);
        }
    }
} </s>
<s>class temp {    public void delete(Connection conn, boolean commit) throws SQLException {
        PreparedStatement stmt = null;
        if (isNew()) {
            String errorMessage = "Unable to delete non-persistent DAO '" + getClass().getName() + "'";
            if (log.isErrorEnabled()) {
                log.error(errorMessage);
            }
            throw new SQLException(errorMessage);
        }
        try {
            stmt = conn.prepareStatement(getDeleteSql());
            stmt.setObject(1, getPrimaryKey());
            int rowCount = stmt.executeUpdate();
            if (rowCount != 1) {
                if (commit) {
                    conn.rollback();
                }
                String errorMessage = "Invalid number of rows changed!";
                if (log.isErrorEnabled()) {
                    log.error(errorMessage);
                }
                throw new SQLException(errorMessage);
            } else if (commit) {
                conn.commit();
            }
        } finally {
            OvJdbcUtils.closeStatement(stmt);
        }
    }
} </s>
<s>class temp {    public void save(Connection conn, boolean commit) throws SQLException {
        PreparedStatement stmt = null;
        if (!isValid()) {
            String errorMessage = "Unable to save invalid DAO '" + getClass().getName() + "'!";
            if (log.isErrorEnabled()) {
                log.error(errorMessage);
            }
            throw new SQLException(errorMessage);
        }
        try {
            if (isNew()) {
                primaryKey = createNewPrimaryKey();
                stmt = conn.prepareStatement(getInsertSql());
            } else {
                stmt = conn.prepareStatement(getUpdateSql());
            }
            setValues(stmt);
            int rowCount = stmt.executeUpdate();
            if (rowCount != 1) {
                primaryKey = OvUuid.NULL_UUID;
                if (commit) {
                    conn.rollback();
                }
                String errorMessage = "Invalid number of rows changed!";
                if (log.isErrorEnabled()) {
                    log.error(errorMessage);
                }
                throw new SQLException(errorMessage);
            } else {
                if (commit) {
                    conn.commit();
                }
            }
        } finally {
            OvJdbcUtils.closeStatement(stmt);
        }
    }
} </s>
<s>class temp {    public ProcessorOutput createOutput(String name) {
        ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) {

            protected void readImpl(org.orbeon.oxf.pipeline.api.PipelineContext context, final ContentHandler contentHandler) {
                ProcessorInput i = getInputByName(INPUT_DATA);
                try {
                    Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() {

                        public Object read(org.orbeon.oxf.pipeline.api.PipelineContext context, ProcessorInput input) {
                            final Locator[] locator = new Locator[1];
                            GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() {

                                public void error(Locator[] locators, String s, Exception e) {
                                    throw new ValidationException(s, e, new LocationData(locators[0]));
                                }

                                public void warning(Locator[] locators, String s) {
                                    throw new ValidationException(s, new LocationData(locators[0]));
                                }

                                public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
                                    URL url = URLFactory.createURL((locator[0] != null && locator[0].getSystemId() != null) ? locator[0].getSystemId() : null, systemId);
                                    InputSource i = new InputSource(url.openStream());
                                    i.setSystemId(url.toString());
                                    return i;
                                }
                            });
                            readInputAsSAX(context, input, new ForwardingContentHandler(grammarReader) {

                                public void setDocumentLocator(Locator loc) {
                                    super.setDocumentLocator(loc);
                                    locator[0] = loc;
                                }
                            });
                            return grammarReader.getResultAsGrammar();
                        }
                    });
                    DocumentDeclaration vgm = new REDocumentDeclaration(grammar.getTopLevel(), new ExpressionPool());
                    Verifier verifier = new Verifier(vgm, new ErrorHandler()) {

                        boolean stopDecorating = false;

                        private void generateErrorElement(ValidationException ve) throws SAXException {
                            if (decorateOutput && ve != null) {
                                if (!stopDecorating) {
                                    AttributesImpl a = new AttributesImpl();
                                    a.addAttribute("", ValidationProcessor.MESSAGE_ATTRIBUTE, ValidationProcessor.MESSAGE_ATTRIBUTE, "CDATA", ve.getSimpleMessage());
                                    a.addAttribute("", ValidationProcessor.SYSTEMID_ATTRIBUTE, ValidationProcessor.SYSTEMID_ATTRIBUTE, "CDATA", ve.getLocationData().getSystemID());
                                    a.addAttribute("", ValidationProcessor.LINE_ATTRIBUTE, ValidationProcessor.LINE_ATTRIBUTE, "CDATA", Integer.toString(ve.getLocationData().getLine()));
                                    a.addAttribute("", ValidationProcessor.COLUMN_ATTRIBUTE, ValidationProcessor.COLUMN_ATTRIBUTE, "CDATA", Integer.toString(ve.getLocationData().getCol()));
                                    contentHandler.startElement(ValidationProcessor.ORBEON_ERROR_NS, ValidationProcessor.ERROR_ELEMENT, ValidationProcessor.ORBEON_ERROR_PREFIX + ":" + ValidationProcessor.ERROR_ELEMENT, a);
                                    contentHandler.endElement(ValidationProcessor.ORBEON_ERROR_NS, ValidationProcessor.ERROR_ELEMENT, ValidationProcessor.ORBEON_ERROR_PREFIX + ":" + ValidationProcessor.ERROR_ELEMENT);
                                    stopDecorating = true;
                                }
                            } else {
                                throw ve;
                            }
                        }

                        public void characters(char[] chars, int i, int i1) throws SAXException {
                            try {
                                super.characters(chars, i, i1);
                            } catch (ValidationException e) {
                                generateErrorElement(e);
                            }
                            contentHandler.characters(chars, i, i1);
                        }

                        public void endDocument() throws SAXException {
                            try {
                                super.endDocument();
                            } catch (ValidationException e) {
                                generateErrorElement(e);
                            }
                            contentHandler.endDocument();
                        }

                        public void endElement(String s, String s1, String s2) throws SAXException {
                            try {
                                super.endElement(s, s1, s2);
                            } catch (ValidationException e) {
                                generateErrorElement(e);
                            }
                            contentHandler.endElement(s, s1, s2);
                        }

                        public void startDocument() throws SAXException {
                            try {
                                super.startDocument();
                            } catch (ValidationException e) {
                                generateErrorElement(e);
                            }
                            contentHandler.startDocument();
                        }

                        public void startElement(String s, String s1, String s2, Attributes attributes) throws SAXException {
                            ((ErrorHandler) getErrorHandler()).setElement(s, s1);
                            try {
                                super.startElement(s, s1, s2, attributes);
                            } catch (ValidationException e) {
                                generateErrorElement(e);
                            }
                            contentHandler.startElement(s, s1, s2, attributes);
                        }

                        public void endPrefixMapping(String s) {
                            try {
                                super.endPrefixMapping(s);
                            } catch (ValidationException e) {
                                try {
                                    generateErrorElement(e);
                                } catch (SAXException se) {
                                    throw new OXFException(se.getException());
                                }
                            }
                            try {
                                contentHandler.endPrefixMapping(s);
                            } catch (SAXException se) {
                                throw new OXFException(se.getException());
                            }
                        }

                        public void processingInstruction(String s, String s1) {
                            try {
                                super.processingInstruction(s, s1);
                            } catch (ValidationException e) {
                                try {
                                    generateErrorElement(e);
                                } catch (SAXException se) {
                                    throw new OXFException(se.getException());
                                }
                            }
                            try {
                                contentHandler.processingInstruction(s, s1);
                            } catch (SAXException e) {
                                throw new OXFException(e.getException());
                            }
                        }

                        public void setDocumentLocator(Locator locator) {
                            try {
                                super.setDocumentLocator(locator);
                            } catch (ValidationException e) {
                                try {
                                    generateErrorElement(e);
                                } catch (SAXException se) {
                                    throw new OXFException(se.getException());
                                }
                            }
                            contentHandler.setDocumentLocator(locator);
                        }

                        public void skippedEntity(String s) {
                            try {
                                super.skippedEntity(s);
                            } catch (ValidationException e) {
                                try {
                                    generateErrorElement(e);
                                } catch (SAXException se) {
                                    throw new OXFException(se.getMessage());
                                }
                            }
                            try {
                                contentHandler.skippedEntity(s);
                            } catch (SAXException e) {
                                throw new OXFException(e.getException());
                            }
                        }

                        public void startPrefixMapping(String s, String s1) {
                            try {
                                super.startPrefixMapping(s, s1);
                            } catch (ValidationException e) {
                                try {
                                    generateErrorElement(e);
                                } catch (SAXException se) {
                                    throw new OXFException(se.getException());
                                }
                            }
                            try {
                                contentHandler.startPrefixMapping(s, s1);
                            } catch (SAXException e) {
                                throw new OXFException(e.getException());
                            }
                        }
                    };
                    readInputAsSAX(context, getInputByName(INPUT_DATA), verifier);
                } catch (Exception e) {
                    throw new OXFException(e);
                }
            }
        };
        addOutput(name, output);
        return output;
    }
} </s>
<s>class temp {    public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) {
        TestCase.assertNotNull(ui);
        TestCase.assertNotNull(zipFileName);
        TestCase.assertFalse(zipFileName.trim().length() == 0);
        TestCase.assertNotNull(filesToZip);
        TestCase.assertNotNull(timestamp);
        String nameCopy = zipFileName;
        if (nameCopy.endsWith(".zip")) {
            nameCopy = nameCopy.substring(0, zipFileName.length() - 4);
        }
        nameCopy = nameCopy + "_" + timestamp.toString() + ".zip";
        final String finalZip = nameCopy;
        IWorkspaceRunnable noResourceChangedEventsRunner = new IWorkspaceRunnable() {

            public void run(IProgressMonitor runnerMonitor) throws CoreException {
                try {
                    Map<String, File> projectFiles = new HashMap<String, File>();
                    IPath basePath = new Path("/");
                    for (File nextLocation : filesToZip) {
                        projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter));
                    }
                    if (projectFiles.isEmpty()) {
                        PlatformActivator.logDebug("Zip file (" + zipFileName + ") not created because there were no files to zip");
                        return;
                    }
                    IPath resultsPath = PlatformActivator.getDefault().getResultsPath();
                    File copyRoot = resultsPath.toFile();
                    copyRoot.mkdirs();
                    IPath zipFilePath = resultsPath.append(new Path(finalZip));
                    String zipFileName = zipFilePath.toPortableString();
                    ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName));
                    try {
                        out.setLevel(Deflater.DEFAULT_COMPRESSION);
                        for (String filePath : projectFiles.keySet()) {
                            File nextFile = projectFiles.get(filePath);
                            FileInputStream fin = new FileInputStream(nextFile);
                            try {
                                out.putNextEntry(new ZipEntry(filePath));
                                try {
                                    byte[] bin = new byte[4096];
                                    int bread = fin.read(bin, 0, 4096);
                                    while (bread != -1) {
                                        out.write(bin, 0, bread);
                                        bread = fin.read(bin, 0, 4096);
                                    }
                                } finally {
                                    out.closeEntry();
                                }
                            } finally {
                                fin.close();
                            }
                        }
                    } finally {
                        out.close();
                    }
                } catch (FileNotFoundException e) {
                    Status error = new Status(Status.ERROR, PlatformActivator.PLUGIN_ID, Status.ERROR, e.getLocalizedMessage(), e);
                    throw new CoreException(error);
                } catch (IOException e) {
                    Status error = new Status(Status.ERROR, PlatformActivator.PLUGIN_ID, Status.ERROR, e.getLocalizedMessage(), e);
                    throw new CoreException(error);
                }
            }
        };
        try {
            IWorkspace workspace = ResourcesPlugin.getWorkspace();
            workspace.run(noResourceChangedEventsRunner, workspace.getRoot(), IWorkspace.AVOID_UPDATE, new NullProgressMonitor());
        } catch (CoreException ce) {
            PlatformActivator.logException(ce);
        }
    }
} </s>
<s>class temp {            public void run(IProgressMonitor runnerMonitor) throws CoreException {
                try {
                    Map<String, File> projectFiles = new HashMap<String, File>();
                    IPath basePath = new Path("/");
                    for (File nextLocation : filesToZip) {
                        projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter));
                    }
                    if (projectFiles.isEmpty()) {
                        PlatformActivator.logDebug("Zip file (" + zipFileName + ") not created because there were no files to zip");
                        return;
                    }
                    IPath resultsPath = PlatformActivator.getDefault().getResultsPath();
                    File copyRoot = resultsPath.toFile();
                    copyRoot.mkdirs();
                    IPath zipFilePath = resultsPath.append(new Path(finalZip));
                    String zipFileName = zipFilePath.toPortableString();
                    ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName));
                    try {
                        out.setLevel(Deflater.DEFAULT_COMPRESSION);
                        for (String filePath : projectFiles.keySet()) {
                            File nextFile = projectFiles.get(filePath);
                            FileInputStream fin = new FileInputStream(nextFile);
                            try {
                                out.putNextEntry(new ZipEntry(filePath));
                                try {
                                    byte[] bin = new byte[4096];
                                    int bread = fin.read(bin, 0, 4096);
                                    while (bread != -1) {
                                        out.write(bin, 0, bread);
                                        bread = fin.read(bin, 0, 4096);
                                    }
                                } finally {
                                    out.closeEntry();
                                }
                            } finally {
                                fin.close();
                            }
                        }
                    } finally {
                        out.close();
                    }
                } catch (FileNotFoundException e) {
                    Status error = new Status(Status.ERROR, PlatformActivator.PLUGIN_ID, Status.ERROR, e.getLocalizedMessage(), e);
                    throw new CoreException(error);
                } catch (IOException e) {
                    Status error = new Status(Status.ERROR, PlatformActivator.PLUGIN_ID, Status.ERROR, e.getLocalizedMessage(), e);
                    throw new CoreException(error);
                }
            }
} </s>
<s>class temp {    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws java.io.IOException, ServletException {
        PageContext pageContext = null;
        HttpSession session = null;
        ServletContext application = null;
        ServletConfig config = null;
        JspWriter out = null;
        Object page = this;
        JspWriter _jspx_out = null;
        PageContext _jspx_page_context = null;
        try {
            response.setContentType("text/html;charset=UTF-8");
            pageContext = _jspxFactory.getPageContext(this, request, response, null, true, 8192, true);
            _jspx_page_context = pageContext;
            application = pageContext.getServletContext();
            config = pageContext.getServletConfig();
            session = pageContext.getSession();
            out = pageContext.getOut();
            _jspx_out = out;
            _jspx_resourceInjector = (org.apache.jasper.runtime.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            String username = "test";
            String password = "test";
            int providerId = 1;
            if (request.getParameter("providerId") != null) providerId = Integer.parseInt(request.getParameter("providerId"));
            String thisPageContextAddress = "http://localhost:8080/" + request.getContextPath();
            String thisPageServingAddress = thisPageContextAddress + "/index.jsp";
            String token = "";
            String token_timeout = (String) request.getParameter("token_timeout");
            String referer = request.getHeader("Referer");
            if (token_timeout != null && token_timeout.equals("true")) {
                System.out.println("token timeout for referer" + referer);
                if (referer != null) {
                    if (request.getSession().getServletContext().getAttribute("token_timeout_processing_lock") == null) {
                        request.getSession().getServletContext().setAttribute("token_timeout_processing_lock", true);
                        byte[] buff = null;
                        BufferedInputStream bis = null;
                        URL url = new URL(thisPageContextAddress + "/ServerAdminServlet?action=login&username=" + username + "&password=" + password);
                        URLConnection urlc = url.openConnection();
                        int length = urlc.getContentLength();
                        InputStream in = urlc.getInputStream();
                        buff = new byte[length];
                        int bytesRead = 0;
                        while (bytesRead < length) {
                            bytesRead += in.read(buff, bytesRead, in.available());
                        }
                        token = new String(buff);
                        token = token.replaceAll("[\\r\\f]", "");
                        token = token.trim();
                        request.getSession().getServletContext().setAttribute("token", token);
                        out.println(token);
                        request.getSession().getServletContext().removeAttribute("token_timeout_processing_lock");
                    } else out.println("token_timeout_processing_lock");
                }
            } else {
                if (request.getSession().getServletContext().getAttribute("token") == null || request.getSession().getServletContext().getAttribute("token").equals("")) {
                    byte[] buff = null;
                    BufferedInputStream bis = null;
                    URL url = new URL(thisPageContextAddress + "/ServerAdminServlet?action=login&username=" + username + "&password=" + password);
                    URLConnection urlc = url.openConnection();
                    int length = urlc.getContentLength();
                    InputStream in = urlc.getInputStream();
                    buff = new byte[length];
                    int bytesRead = 0;
                    while (bytesRead < length) {
                        bytesRead += in.read(buff, bytesRead, in.available());
                    }
                    token = new String(buff);
                    token = token.replaceAll("[\\r\\f]", "");
                    token = token.trim();
                    request.getSession().getServletContext().setAttribute("token", token);
                }
                out.write("<html>\n");
                out.write("  <head>\n");
                out.write("    <title>AJAX test </title>\n");
                out.write("    <script type=\"text/javascript\" src=\"OpenLayers-2.8/OpenLayers.js\"></script>\n");
                out.write("    <script type=\"text/javascript\">\n");
                out.write("\n");
                out.write("        function init(){\n");
                out.write("\n");
                out.write("            var token = \"");
                out.print(request.getSession().getServletContext().getAttribute("token"));
                out.write("\";\n");
                out.write("\n");
                out.write("            var options = {\n");
                out.write("                            maxExtent: new OpenLayers.Bounds(-600, -300, 0, 400),\n");
                out.write("                            maxResolution: 4.77730, minRezolution: 78271.517, numZoomLevels: 15, units: 'm'\n");
                out.write("                          }\n");
                out.write("\n");
                out.write("\n");
                out.write("            var map = new OpenLayers.Map('map', options);\n");
                out.write("            var layer = new OpenLayers.Layer.TMS(\"TMS\", \"/WebGISTileServer/TMSServletProxy/\" + token + \"/7/\",\n");
                out.write("                                                { layername: 'TMS', type: 'png' });\n");
                out.write("            map.addLayer(layer);\n");
                out.write("            map.addControl(new OpenLayers.Control.MousePosition());\n");
                out.write("            map.setCenter(new OpenLayers.LonLat(-300, 120), 4);\n");
                out.write("        }\n");
                out.write("    </script>\n");
                out.write("  </head>\n");
                out.write("  <body onload=\"init()\">\n");
                out.write("      <H1>TeleAtlas map with TMS</H1>\n");
                out.write("      <div id=\"map\" style=\"width:100%; height:90%\"></div>\n");
                out.write("  </body>\n");
                out.write("</html>");
            }
        } catch (Throwable t) {
            if (!(t instanceof SkipPageException)) {
                out = _jspx_out;
                if (out != null && out.getBufferSize() != 0) out.clearBuffer();
                if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
            }
        } finally {
            _jspxFactory.releasePageContext(_jspx_page_context);
        }
    }
} </s>
<s>class temp {    private static String hashPassword(String password) {
        try {
            String hashword = null;
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashword = hash.toString(16);
            return hashword;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
} </s>
<s>class temp {    protected boolean loadJarLibrary(final String jarLib) {
        final String tempLib = System.getProperty("java.io.tmpdir") + File.separator + jarLib;
        boolean copied = IOUtils.copyFile(jarLib, tempLib);
        if (!copied) {
            return false;
        }
        System.load(tempLib);
        return true;
    }
} </s>
<s>class temp {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        UsuarioBll usuarioBll = new UsuarioBll();
        String senha = "";
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.update(request.getParameter("Senha").getBytes(), 0, request.getParameter("Senha").length());
            senha = new BigInteger(1, messageDigest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String[] data = request.getParameter("Nascimento").split("/");
        Calendar calendar = Calendar.getInstance();
        calendar.set(Integer.parseInt(data[2]), Integer.parseInt(data[1]) - 1, Integer.parseInt(data[0]));
        Telefone telefone = new Telefone();
        Usuario usuario = new Usuario();
        usuario.setNome(request.getParameter("Nome"));
        telefone.setTelefone(request.getParameter("Telefone").replaceAll("\\D", ""));
        telefone.setTelefoneTipo(TelefoneTipoBll.getTelefoneTipoByTelefoneTipoID(Integer.parseInt(request.getParameter("TipoTelefone"))));
        usuario.setTelefone(telefone);
        usuario.setEmail(request.getParameter("Email"));
        usuario.setCpf(request.getParameter("CPF").replaceAll("\\D", ""));
        usuario.setNascimento(calendar);
        Endereco endereco = new Endereco();
        endereco.setCep(Integer.parseInt(request.getParameter("CEP").replaceAll("\\D", "")));
        endereco.setNumero(request.getParameter("Numero"));
        endereco.setComplemento(request.getParameter("Complemento"));
        usuario.setEndereco(endereco);
        usuario.setSenha(senha);
        String msg = "?msg=0";
        if (usuarioBll.addNewUsuario(usuario)) {
            msg = "?msg=1";
            Usuario usuarioAutenticado = UsuarioBll.getUsuarioByEmailAndSenha(usuario.getEmail(), usuario.getSenha());
            HttpSession session = request.getSession();
            session.setAttribute("usuario", usuarioAutenticado);
        }
        response.sendRedirect("templates/verde-rosa/cadastro.jsp" + msg);
    }
} </s>
<s>class temp {            @Override
            public InputStream getInputStream() {
                try {
                    String url = webBrowserObject.resourcePath;
                    File file = Utils.getLocalFile(url);
                    if (file != null) {
                        url = webBrowserObject.getLocalFileURL(file);
                    }
                    url = url.substring(0, url.lastIndexOf('/')) + "/" + resource;
                    return new URL(url).openStream();
                } catch (Exception e) {
                }
                return null;
            }
} </s>
<s>class temp {    private byte[] loadResourceFromCodeBase(String name) {
        byte[] bytecode;
        InputStream is = null;
        logger.debug("LoadResourceFromCodeBase()++");
        try {
            URL url = new URL(this._codeBase, name);
            int content_length = -1;
            URLConnection connection = url.openConnection();
            connection.setRequestProperty("user-agent", "Aglets/1.1");
            connection.setRequestProperty("agent-system", "aglets");
            connection.setRequestProperty("agent-language", "java");
            connection.setDoInput(true);
            connection.setUseCaches(false);
            connection.connect();
            is = connection.getInputStream();
            content_length = connection.getContentLength();
            if (content_length < 0) {
                content_length = is.available();
            }
            if (content_length == 0) {
                return null;
            }
            bytecode = new byte[content_length];
            int offset = 0;
            while (content_length > 0) {
                int read = is.read(bytecode, offset, content_length);
                offset += read;
                content_length -= read;
            }
            is.close();
        } catch (IOException ex) {
            logger.error("Error loading [" + name + "] resource from [" + this._codeBase + "]", ex);
            bytecode = null;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (Exception ex) {
                    logger.error("Error closing.", ex);
                }
            }
        }
        logger.debug("LoadResourceFromCodeBase()--");
        return bytecode;
    }
} </s>
<s>class temp {    public static BufferedReader getUserSolveStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL("http://www.spoj.pl/status/" + name.toLowerCase() + "/signedlist/");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }
} </s>
<s>class temp {    private static synchronized byte[] gerarHash(String frase) {
        try {
            MessageDigest md = MessageDigest.getInstance(algoritmo);
            md.update(frase.getBytes());
            return md.digest();
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
} </s>
<s>class temp {    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL("http://www.spoj.pl/users/" + name.toLowerCase() + "/");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }
} </s>
<s>class temp {    private synchronized Map load() {
        if (!mustReloadConfigurationFiles()) {
            return groups;
        }
        SAXParser saxParser = null;
        JSODefaultHandler saxHandler = new JSODefaultHandler();
        try {
            final Collection resourcesByOrigin = getConfigResources();
            final LinkedList resourcesList = new LinkedList();
            Iterator iOrigin = resourcesByOrigin.iterator();
            while (iOrigin.hasNext()) {
                Resource resource = (Resource) iOrigin.next();
                String origin = resource.getSource();
                if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) {
                    LOG.debug("Adding " + CONFIGURATION_FILE_NAME + " from " + origin + ".");
                    resourcesList.addFirst(resource.getUrl());
                } else {
                    LOG.debug("Jar " + origin + " refused. See jso.allowedJar property in jso.properties file.");
                }
            }
            URL external = getExternalResource();
            if (external != null) {
                resourcesList.addFirst(external);
            }
            saxParser = SAXParserFactory.newInstance().newSAXParser();
            Iterator ite = resourcesList.iterator();
            while (ite.hasNext()) {
                final URL url = (URL) ite.next();
                LOG.debug("Parsing of file " + url.toString() + ".");
                InputStream input = null;
                try {
                    input = url.openStream();
                    saxParser.parse(input, saxHandler);
                } catch (SAXException e) {
                    LOG.error("Parsing of file " + url.toString() + " failed! Parsing still continues.", e);
                } catch (IOException e) {
                    LOG.error("Reading of file " + url.toString() + " failed! Parsing still continues.", e);
                } finally {
                    if (input != null) {
                        try {
                            input.close();
                        } catch (IOException e) {
                            LOG.error("Closing inputstream of file " + url.toString() + " failed! Parsing still continues.", e);
                        }
                    }
                }
            }
        } catch (SAXException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ParserConfigurationException e) {
            throw new RuntimeException(e);
        }
        this.defaultLocation = (String) saxHandler.getDefaultValues().get("location");
        this.defaultTimestampPolicy = (String) saxHandler.getDefaultValues().get("timeStampPolicy");
        if (this.defaultTimestampPolicy == null) this.defaultTimestampPolicy = Group.TIMESTAMP_LOCAL;
        this.groups = saxHandler.getListGroups();
        return this.groups;
    }
} </s>
<s>class temp {    @Override
    protected void writeSnapshot(final String message, final String details) {
        try {
            final URL url = proxyAddress == null ? new URL(url_spec) : new URL("http", proxyAddress, proxyPort, url_spec);
            LOG.info("connect to " + url);
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            final HttpQueryWriter out = new HttpQueryWriter(connection.getOutputStream());
            out.addParameter("error", message);
            out.addParameter("trace", details);
            out.close();
            final InputStream in = connection.getInputStream();
            int c;
            final StringBuffer result = new StringBuffer();
            while ((c = in.read()) != -1) {
                result.append((char) c);
            }
            LOG.info(result);
            in.close();
        } catch (final UnknownHostException e) {
            LOG.info("could not find host (unknown host) to submit log to");
        } catch (final IOException e) {
            LOG.debug("i/o problem submitting log", e);
        }
    }
} </s>
<s>class temp {    public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {
        this.zipFileName = url.toString();
        URLConnection urlConnection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        unzipNativeFormatFile(inputStream);
        parseAlertFiles();
        deleteAlertFiles();
    }
} </s>
<s>class temp {    private HttpURLConnection getItemURLConnection(final String method, final String id, final byte[] data, final Map<String, List<String>> headers) throws IOException {
        if (m_bucket == null) {
            throw new IllegalArgumentException("bucket is not set");
        }
        final URL itemURL = new URL("http://" + m_host + "/" + m_bucket + "/" + id);
        final HttpURLConnection urlConn = (HttpURLConnection) itemURL.openConnection();
        urlConn.setRequestMethod(method);
        urlConn.setReadTimeout(READ_TIMEOUT);
        if (headers != null) {
            for (final Map.Entry<String, List<String>> me : headers.entrySet()) {
                for (final String v : me.getValue()) {
                    urlConn.setRequestProperty(me.getKey(), v);
                }
            }
        }
        addAuthorization(urlConn, method, data);
        return urlConn;
    }
} </s>
<s>class temp {    public String getUniqueId() {
        String digest = "";
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            String timeVal = "" + (System.currentTimeMillis() + 1);
            String localHost = "";
            ;
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
            }
            String randVal = "" + new Random().nextInt();
            String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
        }
        return digest;
    }
} </s>
<s>class temp {    private void updateHoraatendo(Integer codemp, Integer codfilial, Integer codatendo, String horaatendo, String horaatendofin) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append("update atatendimento set horaatendo=?, horaatendofin=? ");
        sql.append("where codemp=? and codfilial=? and codatendo=?");
        PreparedStatement ps = getConn().prepareStatement(sql.toString());
        ps.setTime(1, Funcoes.strTimeToSqlTime(horaatendo, false));
        ps.setTime(2, Funcoes.strTimeToSqlTime(horaatendofin, false));
        ps.setInt(3, codemp);
        ps.setInt(4, codfilial);
        ps.setInt(5, codatendo);
        ps.executeUpdate();
        ps.close();
        try {
            getConn().commit();
        } catch (SQLException e) {
            getConn().rollback();
        }
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        URL url = Thread.currentThread().getContextClassLoader().getResource("org/jeditor/resources/jeditor.properties");
        try {
            PropertyResourceBundle prb = new PropertyResourceBundle(url.openStream());
            String version = prb.getString("version");
            String date = prb.getString("date");
            System.out.println("jEditor version " + version + " build on " + date);
            System.out.println("Distributed under GPL license");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
} </s>
<s>class temp {    private void publishMap(LWMap map) throws IOException {
        File savedMap = PublishUtil.saveMap(map);
        InputStream istream = new BufferedInputStream(new FileInputStream(savedMap));
        OutputStream ostream = new BufferedOutputStream(new FileOutputStream(ActionUtil.selectFile("ConceptMap", "vue")));
        int fileLength = (int) savedMap.length();
        byte bytes[] = new byte[fileLength];
        while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength);
        istream.close();
        ostream.close();
    }
} </s>
<s>class temp {    private void publishCMap(LWMap map) throws IOException {
        try {
            File savedCMap = PublishUtil.createIMSCP(Publisher.resourceVector);
            InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap));
            OutputStream ostream = new BufferedOutputStream(new FileOutputStream(ActionUtil.selectFile("IMSCP", "zip")));
            int fileLength = (int) savedCMap.length();
            byte bytes[] = new byte[fileLength];
            while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength);
            istream.close();
            ostream.close();
        } catch (IOException ex) {
            throw ex;
        } catch (Exception ex) {
            System.out.println(ex);
            VueUtil.alert(VUE.getDialogParent(), VueResources.getString("dialog.export.message") + ex.getMessage(), VueResources.getString("dialog.export.title"), JOptionPane.ERROR_MESSAGE);
        }
    }
} </s>
<s>class temp {    private void publishZip(LWMap map) {
        try {
            if (map.getFile() == null) {
                VueUtil.alert(VueResources.getString("dialog.mapsave.message"), VueResources.getString("dialog.mapsave.title"));
                return;
            }
            File savedCMap = PublishUtil.createZip(map, Publisher.resourceVector);
            InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap));
            OutputStream ostream = new BufferedOutputStream(new FileOutputStream(ActionUtil.selectFile("Export to Zip File", "zip")));
            int fileLength = (int) savedCMap.length();
            byte bytes[] = new byte[fileLength];
            while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength);
            istream.close();
            ostream.close();
        } catch (Exception ex) {
            System.out.println(ex);
            VueUtil.alert(VUE.getDialogParent(), VueResources.getString("dialog.export.message") + ex.getMessage(), VueResources.getString("dialog.export.title"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
} </s>
<s>class temp {    private FeedIF retrieveFeed(String uri) throws FeedManagerException {
        try {
            URL urlToRetrieve = new URL(uri);
            URLConnection conn = null;
            try {
                conn = urlToRetrieve.openConnection();
                if (conn instanceof HttpURLConnection) {
                    HttpURLConnection httpConn = (HttpURLConnection) conn;
                    httpConn.setInstanceFollowRedirects(true);
                    HttpHeaderUtils.setUserAgent(httpConn, "Informa Java API");
                    logger.debug("retr feed at url " + uri + ": ETag" + HttpHeaderUtils.getETagValue(httpConn) + " if-modified :" + HttpHeaderUtils.getLastModified(httpConn));
                    this.httpHeaders.setETag(HttpHeaderUtils.getETagValue(httpConn));
                    this.httpHeaders.setIfModifiedSince(HttpHeaderUtils.getLastModified(httpConn));
                }
            } catch (java.lang.ClassCastException e) {
                conn = null;
                logger.warn("problem cast to HttpURLConnection " + uri, e);
                throw new FeedManagerException(e);
            } catch (NullPointerException e) {
                logger.error("problem NPE " + uri + " conn=" + conn, e);
                conn = null;
                throw new FeedManagerException(e);
            }
            ChannelIF channel = null;
            channel = FeedParser.parse(getChannelBuilder(), conn.getInputStream());
            this.timeToExpire = getTimeToExpire(channel);
            this.feed = new Feed(channel);
            Date currDate = new Date();
            this.feed.setLastUpdated(currDate);
            this.feed.setDateFound(currDate);
            this.feed.setLocation(urlToRetrieve);
            logger.info("feed retrieved " + uri);
        } catch (IOException e) {
            logger.error("IOException " + feedUri + " e=" + e);
            e.printStackTrace();
            throw new FeedManagerException(e);
        } catch (ParseException e) {
            e.printStackTrace();
            throw new FeedManagerException(e);
        }
        return this.feed;
    }
} </s>
<s>class temp {    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error: " + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(":");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
} </s>
<s>class temp {    protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        setTitle(DialogsMessages.getString("LicenseDialog.Caption"));
        setMessage(DialogsMessages.getString("LicenseDialog.Explanation"));
        Composite content = new Composite(composite, SWT.NONE);
        content.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout layout = new GridLayout(1, false);
        layout.numColumns = ncol;
        content.setLayout(layout);
        Browser browser = null;
        Text text = null;
        try {
            browser = new Browser(content, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            text.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? "license.html" : "license.txt");
        InputStream in = null;
        BufferedReader r = null;
        StringBuffer sb = new StringBuffer();
        try {
            in = url.openStream();
            r = new BufferedReader(new InputStreamReader(in, "ISO-8859-1"));
            String line;
            while ((line = r.readLine()) != null) sb.append(line).append("\r\n");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());
        return composite;
    }
} </s>
<s>class temp {    @Override
    public synchronized HttpURLConnection getTileUrlConnection(int zoom, int tilex, int tiley) throws IOException {
        HttpURLConnection conn = null;
        try {
            String url = getTileUrl(zoom, tilex, tiley);
            conn = (HttpURLConnection) new URL(url).openConnection();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            log.error("", e);
            throw new IOException(e);
        }
        try {
            i.set("conn", conn);
            i.eval("addHeaders(conn);");
        } catch (EvalError e) {
            String msg = e.getMessage();
            if (!AH_ERROR.equals(msg)) {
                log.error(e.getClass() + ": " + e.getMessage(), e);
                throw new IOException(e);
            }
        }
        return conn;
    }
} </s>
<s>class temp {    public static void main(String[] args) throws MalformedURLException, IOException {
        InputStream in = null;
        try {
            in = new URL("hdfs://localhost:8020/user/leeing/maxtemp/sample.txt").openStream();
            IOUtils.copyBytes(in, System.out, 8192, false);
        } finally {
            IOUtils.closeStream(in);
            System.out.println("\nend.");
        }
    }
} </s>
<s>class temp {    public static Recipes addRecipe(Lists complexity, String about, String title, Users user, int preparationTime, int cookingTime, int servings, Lists dishType, String picUrl, Iterable<String> instructions) throws Exception {
        URL url = new URL(picUrl);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.connect();
        Recipes rec = new Recipes(user, title, about, preparationTime, cookingTime, servings, complexity, dishType, Hibernate.createBlob(conn.getInputStream(), conn.getContentLength()), new Date(), 0);
        session.save(rec);
        for (String s : instructions) {
            createRecipeInstructions(rec, s);
        }
        return rec;
    }
} </s>
<s>class temp {    public static void main(String[] args) {
        try {
            Transaction transaction = session.beginTransaction();
            URL url1 = new URL("http://www.cs.huji.ac.il/~keren_ha/J2EE/keren.jpg");
            HttpURLConnection conn1 = (HttpURLConnection) url1.openConnection();
            conn1.connect();
            Users keren = new Users("kerenhaas@gmail.com", "123456", "keren", null, "sokolov 14 Raanana", Hibernate.createBlob(conn1.getInputStream(), conn1.getContentLength()), "about keren", "admin", false);
            session.save(keren);
            session.flush();
            session.refresh(keren);
            URL url2 = new URL("http://www.cs.huji.ac.il/~keren_ha/J2EE/alex.jpg");
            HttpURLConnection conn2 = (HttpURLConnection) url2.openConnection();
            Users alex = new Users("alex.uretsky@mail.huji.ac.il", "123456", "alex", null, null, Hibernate.createBlob(conn2.getInputStream(), conn2.getContentLength()), null, "admin", false);
            session.save(alex);
            session.flush();
            session.refresh(alex);
            URL url3 = new URL("http://www.cs.huji.ac.il/~keren_ha/J2EE/julia.jpg");
            HttpURLConnection conn3 = (HttpURLConnection) url3.openConnection();
            conn3.connect();
            Users julia = new Users("juliasht@gmail.com", "123456", "julia", null, null, Hibernate.createBlob(conn3.getInputStream(), conn3.getContentLength()), null, "admin", false);
            session.save(julia);
            session.flush();
            session.refresh(julia);
            URL url4 = new URL("http://www.cs.huji.ac.il/~keren_ha/J2EE/meir.jpg");
            HttpURLConnection conn4 = (HttpURLConnection) url4.openConnection();
            conn4.connect();
            Users meir = new Users("meir.spielrein@mail.huji.ac.il", "123456", "meir", null, null, Hibernate.createBlob(conn4.getInputStream(), conn4.getContentLength()), null, "admin", false);
            session.save(meir);
            session.flush();
            session.refresh(meir);
            URL url5 = new URL("http://www.cs.huji.ac.il/~keren_ha/J2EE/miki.jpg");
            HttpURLConnection conn5 = (HttpURLConnection) url5.openConnection();
            conn5.connect();
            Users miki = new Users("miki.shifman@mail.huji.ac.il", "123456", "miki", null, null, Hibernate.createBlob(conn5.getInputStream(), conn5.getContentLength()), null, "admin", false);
            session.save(miki);
            session.flush();
            session.refresh(miki);
            URL url6 = new URL("http://www.cs.huji.ac.il/~keren_ha/J2EE/tamar.jpg");
            HttpURLConnection conn6 = (HttpURLConnection) url6.openConnection();
            conn6.connect();
            Users tami = new Users("taamar@gmail.com", "123456", "tami", null, null, Hibernate.createBlob(conn6.getInputStream(), conn6.getContentLength()), null, "admin", false);
            session.save(tami);
            session.flush();
            session.refresh(tami);
            Lists basicComplexity = new Lists("Complexity", "Basic");
            session.save(basicComplexity);
            Lists mediumComplexity = new Lists("Complexity", "Medium");
            session.save(mediumComplexity);
            Lists highComplexity = new Lists("Complexity", "High");
            session.save(highComplexity);
            Lists chefComplexity = new Lists("Complexity", "Chef");
            session.save(chefComplexity);
            Lists appetizers = new Lists("DishType", "Appetizers");
            session.save(appetizers);
            Lists firstCourse = new Lists("DishType", "First Course");
            session.save(firstCourse);
            Lists mainCourse = new Lists("DishType", "Main Course");
            session.save(mainCourse);
            Lists dessert = new Lists("DishType", "Dessert");
            session.save(dessert);
            Lists cocktails = new Lists("DishType", "Cocktails");
            session.save(cocktails);
            System.out.println("2 : " + session.isOpen());
            Lists italian = new Lists("Cuisine", "Italian");
            session.save(italian);
            Lists chinese = new Lists("Cuisine", "Chinese");
            session.save(chinese);
            Lists indian = new Lists("Cuisine", "Indian");
            session.save(indian);
            Lists french = new Lists("Cuisine", "French");
            session.save(french);
            Lists thai = new Lists("Cuisine", "Thai");
            session.save(thai);
            Lists arabic = new Lists("Cuisine", "Arabic");
            session.save(arabic);
            Lists israeli = new Lists("Cuisine", "Israeli");
            session.save(israeli);
            Lists other = new Lists("Cuisine", "Other");
            session.save(other);
            Ingredients flour = new Ingredients("flour");
            session.save(flour);
            Ingredients sugar = new Ingredients("white sugar");
            session.save(sugar);
            Ingredients bakingPower = new Ingredients("baking powder");
            session.save(bakingPower);
            Ingredients groundNutmeg = new Ingredients("ground nutmeg");
            session.save(groundNutmeg);
            Ingredients salt = new Ingredients("salt");
            session.save(salt);
            Ingredients pepper = new Ingredients("pepper");
            session.save(pepper);
            Ingredients egg = new Ingredients("egg");
            session.save(egg);
            Ingredients milk = new Ingredients("milk");
            session.save(milk);
            Ingredients butter = new Ingredients("butter");
            session.save(butter);
            Ingredients groundCinnamon = new Ingredients("ground cinnamon");
            session.save(groundCinnamon);
            Ingredients strawberries = new Ingredients("strawberries");
            session.save(strawberries);
            Ingredients bisquick = new Ingredients("bisquick");
            session.save(bisquick);
            Ingredients whippedCream = new Ingredients("Whipped Cream");
            session.save(whippedCream);
            Ingredients potato = new Ingredients("potato");
            session.save(potato);
            Ingredients carrot = new Ingredients("carrot");
            session.save(carrot);
            Ingredients onion = new Ingredients("onion");
            session.save(onion);
            Ingredients ketchup = new Ingredients("ketchup");
            session.save(ketchup);
            Ingredients mustard = new Ingredients("mustard");
            session.save(mustard);
            Ingredients cookingCream = new Ingredients("Cooking Cream");
            session.save(cookingCream);
            Ingredients bread = new Ingredients("bread");
            session.save(bread);
            Ingredients caviar = new Ingredients("caviar");
            session.save(caviar);
            Ingredients foigra = new Ingredients("foigra");
            session.save(foigra);
            Ingredients vodka = new Ingredients("vodka");
            session.save(vodka);
            Ingredients orangeJuice = new Ingredients("orangeJuice");
            session.save(orangeJuice);
            Ingredients ribs = new Ingredients("ribs");
            session.save(ribs);
            Ingredients tomato = new Ingredients("tomato");
            session.save(tomato);
            Ingredients cucumber = new Ingredients("cucumber");
            session.save(cucumber);
            Ingredients oliveoil = new Ingredients("olive oil");
            session.save(oliveoil);
            Ingredients chickenBreast = new Ingredients("chicken Breast");
            session.save(chickenBreast);
            Ingredients apple = new Ingredients("apple");
            session.save(apple);
            Ingredients vanilla = new Ingredients("vanilla");
            session.save(vanilla);
            String description;
            description = "These muffins are delicious! The cinnamon sugar topping flavors them perfectly. This is my 10 year old brother's favorite recipe";
            Recipes rec1 = addRecipe(basicComplexity, description, "French Breakfast Muffins", keren, 10, 25, 12, dessert, "http://www.cs.huji.ac.il/~keren_ha/J2EE/muffins.jpg", Arrays.asList("Preheat oven to 350 degrees F (175 degrees C). Grease muffin cups or line with paper muffin liners.", "In a medium mixing bowl, stir together flour, 1/2 cup sugar, baking powder, nutmeg and salt. Make a well in the center of the mixture. Stir together egg, milk and 1/3 cup melted butter. Add egg mixture to flour mixture; stir until just moistened (batter may be lumpy). Spoon batter into prepared muffin cups.", "Bake in preheated oven for 20 to 25 minutes. Meanwhile, combine 1/4 cup sugar, cinnamon When muffins are finished baking, dip tops of muffins in the melted butter, and then in the cinnamon sugar mixture. Serve warm."));
            createRecipeIngredients(rec1, flour, 1.5, "cups");
            createRecipeIngredients(rec1, sugar, 0.5, "cups");
            createRecipeIngredients(rec1, bakingPower, 1.5, "teaspoons");
            createRecipeIngredients(rec1, groundNutmeg, 0.25, "teaspoons");
            createRecipeIngredients(rec1, salt, 0.125, "teaspoons");
            createRecipeIngredients(rec1, egg, 1, "lightly beaten");
            createRecipeIngredients(rec1, milk, 0.5, "cups");
            createRecipeIngredients(rec1, butter, 0.33, "cups");
            createRecipeIngredients(rec1, groundCinnamon, 0.25, "cups");
            createRecipeIngredients(rec1, groundCinnamon, 0.5, "teaspoon");
            createRecipeIngredients(rec1, sugar, 0.33, "cups");
            session.flush();
            session.refresh(rec1);
            description = "This dish leaves even the biggest pasta lover satisfied. Fresh vegetables make this dish wonderful and it's easy to add meat to if you wish.";
            Recipes rec2 = addRecipe(mediumComplexity, description, "Veggie Pasta Minus the Pasta", alex, 30, 40, 6, mainCourse, "http://2.bp.blogspot.com/_wAVccjOeYzc/R4KYRa5MkLI/AAAAAAAAGz8/WeosqyuyjoQ/s400/vegetarian-tofu-curry-recipe+(13).JPG", Arrays.asList("Preheat an oven to 350 degrees F (175 degrees C). Arrange the tomatoes on a baking sheet with the cut sides facing up. ", "Roast the tomatoes in the preheated oven until cooked through and slightly browned on the underside, about 15 minutes. ", "Place squash halves face down in glass baking dish with the water; cover with plastic wrap. Microwave on High for 8 minutes. Leave covered and set aside. Once the squash is cool enough to handle, scrape in strands into a large bowl with a fork; season with salt and pepper and toss with 1 tablespoon olive oil. ", "Heat the remaining 2 tablespoons olive oil in a large skillet over medium-low heat; cook and stir the garlic, basil, and Italian seasoning in the oil until the garlic is softened, about 10 minutes. Add the onion, green bell pepper, eggplant, and carrot to the garlic; increase heat to medium. Continue cooking and stirring until the vegetables are nearly tender, 10 to 15 minutes. Mix the tomatoes and white wine into the vegetable mixture; cook another 2 to 3 minutes. Transfer the vegetables to the bowl with the spaghetti squash; gently toss together."));
            createRecipeIngredients(rec2, flour, 1.5, "cups");
            createRecipeIngredients(rec2, sugar, 0.5, "cups");
            createRecipeIngredients(rec2, bakingPower, 1.5, "teaspoons");
            createRecipeIngredients(rec2, groundNutmeg, 0.25, "teaspoons");
            createRecipeIngredients(rec2, salt, 0.125, "teaspoons");
            createRecipeIngredients(rec2, egg, 1, "lightly beaten");
            createRecipeIngredients(rec2, milk, 0.5, "cups");
            createRecipeIngredients(rec2, butter, 0.33, "cups");
            createRecipeIngredients(rec2, groundCinnamon, 0.25, "cups");
            createRecipeIngredients(rec2, groundCinnamon, 0.5, "teaspoon");
            createRecipeIngredients(rec2, sugar, 0.33, "cups");
            createComment(rec2, 1, julia, "This dish was extremely disappointing. I was very optimistic looking at the ingredient list, but after putting it all together, there was a profound lack of flavor. We eat a good deal of vegetable dishes, but this is not one we will be repeating.");
            createComment(rec2, 4, alex, "Very good, I also think to use less butter.");
            session.flush();
            session.refresh(rec2);
            description = "A finger licking good strawberry cake!";
            Recipes rec3 = addRecipe(basicComplexity, description, "Strawberry short cake", alex, 60, 70, 12, dessert, "http://static.open.salon.com/files/coconut_strawberry_cake1226877577.jpg", Arrays.asList("Sprinkle strawberries with 2/3 cups sugar. Let stand 1 hour ", "Heat over to 425 degrees.", "Mix all ingredients and place in the over", "Slice it and eat up!"));
            createRecipeIngredients(rec3, strawberries, 1.5, "cups");
            createRecipeIngredients(rec3, sugar, 0.66, "cups");
            createRecipeIngredients(rec3, bisquick, 2, "boxese");
            createRecipeIngredients(rec3, sugar, 3, "tablespoons");
            createRecipeIngredients(rec3, milk, 0.5, "cups");
            createRecipeIngredients(rec3, whippedCream, 0.75, "cups");
            createComment(rec3, 5, julia, "Best cake I ever had!!! Kudos!!");
            session.flush();
            session.refresh(rec3);
            description = "My secret Barbecue Beef Short Ribs recipe revealed!";
            Recipes rec4 = addRecipe(highComplexity, description, "Short Ribs", meir, 70, 500, 6, mainCourse, "http://farm2.static.flickr.com/1310/1237575824_9068241a81.jpg", Arrays.asList("Put the potatoes and carrots in a large slow cooker", "Top with the onion wedges then the beef", "Combine the ketchup, , mustrard and salt", "Put ofver the beef", "Cook on LOW for 8 to 10 hours"));
            createRecipeIngredients(rec4, potato, 10, "pieces");
            createRecipeIngredients(rec4, carrot, 1, "cups");
            createRecipeIngredients(rec4, onion, 2, "units");
            createRecipeIngredients(rec4, ribs, 3.5, "pounds");
            createRecipeIngredients(rec4, ketchup, 1, "cups");
            createRecipeIngredients(rec4, mustard, 0.5, "teaspoon");
            createComment(rec4, 4, keren, "My whole family loved it!");
            createComment(rec4, 5, alex, "This was outstanding, will definitely use this recipe often. I used chicken legs as that was what I had and it worked great. thanks!!!!");
            session.flush();
            session.refresh(rec4);
            description = "a simple, yet yasty, Salad";
            Recipes rec5 = addRecipe(basicComplexity, description, "Garden Salad", alex, 10, 15, 6, firstCourse, "http://ww-recipes.net/wp-content/uploads/2008/09/weight-watchers-arabic-salad-recipe.jpg", Arrays.asList("Slice the tomatoes to cubes", "Slice the cucumbers to julian strips", "add a pinch salt and pepper", "top with olive oil"));
            createRecipeIngredients(rec5, tomato, 3, "pieces");
            createRecipeIngredients(rec5, cucumber, 3, "pieces");
            createRecipeIngredients(rec5, oliveoil, 2, "tablespoons");
            createRecipeIngredients(rec5, salt, 1, "pinch");
            createRecipeIngredients(rec5, pepper, 1, "pinch");
            createComment(rec5, 5, julia, "Delicious and so easy to make!");
            session.flush();
            session.refresh(rec5);
            description = "Creme Brule - the full recipe! no shortcuts ;) ";
            Recipes rec7 = addRecipe(highComplexity, description, "Creme brule", miki, 30, 200, 6, dessert, "http://www.cookingforengineers.com/hello/259/958/640/IMG_3335_sharp.jpg", Arrays.asList("bring the cooking cream to boiling temperature", "insert vanilla stick", "whisk eggs with sugar", "add cream to eggs CAREFULLY", "put in over for 30 minutes, then to the fridge for 4 hours"));
            createRecipeIngredients(rec7, cookingCream, 2, "cartons");
            createRecipeIngredients(rec7, egg, 3, "yolks");
            createRecipeIngredients(rec7, sugar, 2, "tablespoons");
            createRecipeIngredients(rec7, vanilla, 1, "stick");
            createComment(rec7, 4, julia, "Delicious and so easy to make!");
            session.flush();
            session.refresh(rec7);
            description = "some toasts with foigra to get the meal started";
            Recipes rec8 = addRecipe(basicComplexity, description, "foigra on toast", alex, 15, 15, 6, appetizers, "http://www.italiq-expos.com/news/images/Gastronomie/Foie-gras/assiette-foie-gras.jpg", Arrays.asList("cut bread into oval slices", "place in toaster until a golden brown color in formed", "speard some foigra pate on the toasts", "optional - add some baluga caviar on top"));
            createRecipeIngredients(rec8, bread, 6, "slices");
            createRecipeIngredients(rec8, foigra, 1, "can");
            createRecipeIngredients(rec8, caviar, 1, "minijar");
            createComment(rec8, 5, julia, "Delicious and so easy to make!");
            session.flush();
            session.refresh(rec8);
            description = "delicious diatetic chicken steak";
            Recipes rec9 = addRecipe(mediumComplexity, description, "chicken steak", meir, 15, 20, 2, mainCourse, "http://4.bp.blogspot.com/_jhlSdMizhlU/RdOVtm-0QAI/AAAAAAAAABg/81W-JvXOACI/s400/Chicken_Steak.jpg", Arrays.asList("Heat a frying pan with some (preferably olive) oil", "when the oil is hot, place the chicken and onions in the middle", "fry on both sides on medium flame until it starts to turn golden", "season with salt and pepper"));
            createRecipeIngredients(rec9, chickenBreast, 2, "pieces");
            createRecipeIngredients(rec9, onion, 1, "piece");
            createRecipeIngredients(rec9, salt, 1, "pinch");
            createRecipeIngredients(rec9, pepper, 1, "pinch");
            createComment(rec9, 5, julia, "Delicious and so easy to make!");
            session.flush();
            session.refresh(rec9);
            Favorites fav1 = new Favorites(keren, rec1, null);
            session.save(fav1);
            Favorites fav2 = new Favorites(keren, rec2, null);
            session.save(fav2);
            Favorites fav3 = new Favorites(keren, rec3, null);
            session.save(fav3);
            Favorites fav4 = new Favorites(keren, rec4, null);
            session.save(fav4);
            Favorites fav5 = new Favorites(alex, rec4, null);
            session.save(fav5);
            Favorites fav6 = new Favorites(alex, rec2, null);
            session.save(fav6);
            RecentlyViewed recViewed1 = new RecentlyViewed(keren, rec1, new Date());
            session.save(recViewed1);
            RecentlyViewed recViewed2 = new RecentlyViewed(keren, rec2, new Date());
            session.save(recViewed2);
            Friends friend1 = new Friends(keren, alex, true);
            session.save(friend1);
            Friends friend2 = new Friends(alex, keren, true);
            session.save(friend2);
            Friends friend3 = new Friends(keren, julia, false);
            session.save(friend3);
            Friends friend4 = new Friends(keren, meir, true);
            session.save(friend4);
            Friends friend5 = new Friends(meir, keren, true);
            session.save(friend5);
            Friends friend6 = new Friends(tami, keren, false);
            session.save(friend6);
            transaction.commit();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            session.flush();
            session.close();
        }
    }
} </s>
<s>class temp {    public SpreadSheetFrame(FileManager owner, File file, Delimiter delim) {
        super(owner, file.getPath());
        JPanel pane = new JPanel(new BorderLayout());
        super.contentPane.add(pane);
        this.tableModel = new BigTableModel(file, delim);
        this.table = new JTable(tableModel);
        this.table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.tableModel.setTable(this.table);
        pane.add(new JScrollPane(this.table));
        addInternalFrameListener(new InternalFrameAdapter() {

            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                tableModel.close();
            }
        });
        JMenu menu = new JMenu("Tools");
        getJMenuBar().add(menu);
        menu.add(new AbstractAction("NCBI") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Pattern delim = Pattern.compile("[ ]");
                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("/home/lindenb/jeter.txt.gz"))));
                    String line = null;
                    URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi");
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    wr.write("db=snp&retmode=xml");
                    while ((line = r.readLine()) != null) {
                        String tokens[] = delim.split(line, 2);
                        if (!tokens[0].startsWith("rs")) continue;
                        wr.write("&id=" + tokens[0].substring(2).trim());
                    }
                    wr.flush();
                    r.close();
                    InputStream in = conn.getInputStream();
                    IOUtils.copyTo(in, System.err);
                    in.close();
                    wr.close();
                } catch (IOException err) {
                    err.printStackTrace();
                }
            }
        });
    }
} </s>
<s>class temp {            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Pattern delim = Pattern.compile("[ ]");
                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("/home/lindenb/jeter.txt.gz"))));
                    String line = null;
                    URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi");
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    wr.write("db=snp&retmode=xml");
                    while ((line = r.readLine()) != null) {
                        String tokens[] = delim.split(line, 2);
                        if (!tokens[0].startsWith("rs")) continue;
                        wr.write("&id=" + tokens[0].substring(2).trim());
                    }
                    wr.flush();
                    r.close();
                    InputStream in = conn.getInputStream();
                    IOUtils.copyTo(in, System.err);
                    in.close();
                    wr.close();
                } catch (IOException err) {
                    err.printStackTrace();
                }
            }
} </s>
<s>class temp {    private void unzipResource(final String resourceName, final File targetDirectory) throws IOException {
        assertTrue(resourceName.startsWith("/"));
        final URL resource = this.getClass().getResource(resourceName);
        assertNotNull("Expected '" + resourceName + "' not found.", resource);
        assertTrue(targetDirectory.isAbsolute());
        FileUtils.deleteDirectory(targetDirectory);
        assertTrue(targetDirectory.mkdirs());
        ZipInputStream in = null;
        boolean suppressExceptionOnClose = true;
        try {
            in = new ZipInputStream(resource.openStream());
            ZipEntry e;
            while ((e = in.getNextEntry()) != null) {
                if (e.isDirectory()) {
                    continue;
                }
                final File dest = new File(targetDirectory, e.getName());
                assertTrue(dest.isAbsolute());
                OutputStream out = null;
                try {
                    out = FileUtils.openOutputStream(dest);
                    IOUtils.copy(in, out);
                    suppressExceptionOnClose = false;
                } finally {
                    try {
                        if (out != null) {
                            out.close();
                        }
                        suppressExceptionOnClose = true;
                    } catch (final IOException ex) {
                        if (!suppressExceptionOnClose) {
                            throw ex;
                        }
                    }
                }
                in.closeEntry();
            }
            suppressExceptionOnClose = false;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (final IOException e) {
                if (!suppressExceptionOnClose) {
                    throw e;
                }
            }
        }
    }
} </s>
<s>class temp {    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Store storeInstance = getStoreInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector files = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        fields.put(item.getFieldName(), item.getString());
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                files.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                if (files.size() > 0) {
                    storeInstance.send(files, 0, Charset.defaultCharset().displayName());
                }
            } else {
                errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"));
                request.setAttribute("exception", "The form is null");
                request.setAttribute("newLocation", null);
                doTrace(request, DLog.ERROR, getClass(), "The form is null");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = "NullPointerException";
            }
            errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage));
            request.setAttribute("exception", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), "OK");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
} </s>
<s>class temp {    public static void copy(File file1, File file2) throws IOException {
        FileReader in = new FileReader(file1);
        FileWriter out = new FileWriter(file2);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
} </s>
<s>class temp {    private byte[] download(String URL) {
        byte[] result = null;
        HttpEntity httpEntity = null;
        try {
            HttpGet httpGet = new HttpGet(URL);
            httpGet.addHeader("Accept-Language", "zh-cn,zh,en");
            httpGet.addHeader("Accept-Encoding", "gzip,deflate");
            HttpResponse response = httpClient.execute(httpGet);
            if (response.getStatusLine().getStatusCode() != 200) {
                return null;
            }
            Header header = response.getFirstHeader("content-type");
            if (header == null || header.getValue().indexOf("text/html") < 0) {
                return null;
            }
            int pos = header.getValue().indexOf("charset=");
            if (pos >= 0) {
                detectedEncoding = header.getValue().substring(pos + 8);
            }
            httpEntity = response.getEntity();
            InputStream in = null;
            in = httpEntity.getContent();
            header = response.getFirstHeader("Content-Encoding");
            if (null != header) {
                if (header.getValue().indexOf("gzip") >= 0) {
                    in = new GZIPInputStream(in);
                } else if (header.getValue().indexOf("deflate") >= 0) {
                    in = new InflaterInputStream(in, new Inflater(true));
                }
            }
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int len = 0;
            while ((len = in.read(buffer)) != -1) {
                out.write(buffer, 0, len);
            }
            result = out.toByteArray();
        } catch (IOException ex) {
            LOG.warn("downloading error,abandon");
            result = null;
        }
        return result;
    }
} </s>
<s>class temp {    public static void encrypt(File plain, File symKey, File ciphered, String algorithm) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {
        Key key = null;
        try {
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(symKey));
            key = (Key) in.readObject();
        } catch (IOException ioe) {
            KeyGenerator generator = KeyGenerator.getInstance(algorithm);
            key = generator.generateKey();
            ObjectOutputStream out = new ObjectOutputStream(new java.io.FileOutputStream(symKey));
            out.writeObject(key);
            out.close();
        }
        Cipher cipher = Cipher.getInstance(algorithm);
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key.getEncoded(), algorithm));
        FileInputStream in = new FileInputStream(plain);
        CipherOutputStream out = new CipherOutputStream(new FileOutputStream(ciphered), cipher);
        byte[] buffer = new byte[4096];
        for (int read = in.read(buffer); read > -1; read = in.read(buffer)) {
            out.write(buffer, 0, read);
        }
        out.close();
    }
} </s>
<s>class temp {    public static boolean copy(InputStream is, File file) {
        try {
            IOUtils.copy(is, new FileOutputStream(file));
            return true;
        } catch (Exception e) {
            logger.severe(e.getMessage());
            return false;
        }
    }
} </s>
<s>class temp {    private void parseXMLFile() {
        String u = WeatherApplication.SERVER + location + ".xml";
        InputStream in = null;
        String str = null;
        try {
            URL url = new URL(u);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            in = url.openStream();
            ParserToolXML prt = new ParserToolXML(in);
            if (prt.doc == null) {
                System.err.println(FILE_NOT_FOUND_MSG + u);
                return;
            }
            NodeList ndl = prt.doc.getElementsByTagName("weather");
            for (int i = 0; i < ndl.getLength(); i++) {
                Forecast f = new Forecast();
                str = prt.searchElementValue(ndl.item(i), "date");
                f.setDate(str);
                str = prt.searchElementValue(ndl.item(i), "daycode");
                f.setDaycode(Integer.parseInt(str.trim()));
                str = prt.searchElementValue(ndl.item(i), "nightcode");
                f.setNightcode(Integer.parseInt(str.trim()));
                str = prt.searchElementValue(ndl.item(i), "maxtemp");
                f.setDaytemp(Integer.parseInt(str.trim()));
                str = prt.searchElementValue(ndl.item(i), "mintemp");
                f.setNighttemp(Integer.parseInt(str.trim()));
                str = prt.searchElementValue(ndl.item(i), "winddirectionday");
                f.setDaywinddir(str);
                str = prt.searchElementValue(ndl.item(i), "windspeedday");
                f.setDaywindspeed(Integer.parseInt(str.trim()));
                str = prt.searchElementValue(ndl.item(i), "winddirectionnight");
                f.setNightwinddir(str);
                str = prt.searchElementValue(ndl.item(i), "windspeednight");
                f.setNightwindspeed(Integer.parseInt(str.trim()));
                forecastlist.addElement(f);
            }
        } catch (MalformedURLException e) {
            System.err.println(MALFORMED_URL_MSG + u);
            System.err.println(e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
        } catch (NumberFormatException e) {
            System.err.println(FILE_CORRUPT_MSG + u);
            System.err.println("-" + str + "-");
            System.err.println(e.getMessage());
            e.printStackTrace();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    System.err.println(COULD_NOT_CLOSE_FILE_MSG + u);
                    e.printStackTrace();
                }
            }
        }
    }
} </s>
<s>class temp {    public void checkin(Object _document) {
        this.document = (Document) _document;
        synchronized (url) {
            OutputStream outputStream = null;
            try {
                if ("file".equals(url.getProtocol())) {
                    outputStream = new FileOutputStream(url.getFile());
                } else {
                    URLConnection connection = url.openConnection();
                    connection.setDoOutput(true);
                    outputStream = connection.getOutputStream();
                }
                new XMLOutputter("  ", true).output(this.document, outputStream);
                outputStream.flush();
                outputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + "temp" + FS + username + "adminprojects.xml";
        String urlString = dms_url + "/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects";
        try {
            String urldata = urlString + "?username=" + URLEncoder.encode(username, "UTF-8") + "&key=" + URLEncoder.encode(key, "UTF-8") + "&filename=" + URLEncoder.encode(username, "UTF-8") + "adminprojects.xml";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName("proj");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "pid"));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "ppid"));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), "p"));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
} </s>
<s>class temp {	private File download(String filename, URL url) {
		int size = -1;
		int received = 0;
		try {
			fireDownloadStarted(filename);
			File file = createFile(filename);
			BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));
			System.out.println("下载资源：" + filename + ", url=" + url);
			// BufferedInputStream bis = new
			// BufferedInputStream(url.openStream());
			InputStream bis = url.openStream();
			byte[] buf = new byte[1024];
			int count = 0;
			long lastUpdate = 0;
			size = bis.available();
			while ((count = bis.read(buf)) != -1) {
				bos.write(buf, 0, count);
				received += count;
				long now = System.currentTimeMillis();
				if (now - lastUpdate > 500) {
					fireDownloadUpdate(filename, size, received);
					lastUpdate = now;
				}
			}
			bos.close();
			System.out.println("资源下载完毕：" + filename);
			fireDownloadCompleted(filename);
			return file;
		} catch (IOException e) {
			System.out.println("下载资源失败：" + filename + ", error=" + e.getMessage());
			fireDownloadInterrupted(filename);
			if (!(e instanceof FileNotFoundException)) {
				e.printStackTrace();
			}
		}
		return null;
	}
} </s>
<s>class temp {    public String login(HttpSession callingSession, String username, String password) {
        String token = null;
        String customer = null;
        int timeoutInSeconds = 0;
        HashSet<Integer> tileProviderIds = new HashSet<Integer>();
        boolean bLoginOk = false;
        String dbPassword = (String) em.createNamedQuery("getCustomerPasswordByUsername").setParameter("username", username).getSingleResult();
        if (dbPassword.equals(password)) {
            CustomerElement ce = (CustomerElement) em.createNamedQuery("getCustomerByUsername").setParameter("username", username).getSingleResult();
            customer = ce.getName();
            timeoutInSeconds = ce.getTimeout();
            String[] tileProviderIdsArray = ce.getTileProvideridsArray();
            for (String tileProviderId : tileProviderIdsArray) tileProviderIds.add(Integer.parseInt(tileProviderId));
            bLoginOk = true;
        }
        if (bLoginOk) {
            token = SessionHandler.getInstance().alreadyGotValidSession(customer);
            if (token == null) {
                Random random = new Random();
                token = callingSession.getId() + new Date().getTime() + random.nextLong();
                MessageDigest md5 = null;
                try {
                    md5 = MessageDigest.getInstance("MD5");
                } catch (NoSuchAlgorithmException e) {
                    logger.error("Unable to digest the token.", e);
                }
                md5.update(token.getBytes());
                byte[] array = md5.digest();
                StringBuffer sb = new StringBuffer();
                for (int j = 0; j < array.length; ++j) {
                    int b = array[j] & 0xFF;
                    if (b < 0x10) sb.append('0');
                    sb.append(Integer.toHexString(b));
                }
                token = sb.toString();
                SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds);
            }
        }
        return token;
    }
} </s>
<s>class temp {    public static DownloadedContent downloadContent(final InputStream is) throws IOException {
        if (is == null) {
            return new DownloadedContent.InMemory(new byte[] {});
        }
        final ByteArrayOutputStream bos = new ByteArrayOutputStream();
        final byte[] buffer = new byte[1024];
        int nbRead;
        try {
            while ((nbRead = is.read(buffer)) != -1) {
                bos.write(buffer, 0, nbRead);
                if (bos.size() > MAX_IN_MEMORY) {
                    final File file = File.createTempFile("htmlunit", ".tmp");
                    file.deleteOnExit();
                    final FileOutputStream fos = new FileOutputStream(file);
                    bos.writeTo(fos);
                    IOUtils.copyLarge(is, fos);
                    fos.close();
                    return new DownloadedContent.OnFile(file);
                }
            }
        } finally {
            IOUtils.closeQuietly(is);
        }
        return new DownloadedContent.InMemory(bos.toByteArray());
    }
} </s>
<s>class temp {    public void displayItems() throws IOException {
        URL url = new URL(SNIPPETS_FEED + "?bq=" + URLEncoder.encode(QUERY, "UTF-8") + "&key=" + DEVELOPER_KEY);
        HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
        InputStream inputStream = httpConnection.getInputStream();
        int ch;
        while ((ch = inputStream.read()) > 0) {
            System.out.print((char) ch);
        }
    }
} </s>
<s>class temp {    public static String md5(String s) {
        try {
            MessageDigest digester = MessageDigest.getInstance("MD5");
            digester.update(s.getBytes());
            return new BigInteger(1, digester.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
} </s>
<s>class temp {    public static String MD5(String str) {
        try {
            MessageDigest md5 = MessageDigest.getInstance("md5");
            md5.update(str.getBytes(), 0, str.length());
            String sig = new BigInteger(1, md5.digest()).toString();
            return sig;
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Can not use md5 algorithm");
        }
        return null;
    }
} </s>
<s>class temp {    private byte[] _generate() throws NoSuchAlgorithmException {
        if (host == null) {
            try {
                seed = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                seed = "localhost/127.0.0.1";
            } catch (SecurityException e) {
                seed = "localhost/127.0.0.1";
            }
            host = seed;
        } else {
            seed = host;
        }
        seed = seed + new Date().toString();
        seed = seed + Long.toString(rnd.nextLong());
        md = MessageDigest.getInstance(algorithm);
        md.update(seed.getBytes());
        return md.digest();
    }
} </s>
<s>class temp {    public static String sendRequest(String urlstring) {
        URL url;
        String line;
        Log.i("DVBMonitor", "Please wait while receiving data from dvb...");
        try {
            url = new URL(urlstring);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            if ((line = in.readLine()) != null) {
                return line;
            } else {
                return null;
            }
        } catch (Exception ex) {
            Log.e("DVBMonitor", ex.toString() + " while sending request to dvb");
            return null;
        }
    }
} </s>
<s>class temp {    private ByteArrayInputStream fetchUrl(String urlString, Exception[] outException) {
        URL url;
        try {
            url = new URL(urlString);
            InputStream is = null;
            int inc = 65536;
            int curr = 0;
            byte[] result = new byte[inc];
            try {
                is = url.openStream();
                int n;
                while ((n = is.read(result, curr, result.length - curr)) != -1) {
                    curr += n;
                    if (curr == result.length) {
                        byte[] temp = new byte[curr + inc];
                        System.arraycopy(result, 0, temp, 0, curr);
                        result = temp;
                    }
                }
                return new ByteArrayInputStream(result, 0, curr);
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                    }
                }
            }
        } catch (Exception e) {
            if (outException != null) {
                outException[0] = e;
            }
        }
        return null;
    }
} </s>
<s>class temp {    private List<String> readCredits() {
        URL url = SpriteStore.get().getResourceURL("games/midhedava/client/gui/credits.txt");
        List<String> res = new LinkedList<String>();
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = br.readLine();
            while (line != null) {
                res.add(line);
                line = br.readLine();
            }
            br.close();
        } catch (IOException e) {
            res.add(0, "credits.txt not found");
        }
        return res;
    }
} </s>
<s>class temp {    public ArrayList loadIndexes() {
        JSONObject job = new JSONObject();
        ArrayList al = new ArrayList();
        try {
            String req = job.put("OperationId", "1").toString();
            InputStream is = null;
            String result = "";
            JSONObject jArray = null;
            try {
                HttpClient httpclient = new DefaultHttpClient();
                HttpPost httppost = new HttpPost("http://192.168.1.4:8080/newgenlibctxt/CarbonServlet");
                List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                nameValuePairs.add(new BasicNameValuePair("OperationId", "1"));
                httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
                HttpResponse response = httpclient.execute(httppost);
                HttpEntity entity = response.getEntity();
                is = entity.getContent();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"), 8);
                StringBuilder sb = new StringBuilder();
                String line = null;
                while ((line = reader.readLine()) != null) {
                    sb.append(line + "\n");
                }
                is.close();
                result = sb.toString();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                JSONObject jobres = new JSONObject(result);
                JSONArray jarr = jobres.getJSONArray("MobileIndexes");
                for (int i = 0; i < jarr.length(); i++) {
                    String indexname = jarr.getString(i);
                    al.add(indexname);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        return al;
    }
} </s>
<s>class temp {    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileOutputStream fos = new FileOutputStream(out);
        FileChannel outChannel = fos.getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
            fos.flush();
            fos.close();
        }
    }
} </s>
<s>class temp {    @SuppressWarnings("unchecked")
    protected void initializeGraphicalViewer() {
        GraphicalViewer viewer = getGraphicalViewer();
        ScalableRootEditPart rootEditPart = new ScalableRootEditPart();
        viewer.setEditPartFactory(new DBEditPartFactory());
        viewer.setRootEditPart(rootEditPart);
        ZoomManager manager = rootEditPart.getZoomManager();
        double[] zoomLevels = new double[] { 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 10.0, 20.0 };
        manager.setZoomLevels(zoomLevels);
        List<String> zoomContributions = new ArrayList<String>();
        zoomContributions.add(ZoomManager.FIT_ALL);
        zoomContributions.add(ZoomManager.FIT_HEIGHT);
        zoomContributions.add(ZoomManager.FIT_WIDTH);
        manager.setZoomLevelContributions(zoomContributions);
        getActionRegistry().registerAction(new ZoomInAction(manager));
        getActionRegistry().registerAction(new ZoomOutAction(manager));
        PrintAction printAction = new PrintAction(this);
        printAction.setText(DBPlugin.getResourceString("action.print"));
        printAction.setImageDescriptor(DBPlugin.getImageDescriptor("icons/print.gif"));
        getActionRegistry().registerAction(printAction);
        IFile file = ((IFileEditorInput) getEditorInput()).getFile();
        RootModel root = null;
        try {
            root = VisualDBSerializer.deserialize(file.getContents());
        } catch (Exception ex) {
            DBPlugin.logException(ex);
            root = new RootModel();
            root.setDialectName(DialectProvider.getDialectNames()[0]);
        }
        viewer.setContents(root);
        final DeleteAction deleteAction = new DeleteAction((IWorkbenchPart) this);
        deleteAction.setSelectionProvider(getGraphicalViewer());
        getActionRegistry().registerAction(deleteAction);
        getGraphicalViewer().addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                deleteAction.update();
            }
        });
        MenuManager menuMgr = new MenuManager();
        menuMgr.add(new QuickOutlineAction());
        menuMgr.add(new Separator());
        menuMgr.add(getActionRegistry().getAction(ActionFactory.UNDO.getId()));
        menuMgr.add(getActionRegistry().getAction(ActionFactory.REDO.getId()));
        menuMgr.add(new Separator());
        PasteAction pasteAction = new PasteAction(this);
        getActionRegistry().registerAction(pasteAction);
        getSelectionActions().add(pasteAction.getId());
        menuMgr.add(pasteAction);
        CopyAction copyAction = new CopyAction(this, pasteAction);
        getActionRegistry().registerAction(copyAction);
        getSelectionActions().add(copyAction.getId());
        menuMgr.add(copyAction);
        menuMgr.add(getActionRegistry().getAction(ActionFactory.DELETE.getId()));
        menuMgr.add(new Separator());
        menuMgr.add(new AutoLayoutAction(viewer));
        menuMgr.add(new DommainEditAction(viewer));
        MenuManager convertMenu = new MenuManager(DBPlugin.getResourceString("action.convert"));
        menuMgr.add(convertMenu);
        UppercaseAction uppercaseAction = new UppercaseAction(this);
        convertMenu.add(uppercaseAction);
        getActionRegistry().registerAction(uppercaseAction);
        getSelectionActions().add(uppercaseAction.getId());
        LowercaseAction lowercaseAction = new LowercaseAction(this);
        convertMenu.add(lowercaseAction);
        getActionRegistry().registerAction(lowercaseAction);
        getSelectionActions().add(lowercaseAction.getId());
        Physical2LogicalAction physical2logicalAction = new Physical2LogicalAction(this);
        convertMenu.add(physical2logicalAction);
        getActionRegistry().registerAction(physical2logicalAction);
        getSelectionActions().add(physical2logicalAction.getId());
        Logical2PhysicalAction logical2physicalAction = new Logical2PhysicalAction(this);
        convertMenu.add(logical2physicalAction);
        getActionRegistry().registerAction(logical2physicalAction);
        getSelectionActions().add(logical2physicalAction.getId());
        menuMgr.add(new ToggleModelAction(viewer));
        menuMgr.add(new ChangeDBTypeAction(viewer));
        menuMgr.add(new Separator());
        menuMgr.add(getActionRegistry().getAction(GEFActionConstants.ZOOM_IN));
        menuMgr.add(getActionRegistry().getAction(GEFActionConstants.ZOOM_OUT));
        menuMgr.add(new Separator());
        menuMgr.add(new CopyAsImageAction(viewer));
        menuMgr.add(getActionRegistry().getAction(ActionFactory.PRINT.getId()));
        menuMgr.add(new Separator());
        MenuManager validation = new MenuManager(DBPlugin.getResourceString("action.validation"));
        validation.add(new ValidateAction(viewer));
        validation.add(new DeleteMarkerAction(viewer));
        menuMgr.add(validation);
        MenuManager importMenu = new MenuManager(DBPlugin.getResourceString("action.import"));
        importMenu.add(new ImportFromJDBCAction(viewer));
        importMenu.add(new ImportFromDiagramAction(viewer));
        menuMgr.add(importMenu);
        MenuManager generate = new MenuManager(DBPlugin.getResourceString("action.export"));
        IGenerator[] generaters = GeneratorProvider.getGeneraters();
        for (int i = 0; i < generaters.length; i++) {
            generate.add(new GenerateAction(generaters[i], viewer, this));
        }
        menuMgr.add(generate);
        menuMgr.add(new SelectedTablesDDLAction(viewer));
        viewer.setContextMenu(menuMgr);
        viewer.getControl().addMouseListener(new MouseAdapter() {

            public void mouseDoubleClick(MouseEvent e) {
                IStructuredSelection selection = (IStructuredSelection) getGraphicalViewer().getSelection();
                Object obj = selection.getFirstElement();
                if (obj != null && obj instanceof IDoubleClickSupport) {
                    ((IDoubleClickSupport) obj).doubleClicked();
                }
            }
        });
        outlinePage = new VisualDBOutlinePage(viewer, getEditDomain(), root, getSelectionSynchronizer());
        applyPreferences();
        viewer.getControl().addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.stateMask == SWT.CTRL && e.keyCode == 'o') {
                    new QuickOutlineAction().run();
                }
            }
        });
    }
} </s>
<s>class temp {    private static int computeNativesHash() {
        try {
            String classpath = System.getProperty("java.class.path");
            URL url = Thread.currentThread().getContextClassLoader().getResource("com/jme3/system/Natives.class");
            StringBuilder sb = new StringBuilder(url.toString());
            if (sb.indexOf("jar:") == 0) {
                sb.delete(0, 4);
                sb.delete(sb.indexOf("!"), sb.length());
                sb.delete(sb.lastIndexOf("/") + 1, sb.length());
            }
            try {
                url = new URL(sb.toString());
            } catch (MalformedURLException ex) {
                throw new UnsupportedOperationException(ex);
            }
            URLConnection conn = url.openConnection();
            int hash = classpath.hashCode() ^ (int) conn.getLastModified();
            return hash;
        } catch (IOException ex) {
            throw new UnsupportedOperationException(ex);
        }
    }
} </s>
<s>class temp {    public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException {
        String fullname = System.mapLibraryName(name);
        String path = "native/" + sysName + "/" + fullname;
        URL url = Thread.currentThread().getContextClassLoader().getResource(path);
        if (url == null) {
            if (!warning) {
                logger.log(Level.WARNING, "Cannot locate native library: {0}/{1}", new String[] { sysName, fullname });
            }
            return;
        }
        URLConnection conn = url.openConnection();
        InputStream in = conn.getInputStream();
        File targetFile = new File(getExtractionDir(), fullname);
        OutputStream out = null;
        try {
            if (targetFile.exists()) {
                long targetLastModified = targetFile.lastModified();
                long sourceLastModified = conn.getLastModified();
                if (targetLastModified + 1000 > sourceLastModified) {
                    logger.log(Level.FINE, "Not copying library {0}. Latest already extracted.", fullname);
                    return;
                }
            }
            out = new FileOutputStream(targetFile);
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            in.close();
            in = null;
            out.close();
            out = null;
            targetFile.setLastModified(conn.getLastModified());
        } catch (FileNotFoundException ex) {
            if (ex.getMessage().contains("used by another process")) {
                return;
            }
            throw ex;
        } finally {
            if (load) {
                System.load(targetFile.getAbsolutePath());
            }
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
        logger.log(Level.FINE, "Copied {0} to {1}", new Object[] { fullname, targetFile });
    }
} </s>
<s>class temp {    public List<String> getLinks(String url) {
        List<String> links = new ArrayList<String>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String s;
            StringBuilder builder = new StringBuilder();
            while ((s = bufferedReader.readLine()) != null) {
                builder.append(s);
            }
            Matcher tagmatch = htmltag.matcher(builder.toString());
            while (tagmatch.find()) {
                Matcher matcher = link.matcher(tagmatch.group());
                matcher.find();
                String link = matcher.group().replaceFirst("href=\"", "").replaceFirst("\">", "");
                if (valid(link)) {
                    links.add(makeAbsolute(url, link));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return links;
    }
} </s>
<s>class temp {    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String contentType = req.getParameter("type");
        String arg = req.getParameter("file");
        if (arg == null) {
            resp.sendError(404, "Missing File Arg");
            return;
        }
        File f = new File(arg);
        if (!f.exists()) {
            resp.sendError(404, "Missing File: " + f);
            return;
        }
        if (contentType != null) {
            resp.setContentType(contentType);
        }
        log.debug("Requested File: " + f + " as type: " + contentType);
        resp.setContentLength((int) f.length());
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(f);
            OutputStream os = resp.getOutputStream();
            IOUtils.copyLarge(fis, os);
            os.flush();
            fis.close();
        } catch (Throwable e) {
            log.error("Failed to send file: " + f);
            resp.sendError(500, "Failed to get file " + f);
        } finally {
            IOUtils.closeQuietly(fis);
        }
    }
} </s>
<s>class temp {    private void readFromFile1() throws DException {
        URL url1 = null;
        if (url == null) {
            url = getClass().getResource("/com/daffodilwoods/daffodildb/utils/parser/parser.schema");
            try {
                url = new URL(url.getProtocol() + ":" + url.getPath().substring(0, url.getPath().indexOf("/parser.schema")));
            } catch (MalformedURLException ex2) {
                ex2.printStackTrace();
                throw new DException("DSE0", new Object[] { ex2 });
            }
            try {
                url1 = new URL(url.getProtocol() + ":" + url.getPath() + "/parser.schema");
            } catch (MalformedURLException ex) {
                throw new DException("DSE0", new Object[] { ex });
            }
            if (url1 == null) {
                throw new DException("DSE0", new Object[] { "Parser.schema file is missing in classpath." });
            }
        } else {
            try {
                url1 = new URL(url.getProtocol() + ":" + url.getPath() + "/parser.schema");
            } catch (MalformedURLException ex) {
                throw new DException("DSE0", new Object[] { ex });
            }
        }
        ArrayList arr1 = null;
        StringBuffer rule = null;
        try {
            LineNumberReader raf = new LineNumberReader(new BufferedReader(new InputStreamReader(url1.openStream())));
            arr1 = new ArrayList();
            rule = new StringBuffer("");
            while (true) {
                String str1 = raf.readLine();
                if (str1 == null) {
                    break;
                }
                String str = str1.trim();
                if (str.length() == 0) {
                    if (rule.length() > 0) {
                        arr1.add(rule.toString());
                    }
                    rule = new StringBuffer("");
                } else {
                    rule.append(" ").append(str);
                }
            }
            raf.close();
        } catch (IOException ex1) {
            ex1.printStackTrace();
            throw new DException("DSE0", new Object[] { ex1 });
        }
        if (rule.length() > 0) arr1.add(rule.toString());
        for (int i = 0; i < arr1.size(); i++) {
            String str = (String) arr1.get(i);
            int index = str.indexOf("::=");
            if (index == -1) {
                P.pln("Error " + str);
                throw new DException("DSE0", new Object[] { "Rule is missing from parser.schema" });
            }
            String key = str.substring(0, index).trim();
            String value = str.substring(index + 3).trim();
            Object o = fileEntries.put(key, value);
            if (o != null) {
                new Exception("Duplicate Defination for Rule [" + key + "] Value [" + value + "] Is Replaced By  [" + o + "]").printStackTrace();
            }
        }
    }
} </s>
<s>class temp {    private CExtractHelper getData(String p_url) {
        CExtractHelper l_extractHelper = new CExtractHelper();
        URL l_url;
        HttpURLConnection l_connection;
        try {
            System.out.println("Getting [" + p_url + "]");
            l_url = new URL(p_url);
            try {
                URLConnection l_uconn = l_url.openConnection();
                l_connection = (HttpURLConnection) l_uconn;
                l_connection.setConnectTimeout(2000);
                l_connection.setReadTimeout(2000);
                l_connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1");
                l_connection.connect();
                int l_responseCode = l_connection.getResponseCode();
                String response = l_connection.getResponseMessage();
                System.out.println("HTTP/1.x " + l_responseCode + " " + response);
                for (int j = 1; ; j++) {
                    String l_header = l_connection.getHeaderField(j);
                    String l_key = l_connection.getHeaderFieldKey(j);
                    if (l_header == null || l_key == null) {
                        break;
                    }
                }
                InputStream l_inputStream = new BufferedInputStream(l_connection.getInputStream());
                CRemoteXML l_parser = new CRemoteXML();
                try {
                    Document l_document = l_parser.parse(l_inputStream);
                    PrintWriter l_writerOut = new PrintWriter(new OutputStreamWriter(System.out, charsetName), true);
                    OutputFormat l_format = OutputFormat.createPrettyPrint();
                    XMLWriter l_xmlWriter = new XMLWriter(l_writerOut, l_format);
                    l_xmlWriter.write(l_document);
                    l_xmlWriter.flush();
                    l_connection.disconnect();
                    l_extractHelper.m_document = l_document;
                    return l_extractHelper;
                } catch (DocumentException e) {
                    e.printStackTrace();
                    l_connection.disconnect();
                    System.out.println("XML parsing issue");
                    l_extractHelper.m_generalFailure = true;
                }
            } catch (SocketTimeoutException e) {
                l_extractHelper.m_timeoutFailure = true;
                System.out.println("Timed out");
            } catch (IOException e) {
                e.printStackTrace();
                l_extractHelper.m_generalFailure = true;
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
            l_extractHelper.m_generalFailure = true;
        }
        return l_extractHelper;
    }
} </s>
<s>class temp {    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mButton1 = (Button) findViewById(R.id.myButton1);
        mButton2 = (Button) findViewById(R.id.myButton2);
        mTextView1 = (TextView) findViewById(R.id.myTextView1);
        mButton1.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = "http://www.sina.com";
                HttpPost httpRequest = new HttpPost(uriAPI);
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair("str", "post string"));
                try {
                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText("Error Response: " + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
        mButton2.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = "http://www.sina.com";
                HttpGet httpRequest = new HttpGet(uriAPI);
                try {
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        strResult = eregi_replace("(\r\n|\r|\n|\n\r)", "", strResult);
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText("Error Response: " + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
} </s>
<s>class temp {            public void onClick(View v) {
                String uriAPI = "http://www.sina.com";
                HttpPost httpRequest = new HttpPost(uriAPI);
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair("str", "post string"));
                try {
                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText("Error Response: " + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
} </s>
<s>class temp {            public void onClick(View v) {
                String uriAPI = "http://www.sina.com";
                HttpGet httpRequest = new HttpGet(uriAPI);
                try {
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        strResult = eregi_replace("(\r\n|\r|\n|\n\r)", "", strResult);
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText("Error Response: " + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
} </s>
<s>class temp {    public static void main(String[] args) {
        if (args.length != 2) {
            printUsage();
        }
        String url = args[0];
        String path = args[1];
        BufferedReader pbsFileReader = null;
        try {
            pbsFileReader = new BufferedReader(new FileReader(path));
        } catch (FileNotFoundException ex) {
            System.err.println("Pbs file " + path + " not found");
            System.exit(1);
        }
        String line = "";
        HttpURLConnection conn = null;
        BufferedWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) new URL(url).openConnection();
            conn.setDoOutput(true);
            out = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
            while (true) {
                line = pbsFileReader.readLine();
                if (line == null) {
                    break;
                }
                out.write(line);
                out.newLine();
                System.err.println(line);
            }
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            line = "";
            while (true) {
                line = in.readLine();
                if (line == null) {
                    break;
                }
                System.out.println(line);
            }
            out.close();
            in.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
} </s>
<s>class temp {    public Manifest(URL url) throws IOException {
        if (!url.getProtocol().equals("jar")) {
            url = new URL("jar:" + url.toExternalForm() + "!/");
        }
        JarURLConnection uc = (JarURLConnection) url.openConnection();
        setManifest(uc.getManifest());
    }
} </s>
<s>class temp {    public String digest(String message) throws NoSuchAlgorithmException, EncoderException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        messageDigest.update(message.getBytes());
        byte[] raw = messageDigest.digest();
        byte[] chars = new Base64().encode(raw);
        return new String(chars);
    }
} </s>
<s>class temp {    @SuppressWarnings("rawtypes")
    public static String[] loadAllPropertiesFromClassLoader(Properties properties, String... resourceNames) throws IOException {
        List successLoadProperties = new ArrayList();
        for (String resourceName : resourceNames) {
            URL url = GeneratorProperties.class.getResource(resourceName);
            if (url != null) {
                successLoadProperties.add(url.getFile());
                InputStream input = null;
                try {
                    URLConnection con = url.openConnection();
                    con.setUseCaches(false);
                    input = con.getInputStream();
                    if (resourceName.endsWith(".xml")) {
                        properties.loadFromXML(input);
                    } else {
                        properties.load(input);
                    }
                } finally {
                    if (input != null) {
                        input.close();
                    }
                }
            }
        }
        return (String[]) successLoadProperties.toArray(new String[0]);
    }
} </s>
<s>class temp {    @TestTargetNew(level = TestLevel.COMPLETE, notes = "", method = "getJarFile", args = {  })
    public void test_getJarFile() throws MalformedURLException, IOException {
        URL url = null;
        url = createContent("lf.jar", "missing");
        JarURLConnection connection = null;
        connection = (JarURLConnection) url.openConnection();
        try {
            connection.connect();
            fail("Did not throw exception on connect");
        } catch (IOException e) {
        }
        try {
            connection.getJarFile();
            fail("Did not throw exception after connect");
        } catch (IOException e) {
        }
        URL invURL = createContent("InvalidJar.jar", "Test.class");
        JarURLConnection juConn = (JarURLConnection) invURL.openConnection();
        try {
            juConn.getJarFile();
            fail("IOException was not thrown.");
        } catch (java.io.IOException io) {
        }
        File resources = Support_Resources.createTempFolder();
        Support_Resources.copyFile(resources, null, "hyts_att.jar");
        File file = new File(resources.toString() + "/hyts_att.jar");
        URL fUrl1 = new URL("jar:file:" + file.getPath() + "!/");
        JarURLConnection con1 = (JarURLConnection) fUrl1.openConnection();
        ZipFile jf1 = con1.getJarFile();
        JarURLConnection con2 = (JarURLConnection) fUrl1.openConnection();
        ZipFile jf2 = con2.getJarFile();
        assertTrue("file: JarFiles not the same", jf1 == jf2);
        jf1.close();
        assertTrue("File should exist", file.exists());
        fUrl1 = createContent("lf.jar", "");
        con1 = (JarURLConnection) fUrl1.openConnection();
        jf1 = con1.getJarFile();
        con2 = (JarURLConnection) fUrl1.openConnection();
        jf2 = con2.getJarFile();
        assertTrue("http: JarFiles not the same", jf1 == jf2);
        jf1.close();
    }
} </s>
<s>class temp {    @TestTargetNew(level = TestLevel.PARTIAL, notes = "Exceptions checking missed.", method = "setUseCaches", args = { boolean.class })
    public void test_setUseCaches() throws Exception {
        File resources = Support_Resources.createTempFolder();
        Support_Resources.copyFile(resources, null, "hyts_att.jar");
        File file = new File(resources.toString() + "/hyts_att.jar");
        URL url = new URL("jar:file:" + file.getPath() + "!/HasAttributes.txt");
        JarURLConnection connection = (JarURLConnection) url.openConnection();
        connection.setUseCaches(false);
        InputStream in = connection.getInputStream();
        in = connection.getInputStream();
        JarFile jarFile1 = connection.getJarFile();
        JarEntry jarEntry1 = connection.getJarEntry();
        in.read();
        in.close();
        JarFile jarFile2 = connection.getJarFile();
        JarEntry jarEntry2 = connection.getJarEntry();
        assertSame(jarFile1, jarFile2);
        assertSame(jarEntry1, jarEntry2);
        try {
            connection.getInputStream();
            fail("should throw IllegalStateException");
        } catch (IllegalStateException e) {
        }
    }
} </s>
<s>class temp {    @TestTargetNew(level = TestLevel.COMPLETE, notes = "", method = "getJarFileURL", args = {  })
    public void test_getJarFileURL() throws Exception {
        URL u = createContent("lf.jar", "plus.bmp");
        URL fileURL = new URL(u.getPath().substring(0, u.getPath().indexOf("!")));
        juc = (JarURLConnection) u.openConnection();
        assertTrue("Returned incorrect file URL", juc.getJarFileURL().equals(fileURL));
        URL url = new URL("jar:file:///bar.jar!/foo.jar!/Bugs/HelloWorld.class");
        assertEquals("file:/bar.jar", ((JarURLConnection) url.openConnection()).getJarFileURL().toString());
    }
} </s>
<s>class temp {    @TestTargetNew(level = TestLevel.COMPLETE, notes = "Test fails: IOException expected but IllegalStateException is thrown: ticket 128", method = "getInputStream", args = {  })
    public void test_getInputStream_DeleteJarFileUsingURLConnection() throws Exception {
        String jarFileName = "";
        String entry = "text.txt";
        String cts = System.getProperty("java.io.tmpdir");
        File tmpDir = new File(cts);
        File jarFile = tmpDir.createTempFile("file", ".jar", tmpDir);
        jarFileName = jarFile.getPath();
        FileOutputStream jarFileOutputStream = new FileOutputStream(jarFileName);
        JarOutputStream out = new JarOutputStream(new BufferedOutputStream(jarFileOutputStream));
        JarEntry jarEntry = new JarEntry(entry);
        out.putNextEntry(jarEntry);
        out.write(new byte[] { 'a', 'b', 'c' });
        out.close();
        URL url = new URL("jar:file:" + jarFileName + "!/" + entry);
        URLConnection conn = url.openConnection();
        conn.setUseCaches(false);
        InputStream is = conn.getInputStream();
        is.close();
        assertTrue(jarFile.delete());
    }
} </s>
<s>class temp {    public TreeMap getStrainMap() {
        TreeMap strainMap = new TreeMap();
        String server = "";
        try {
            Datasource[] ds = DatasourceManager.getDatasouce(alias, version, DatasourceManager.ALL_CONTAINS_GROUP);
            for (int i = 0; i < ds.length; i++) {
                if (ds[i].getDescription().startsWith(MOUSE_DBSNP)) {
                    if (ds[i].getServer().length() == 0) {
                        Connection con = ds[i].getConnection();
                        strainMap = Action.lineMode.regularSQL.GenotypeDataSearchAction.getStrainMap(con);
                        break;
                    } else {
                        server = ds[i].getServer();
                        HashMap serverUrlMap = InitXml.getInstance().getServerMap();
                        String serverUrl = (String) serverUrlMap.get(server);
                        URL url = new URL(serverUrl + servletName);
                        URLConnection uc = url.openConnection();
                        uc.setDoOutput(true);
                        OutputStream os = uc.getOutputStream();
                        StringBuffer buf = new StringBuffer();
                        buf.append("viewType=getstrains");
                        buf.append("&hHead=" + hHead);
                        buf.append("&hCheck=" + version);
                        PrintStream ps = new PrintStream(os);
                        ps.print(buf.toString());
                        ps.close();
                        ObjectInputStream ois = new ObjectInputStream(uc.getInputStream());
                        strainMap = (TreeMap) ois.readObject();
                        ois.close();
                    }
                }
            }
        } catch (Exception e) {
            log.error("strain map", e);
        }
        return strainMap;
    }
} </s>
